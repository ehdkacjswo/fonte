is_addition,old_file_path,new_file_path,line_num,content
False,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,172,nivariateRealSolver solver2 = new LaguerreSolver(f2);
True,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,src/test/org/apache/commons/math/analysis/LaguerreSolverTest.java,172,new LaguerreSolver(f2);
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,129,olynomialFunctionLagrangeForm p;
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,135," = new PolynomialFunctionLagrangeForm(x, y);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,134,"new PolynomialFunctionLagrangeForm(x, y);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,144," = new PolynomialFunctionLagrangeForm(x, y);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionLagrangeFormTest.java,143,"new PolynomialFunctionLagrangeForm(x, y);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,128,olynomialFunctionNewtonForm p;
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,134," = new PolynomialFunctionNewtonForm(a, c);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,133,"new PolynomialFunctionNewtonForm(a, c);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,143," = new PolynomialFunctionNewtonForm(a, c);"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionNewtonFormTest.java,142,"new PolynomialFunctionNewtonForm(a, c);"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,135, tests the firstDerivative function by comparision
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,135,* tests the firstDerivative function by comparison
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,141,ublic void testfirstDerivativeComparision() throws MathException {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,141,public void testfirstDerivativeComparison() throws MathException {
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,158,"assertEquals( g.derivative().value(Math.PI), h.value(Math.PI), tolerance );"
True,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,159,"assertEquals( g.derivative().value(Math.E),  h.value(Math.E),  tolerance );"
False,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialFunctionTest.java,160,/ compare f'' = h
False,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,66,pline =
False,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,67,"ew PolynomialSplineFunction(new double[] {0}, polynomials);"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,66,"new PolynomialSplineFunction(new double[] {0}, polynomials);"
False,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,74,pline =
False,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,75,"ew PolynomialSplineFunction(new double[] {0,1,2,3,4}, polynomials);"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,73,"new PolynomialSplineFunction(new double[] {0,1,2,3,4}, polynomials);"
False,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,82,pline =
False,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,83,"ew PolynomialSplineFunction(new double[] {0,1, 3, 2}, polynomials);"
True,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,src/test/org/apache/commons/math/analysis/PolynomialSplineFunctionTest.java,80,"new PolynomialSplineFunction(new double[] {0,1, 3, 2}, polynomials);"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,55,nivariateRealSolver solver = factory.newBisectionSolver(null);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,55,factory.newBisectionSolver(null);
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,70,nivariateRealSolver solver = factory.newNewtonSolver(null);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,70,factory.newNewtonSolver(null);
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,85,nivariateRealSolver solver = factory.newBrentSolver(null);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,85,factory.newBrentSolver(null);
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,100,nivariateRealSolver solver = factory.newSecantSolver(null);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImplTest.java,100,factory.newSecantSolver(null);
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,43,"ouble x = UnivariateRealSolverUtils.solve(sin,0.0, 4.0, 4.0);"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,43,"UnivariateRealSolverUtils.solve(sin,0.0, 4.0, 4.0);"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,48,"ouble x = UnivariateRealSolverUtils.solve(sin, 0.0, 4.0, 0.0);"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,48,"UnivariateRealSolverUtils.solve(sin, 0.0, 4.0, 0.0);"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,55,"ouble x = UnivariateRealSolverUtils.solve(sin, 1.0,"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,56,.0);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,55,"double x = UnivariateRealSolverUtils.solve(sin, 1.0, 4.0);"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,79,"ouble x = UnivariateRealSolverUtils.solve(sin, 1.0,"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,80,.5);
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,78,"UnivariateRealSolverUtils.solve(sin, 1.0, 1.5);"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,96,"ouble[] result = UnivariateRealSolverUtils.bracket(sin,"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,97,".5, 0, 2.0);"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,94,"UnivariateRealSolverUtils.bracket(sin, 1.5, 0, 2.0);"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,106,"ouble[] result = UnivariateRealSolverUtils.bracket(null, 1.5, 0, 2.0);"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,103,"UnivariateRealSolverUtils.bracket(null, 1.5, 0, 2.0);"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,112,"ouble[] result = UnivariateRealSolverUtils.bracket(sin, 2.5, 0, 2.0);"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,109,"UnivariateRealSolverUtils.bracket(sin, 2.5, 0, 2.0);"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,118,"ouble[] result = UnivariateRealSolverUtils.bracket(sin, 1.5, 2.0, 1.0);"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,115,"UnivariateRealSolverUtils.bracket(sin, 1.5, 2.0, 1.0);"
False,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,124,"ouble[] result = UnivariateRealSolverUtils.bracket(sin, 1.5, 0, 2.0, 0);"
True,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,src/test/org/apache/commons/math/analysis/UnivariateRealSolverUtilsTest.java,121,"UnivariateRealSolverUtils.bracket(sin, 1.5, 0, 2.0, 0);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,42,"rivate Complex oneNaN = new Complex(1, nan);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,51,"rivate Complex zeroNegInf = new Complex(0, negInf);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,54,rivate ComplexFormat fmt = new ComplexFormat();
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,81,omplex z = ComplexUtils.acos(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,77,ComplexUtils.acos(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,111,omplex z = ComplexUtils.asin(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,107,ComplexUtils.asin(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,142,omplex z = ComplexUtils.atan(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,138,ComplexUtils.atan(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,172,omplex z = ComplexUtils.cos(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,168,ComplexUtils.cos(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,202,omplex z = ComplexUtils.cosh(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,198,ComplexUtils.cosh(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,237,omplex z = ComplexUtils.exp(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,233,ComplexUtils.exp(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,278,omplex z = ComplexUtils.log(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,274,ComplexUtils.log(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,321,"omplex z = ComplexUtils.polar2Complex(-1, 0);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,317,"ComplexUtils.polar2Complex(-1, 0);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,408,"omplex z = ComplexUtils.pow(null, Complex.ONE);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,404,"ComplexUtils.pow(null, Complex.ONE);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,414,"omplex z = ComplexUtils.pow(Complex.ONE, null);"
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,410,"ComplexUtils.pow(Complex.ONE, null);"
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,444,omplex z = ComplexUtils.sin(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,440,ComplexUtils.sin(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,474,omplex z = ComplexUtils.sinh(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,470,ComplexUtils.sinh(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,542,omplex z = ComplexUtils.sqrt(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,538,ComplexUtils.sqrt(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,561,omplex z = ComplexUtils.sqrt1z(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,557,ComplexUtils.sqrt1z(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,596,omplex z = ComplexUtils.tan(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,592,ComplexUtils.tan(null);
False,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,630,omplex z = ComplexUtils.tanh(null);
True,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,626,ComplexUtils.tanh(null);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,236,raction c = properFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,236,properFormat.parse(source);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,243,raction c = properFormat.parse(source);
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,243,properFormat.parse(source);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,283,raction f = f1.divide(f2);
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,283,f1.divide(f2);
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,420,nt zeroHash = zero.hashCode();
False,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,436,"raction f = Fraction.getReducedFraction(1, 0);"
True,src/test/org/apache/commons/math/fraction/FractionTest.java,src/test/org/apache/commons/math/fraction/FractionTest.java,435,"Fraction.getReducedFraction(1, 0);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,173,"igMatrix m4 = new BigMatrixImpl(new String[][] {{""0"", ""hello"", ""1""}});"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,173,"new BigMatrixImpl(new String[][] {{""0"", ""hello"", ""1""}});"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,179,igMatrix m4 = new BigMatrixImpl(new String[][] {});
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,179,new BigMatrixImpl(new String[][] {});
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,185,"igMatrix m4 = new BigMatrixImpl(new String[][] {{},{}});"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,185,"new BigMatrixImpl(new String[][] {{},{}});"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,191,"igMatrix m4 = new BigMatrixImpl(new String[][] {{""a"", ""b""},{""c""}});"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,191,"new BigMatrixImpl(new String[][] {{""a"", ""b""},{""c""}});"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,198,"igMatrix m4 = new BigMatrixImpl(0, 1);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,198,"new BigMatrixImpl(0, 1);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,204,"igMatrix m4 = new BigMatrixImpl(1, 0);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,204,"new BigMatrixImpl(1, 0);"
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,231,igMatrixImpl mPlusMInv = (BigMatrixImpl)m.add(m2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,231,m.add(m2);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,253,igMatrix a = m.subtract(new BigMatrixImpl(testData2));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,253,m.subtract(new BigMatrixImpl(testData2));
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,277,igMatrix a = m.multiply(new BigMatrixImpl(bigSingular));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,277,m.multiply(new BigMatrixImpl(bigSingular));
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,345,ouble[] x = asDouble(m.solve(asBigDecimal(testVector2)));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,345,asDouble(m.solve(asBigDecimal(testVector2)));
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,352,igMatrix a = bs.solve(bs);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,352,bs.solve(bs);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,358,igMatrix a = m.solve(bs);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,358,m.solve(bs);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,364,igMatrix a = (new BigMatrixImpl(testData2)).solve(bs);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,364,new BigMatrixImpl(testData2).solve(bs);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,391,ouble a = new BigMatrixImpl(testData2).getDeterminant().doubleValue();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,391,new BigMatrixImpl(testData2).getDeterminant().doubleValue();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,404,ouble x = m.getTrace().doubleValue();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,404,m.getTrace().doubleValue();
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,425, = asDouble(m.operate(asBigDecimal(testVector)));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,425,asDouble(m.operate(asBigDecimal(testVector)));
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,464,igMatrixImpl m2 = new BigMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,464,new BigMatrixImpl(testData2);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,474,igMatrix a = m.preMultiply(new BigMatrixImpl(bigSingular));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,474,m.preMultiply(new BigMatrixImpl(bigSingular));
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,486,ouble[] x = m.getRowAsDoubleArray(10);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,486,m.getRowAsDoubleArray(10);
False,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,492,ouble[] x = m.getColumnAsDoubleArray(-1);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,492,m.getColumnAsDoubleArray(-1);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,144,ealMatrixImpl mPlusMInv = (RealMatrixImpl)m.add(m2);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,144,m.add(m2);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,166,ealMatrix a = m.subtract(new RealMatrixImpl(testData2));
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,166,m.subtract(new RealMatrixImpl(testData2));
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,190,ealMatrix a = m.multiply(new RealMatrixImpl(bigSingular));
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,190,m.multiply(new RealMatrixImpl(bigSingular));
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,256,ouble[] x = m.solve(testVector2);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,256,m.solve(testVector2);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,263,ealMatrix a = bs.solve(bs);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,263,bs.solve(bs);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,269,ealMatrix a = m.solve(bs);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,269,m.solve(bs);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,275,ealMatrix a = (new RealMatrixImpl(testData2)).solve(bs);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,275,new RealMatrixImpl(testData2).solve(bs);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,302,ouble a = new RealMatrixImpl(testData2).getDeterminant();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,302,new RealMatrixImpl(testData2).getDeterminant();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,315,ouble x = m.getTrace();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,315,m.getTrace();
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,336, = m.operate(testVector);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,336,m.operate(testVector);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,375,ealMatrixImpl m2 = new RealMatrixImpl(testData2);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,385,ealMatrix a = m.preMultiply(new RealMatrixImpl(bigSingular));
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,384,m.preMultiply(new RealMatrixImpl(bigSingular));
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,397,ouble[] x = m.getRow(10);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,396,m.getRow(10);
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,403,ouble[] x = m.getColumn(-1);
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,402,m.getColumn(-1);
False,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,47,nt x = testGenerator.nextInt(-1);
True,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,47,testGenerator.nextInt(-1);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,46,rivate int tolerance = 50;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,76,"nt x = randomData.nextInt(4,3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,75,"randomData.nextInt(4,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,103,"ong x = randomData.nextLong(4,3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,102,"randomData.nextLong(4,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,130,"ong x = randomData.nextSecureLong(4,3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,129,"randomData.nextSecureLong(4,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,157,"ong x = randomData.nextSecureInt(4,3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,156,"randomData.nextSecureInt(4,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,189,ong x = randomData.nextPoisson(0);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,188,randomData.nextPoisson(0);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,195,ong v = 0;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,210,ong x = randomData.nextPoisson(-1);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,208,randomData.nextPoisson(-1);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,216,ong x = randomData.nextPoisson(0);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,214,randomData.nextPoisson(0);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,227,tring x = randomData.nextHexString(-1);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,225,randomData.nextHexString(-1);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,233,tring x = randomData.nextHexString(0);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,231,randomData.nextHexString(0);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,281,tring x = randomData.nextSecureHexString(-1);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,279,randomData.nextSecureHexString(-1);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,287,tring x = randomData.nextSecureHexString(0);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,285,randomData.nextSecureHexString(0);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,335,"ouble x = randomData.nextUniform(4,3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,333,"randomData.nextUniform(4,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,341,"ouble x = randomData.nextUniform(3,3);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,339,"randomData.nextUniform(3,3);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,381,"ouble x = randomData.nextGaussian(0,0);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,379,"randomData.nextGaussian(0,0);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,402,ouble x = randomData.nextExponential(-1);
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,400,randomData.nextExponential(-1);
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,472,"ouble ret = rd.nextLong(1,2);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,470,"rd.nextLong(1,2);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,475,"et = rd2.nextSecureLong(1,2);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,473,"rd2.nextSecureLong(1,2);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,478,"et = rd.nextLong(1,2);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,476,"rd.nextLong(1,2);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,481,"et = rd2.nextSecureLong(1,2);"
True,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,479,"rd2.nextSecureLong(1,2);"
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,543,nt result = -1;
False,src/test/org/apache/commons/math/random/RandomDataTest.java,src/test/org/apache/commons/math/random/RandomDataTest.java,599,nt result = -1;
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,43,"rivate String oneS = ""1"";"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,44,"rivate String twoS = ""2"";"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,39,rivate double std = Math.sqrt(var);
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,40,rivate double n = 4;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,43,rivate double skewness = 0;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,44,rivate double kurtosis = 0.5;
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,426,ouble x = StatUtils.geometricMean(test);
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,422,StatUtils.geometricMean(test);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,44,rivate double skewness = 0;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,45,rivate double kurtosis = 0.5;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,199,ouble x = u.getPercentile(0);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,197,u.getPercentile(0);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,205,ouble x = u.getPercentile(120);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,203,u.getPercentile(120);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,45,rivate double skewness = 0;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,46,rivate double kurtosis = 0.5;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,254,ouble x = u.getPercentile(0);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,252,u.getPercentile(0);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,260,ouble x = u.getPercentile(120);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,258,u.getPercentile(120);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,334,escriptiveStatistics u = DescriptiveStatistics.newInstance((Class)null);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,332,DescriptiveStatistics.newInstance((Class)null);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,350, catch (Exception ex) {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,348,} catch (InstantiationException ex) {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,349,fail();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,350,} catch (IllegalAccessException ex) {
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,48,rivate double skewness = 0;
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,49,rivate double kurtosis = 0.5;
False,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,47,rivate double skewness = 0;
False,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,48,rivate double kurtosis = 0.5;
False,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java,105,ist list = new ArrayList();
False,src/test/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,57,nt emptyHash = u.hashCode();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,120,ouble nan = Double.NaN;
False,src/test/org/apache/commons/math/stat/inference/TTestTest.java,src/test/org/apache/commons/math/stat/inference/TTestTest.java,35,rivate double[] nullObserved = null;
False,src/test/org/apache/commons/math/stat/inference/TTestTest.java,src/test/org/apache/commons/math/stat/inference/TTestTest.java,38,rivate SummaryStatistics nullStats = null;
False,src/test/org/apache/commons/math/stat/inference/TTestTest.java,src/test/org/apache/commons/math/stat/inference/TTestTest.java,39,ummaryStatistics tooShortStats = null;
True,src/test/org/apache/commons/math/stat/inference/TTestTest.java,src/test/org/apache/commons/math/stat/inference/TTestTest.java,37,SummaryStatistics tooShortStats = null;
False,src/test/org/apache/commons/math/stat/inference/TTestTest.java,src/test/org/apache/commons/math/stat/inference/TTestTest.java,77,"estStatistic.t(mu, nullObserved);"
True,src/test/org/apache/commons/math/stat/inference/TTestTest.java,src/test/org/apache/commons/math/stat/inference/TTestTest.java,75,"testStatistic.t(mu, (double[]) null);"
False,src/test/org/apache/commons/math/stat/inference/TTestTest.java,src/test/org/apache/commons/math/stat/inference/TTestTest.java,84,"estStatistic.t(mu, nullStats);"
True,src/test/org/apache/commons/math/stat/inference/TTestTest.java,src/test/org/apache/commons/math/stat/inference/TTestTest.java,82,"testStatistic.t(mu, (SummaryStatistics) null);"
False,src/test/org/apache/commons/math/stat/inference/TTestTest.java,src/test/org/apache/commons/math/stat/inference/TTestTest.java,292,"ouble[] sample4 = {0d, 2d};"
False,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,196,rivate double[] nullObserved = null;
False,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,199,rivate SummaryStatistics nullStats = null;
False,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,200,ummaryStatistics tooShortStats = null;
False,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,223,"estUtils.t(mu, nullObserved);"
True,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,220,"TestUtils.t(mu, (double[]) null);"
False,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,230,"estUtils.t(mu, nullStats);"
True,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,227,"TestUtils.t(mu, (SummaryStatistics) null);"
False,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,264,"estUtils.t(mu, tooShortStats);"
True,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,261,"TestUtils.t(mu, (SummaryStatistics) null);"
False,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,270,"estUtils.tTest(mu, tooShortStats);"
True,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,267,"TestUtils.tTest(mu, (SummaryStatistics) null);"
False,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,366,"estUtils.tTest(sampleStats1, tooShortStats, .01);"
True,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,363,"TestUtils.tTest(sampleStats1, (SummaryStatistics) null, .01);"
False,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,380,"estUtils.tTest(sampleStats1, tooShortStats);"
True,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,377,"TestUtils.tTest(sampleStats1, (SummaryStatistics) null);"
False,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,394,"estUtils.t(sampleStats1, tooShortStats);"
True,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,391,"TestUtils.t(sampleStats1, (SummaryStatistics) null);"
False,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,438,"ouble[] sample4 = {0d, 2d};"
False,src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,225,ouble x = regression.getSlopeConfidenceInterval(1);
True,src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,225,regression.getSlopeConfidenceInterval(1);
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,49,"nt res = MathUtils.addAndCheck(big, 1);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,49,"MathUtils.addAndCheck(big, 1);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,53,"nt res = MathUtils.addAndCheck(bigNeg, -1);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,53,"MathUtils.addAndCheck(bigNeg, -1);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,63,"nt res = MathUtils.mulAndCheck(big, 2);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,63,"MathUtils.mulAndCheck(big, 2);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,67,"nt res = MathUtils.mulAndCheck(bigNeg, 2);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,67,"MathUtils.mulAndCheck(bigNeg, 2);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,77,"nt res = MathUtils.subAndCheck(big, -1);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,77,"MathUtils.subAndCheck(big, -1);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,81,"nt res = MathUtils.subAndCheck(bigNeg, 1);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,81,"MathUtils.subAndCheck(bigNeg, 1);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,88,nt bigNeg = Integer.MIN_VALUE;
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,90,"nt res = MathUtils.subAndCheck(big, -1);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,89,"MathUtils.subAndCheck(big, -1);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,139,"ong x = MathUtils.binomialCoefficient(4,5);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,138,"MathUtils.binomialCoefficient(4,5);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,146,"ouble x = MathUtils.binomialCoefficientDouble(4,5);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,145,"MathUtils.binomialCoefficientDouble(4,5);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,153,"ouble x = MathUtils.binomialCoefficientLog(4,5);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,152,"MathUtils.binomialCoefficientLog(4,5);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,159,"ong x = MathUtils.binomialCoefficient(67,34);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,158,"MathUtils.binomialCoefficient(67,34);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,184,ong x = MathUtils.factorial(-1);
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,183,MathUtils.factorial(-1);
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,190,ouble x = MathUtils.factorialDouble(-1);
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,189,MathUtils.factorialDouble(-1);
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,196,ouble x = MathUtils.factorialLog(-1);
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,195,MathUtils.factorialLog(-1);
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,202,ouble x = MathUtils.factorial(21);
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,201,MathUtils.factorial(21);
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,244,"ouble x = MathUtils.binomialCoefficient(test, test / 2);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,243,"MathUtils.binomialCoefficient(test, test / 2);"
False,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,287,ouble x = MathUtils.factorial(test);
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,286,MathUtils.factorial(test);
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,28,rivate Double z = new Double(2.0);
False,src/test/org/apache/commons/math/util/TestBean.java,src/test/org/apache/commons/math/util/TestBean.java,69, = double1;

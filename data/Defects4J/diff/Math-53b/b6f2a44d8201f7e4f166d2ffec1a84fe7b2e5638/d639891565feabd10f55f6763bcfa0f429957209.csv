is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,86,nt[][] bdArray      = AdamsBashforthIntegrator.computeBackwardDifferencesArray(order + 1);
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,86,int[][] bdArray      = AdamsBashforthIntegrator.computeBackwardDifferencesArray(order);
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,100,orrectorCoeffs = new double[order + 1];
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,101,or (int i = 0; i <= order; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,100,correctorCoeffs = new double[order];
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,101,for (int i = 0; i < order; ++i) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,103,or (int j = i; j <= order; ++j) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,103,for (int j = i; j < order; ++j) {
False,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,275,tatic Fraction[] computeGammaStarArray(final int order) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,275,public static Fraction[] computeGammaStarArray(final int order) {
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,49,"ouble[] coeffs1 = new AdamsMoultonIntegrator(1, 0.01).getCorrectorCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,49,"double[] coeffs1 = new AdamsMoultonIntegrator(2, 0.01).getCorrectorCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,54,"ouble[] coeffs2 = new AdamsMoultonIntegrator(2, 0.01).getCorrectorCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,54,"double[] coeffs2 = new AdamsMoultonIntegrator(3, 0.01).getCorrectorCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,60,"ouble[] coeffs3 = new AdamsMoultonIntegrator(3, 0.01).getCorrectorCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,60,"double[] coeffs3 = new AdamsMoultonIntegrator(4, 0.01).getCorrectorCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,67,"ouble[] coeffs4 = new AdamsMoultonIntegrator(4, 0.01).getCorrectorCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,67,"double[] coeffs4 = new AdamsMoultonIntegrator(5, 0.01).getCorrectorCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,75,"ouble[] coeffs5 = new AdamsMoultonIntegrator(5, 0.01).getCorrectorCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,75,"double[] coeffs5 = new AdamsMoultonIntegrator(6, 0.01).getCorrectorCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,84,"ouble[] coeffs6 = new AdamsMoultonIntegrator(6, 0.01).getCorrectorCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,84,"double[] coeffs6 = new AdamsMoultonIntegrator(7, 0.01).getCorrectorCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,94,"ouble[] coeffs7 = new AdamsMoultonIntegrator(7, 0.01).getCorrectorCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,94,"double[] coeffs7 = new AdamsMoultonIntegrator(8, 0.01).getCorrectorCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,105,"ouble[] coeffs8 = new AdamsMoultonIntegrator(8, 0.01).getCorrectorCoeffs();"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,105,"double[] coeffs8 = new AdamsMoultonIntegrator(9, 0.01).getCorrectorCoeffs();"
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,186,ssertTrue(handler.getLastError() < 7.0e-12);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,187,ssertTrue(handler.getMaximalValueError() < 4.0e-11);
False,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,188,"ssertEquals(0, handler.getMaximalTimeError(), 1.0e-14);"
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,186,assertTrue(handler.getLastError() < 3.0e-10);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,187,assertTrue(handler.getMaximalValueError() < 2.0e-9);
True,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,188,"assertEquals(0, handler.getMaximalTimeError(), 1.0e-15);"

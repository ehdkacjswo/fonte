is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,62,import java.io.FileInputStream;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,64,import java.io.InputStreamReader;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,65,import java.net.URL;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,92, @version $Revision: 1.11 $ $Date: 2003/11/19 03:28:24 $
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,95,* @version $Revision: 1.12 $ $Date: 2004/01/11 07:22:14 $
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,133,ile file = new File(filePath);
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,134,oad(file);
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,135,BufferedReader in =
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,136,new BufferedReader(new InputStreamReader(new FileInputStream(filePath)));
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,137,try {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,138,computeStats(in);
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,139,in = new BufferedReader(new InputStreamReader(new FileInputStream(filePath)));
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,140,fillBinStats(in);
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,141,loaded = true;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,142,} finally {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,143,if (in != null) try {in.close();} catch (Exception ex) {};
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,147,public void load(URL url) throws IOException {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,148,BufferedReader in =
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,149,new BufferedReader(new InputStreamReader(url.openStream()));
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,150,try {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,151,computeStats(in);
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,152,in = new BufferedReader(new InputStreamReader(url.openStream()));
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,153,fillBinStats(in);
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,154,loaded = true;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,155,} finally {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,156,if (in != null) try {in.close();} catch (Exception ex) {};
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,139,/ Pass the file once to get sample stats
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,140,ufferedReader in = null;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,141,ry {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,161,BufferedReader in = new BufferedReader(new FileReader(file));
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,162,try {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,163,computeStats(in);
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,143,tring str = null;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,144,ouble val = 0.0;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,145,ampleStats = new StorelessDescriptiveStatisticsImpl();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,146,hile ((str = in.readLine()) != null) {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,147,al = new Double(str).doubleValue();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,148,ampleStats.addValue(val);
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,150,n.close();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,151,n = null;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,152, finally {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,153,f (in != null) try {in.close();} catch (Exception ex) {};
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,165,fillBinStats(in);
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,166,loaded = true;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,167,} finally {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,168,if (in != null) try {in.close();} catch (Exception ex) {};
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,173,* Computes sampleStats (first pass through data file).
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,175,private void computeStats(BufferedReader in) throws IOException {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,176,String str = null;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,177,double val = 0.0;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,178,sampleStats = new StorelessDescriptiveStatisticsImpl();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,179,while ((str = in.readLine()) != null) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,180,val = new Double(str).doubleValue();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,181,sampleStats.addValue(val);
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,183,in.close();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,184,in = null;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,188,* Fills binStats array (second pass through data file).
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,190,private void fillBinStats(BufferedReader in) throws IOException {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,192,// Load array of bin upper bounds -- evenly spaced from min - max
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,193,double min = sampleStats.getMin();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,194,double max = sampleStats.getMax();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,195,double delta = (max - min)/(new Double(binCount)).doubleValue();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,196,double[] binUpperBounds = new double[binCount];
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,197,binUpperBounds[0] = min + delta;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,198,for (int i = 1; i< binCount - 1; i++) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,199,binUpperBounds[i] = binUpperBounds[i-1] + delta;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,201,binUpperBounds[binCount -1] = max;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,156,/ Load array of bin upper bounds -- evenly spaced from min - max
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,157,ouble min = sampleStats.getMin();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,158,ouble max = sampleStats.getMax();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,159,ouble delta = (max - min)/(new Double(binCount)).doubleValue();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,160,ouble[] binUpperBounds = new double[binCount];
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,161,inUpperBounds[0] = min + delta;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,162,or (int i = 1; i< binCount - 1; i++) {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,163,inUpperBounds[i] = binUpperBounds[i-1] + delta;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,165,inUpperBounds[binCount -1] = max;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,176,"/ Pass the data again, filling data in binStats Array"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,177,ry {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,178,n = new BufferedReader(new FileReader(file));
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,179,tring str = null;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,180,ouble val = 0.0d;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,181,hile ((str = in.readLine()) != null) {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,182,al = new Double(str).doubleValue();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,184,/ Find bin and add value to binStats for the bin
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,185,oolean found = false;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,186,nt i = 0;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,187,hile (!found) {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,188,f (i >= binCount) {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,189,"hrow new RuntimeException(""bin alignment error"");"
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,191,f (val <= binUpperBounds[i]) {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,192,ound = true;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,193,escriptiveStatistics stats = (DescriptiveStatistics)binStats.get(i);
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,194,tats.addValue(val);
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,196,++;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,212,"// Pass the data again, filling data in binStats Array"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,213,String str = null;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,214,double val = 0.0d;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,215,while ((str = in.readLine()) != null) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,216,val = new Double(str).doubleValue();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,218,// Find bin and add value to binStats for the bin
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,219,boolean found = false;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,220,int i = 0;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,221,while (!found) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,222,if (i >= binCount) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,223,"throw new RuntimeException(""bin alignment error"");"
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,225,if (val <= binUpperBounds[i]) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,226,found = true;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,227,DescriptiveStatistics stats = (DescriptiveStatistics)binStats.get(i);
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,228,stats.addValue(val);
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,230,i++;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,199,n.close();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,200,n = null;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,201, finally {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,202,f (in != null) try {in.close();} catch (Exception ex) {};
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,233,in.close();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,234,in = null;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,205,/ Assign upperBounds based on bin counts
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,206,pperBounds = new double[binCount];
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,207,pperBounds[0] =
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,208,(double)((DescriptiveStatistics)binStats.get(0)).getN())/
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,209,double)sampleStats.getN();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,210,or (int i = 1; i < binCount-1; i++) {
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,211,pperBounds[i] = upperBounds[i-1] +
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,212,(double)((DescriptiveStatistics)binStats.get(i)).getN())/
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,213,double)sampleStats.getN();
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,215,pperBounds[binCount-1] = 1.0d;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,217,oaded = true;
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,236,// Assign upperBounds based on bin counts
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,237,upperBounds = new double[binCount];
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,238,upperBounds[0] =
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,239,((double)((DescriptiveStatistics)binStats.get(0)).getN())/
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,240,(double)sampleStats.getN();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,241,for (int i = 1; i < binCount-1; i++) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,242,upperBounds[i] = upperBounds[i-1] +
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,243,((double)((DescriptiveStatistics)binStats.get(i)).getN())/
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,244,(double)sampleStats.getN();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,246,upperBounds[binCount-1] = 1.0d;

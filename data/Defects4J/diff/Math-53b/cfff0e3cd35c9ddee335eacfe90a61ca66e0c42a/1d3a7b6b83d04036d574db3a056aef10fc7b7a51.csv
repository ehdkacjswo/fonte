is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,17,package org.apache.commons.math.ode;
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,20,/** This interface represents a first order differential equations set
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,21,* with a main set of equations and an extension set.
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,23,* <p>
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,24,* This interface is a simple extension on the {@link
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,25,* FirstOrderDifferentialEquations} that allows to identify which part
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,26,* of a complete set of differential equations correspond to the main
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,27,* set and which part correspond to the extension set.
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,28,* </p>
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,29,* <p>
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,30,* One typical use case is the computation of Jacobians. The main
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,31,"* set of equations correspond to the raw ode, and we add to this set"
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,32,* another bunch of equations which represent the jacobians of the
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,33,"* main set. In that case, we want the integrator to use <em>only</em>"
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,34,* the main set to estimate the errors and hence the step sizes. It should
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,35,* <em>not</em> use the additional equations in this computation. If the
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,36,"* complete ode implements this interface, the {@link FirstOrderIntegrator"
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,37,* integrator} will be able to know where the main set ends and where the
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,38,* extended set begins.
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,39,* </p>
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,40,* <p>
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,41,* We consider that the main set always corresponds to the first equations
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,42,* and the extended set to the last equations.
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,43,* </p>
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,45,* @see FirstOrderDifferentialEquations
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,47,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,48,* @since 2.2
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,51,public interface ExtendedFirstOrderDifferentialEquations extends FirstOrderDifferentialEquations {
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,53,/** Return the dimension of the main set of equations.
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,54,* <p>
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,55,* The main set of equations represent the first part of an ODE state.
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,56,* The error estimations and adaptive step size computation should be
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,57,"* done on this first part only, not on the final part of the state"
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,58,* which represent an extension set of equations which are considered
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,59,* secondary.
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,60,* </p>
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,61,"* @return dimension of the main set of equations, must be lesser than or"
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,62,* equal to the {@link #getDimension() total dimension}
True,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,64,int getMainSetDimension();
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,381,rivate class CountingDifferentialEquations implements FirstOrderDifferentialEquations {
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,381,private class CountingDifferentialEquations implements ExtendedFirstOrderDifferentialEquations {
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,404,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,405,public int getMainSetDimension() {
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,406,return mainSetDimension;
True,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,30,import org.apache.commons.math.ode.ExtendedFirstOrderDifferentialEquations;
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,357,rivate class MappingWrapper implements  FirstOrderDifferentialEquations {
True,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,358,private class MappingWrapper implements  ExtendedFirstOrderDifferentialEquations {
True,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,392,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,393,public int getMainSetDimension() {
True,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,394,return ode.getDimension();
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,445,rivate class FiniteDifferencesWrapper
False,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,446,mplements ODEWithJacobians {
True,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java,451,private class FiniteDifferencesWrapper implements ODEWithJacobians {
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,32,ublic interface ParameterizedODE
False,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,33,xtends FirstOrderDifferentialEquations {
True,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java,32,public interface ParameterizedODE extends FirstOrderDifferentialEquations {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,238,or (int i = 0; i < y0.length; ++i) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,238,for (int i = 0; i < mainSetDimension; ++i) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,246,rror = Math.sqrt(error / y0.length);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,246,error = Math.sqrt(error / mainSetDimension);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,422, End visiting te Nordsieck vector.
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,422,* End visiting the Nordsieck vector.
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,435,"inal double yScale = Math.max(Math.abs(previous[i]), Math.abs(after[i]));"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,436,inal double tol = (vecAbsoluteTolerance == null) ?
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,437,scalAbsoluteTolerance + scalRelativeTolerance * yScale) :
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,438,vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * yScale);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,439,inal double ratio  = (after[i] - before[i]) / tol;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,440,rror += ratio * ratio;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,435,if (i < mainSetDimension) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,436,"final double yScale = Math.max(Math.abs(previous[i]), Math.abs(after[i]));"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,437,final double tol = (vecAbsoluteTolerance == null) ?
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,438,(scalAbsoluteTolerance + scalRelativeTolerance * yScale) :
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,439,(vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * yScale);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,440,final double ratio  = (after[i] - before[i]) / tol;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,441,error += ratio * ratio;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,443,eturn Math.sqrt(error / after.length);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,445,return Math.sqrt(error / mainSetDimension);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,22,import org.apache.commons.math.ode.ExtendedFirstOrderDifferentialEquations;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,39, relTol which will be used for all components.</p>
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,40,* relTol which will be used for all components.
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,41,* </p>
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,43,* <p>If the Ordinary Differential Equations is an {@link ExtendedFirstOrderDifferentialEquations
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,44,"* extended ODE} rather than a {@link FirstOrderDifferentialEquations basic ODE},"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,45,* then <em>only</em> the {@link ExtendedFirstOrderDifferentialEquations#getMainSetDimension()
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,46,"* main set} part of the state vector is used for stepsize control, not the complete"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,47,* state vector.
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,48,* </p>
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,46," (where n is the state vector dimension) then the step is accepted,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,55,"* (where n is the main set dimension) then the step is accepted,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,88,/** Main set dimension. */
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,89,protected int mainSetDimension;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,174,f ((vecAbsoluteTolerance != null) && (vecAbsoluteTolerance.length != y0.length)) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,186,if (equations instanceof ExtendedFirstOrderDifferentialEquations) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,187,mainSetDimension = ((ExtendedFirstOrderDifferentialEquations) equations).getMainSetDimension();
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,188,} else {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,189,mainSetDimension = equations.getDimension();
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,192,if ((vecAbsoluteTolerance != null) && (vecAbsoluteTolerance.length != mainSetDimension)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,176,"ocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, y0.length, vecAbsoluteTolerance.length);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,194,"LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, mainSetDimension, vecAbsoluteTolerance.length);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,179,f ((vecRelativeTolerance != null) && (vecRelativeTolerance.length != y0.length)) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,197,if ((vecRelativeTolerance != null) && (vecRelativeTolerance.length != mainSetDimension)) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,181,"ocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, y0.length, vecRelativeTolerance.length);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,199,"LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, mainSetDimension, vecRelativeTolerance.length);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,190, @param scale scaling vector for the state vector
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,208,* @param scale scaling vector for the state vector (can be shorter than state vector)
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,216,or (int j = 0; j < y0.length; ++j) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,234,for (int j = 0; j < scale.length; ++j) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,237,or (int j = 0; j < y0.length; ++j) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,255,for (int j = 0; j < scale.length; ++j) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,138,or (int j = 0; j < y0.length; ++j) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,138,for (int j = 0; j < mainSetDimension; ++j) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,152,eturn Math.sqrt(error / y0.length);
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java,152,return Math.sqrt(error / mainSetDimension);
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,252,or (int j = 0; j < y0.length; ++j) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,252,for (int j = 0; j < mainSetDimension; ++j) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,277,eturn Math.abs(h) * error1 / Math.sqrt(y0.length * den);
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java,277,return Math.abs(h) * error1 / Math.sqrt(mainSetDimension * den);
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,245,inal double[] scale = new double[y0.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,245,final double[] scale = new double[mainSetDimension];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,432, @param scale scaling array to update
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,432,* @param scale scaling array to update (can be shorter than state)
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,454, @param scale scaling array
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,454,* @param scale scaling array (can be shorter than state)
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,503,or (int l = 0; l < y0.length; ++l) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,503,for (int l = 0; l < scale.length; ++l) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,508,or (int l = 0; l < y0.length; ++l) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,508,for (int l = 0; l < scale.length; ++l) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,610,inal double[] scale = new double[y0.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,610,final double[] scale = new double[mainSetDimension];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,712,or (int j = 0; j < y0.length; ++j) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,712,for (int j = 0; j < mainSetDimension; ++j) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,716,rror = Math.sqrt(error / y0.length);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,716,error = Math.sqrt(error / mainSetDimension);
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,300,or (int i = 0; i < currentState.length; ++i) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,300,for (int i = 0; i < scale.length; ++i) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,304,rror = Math.sqrt(error / currentState.length) * errfac[currentDegree-5];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,304,error = Math.sqrt(error / scale.length) * errfac[currentDegree - 5];
False,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,111,or (int j = 0; j < y0.length; ++j) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,111,for (int j = 0; j < mainSetDimension; ++j) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,126,eturn Math.sqrt(error / y0.length);
True,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java,126,return Math.sqrt(error / mainSetDimension);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,43,"ew DormandPrince54Integrator(1.0e-8, 100.0, 1.0e-4, 1.0e-4);"
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,43,"new DormandPrince54Integrator(1.0e-8, 100.0, new double[] { 1.0e-4, 1.0e-4 }, new double[] { 1.0e-4, 1.0e-4 });"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,67,"ew DormandPrince54Integrator(1.0e-8, 100.0, 1.0e-10, 1.0e-10);"
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,67,"new DormandPrince54Integrator(1.0e-8, 100.0, new double[] { 1.0e-10, 1.0e-10 }, new double[] { 1.0e-10, 1.0e-10 });"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,95,"ew DormandPrince54Integrator(1.0e-8, 100.0, 1.0e-4, 1.0e-4);"
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,95,"new DormandPrince54Integrator(1.0e-8, 100.0, new double[] { 1.0e-4, 1.0e-4 }, new double[] { 1.0e-4, 1.0e-4 });"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,112,ssert.assertTrue(extInt.getEvaluations() > 2000);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,113,ssert.assertTrue(extInt.getEvaluations() < 2500);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,112,Assert.assertTrue(extInt.getEvaluations() > 1500);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,113,Assert.assertTrue(extInt.getEvaluations() < 2100);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,118,ssert.assertTrue((residualsP0.getMax() - residualsP0.getMin()) < 0.006);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,119,ssert.assertTrue(residualsP0.getStandardDeviation() < 0.0009);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,120,ssert.assertTrue((residualsP1.getMax() - residualsP1.getMin()) < 0.009);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,121,ssert.assertTrue(residualsP1.getStandardDeviation() < 0.0014);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,118,Assert.assertTrue((residualsP0.getMax() - residualsP0.getMin()) < 0.02);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,119,Assert.assertTrue(residualsP0.getStandardDeviation() < 0.003);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,120,Assert.assertTrue((residualsP1.getMax() - residualsP1.getMin()) < 0.05);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,121,Assert.assertTrue(residualsP1.getStandardDeviation() < 0.01);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,128,"ew DormandPrince54Integrator(1.0e-8, 100.0, 1.0e-4, 1.0e-4);"
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,128,"new DormandPrince54Integrator(1.0e-8, 100.0, new double[] { 1.0e-4, 1.0e-4 }, new double[] { 1.0e-4, 1.0e-4 });"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,142,ssert.assertTrue(extInt.getEvaluations() > 510);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,143,ssert.assertTrue(extInt.getEvaluations() < 610);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,142,Assert.assertTrue(extInt.getEvaluations() > 350);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,143,Assert.assertTrue(extInt.getEvaluations() < 510);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,148,ssert.assertTrue((residualsP0.getMax() - residualsP0.getMin()) < 0.004);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,149,ssert.assertTrue(residualsP0.getStandardDeviation() < 0.0008);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,150,ssert.assertTrue((residualsP1.getMax() - residualsP1.getMin()) < 0.005);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,151,ssert.assertTrue(residualsP1.getStandardDeviation() < 0.0010);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,148,Assert.assertTrue((residualsP0.getMax() - residualsP0.getMin()) < 0.014);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,149,Assert.assertTrue(residualsP0.getStandardDeviation() < 0.003);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,150,Assert.assertTrue((residualsP1.getMax() - residualsP1.getMin()) < 0.05);
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,151,Assert.assertTrue(residualsP1.getStandardDeviation() < 0.01);
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,157,"ew DormandPrince54Integrator(1.0e-8, 100.0, 1.0e-10, 1.0e-10);"
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,157,"new DormandPrince54Integrator(1.0e-8, 100.0, new double[] { 1.0e-10, 1.0e-10 }, new double[] { 1.0e-10, 1.0e-10 });"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,167,"ssert.assertEquals(circle.exactY(t)[i], y[i], 1.0e-10);"
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,167,"Assert.assertEquals(circle.exactY(t)[i], y[i], 1.0e-9);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,171,"ssert.assertEquals(circle.exactDyDy0(t)[i][j], dydy0[i][j], 1.0e-10);"
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,171,"Assert.assertEquals(circle.exactDyDy0(t)[i][j], dydy0[i][j], 1.0e-9);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,176,"ssert.assertEquals(circle.exactDyDp(t)[i][j], dydp[i][j], 1.0e-8);"
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,176,"Assert.assertEquals(circle.exactDyDp(t)[i][j], dydp[i][j], 1.0e-7);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,184,"ew DormandPrince54Integrator(1.0e-8, 100.0, 1.0e-10, 1.0e-10);"
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,184,"new DormandPrince54Integrator(1.0e-8, 100.0, new double[] { 1.0e-10, 1.0e-10 }, new double[] { 1.0e-10, 1.0e-10 });"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,210,"ssert.assertEquals(circle.exactY(t)[i], y[i], 1.0e-10);"
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,210,"Assert.assertEquals(circle.exactY(t)[i], y[i], 1.0e-9);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,214,"ssert.assertEquals(circle.exactDyDy0(t)[i][j], dydy0[i][j], 1.0e-10);"
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,214,"Assert.assertEquals(circle.exactDyDy0(t)[i][j], dydy0[i][j], 1.0e-9);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,219,"ssert.assertEquals(circle.exactDyDp(t)[i][j], dydp[i][j], 1.0e-8);"
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,219,"Assert.assertEquals(circle.exactDyDp(t)[i][j], dydp[i][j], 3.0e-8);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,228,"ssert.assertEquals(circle.exactYDot(t)[i], yDot[i], 1.0e-11);"
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,228,"Assert.assertEquals(circle.exactYDot(t)[i], yDot[i], 1.0e-10);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,232,"ssert.assertEquals(circle.exactDyDy0Dot(t)[i][j], dydy0Dot[i][j], 1.0e-11);"
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,232,"Assert.assertEquals(circle.exactDyDy0Dot(t)[i][j], dydy0Dot[i][j], 1.0e-10);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,237,"ssert.assertEquals(circle.exactDyDpDot(t)[i][j], dydpDot[i][j], 1.0e-9);"
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,237,"Assert.assertEquals(circle.exactDyDpDot(t)[i][j], dydpDot[i][j], 3.0e-9);"
False,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,248,"ew DormandPrince54Integrator(1.0e-8, 100.0, 1.0e-10, 1.0e-10);"
True,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java,248,"new DormandPrince54Integrator(1.0e-8, 100.0, new double[] { 1.0e-10, 1.0e-10 }, new double[] { 1.0e-10, 1.0e-10 });"

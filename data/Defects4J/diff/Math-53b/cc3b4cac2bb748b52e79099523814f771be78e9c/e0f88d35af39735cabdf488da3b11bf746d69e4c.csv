is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,63,* (non-Javadoc)
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,64, @see org.apache.commons.math.StoreUnivariate#getMode()
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,66,ublic double getMode() {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,67,/ Mode depends on a refactor Freq class
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,68,"hrow new UnsupportedOperationException(""getMode() is not yet implemented"");"
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,71,* (non-Javadoc)
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,72, @see org.apache.commons.math.StoreUnivariate#getSkewness()
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,74,ublic double getSkewness() {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,75,/ Initialize the skewness
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,76,ouble skewness = Double.NaN;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,78,/ Get the mean and the standard deviation
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,79,ouble mean = getMean();
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,80,ouble stdDev = getStandardDeviation();
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,82,/ Sum the cubes of the distance from the mean divided by the standard deviation
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,83,ouble accum = 0.0;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,84,or( int i = 0; i < getN(); i++ ) {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,85,"ccum += Math.pow( (getElement(i) - mean) / stdDev, 3.0);"
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,88,/ Get N
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,89,ouble n = getN();
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,91,/ Calculate skewness
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,92,kewness = ( n / ( (n-1) * (n-2) ) ) * accum;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,94,eturn skewness;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,97,* (non-Javadoc)
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,98, @see org.apache.commons.math.StoreUnivariate#getKurtosis()
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,100,ublic double getKurtosis() {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,101,/ Initialize the kurtosis
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,102,ouble kurtosis = Double.NaN;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,104,/ Get the mean and the standard deviation
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,105,ouble mean = getMean();
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,106,ouble stdDev = getStandardDeviation();
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,108,/ Sum the ^4 of the distance from the mean divided by the standard deviation
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,109,ouble accum = 0.0;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,110,or( int i = 0; i < getN(); i++ ) {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,111,"ccum += Math.pow( (getElement(i) - mean) / stdDev, 4.0);"
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,114,/ Get N
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,115,ouble n = getN();
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,117,ouble coefficientOne = ( n * (n+1)) / ( (n-1) * (n-2) * (n-3) );
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,118,"ouble termTwo = (  ( 3 * Math.pow( n - 1, 2.0)) /  ( (n-2) * (n-3) ) );"
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,119,/ Calculate kurtosis
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,120,urtosis = ( coefficientOne * accum ) - termTwo;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,122,eturn kurtosis;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,125,* (non-Javadoc)
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,126, @see org.apache.commons.math.StoreUnivariate#getKurtosisClass()
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,128,ublic int getKurtosisClass() {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,130,nt kClass = StoreUnivariate.MESOKURTIC;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,132,ouble kurtosis = getKurtosis();
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,133,f( kurtosis > 0 ) {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,134,Class = StoreUnivariate.LEPTOKURTIC;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,135, else if( kurtosis < 0 ) {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,136,Class = StoreUnivariate.PLATYKURTIC;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,139,eturn( kClass );
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,143,* (non-Javadoc)
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,144, @see org.apache.commons.math.Univariate#getMean()
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,146,ublic double getMean() {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,147,ouble arithMean = getSum() / getN();
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,148,eturn arithMean;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,151,* (non-Javadoc)
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,152, @see org.apache.commons.math.Univariate#getVariance()
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,154,ublic double getVariance() {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,155,/ Initialize variance
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,156,ouble variance = Double.NaN;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,158,f( getN() == 1 ) {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,159,/ If this is a single value
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,160,ariance = 0;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,161, else if( getN() > 1 ) {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,162,/ Get the mean
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,163,ouble mean = getMean();
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,165,/ Calculate the sum of the squares of the distance between each value and the mean
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,166,ouble accum = 0.0;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,167,or( int i = 0; i < getN(); i++ ){
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,168,"ccum += Math.pow( (getElement(i) - mean), 2.0 );"
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,171,/ Divide the accumulator by N - Hmmm... unbiased or biased?
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,172,ariance = accum / (getN() - 1);
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,175,eturn variance;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,178,* (non-Javadoc)
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,179, @see org.apache.commons.math.Univariate#getStandardDeviation()
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,181,ublic double getStandardDeviation() {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,182,ouble stdDev = Double.NaN;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,183,f( getN() != 0 ) {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,184,tdDev = Math.sqrt( getVariance() );
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,186,eturn( stdDev );
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,189,* (non-Javadoc)
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,190, @see org.apache.commons.math.Univariate#getMax()
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,192,ublic double getMax() {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,194,/ Initialize maximum to NaN
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,195,ouble max = Double.NaN;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,197,or( int i = 0; i < getN(); i++) {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,198,f( i == 0 ) {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,199,ax = getElement(i);
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,200, else {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,201,f( getElement(i) > max ) {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,202,ax = getElement(i);
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,207,eturn max;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,210,* (non-Javadoc)
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,211, @see org.apache.commons.math.Univariate#getMin()
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,213,ublic double getMin() {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,214,/ Initialize minimum to NaN
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,215,ouble min = Double.NaN;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,217,or( int i = 0; i < getN(); i++) {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,218,f( i == 0 ) {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,219,in = getElement(i);
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,220, else {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,221,f( getElement(i) < min ) {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,222,in = getElement(i);
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,227,eturn min;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,230,* (non-Javadoc)
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,231, @see org.apache.commons.math.Univariate#getSum()
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,233,ublic double getSum() {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,234,ouble accum = 0.0;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,235,or( int i = 0; i < getN(); i++) {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,236,ccum += getElement(i);
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,238,eturn accum;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,241,* (non-Javadoc)
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,242, @see org.apache.commons.math.Univariate#getSumsq()
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,244,ublic double getSumsq() {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,245,ouble accum = 0.0;
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,246,or( int i = 0; i < getN(); i++) {
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,247,"ccum += Math.pow(getElement(i), 2.0);"
False,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,249,eturn accum;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,64,* Returns the most frequently occuring value
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,65,* @see org.apache.commons.math.StoreUnivariate#getMode()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,67,public double getMode() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,68,// Mode depends on a refactor Freq class
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,69,"String msg = ""getMode() is not yet implemented"";"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,70,throw new UnsupportedOperationException(msg);
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,74,* Returns the skewness of this collection of values
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,75,* @see org.apache.commons.math.StoreUnivariate#getSkewness()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,77,public double getSkewness() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,78,// Initialize the skewness
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,79,double skewness = Double.NaN;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,81,// Get the mean and the standard deviation
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,82,double mean = getMean();
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,83,double stdDev = getStandardDeviation();
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,85,// Sum the cubes of the distance from the mean divided by the
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,86,// standard deviation
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,87,double accum = 0.0;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,88,for (int i = 0; i < getN(); i++) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,89,"accum += Math.pow((getElement(i) - mean) / stdDev, 3.0);"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,92,// Get N
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,93,double n = getN();
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,95,// Calculate skewness
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,96,skewness = (n / ((n - 1) * (n - 2))) * accum;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,98,return skewness;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,102,* Returns the kurtosis for this collection of values
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,103,* @see org.apache.commons.math.StoreUnivariate#getKurtosis()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,105,public double getKurtosis() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,106,// Initialize the kurtosis
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,107,double kurtosis = Double.NaN;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,109,// Get the mean and the standard deviation
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,110,double mean = getMean();
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,111,double stdDev = getStandardDeviation();
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,113,// Sum the ^4 of the distance from the mean divided by the
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,114,// standard deviation
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,115,double accum = 0.0;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,116,for (int i = 0; i < getN(); i++) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,117,"accum += Math.pow((getElement(i) - mean) / stdDev, 4.0);"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,120,// Get N
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,121,double n = getN();
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,123,double coefficientOne = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,124,"double termTwo = ((3 * Math.pow(n - 1, 2.0))"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,125,/ ((n - 2) * (n - 3)));
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,126,// Calculate kurtosis
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,127,kurtosis = (coefficientOne * accum) - termTwo;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,129,return kurtosis;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,133,* Returns the type or class of kurtosis that this collection of
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,134,* values exhibits
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,135,* @see org.apache.commons.math.StoreUnivariate#getKurtosisClass()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,137,public int getKurtosisClass() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,139,int kClass = StoreUnivariate.MESOKURTIC;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,141,double kurtosis = getKurtosis();
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,142,if (kurtosis > 0) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,143,kClass = StoreUnivariate.LEPTOKURTIC;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,144,} else if (kurtosis < 0) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,145,kClass = StoreUnivariate.PLATYKURTIC;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,148,return (kClass);
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,153,* Returns the mean for this collection of values
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,154,* @see org.apache.commons.math.Univariate#getMean()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,156,public double getMean() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,157,double arithMean = getSum() / getN();
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,158,return arithMean;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,162,* Returns the variance for this collection of values
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,163,* @see org.apache.commons.math.Univariate#getVariance()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,165,public double getVariance() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,166,// Initialize variance
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,167,double variance = Double.NaN;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,169,if (getN() == 1) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,170,// If this is a single value
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,171,variance = 0;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,172,} else if (getN() > 1) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,173,// Get the mean
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,174,double mean = getMean();
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,176,// Calculate the sum of the squares of the distance between each
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,177,// value and the mean
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,178,double accum = 0.0;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,179,for (int i = 0; i < getN(); i++){
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,180,"accum += Math.pow((getElement(i) - mean), 2.0);"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,183,// Divide the accumulator by N - Hmmm... unbiased or biased?
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,184,variance = accum / (getN() - 1);
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,187,return variance;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,191,* Returns the standard deviation for this collection of values
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,192,* @see org.apache.commons.math.Univariate#getStandardDeviation()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,194,public double getStandardDeviation() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,195,double stdDev = Double.NaN;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,196,if (getN() != 0) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,197,stdDev = Math.sqrt(getVariance());
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,199,return (stdDev);
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,203,* Returns the maximum value contained herein.
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,204,* @see org.apache.commons.math.Univariate#getMax()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,206,public double getMax() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,208,// Initialize maximum to NaN
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,209,double max = Double.NaN;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,211,for (int i = 0; i < getN(); i++) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,212,if (i == 0) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,213,max = getElement(i);
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,214,} else {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,215,if (getElement(i) > max) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,216,max = getElement(i);
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,221,return max;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,225,* Returns the minimum value contained herein
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,226,* @see org.apache.commons.math.Univariate#getMin()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,228,public double getMin() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,229,// Initialize minimum to NaN
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,230,double min = Double.NaN;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,232,for (int i = 0; i < getN(); i++) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,233,if (i == 0) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,234,min = getElement(i);
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,235,} else {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,236,if (getElement(i) < min) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,237,min = getElement(i);
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,242,return min;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,246,* Returns the sum of all values contained herein
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,247,* @see org.apache.commons.math.Univariate#getSum()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,249,public double getSum() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,250,double accum = 0.0;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,251,for (int i = 0; i < getN(); i++) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,252,accum += getElement(i);
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,254,return accum;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,258,* Returns the sun of the squares of all values contained herein
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,259,* @see org.apache.commons.math.Univariate#getSumsq()
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,261,public double getSumsq() {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,262,double accum = 0.0;
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,263,for (int i = 0; i < getN(); i++) {
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,264,"accum += Math.pow(getElement(i), 2.0);"
True,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,src/java/org/apache/commons/math/AbstractStoreUnivariate.java,266,return accum;
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,63,ublic class ContractableDoubleArray extends ExpandableDoubleArray implements Serializable {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,65,/ The contraction criteria is related to the expansion factor.  Since this array is allowed to contract
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,67,rotected float contractionCriteria = 2.5f;
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,70, Create an expandable double array with the
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,71," default initial capactiy of 16, an expansion factor of 2.00, and a contractionCriteria of 2.5"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,73,ublic ContractableDoubleArray() {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,74,uper();
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,78, Create an expandable double array with the
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,79," specified initial capacity, the defult expansion factor of 2.00, and a contractionCriteria of 2.5"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,81, @param initialCapacity The initial size of the internal storage array
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,83,ublic ContractableDoubleArray(int initialCapacity) {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,84,uper( initialCapacity );
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,88, Create an expandable double array with the
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,89," specificed initial capacity and expand factor, with a contractionCriteria of 2.5"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,91, @param initialCapacity The initial size of the internal storage array
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,92, @param expansionFactor the array will be expanded based on this parameter
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,94,"ublic ContractableDoubleArray(int initialCapacity, float expansionFactor) {"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,95,his.expansionFactor = expansionFactor;
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,96,etInitialCapacity( initialCapacity );
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,97,nternalArray = new double[initialCapacity];
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,98,"heckContractExpand(getContractionCriteria(), expansionFactor);"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,102, Create an expandable double array with the
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,103," specificed initial capacity, expand factor, and contractionCriteria"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,105, @param initialCapacity The initial size of the internal storage array
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,106, @param expansionFactor the array will be expanded based on this parameter
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,108,"ublic ContractableDoubleArray(int initialCapacity, float expansionFactor, float contractionCriteria) {"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,109,his.contractionCriteria = contractionCriteria;
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,110,his.expansionFactor = expansionFactor;
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,111,etInitialCapacity( initialCapacity );
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,112,nternalArray = new double[initialCapacity];
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,113,"heckContractExpand(contractionCriteria, expansionFactor);"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,117, Contracts the storage array to the (size of the element set) + 1 - to avoid a zero length array.
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,118, This function also resets the startIndex to zero
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,120,ublic synchronized void contract() {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,121,ouble[] tempArray = new double[numElements + 1];
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,123,/ Copy and swap - copy only the element array from the src array.
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,124,"ystem.arraycopy(internalArray,startIndex,tempArray,0,numElements);"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,125,nternalArray = tempArray;
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,127,/ Reset the start index to zero
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,128,tartIndex = 0;
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,132, Adds an element to the end of this expandable array
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,134, @return value to be added to end of array
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,136,ublic synchronized void addElement(double value) {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,137,uper.addElement( value );
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,138,f( shouldContract() ) {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,139,ontract();
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,144, Adds an element to the end of this expandable array
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,146, @return value to be added to end of array
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,148,ublic synchronized double addElementRolling(double value) {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,149,ouble discarded = super.addElementRolling(value);
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,150,/ Check the contraction criteria
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,151,f( shouldContract() ) {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,152,ontract();
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,154,eturn discarded;
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,158, Should contract returns true if the ratio of (internal storage length) to (number of elements)
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,159," is larger than the contractionCriteria value.  In other words, using the default value"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,160," of 2.5, if the internal storage array provides more than 2.5x the space needed to store"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,161," numElements, then this function returns true"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,163, @return true if array satisfies the contraction criteria
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,165,rivate synchronized boolean shouldContract() {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,166,oolean shouldContract = false;
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,167,f( ( internalArray.length / numElements ) > contractionCriteria ) {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,168,houldContract = true;
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,170,eturn shouldContract;
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,173,* (non-Javadoc)
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,174," @see org.apache.commons.math.ExpandableDoubleArray#setElement(int, double)"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,176,"ublic synchronized void setElement(int index, double value) {"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,177,"uper.setElement(index, value);"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,178,f( shouldContract() ) {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,179,ontract();
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,183,* (non-Javadoc)
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,184, @see org.apache.commons.math.ExpandableDoubleArray#setExpansionFactor(float)
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,186,ublic void setExpansionFactor(float expansionFactor) {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,187,"heckContractExpand(getContractionCriteria(), expansionFactor);"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,188,uper.setExpansionFactor(expansionFactor);
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,192, The contraction criteria defines when the internal array will contract to store only the
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,193, number of elements in the element array.  This contractionCriteria gaurantees that
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,194, the internal storage array will never exceed this factor more than the space needed
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,195, to store numElements.
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,197, @return the contraction criteria used to reclaim memory when array is empty
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,199,ublic float getContractionCriteria() {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,200,eturn contractionCriteria;
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,204, Sets the contraction criteria for this ExpandContractDoubleArray.
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,206, @param new contraction criteria
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,208,ublic void setContractionCriteria(float contractionCriteria) {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,209,"heckContractExpand( contractionCriteria, getExpansionFactor() );"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,211,his.contractionCriteria = contractionCriteria;
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,215, Checks the expansion factor and the contraction criteria and throws an IllegalArgumentException
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,216, if the contractionCriteria is less than the expansionCriteria
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,218, @param expansionFactor
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,219, @param contractionCriteria
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,221,"rotected void checkContractExpand( float contractionCritera, float expansionFactor ) {"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,223,f( contractionCritera < expansionFactor ) {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,224,"hrow new IllegalArgumentException( ""Contraction criteria can never be smaller than "" +"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,230,f( contractionCriteria <= 1.0 ) {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,231,"hrow new IllegalArgumentException( ""The contraction criteria must be a number larger than"" +"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,232," one.  If the contractionCriteria is less than or equal to one an endless loop of contraction "" +"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,233,"and expansion would ensue as an internalArray.length == numElements would satisfy "" +"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,234,"the contraction criteria"");"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,237,f (expansionFactor < 1.0) {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,238,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,239,"The expansion factor must be a number greater than"" + ""1.0"");"
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,245,* (non-Javadoc)
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,246, @see org.apache.commons.math.ExpandableDoubleArray#discardFrontElements(int)
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,248,ublic synchronized void discardFrontElements(int i) {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,249,uper.discardFrontElements(i);
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,250,f( shouldContract() ) {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,251,ontract();
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,66,public class ContractableDoubleArray
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,67,extends ExpandableDoubleArray
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,68,implements Serializable {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,70,// The contraction criteria defines the conditions under which this
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,71,"// object will ""resize"" the internal array to the number of elements"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,72,// contained in the element array + 1
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,73,protected float contractionCriteria = 2.5f;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,76,* Create an expandable double array with the default initial capacity of
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,77,"* 16, an expansion factor of 2.00, and a contractionCriteria of 2.5"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,79,public ContractableDoubleArray() {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,80,super();
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,84,"* Create an expandable double array with the specified initial capacity,"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,85,"* the defult expansion factor of 2.00, and a contractionCriteria of 2.5"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,87,* @param initialCapacity The initial size of the internal storage array
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,89,public ContractableDoubleArray(int initialCapacity) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,90,super(initialCapacity);
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,94,* Create an expandable double array with the specificed initial capacity
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,95,"* and expand factor, with a contractionCriteria of 2.5"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,97,* @param initialCapacity The initial size of the internal storage array
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,98,* @param expansionFactor the array will be expanded based on this
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,99,*                        parameter
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,101,"public ContractableDoubleArray(int initialCapacity,"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,102,float expansionFactor) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,103,this.expansionFactor = expansionFactor;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,104,setInitialCapacity(initialCapacity);
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,105,internalArray = new double[initialCapacity];
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,106,"checkContractExpand(getContractionCriteria(), expansionFactor);"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,110,* Create an expandable double array with the
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,111,"* specificed initial capacity, expand factor, and contractionCriteria"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,113,* @param initialCapacity The initial size of the internal storage array
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,114,* @param expansionFactor the array will be expanded based on this
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,115,*                        parameter
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,117,"public ContractableDoubleArray(int initialCapacity,"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,118,"float expansionFactor,"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,119,float contractionCriteria) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,120,this.contractionCriteria = contractionCriteria;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,121,this.expansionFactor = expansionFactor;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,122,setInitialCapacity(initialCapacity);
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,123,internalArray = new double[initialCapacity];
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,124,"checkContractExpand(contractionCriteria, expansionFactor);"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,128,* Contracts the storage array to the (size of the element set) + 1 - to
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,129,* avoid a zero length array. This function also resets the startIndex to
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,130,* zero.
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,132,public synchronized void contract() {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,133,double[] tempArray = new double[numElements + 1];
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,135,// Copy and swap - copy only the element array from the src array.
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,136,"System.arraycopy(internalArray,startIndex,tempArray,0,numElements);"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,137,internalArray = tempArray;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,139,// Reset the start index to zero
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,140,startIndex = 0;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,144,* Adds an element to the end of this expandable array
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,146,* @return value to be added to end of array
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,148,public synchronized void addElement(double value) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,149,super.addElement(value);
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,150,if (shouldContract()) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,151,contract();
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,156,* Adds an element to the end of this expandable array
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,158,* @return value to be added to end of array
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,160,public synchronized double addElementRolling(double value) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,161,double discarded = super.addElementRolling(value);
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,162,// Check the contraction criteria
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,163,if (shouldContract()) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,164,contract();
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,166,return discarded;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,170,* Should contract returns true if the ratio of (internal storage length)
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,171,* to (number of elements) is larger than the contractionCriteria value.
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,172,"* In other words, using the default value of 2.5, if the internal storage"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,173,"* array provides more than 2.5x the space needed to store numElements,"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,174,* then this function returns true
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,176,* @return true if array satisfies the contraction criteria
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,178,private synchronized boolean shouldContract() {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,179,boolean shouldContract = false;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,180,if ((internalArray.length / numElements) > contractionCriteria) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,181,shouldContract = true;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,183,return shouldContract;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,186,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,187,"* @see org.apache.commons.math.ExpandableDoubleArray#setElement(int, double)"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,189,"public synchronized void setElement(int index, double value) {"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,190,"super.setElement(index, value);"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,191,if (shouldContract()) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,192,contract();
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,196,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,197,* @see org.apache.commons.math.ExpandableDoubleArray#setExpansionFactor(float)
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,199,public void setExpansionFactor(float expansionFactor) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,200,"checkContractExpand(getContractionCriteria(), expansionFactor);"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,201,super.setExpansionFactor(expansionFactor);
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,205,* The contraction criteria defines when the internal array will contract
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,206,* to store only the number of elements in the element array.  This
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,207,* contractionCriteria gaurantees that the internal storage array will
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,208,* never exceed this factor more than the space needed to store
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,209,* numElements.
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,211,* @return the contraction criteria used to reclaim memory when array is
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,212,*         empty
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,214,public float getContractionCriteria() {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,215,return contractionCriteria;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,219,* Sets the contraction criteria for this ExpandContractDoubleArray.
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,221,* @param new contraction criteria
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,223,public void setContractionCriteria(float contractionCriteria) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,224,"checkContractExpand(contractionCriteria, getExpansionFactor());"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,226,this.contractionCriteria = contractionCriteria;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,230,* Checks the expansion factor and the contraction criteria and throws an
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,231,* IllegalArgumentException if the contractionCriteria is less than the
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,232,* expansionCriteria
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,234,* @param expansionFactor
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,235,* @param contractionCriteria
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,237,"protected void checkContractExpand(float contractionCritera,"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,238,float expansionFactor) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,240,if (contractionCritera < expansionFactor) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,241,"String msg = ""Contraction criteria can never be smaller than "" +"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,242,"""the expansion factor.  This would lead to a never ending "" +"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,243,"""loop of expansion and contraction as a newly expanded "" +"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,244,"""internal storage array would immediately satisfy the "" +"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,245,"""criteria for contraction"";"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,246,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,249,if (contractionCriteria <= 1.0) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,250,"String msg = ""The contraction criteria must be a number larger "" +"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,251,"""than one.  If the contractionCriteria is less than or "" +"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,252,"""equal to one an endless loop of contraction and expansion "" +"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,253,"""would ensue as an internalArray.length == numElements "" +"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,254,"""would satisfy the contraction criteria"";"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,255,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,258,if (expansionFactor < 1.0) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,259,"String msg = ""The expansion factor must be a number greater "" +"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,260,"""than 1.0"";"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,261,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,265,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,266,* @see org.apache.commons.math.ExpandableDoubleArray#discardFrontElements(int)
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,268,public synchronized void discardFrontElements(int i) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,269,super.discardFrontElements(i);
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,270,if (shouldContract()) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,271,contract();
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,67, Returns the number of elements currently in the array.  Please note
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,68, that this is different from the length of the internal storage array.
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,69, @return number of elements
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,71,ublic abstract int getNumElements();
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,67,* Returns the number of elements currently in the array.  Please note
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,68,* that this is different from the length of the internal storage array.
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,69,* @return number of elements
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,71,int getNumElements();
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,74, Returns the element at the specified index
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,76, @param index index to fetch a value from
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,77, @return value stored at the specified index
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,79,ublic abstract double getElement(int index) throws NoSuchElementException;
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,73,//TODO: Throwing a NoSuchElementException might not be the right
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,74,"//thing to do, it may be more helpful to just throw ArrayOutOfBounds..."
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,82, Sets the element at the specified index.  This method will expand the internal storage array to
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,83, accomodate the insertion of a value at an index beyond the current capacity.
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,84, @param index index to store a value in
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,85, @param value value to store at the specified index
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,87,"ublic abstract void setElement(int index, double value);"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,77,* Returns the element at the specified index
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,79,* @param index index to fetch a value from
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,80,* @return value stored at the specified index
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,81,* @throws NoSuchElementException exception thrown if the array index
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,82,*         exceeds the known boundaries of this array.
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,85,double getElement(int index) throws NoSuchElementException;
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,90, Adds an element to the end of this expandable array
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,92, @return value to be added to end of array
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,94,ublic abstract void addElement(double value);
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,88,* Sets the element at the specified index.  This method will expand the
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,89,* internal storage array to accomodate the insertion of a value at an
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,90,* index beyond the current capacity.
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,91,* @param index index to store a value in
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,92,* @param value value to store at the specified index
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,94,"void setElement(int index, double value);"
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,97, Adds an element and moves the window of elements up one.  This
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,98," has the effect of a FIFO.  when you ""roll"" the array an element is removed"
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,99, from the array.  The return value of this function is the discarded double.
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,101," @return the value which has been discarded or ""pushed"" out of the array"
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,102, 	  by this rolling insert.
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,104,ublic abstract double addElementRolling(double value);
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,107, Returns a double[] of elements
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,109,ublic abstract double[] getElements();
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,112, Clear the double array
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,114,ublic abstract void clear();
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,97,* Adds an element to the end of this expandable array
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,99,* @param value to be added to end of array
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,101,void addElement(double value);
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,117, Discards values from the front of the list.  This function removes n elements from
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,118, the front of the array.
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,120, @param i number of elements to discard from the front of the array.
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,122,ublic abstract void discardFrontElements(int i);
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,125, Returns the minimum value stored in this array
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,127,ublic abstract double getMin();
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,104,* Adds an element and moves the window of elements up one.  This
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,105,"* has the effect of a FIFO.  when you ""roll"" the array an element is"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,106,* removed from the array.  The return value of this function is the
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,107,* discarded double.
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,109,* @param value the value to be added to the array
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,110,"* @return the value which has been discarded or ""pushed"" out of the array"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,111,*         by this rolling insert.
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,113,double addElementRolling(double value);
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,130, Returns the maximum value stored in this array
False,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,132,ublic abstract double getMax();
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,117,* Returns a double[] of elements
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,119,* @return all elements added to the array
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,121,double[] getElements();
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,124,* Clear the double array
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,126,void clear();
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,129,* Discards values from the front of the list.  This function removes n
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,130,* elements from the front of the array.
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,132,*@param i number of elements to discard from the front of the array.
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,134,void discardFrontElements(int i);
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,137,* Returns the minimum value stored in this array
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,139,* @return minimum value contained in this array
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,141,double getMin();
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,144,* Returns the maximum value stored in this array
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,146,* @return maximum value contained in this array
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,148,double getMax();
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,66,/ This is the internal storage array.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,67,rotected double[] internalArray;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,69,/ Number of elements in the array
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,70,rotected int numElements = 0;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,72,/ Keeps track of a starting index
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,73,rotected int startIndex = 0;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,75,/ The initial capacity of the array.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,76,/ Initial capacity is not exposed as a property as it is only meaningful
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,77,/ when passed to a constructor.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,78,rotected int initialCapacity = 16;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,80,"/ The expand factor of the array.  When the array need to be expanded, the new array size"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,81,/ will be internalArray.length * expandFactor
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,82,rotected float expansionFactor = 2.0f;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,85, Create an expandable double array with the
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,86, default initial capactiy of 16 and an expansion factor of 2.00
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,88,ublic ExpandableDoubleArray() {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,89,nternalArray = new double[initialCapacity];
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,93, Create an expandable double array with the
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,94, specified initial capacity and the defult expansion factor of 2.00
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,96, @param initialCapacity The initial size of the internal storage array
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,98,ublic ExpandableDoubleArray(int initialCapacity) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,99,etInitialCapacity(initialCapacity);
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,100,nternalArray = new double[this.initialCapacity];
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,104, Create an expandable double array with the
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,105, specificed initial capacity and expand factor.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,107, @param initialCapacity The initial size of the internal storage array
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,108, @param expansionFactor the array will be expanded based on this parameter
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,110,"ublic ExpandableDoubleArray(int initialCapacity, float expansionFactor) {"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,111,etInitialCapacity( initialCapacity );
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,112,etExpansionFactor(expansionFactor);
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,113,his.initialCapacity = initialCapacity;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,114,nternalArray = new double[initialCapacity];
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,118, The expansion factor controls the size of a new aray when an array needs to be expanded.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,119," When a value is inserted into a full array, the new array size is calculated as the"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,120, current array size times this expansion factor.  The default expansion factor is 2.0
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,122, @return the expansion factor of this expandable double array
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,124,ublic float getExpansionFactor() {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,125,eturn expansionFactor;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,129, Sets the expansion factor for this expandable double array.  The expansion factor will
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,130, affect the next expansion of this array.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,132, @param expansionFactor the expansion factor of this array
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,134,ublic void setExpansionFactor(float expansionFactor) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,136,"/ The expansion factor *must* be larger than 1.0, otherwise we'll have an inconsistency"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,137,/ upon expansion we'll start shrinking which will lead to ArrayOutOfBound exceptions.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,138,f (expansionFactor > 1.0) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,139,his.expansionFactor = expansionFactor;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,140, else {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,141,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,142,"The expansion factor must be a number greater than"" + ""1.0"");"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,147, Sets the initial capacity
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,149, @param initialCapacity
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,151,ublic void setInitialCapacity(int initialCapacity) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,152,f (initialCapacity > 0) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,153,his.initialCapacity = initialCapacity;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,154, else {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,155,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,156,"The initial capacity supplied: """
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,157, initialCapacity
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,158," ""must be a positive integer"");"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,163, Returns the internal storage array
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,165, @return the internal storage array used by this object
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,167,rotected double[] getValues() {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,168,eturn (internalArray);
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,172, Returns the number of elements currently in the array.  Please note
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,173, that this is different from the length of the internal storage array.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,174, @return number of elements
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,176,ublic int getNumElements() {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,177,eturn (numElements);
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,181, This function allows you to control the number of elements contained in this
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,182," array, and can be used to ""throw"" out the last n values in an array.  This"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,183, feature is mainly targetted at the subclasses of this array class.  Note
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,184, that this function will also expand the internal array as needed.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,186, @param a new number of elements
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,188,ublic synchronized void setNumElements(int i) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,190,/ If index is negative thrown an error
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,191,f( i <  0 ) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,192,"hrow new IllegalArgumentException( ""Number of elements must be zero or a positive integer"");"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,195,"/ Test the new num elements, check to see if the array needs to be expanded to"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,196,/ accomodate this new number of elements
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,197,f( (startIndex + i) > internalArray.length ) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,198,xpandTo( startIndex + i );
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,201,/ Set the new number of elements to new value
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,202,umElements = i;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,207, Returns the element at the specified index
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,209, @param index index to fetch a value from
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,210, @return value stored at the specified index
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,212,ublic double getElement(int index) throws NoSuchElementException {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,213,ouble value = Double.NaN;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,214,f (index >= numElements) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,215,hrow new NoSuchElementException(
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,216,"The index specified: """
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,217, index
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,218," "" is larger than the """
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,219," ""current number of elements"");"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,220, else if (index >= 0) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,221,alue = internalArray[startIndex + index];
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,222, else {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,223,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,224,"Elements cannot be retrieved from a negative array index"");"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,226,eturn value;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,230, Sets the element at the specified index.  This method will expand the internal storage array to
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,231, accomodate the insertion of a value at an index beyond the current capacity.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,232, @param index index to store a value in
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,233, @param value value to store at the specified index
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,235,"ublic synchronized void setElement(int index, double value) {"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,237,f( index < 0 ) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,238,"hrow new IllegalArgumentException( ""Cannot set an element at a negative index"");"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,241,f ( (startIndex + index) >= internalArray.length) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,242,xpandTo( startIndex + (index + 1));
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,243,umElements = index + 1;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,245,nternalArray[startIndex + index] = value;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,249, Expands the internal storage array to the specified size.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,251, @param size Size of the new internal storage array
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,253,rivate synchronized void expandTo(int size) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,254,ouble[] tempArray = new double[size];
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,255,/ Copy and swap
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,256,"ystem.arraycopy(internalArray,0,tempArray,0,internalArray.length);"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,257,nternalArray = tempArray;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,261, Expands the internal storage array using the expansion factor
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,263,rotected synchronized void expand() {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,265,"/ notice the use of Math.ceil(), this gaurantees that we will always have an array of at least"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,266,/ currentSize + 1.   Assume that the current initial capacity is 1 and the expansion factor
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,267,/ is 1.000000000000000001.  The newly calculated size will be rounded up to 2 after
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,268,/ the multiplication is performed.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,269,nt newSize = (int) Math.ceil(internalArray.length * expansionFactor);
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,270,ouble[] tempArray =
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,271,ew double[newSize];
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,273,/ Copy and swap
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,274,"ystem.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,275,nternalArray = tempArray;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,279, Adds an element to the end of this expandable array
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,281, @return value to be added to end of array
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,283,ublic synchronized void addElement(double value) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,284,umElements++;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,285,f ( (startIndex + numElements) > internalArray.length) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,286,xpand();
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,288,nternalArray[startIndex + (numElements - 1)] = value;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,292, Adds an element and moves the window of elements up one.  This
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,293," has the effect of a FIFO.  when you ""roll"" the array an element is removed"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,294, from the array.  The return value of this function is the discarded double.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,296," @return the value which has been discarded or ""pushed"" out of the array"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,297, 	  by this rolling insert.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,299,ublic synchronized double addElementRolling(double value) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,300,ouble discarded = internalArray[startIndex];
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,302,f ( (startIndex + (numElements+1) ) > internalArray.length) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,303,xpand();
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,305,/ Increment the start index
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,306,tartIndex += 1;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,66,// This is the internal storage array.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,67,protected double[] internalArray;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,69,// Number of elements in the array
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,70,protected int numElements = 0;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,72,// Keeps track of a starting index
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,73,protected int startIndex = 0;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,75,// The initial capacity of the array.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,76,// Initial capacity is not exposed as a property as it is only meaningful
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,77,// when passed to a constructor.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,78,protected int initialCapacity = 16;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,80,"// The expand factor of the array.  When the array need to be expanded,"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,81,// the new array size will be internalArray.length * expandFactor
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,82,protected float expansionFactor = 2.0f;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,85,* Create an expandable double array with the
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,86,* default initial capactiy of 16 and an expansion factor of 2.00
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,88,public ExpandableDoubleArray() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,89,internalArray = new double[initialCapacity];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,93,* Create an expandable double array with the
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,94,* specified initial capacity and the defult expansion factor of 2.00
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,96,* @param initialCapacity The initial size of the internal storage array
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,98,public ExpandableDoubleArray(int initialCapacity) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,99,setInitialCapacity(initialCapacity);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,100,internalArray = new double[this.initialCapacity];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,104,* Create an expandable double array with the
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,105,* specificed initial capacity and expand factor.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,107,* @param initialCapacity The initial size of the internal storage array
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,108,* @param expansionFactor the array will be expanded based on this
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,109,*                        parameter
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,111,"public ExpandableDoubleArray(int initialCapacity, float expansionFactor) {"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,112,setInitialCapacity(initialCapacity);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,113,setExpansionFactor(expansionFactor);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,114,this.initialCapacity = initialCapacity;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,115,internalArray = new double[initialCapacity];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,119,* The expansion factor controls the size of a new aray when an array
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,120,"* needs to be expanded. When a value is inserted into a full array, the"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,121,* new array size is calculated as the current array size times this
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,122,* expansion factor.  The default expansion factor is 2.0
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,124,* @return the expansion factor of this expandable double array
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,126,public float getExpansionFactor() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,127,return expansionFactor;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,131,* Sets the expansion factor for this expandable double array.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,132,* The expansion factor will affect the next expansion of this array.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,134,* @param expansionFactor the expansion factor of this array
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,136,public void setExpansionFactor(float expansionFactor) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,138,"// The expansion factor *must* be larger than 1.0, otherwise we'll"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,139,// have an inconsistency upon expansion we'll start shrinking which
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,140,// will lead to ArrayOutOfBound exceptions.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,141,if (expansionFactor > 1.0) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,142,this.expansionFactor = expansionFactor;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,143,} else {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,144,"String msg = ""The expansion factor must be a number greater "" +"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,145,"""than 1.0"";"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,146,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,151,* Sets the initial capacity
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,153,* @param initialCapacity
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,155,public void setInitialCapacity(int initialCapacity) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,156,if (initialCapacity > 0) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,157,this.initialCapacity = initialCapacity;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,158,} else {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,159,"String msg = ""The initial capacity supplied: "" + initialCapacity +"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,160,"""must be a positive integer"";"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,161,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,166,* Returns the internal storage array
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,168,* @return the internal storage array used by this object
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,170,protected double[] getValues() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,171,return (internalArray);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,175,* Returns the number of elements currently in the array.  Please note
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,176,* that this is different from the length of the internal storage array.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,177,* @return number of elements
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,179,public int getNumElements() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,180,return (numElements);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,184,* This function allows you to control the number of elements contained
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,185,"* in this array, and can be used to ""throw"" out the last n values in an"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,186,* array.  This feature is mainly targetted at the subclasses of this
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,187,* array class.  Note that this function will also expand the internal
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,188,* array as needed.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,190,* @param a new number of elements
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,192,public synchronized void setNumElements(int i) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,194,// If index is negative thrown an error
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,195,if (i <  0) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,196,"String msg = ""Number of elements must be zero or a positive "" +"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,197,"""integer"";"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,198,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,201,"// Test the new num elements, check to see if the array needs to be"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,202,// expanded to accomodate this new number of elements
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,203,if ((startIndex + i) > internalArray.length) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,204,expandTo(startIndex + i);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,207,// Set the new number of elements to new value
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,208,numElements = i;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,212,* Returns the element at the specified index
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,214,* @param index index to fetch a value from
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,215,* @return value stored at the specified index
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,217,public double getElement(int index) throws NoSuchElementException {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,218,double value = Double.NaN;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,219,if (index >= numElements) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,220,"String msg = ""The index specified: "" + index +"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,221,""" is larger than the current number of elements"";"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,222,throw new NoSuchElementException(msg);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,223,} else if (index >= 0) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,224,value = internalArray[startIndex + index];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,225,} else {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,226,"String msg = ""Elements cannot be retrieved from a negative "" +"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,227,"""array index"";"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,228,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,230,return value;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,234,* Sets the element at the specified index.  This method will expand the
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,235,* internal storage array to accomodate the insertion of a value at an
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,236,* index beyond the current capacity.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,238,* @param index index to store a value in
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,239,* @param value value to store at the specified index
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,241,"public synchronized void setElement(int index, double value) {"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,308,/ Add the new value
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,309,nternalArray[startIndex + (numElements - 1)] = value;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,311,eturn discarded;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,316, Notice the package scope on this method.   This method is simply here for the JUnit
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,317," test, it allows us check if the expansion is working properly after a number of expansions.  This"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,318, is not meant to be a part of the public interface of this class.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,320, @return the length of the internal storage array.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,322,nt getInternalLength() {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,323,eturn (internalArray.length);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,243,if (index < 0) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,244,"String msg = ""Cannot set an element at a negative index"";"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,245,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,248,if ((startIndex + index) >= internalArray.length) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,249,expandTo(startIndex + (index + 1));
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,250,numElements = index + 1;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,252,internalArray[startIndex + index] = value;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,256,* Expands the internal storage array to the specified size.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,258,* @param size Size of the new internal storage array
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,260,private synchronized void expandTo(int size) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,261,double[] tempArray = new double[size];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,262,// Copy and swap
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,263,"System.arraycopy(internalArray,0,tempArray,0,internalArray.length);"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,264,internalArray = tempArray;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,268,* Expands the internal storage array using the expansion factor
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,270,protected synchronized void expand() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,272,"// notice the use of Math.ceil(), this gaurantees that we will always"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,273,// have an array of at least currentSize + 1.   Assume that the
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,274,// current initial capacity is 1 and the expansion factor
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,275,// is 1.000000000000000001.  The newly calculated size will be
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,276,// rounded up to 2 after the multiplication is performed.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,277,int newSize = (int) Math.ceil(internalArray.length * expansionFactor);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,278,double[] tempArray = new double[newSize];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,280,// Copy and swap
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,281,"System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,282,internalArray = tempArray;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,286,* Adds an element to the end of this expandable array
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,288,* @return value to be added to end of array
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,290,public synchronized void addElement(double value) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,291,numElements++;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,292,if ((startIndex + numElements) > internalArray.length) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,293,expand();
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,295,internalArray[startIndex + (numElements - 1)] = value;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,299,* Adds an element and moves the window of elements up one.  This
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,300,"* has the effect of a FIFO.  when you ""roll"" the array an element is"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,301,* removed from the array.  The return value of this function is the
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,302,* discarded double.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,304,"* @return the value which has been discarded or ""pushed"" out of the array"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,305,* 	  by this rolling insert.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,307,public synchronized double addElementRolling(double value) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,308,double discarded = internalArray[startIndex];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,310,if ((startIndex + (numElements+1)) > internalArray.length) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,311,expand();
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,313,// Increment the start index
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,314,startIndex += 1;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,316,// Add the new value
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,317,internalArray[startIndex + (numElements - 1)] = value;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,319,return discarded;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,323,* Notice the package scope on this method.   This method is simply here
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,324,"* for the JUnit test, it allows us check if the expansion is working"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,325,* properly after a number of expansions.  This is not meant to be a part
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,326,* of the public interface of this class.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,328,* @return the length of the internal storage array.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,330,int getInternalLength() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,331,return (internalArray.length);
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,327," Clear the array, reset the size to the initialCapacity and the number of elements to zero"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,329,ublic synchronized void clear() {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,330,umElements = 0;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,331,nternalArray = new double[initialCapacity];
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,335, Discards values from the front of the list.  This function removes n elements from
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,336, the front of the array.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,338, @param i number of elements to discard from the front of the array.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,340,ublic synchronized void discardFrontElements(int i) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,342,f( i > numElements ) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,343,"hrow new IllegalArgumentException( ""Cannot discard more elements than are"" +"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,345, else if( i < 0 ) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,346,"hrow new IllegalArgumentException( ""Cannot discard a negative number"" +"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,348, else {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,349,"/ ""Subtract"" this number of discarded from numElements"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,350,umElements -= i;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,351,tartIndex += i;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,355,* (non-Javadoc)
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,356, @see org.apache.commons.math.DoubleArray#getElements()
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,358,ublic double[] getElements() {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,359,ouble[] elementArray = new double[numElements];
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,360,"ystem.arraycopy(internalArray, startIndex, elementArray, 0, numElements);"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,361,eturn elementArray;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,364,* (non-Javadoc)
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,365, @see org.apache.commons.math.DoubleArray#getMax()
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,367,ublic double getMax() {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,368,ouble max = internalArray[startIndex];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,337,"* Clear the array, reset the size to the initialCapacity and the number"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,338,* of elements to zero.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,340,public synchronized void clear() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,341,numElements = 0;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,342,internalArray = new double[initialCapacity];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,346,* Discards values from the front of the list.  This function removes n
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,347,* elements from the front of the array.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,349,* @param i number of elements to discard from the front of the array.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,351,public synchronized void discardFrontElements(int i) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,353,if (i > numElements) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,354,"String msg = ""Cannot discard more elements than are"" +"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,355,"""contained in this array."";"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,356,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,357,} else if (i < 0) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,358,"String msg = ""Cannot discard a negative number of elements."";"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,359,throw new IllegalArgumentException(msg);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,360,} else {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,361,"// ""Subtract"" this number of discarded from numElements"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,362,numElements -= i;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,363,startIndex += i;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,367,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,368,* @see org.apache.commons.math.DoubleArray#getElements()
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,370,public double[] getElements() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,371,double[] elementArray = new double[numElements];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,372,"System.arraycopy(internalArray, startIndex,"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,373,"elementArray, 0, numElements);"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,374,return elementArray;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,377,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,378,* @see org.apache.commons.math.DoubleArray#getMax()
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,380,public double getMax() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,381,double max = internalArray[startIndex];
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,370,or( int i = startIndex + 1; i < (numElements + startIndex); i++) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,371,f( internalArray[i] > max ) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,372,ax = internalArray[i];
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,376,eturn max;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,379,* (non-Javadoc)
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,380, @see org.apache.commons.math.DoubleArray#getMin()
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,382,ublic double getMin() {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,383,ouble min = internalArray[startIndex];
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,385,or( int i = startIndex + 1; i < (numElements + startIndex); i++) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,386,f( internalArray[i] < min ) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,387,in = internalArray[i];
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,391,eturn min;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,383,for (int i = startIndex + 1; i < (numElements + startIndex); i++) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,384,if (internalArray[i] > max) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,385,max = internalArray[i];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,389,return max;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,392,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,393,* @see org.apache.commons.math.DoubleArray#getMin()
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,395,public double getMin() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,396,double min = internalArray[startIndex];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,398,for (int i = startIndex + 1; i < (numElements + startIndex); i++) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,399,if (internalArray[i] < min) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,400,min = internalArray[i];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,404,return min;
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,68,ouble[] internalArray;
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,70,nt size = 0;
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,71,nt nextAdd = 0;
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,72,nt maxElements = 0;
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,74,ublic FixedDoubleArray(int maxElements) {
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,75,his.maxElements = maxElements;
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,76,nternalArray = new double[maxElements];
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,79,* (non-Javadoc)
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,80, @see org.apache.commons.math.DoubleArray#getNumElements()
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,82,ublic int getNumElements() {
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,83,eturn size;
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,86,* (non-Javadoc)
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,87, @see org.apache.commons.math.DoubleArray#getElement(int)
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,89,ublic double getElement(int index) throws NoSuchElementException {
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,90,f( index > (size-1) ) {
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,91,"hrow new ArrayIndexOutOfBoundsException(""Attempted to retrieve an element outside of"" +"
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,93, else {
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,94,eturn internalArray[index];
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,69,double[] internalArray;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,71,int size = 0;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,72,int nextAdd = 0;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,73,int maxElements = 0;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,75,public FixedDoubleArray(int maxElements) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,76,this.maxElements = maxElements;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,77,internalArray = new double[maxElements];
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,80,/* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,81,* @see org.apache.commons.math.DoubleArray#getNumElements()
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,83,public int getNumElements() {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,84,return size;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,87,/* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,88,* @see org.apache.commons.math.DoubleArray#getElement(int)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,90,public double getElement(int index) throws NoSuchElementException {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,91,if (index > (size-1)) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,92,"String msg = ""Attempted to retrieve an element outside of "" +"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,93,"""the element array"";"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,94,throw new ArrayIndexOutOfBoundsException(msg);
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,95,} else {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,96,return internalArray[index];
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,100,/* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,101,"* @see org.apache.commons.math.DoubleArray#setElement(int, double)"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,103,"public void setElement(int index, double value) {"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,104,if (index > (size-1)) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,105,"String msg = ""Attempted to set an element outside of"" +"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,106,"""the element array"";"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,107,throw new ArrayIndexOutOfBoundsException(msg);
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,108,} else {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,109,internalArray[index] = value;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,113,/* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,114,* @see org.apache.commons.math.DoubleArray#addElement(double)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,116,public void addElement(double value) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,117,if (size < internalArray.length) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,118,size++;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,120,internalArray[nextAdd] = value;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,122,nextAdd++;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,123,nextAdd = nextAdd % (maxElements);
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,125,} else {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,126,"String msg = ""Attempted to add a value to an array of fixed "" +"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,127,"""size, please use addElementRolling to avoid this exception"";"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,128,throw new ArrayIndexOutOfBoundsException(msg);
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,98,* (non-Javadoc)
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,99," @see org.apache.commons.math.DoubleArray#setElement(int, double)"
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,101,"ublic void setElement(int index, double value) {"
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,102,f( index > (size-1) ) {
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,103,"hrow new ArrayIndexOutOfBoundsException(""Attempted to set an element outside of"" +"
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,104,"the element array"");"
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,105, else {
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,106,nternalArray[index] = value;
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,110,* (non-Javadoc)
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,111, @see org.apache.commons.math.DoubleArray#addElement(double)
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,113,ublic void addElement(double value) {
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,114,f( size < internalArray.length ) {
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,115,ize++;
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,117,nternalArray[nextAdd] = value;
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,119,extAdd++;
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,120,extAdd = nextAdd % (maxElements);
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,122, else {
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,123,"hrow new ArrayIndexOutOfBoundsException(""Attempted to add a value to an array of fixed size, please "" +"
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,129,* (non-Javadoc)
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,130, @see org.apache.commons.math.DoubleArray#addElementRolling(double)
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,132,ublic double addElementRolling(double value) {
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,133,f( size < internalArray.length ) {
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,134,ize++;
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,137,ouble discarded = internalArray[nextAdd];
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,139,nternalArray[nextAdd] = value;
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,141,extAdd++;
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,142,extAdd = nextAdd % maxElements;
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,144,"/ but we return the value which was ""replaced"""
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,145,eturn( discarded );
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,148,* (non-Javadoc)
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,149, @see org.apache.commons.math.DoubleArray#getElements()
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,151,ublic double[] getElements() {
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,152,ouble[] copy = new double[internalArray.length];
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,153,"ystem.arraycopy(internalArray, 0, copy, 0, internalArray.length);"
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,154,eturn copy;
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,157,* (non-Javadoc)
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,158, @see org.apache.commons.math.DoubleArray#clear()
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,160,ublic void clear() {
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,161,ize = 0;
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,162,extAdd = 0;
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,163,nternalArray = new double[maxElements];
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,166,* (non-Javadoc)
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,167, @see org.apache.commons.math.DoubleArray#discardFrontElements(int)
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,169,ublic void discardFrontElements(int i) {
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,170,"/ TODO: AH! implemented there is not concept of ""front"""
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,171,/ in an array that discards values when rolling.....  anyone?
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,172,"hrow new RuntimeException(""Discarding front element not supported in FixedDoubleArray"");"
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,175,* (non-Javadoc)
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,176, @see org.apache.commons.math.DoubleArray#getMin()
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,178,ublic double getMin() {
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,179,ouble min = internalArray[0];
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,180,or( int i = 1; i < size; i++) {
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,181,f( internalArray[i] < min ) {
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,182,in = internalArray[i];
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,185,eturn min;
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,188,* (non-Javadoc)
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,189, @see org.apache.commons.math.DoubleArray#getMax()
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,191,ublic double getMax() {
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,192,ouble max = internalArray[0];
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,193,or( int i = 1; i < size; i++) {
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,194,f( internalArray[i] > max ) {
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,195,ax = internalArray[i];
False,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,198,eturn max;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,133,/* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,134,* @see org.apache.commons.math.DoubleArray#addElementRolling(double)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,136,public double addElementRolling(double value) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,137,if (size < internalArray.length) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,138,size++;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,141,double discarded = internalArray[nextAdd];
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,143,internalArray[nextAdd] = value;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,145,nextAdd++;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,146,nextAdd = nextAdd % maxElements;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,148,"// but we return the value which was ""replaced"""
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,149,return (discarded);
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,152,/* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,153,* @see org.apache.commons.math.DoubleArray#getElements()
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,155,public double[] getElements() {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,156,double[] copy = new double[internalArray.length];
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,157,"System.arraycopy(internalArray, 0, copy, 0, internalArray.length);"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,158,return copy;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,161,/* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,162,* @see org.apache.commons.math.DoubleArray#clear()
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,164,public void clear() {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,165,size = 0;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,166,nextAdd = 0;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,167,internalArray = new double[maxElements];
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,170,/* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,171,* @see org.apache.commons.math.DoubleArray#discardFrontElements(int)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,173,public void discardFrontElements(int i) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,174,"// TODO: AH! implemented there is not concept of ""front"""
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,175,// in an array that discards values when rolling.....  anyone?
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,176,"String msg = ""Discarding front element not supported in "" +"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,177,"""FixedDoubleArray"";"
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,178,throw new RuntimeException(msg);
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,181,/* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,182,* @see org.apache.commons.math.DoubleArray#getMin()
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,184,public double getMin() {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,185,double min = internalArray[0];
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,186,for (int i = 1; i < size; i++) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,187,if (internalArray[i] < min) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,188,min = internalArray[i];
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,191,return min;
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,194,/* (non-Javadoc)
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,195,* @see org.apache.commons.math.DoubleArray#getMax()
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,197,public double getMax() {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,198,double max = internalArray[0];
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,199,for (int i = 1; i < size; i++) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,200,if (internalArray[i] > max) {
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,201,max = internalArray[i];
True,src/java/org/apache/commons/math/FixedDoubleArray.java,src/java/org/apache/commons/math/FixedDoubleArray.java,204,return max;
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,64,"/ Holds the value of the windowSize, initial windowSize is the constant"
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,65,/ Univariate.INFINITE_WINDOW
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,66,rivate int windowSize = Univariate.INIFINTE_WINDOW;
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,68,/ Holds a reference to a list - GENERICs are going to make
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,69,/ out lives easier here as we could only accept List<Number>
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,70,ist list;
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,72,ublic ListUnivariateImpl( List list ) {
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,73,his.list = list;
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,77,* (non-Javadoc)
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,78, @see org.apache.commons.math.StoreUnivariate#getValues()
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,80,ublic double[] getValues() {
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,82,"/ If we've got a windowSize, we might not care about the entire list."
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,83,ist effectiveList = list;
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,85,/ If the window size is not INIFINITE_WINDOW AND
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,86,"/ the current list is larger that the window size, we need to"
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,87,/ take into account only the last n elements of the list
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,88,/ as definied by windowSize
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,89,f( windowSize != Univariate.INIFINTE_WINDOW &&
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,90,indowSize < list.size() ) {
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,91,"ffectiveList = list.subList( (list.size() - 1) - windowSize, (list.size()-1));"
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,94,/ Create an array to hold all values
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,95,ouble[] copiedArray = new double[effectiveList.size()];
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,97,nt i = 0;
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,98,terator it = effectiveList.iterator();
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,99,hile( it.hasNext() ) {
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,100,umber n = (Number) it.next();
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,101,opiedArray[i] = n.doubleValue();
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,102,++;
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,105,eturn copiedArray;
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,108,* (non-Javadoc)
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,109, @see org.apache.commons.math.StoreUnivariate#getElement(int)
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,111,ublic double getElement(int index) {
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,113,ouble value = Double.NaN;
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,115,f( windowSize != Univariate.INIFINTE_WINDOW &&
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,116,indowSize < list.size() ) {
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,117,umber n = (Number) list.get( ( (list.size() - 1) - windowSize ) + index ) ;
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,118,alue = n.doubleValue();
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,119, else {
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,120,umber n = (Number) list.get(index);
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,121,alue = n.doubleValue();
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,124,eturn value;
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,127,* (non-Javadoc)
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,128, @see org.apache.commons.math.Univariate#getN()
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,130,ublic double getN() {
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,131,ouble N = 0.0;
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,133,f( windowSize != Univariate.INIFINTE_WINDOW ) {
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,134,f( list.size() > windowSize ) {
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,135, = windowSize;
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,136, else {
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,137, = list.size();
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,139, else {
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,140, = list.size();
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,143,eturn N;
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,146,* (non-Javadoc)
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,147, @see org.apache.commons.math.Univariate#addValue(double)
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,149,ublic void addValue(double v) {
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,150,ist.add( new Double(v));
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,153,* (non-Javadoc)
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,154, @see org.apache.commons.math.Univariate#clear()
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,156,ublic void clear() {
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,157,ist.clear();
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,160,* (non-Javadoc)
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,161, @see org.apache.commons.math.Univariate#getWindowSize()
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,163,ublic int getWindowSize() {
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,164,eturn windowSize;
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,167,* (non-Javadoc)
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,168, @see org.apache.commons.math.Univariate#setWindowSize(int)
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,170,ublic void setWindowSize(int windowSize) {
False,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,171,his.windowSize = windowSize;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,64,"// Holds the value of the windowSize, initial windowSize is the constant"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,65,// Univariate.INFINITE_WINDOW
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,66,private int windowSize = Univariate.INIFINTE_WINDOW;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,68,// Holds a reference to a list - GENERICs are going to make
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,69,// out lives easier here as we could only accept List<Number>
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,70,List list;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,72,public ListUnivariateImpl(List list) {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,73,this.list = list;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,76,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,77,* @see org.apache.commons.math.StoreUnivariate#getValues()
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,79,public double[] getValues() {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,81,"// If we've got a windowSize, we might not care about the entire list."
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,82,List effectiveList = list;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,84,// If the window size is not INIFINITE_WINDOW AND
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,85,"// the current list is larger that the window size, we need to"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,86,// take into account only the last n elements of the list
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,87,// as definied by windowSize
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,88,if (windowSize != Univariate.INIFINTE_WINDOW &&
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,89,windowSize < list.size()) {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,90,"effectiveList = list.subList((list.size() - 1) - windowSize,"
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,91,(list.size()-1));
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,94,// Create an array to hold all values
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,95,double[] copiedArray = new double[effectiveList.size()];
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,97,int i = 0;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,98,Iterator it = effectiveList.iterator();
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,99,while(it.hasNext()) {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,100,Number n = (Number) it.next();
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,101,copiedArray[i] = n.doubleValue();
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,102,i++;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,105,return copiedArray;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,108,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,109,* @see org.apache.commons.math.StoreUnivariate#getElement(int)
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,111,public double getElement(int index) {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,113,double value = Double.NaN;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,114,if (windowSize != Univariate.INIFINTE_WINDOW &&
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,115,windowSize < list.size()) {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,116,Number n = (Number) list.get(((list.size() - 1) - windowSize) +
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,117,index) ;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,118,value = n.doubleValue();
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,119,} else {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,120,Number n = (Number) list.get(index);
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,121,value = n.doubleValue();
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,123,return value;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,126,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,127,* @see org.apache.commons.math.Univariate#getN()
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,129,public double getN() {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,130,double N = 0.0;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,132,if (windowSize != Univariate.INIFINTE_WINDOW) {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,133,if (list.size() > windowSize) {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,134,N = windowSize;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,135,} else {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,136,N = list.size();
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,138,} else {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,139,N = list.size();
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,141,return N;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,144,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,145,* @see org.apache.commons.math.Univariate#addValue(double)
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,147,public void addValue(double v) {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,148,list.add(new Double(v));
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,151,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,152,* @see org.apache.commons.math.Univariate#clear()
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,154,public void clear() {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,155,list.clear();
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,158,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,159,* @see org.apache.commons.math.Univariate#getWindowSize()
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,161,public int getWindowSize() {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,162,return windowSize;
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,165,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,166,* @see org.apache.commons.math.Univariate#setWindowSize(int)
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,168,public void setWindowSize(int windowSize) {
True,src/java/org/apache/commons/math/ListUnivariateImpl.java,src/java/org/apache/commons/math/ListUnivariateImpl.java,169,this.windowSize = windowSize;
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,67, A LEPTOKURTIC set has a positive kurtosis (a high peak)
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,69,ublic static int LEPTOKURTIC = 1;
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,72, A MESOKURTIC set has a kurtosis of 0 - it is a normal distribution
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,74,ublic static int MESOKURTIC = 0;
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,77," A PLATYKURTIC set has a negative kurtosis (a flat ""peak"")"
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,79,ublic static int PLATYKURTIC = -1;
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,67,* A LEPTOKURTIC set has a positive kurtosis (a high peak)
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,69,public static int LEPTOKURTIC = 1;
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,82, Returns the mode of the values that have been added.  The mode is
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,83, the element which occurs with the most frequency
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,84, @return the mode
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,86,ublic abstract double getMode();
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,72,* A MESOKURTIC set has a kurtosis of 0 - it is a normal distribution
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,74,public static int MESOKURTIC = 0;
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,89, Returns the skewness of a given distribution.  Skewness is a measure of the
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,90, assymetry of a given distribution.
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,92, @return The skewness of this distribution
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,94,ublic abstract double getSkewness();
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,77,"* A PLATYKURTIC set has a negative kurtosis (a flat ""peak"")"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,79,public static int PLATYKURTIC = -1;
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,97," Kurtosis is a measure of the ""peakedness"" of a distribution"
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,99, @return the mode
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,101,ublic abstract double getKurtosis();
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,104," Returns the Kurtosis ""classification"" a distribution can be leptokurtic (high peak), platykurtic (flat peak),"
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,105, or mesokurtic (zero kurtosis).
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,107," @return A static constant defined in this interface, StoredDeviation.LEPTOKURITC,"
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,108," 			    StoredDeviation.PLATYKURTIC, or StoredDeviation.MESOKURTIC"
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,110,ublic abstract int getKurtosisClass();
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,113, Returns the current set of values in an array of double primitives.  The order of addition is preserved
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,115, @return returns the current set of numbers in the order in which they were added to this set
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,117,ublic abstract double[] getValues();
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,120, Returns the element at the specified index
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,122, @return return the element at the specified index
False,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,124,ublic abstract double getElement(int index);
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,82,* Returns the mode of the values that have been added.  The mode is
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,83,* the element which occurs with the most frequency
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,84,* @return the mode
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,86,public abstract double getMode();
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,89,* Returns the skewness of a given distribution.  Skewness is a
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,90,* measure of the assymetry of a given distribution.
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,92,* @return The skewness of this distribution
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,94,public abstract double getSkewness();
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,97,"* Kurtosis is a measure of the ""peakedness"" of a distribution"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,99,* @return the mode
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,101,public abstract double getKurtosis();
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,104,"* Returns the Kurtosis ""classification"" a distribution can be"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,105,"* leptokurtic (high peak), platykurtic (flat peak),"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,106,* or mesokurtic (zero kurtosis).
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,108,"* @return A static constant defined in this interface,"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,109,"*         StoredDeviation.LEPTOKURITC, StoredDeviation.PLATYKURTIC, or"
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,110,*         StoredDeviation.MESOKURTIC
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,112,public abstract int getKurtosisClass();
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,115,* Returns the current set of values in an array of double primitives.
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,116,* The order of addition is preserved
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,118,* @return returns the current set of numbers in the order in which they
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,119,*         were added to this set
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,121,public abstract double[] getValues();
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,124,* Returns the element at the specified index
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,126,* @return return the element at the specified index
True,src/java/org/apache/commons/math/StoreUnivariate.java,src/java/org/apache/commons/math/StoreUnivariate.java,128,public abstract double getElement(int index);
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,61,/ Use an internal double array
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,62,oubleArray eDA;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,64,/ Store the windowSize
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,65,rivate int windowSize = Univariate.INIFINTE_WINDOW;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,61,// Use an internal double array
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,62,DoubleArray eDA;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,67,ublic StoreUnivariateImpl() {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,68,/ A contractable double array is used.  memory is reclaimed when
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,69,/ the storage of the array becomes too empty.
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,70,DA = new ContractableDoubleArray();
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,64,// Store the windowSize
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,65,private int windowSize = Univariate.INIFINTE_WINDOW;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,73,* (non-Javadoc)
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,74, @see org.apache.commons.math.StoreUnivariate#getValues()
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,76,ublic double[] getValues() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,67,public StoreUnivariateImpl() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,68,// A contractable double array is used.  memory is reclaimed when
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,69,// the storage of the array becomes too empty.
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,70,eDA = new ContractableDoubleArray();
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,78,ouble[] copiedArray = new double[ eDA.getNumElements() ];
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,79,"ystem.arraycopy( eDA.getElements(), 0, copiedArray, 0, eDA.getNumElements());"
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,80,eturn copiedArray;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,73,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,74,* @see org.apache.commons.math.StoreUnivariate#getValues()
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,76,public double[] getValues() {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,83,* (non-Javadoc)
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,84, @see org.apache.commons.math.StoreUnivariate#getElement(int)
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,86,ublic double getElement(int index) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,87,eturn eDA.getElement(index);
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,90,* (non-Javadoc)
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,91, @see org.apache.commons.math.Univariate#getN()
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,93,ublic double getN() {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,94,eturn eDA.getNumElements();
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,97,* (non-Javadoc)
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,98, @see org.apache.commons.math.Univariate#addValue(double)
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,100,ublic synchronized void addValue(double v) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,101,f( windowSize != Univariate.INIFINTE_WINDOW ) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,102,f( getN() == windowSize ) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,103,DA.addElementRolling( v );
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,104, else if( getN() < windowSize ) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,105,DA.addElement(v);
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,106, else {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,107,"hrow new RuntimeException( ""A window Univariate had more element than "" +"
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,108,"the windowSize.  This is an inconsistent state."");"
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,110, else {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,111,DA.addElement(v);
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,78,double[] copiedArray = new double[ eDA.getNumElements() ];
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,79,"System.arraycopy( eDA.getElements(), 0,"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,80,"copiedArray, 0, eDA.getNumElements());"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,81,return copiedArray;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,115,* (non-Javadoc)
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,116, @see org.apache.commons.math.Univariate#clear()
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,118,ublic synchronized void clear() {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,119,DA.clear();
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,84,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,85,* @see org.apache.commons.math.StoreUnivariate#getElement(int)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,87,public double getElement(int index) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,88,return eDA.getElement(index);
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,122,* (non-Javadoc)
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,123, @see org.apache.commons.math.Univariate#getWindowSize()
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,125,ublic int getWindowSize() {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,126,eturn windowSize;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,91,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,92,* @see org.apache.commons.math.Univariate#getN()
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,94,public double getN() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,95,return eDA.getNumElements();
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,129,* (non-Javadoc)
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,130, @see org.apache.commons.math.Univariate#setWindowSize(int)
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,132,ublic synchronized void setWindowSize(int windowSize) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,133,his.windowSize = windowSize;
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,135,/ We need to check to see if we need to discard elements
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,136,/ from the front of the array.  If the windowSize is less than
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,137,/ the current number of elements.
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,138,f( windowSize < eDA.getNumElements() ) {
False,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,139,DA.discardFrontElements( eDA.getNumElements() - windowSize);
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,98,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,99,* @see org.apache.commons.math.Univariate#addValue(double)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,101,public synchronized void addValue(double v) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,102,if( windowSize != Univariate.INIFINTE_WINDOW ) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,103,if( getN() == windowSize ) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,104,eDA.addElementRolling( v );
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,105,} else if( getN() < windowSize ) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,106,eDA.addElement(v);
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,107,} else {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,108,"String msg = ""A window Univariate had more element than "" +"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,109,"""the windowSize.  This is an inconsistent state."";"
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,110,throw new RuntimeException( msg );
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,112,} else {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,113,eDA.addElement(v);
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,117,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,118,* @see org.apache.commons.math.Univariate#clear()
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,120,public synchronized void clear() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,121,eDA.clear();
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,124,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,125,* @see org.apache.commons.math.Univariate#getWindowSize()
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,127,public int getWindowSize() {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,128,return windowSize;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,131,/* (non-Javadoc)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,132,* @see org.apache.commons.math.Univariate#setWindowSize(int)
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,134,public synchronized void setWindowSize(int windowSize) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,135,this.windowSize = windowSize;
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,137,// We need to check to see if we need to discard elements
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,138,// from the front of the array.  If the windowSize is less than
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,139,// the current number of elements.
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,140,if( windowSize < eDA.getNumElements() ) {
True,src/java/org/apache/commons/math/StoreUnivariateImpl.java,src/java/org/apache/commons/math/StoreUnivariateImpl.java,141,eDA.discardFrontElements( eDA.getNumElements() - windowSize);
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,64, @version $Revision: 1.3 $ $Date: 2003/05/16 05:23:29 $
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,64,* @version $Revision: 1.4 $ $Date: 2003/05/20 18:15:29 $
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,70, Adds the value to the set of numbers
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,71, @param v the value to be added
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,73,ublic abstract void addValue(double v);
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,76, Returns the mean of the values that have been added
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,77, @return mean value
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,79,ublic abstract double getMean();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,82, Returns the variance of the values that have been added
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,83, @return variance value
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,85,ublic abstract double getVariance();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,70,* Adds the value to the set of numbers
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,71,* @param v the value to be added
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,73,public abstract void addValue(double v);
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,88, Returns the standard deviation of the values that have been added
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,89, @return standard deviation value
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,91,ublic abstract double getStandardDeviation();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,76,* Returns the mean of the values that have been added
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,77,* @return mean value
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,79,public abstract double getMean();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,93,** Getter for property max.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,94, @return Value of property max.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,96,ublic abstract double getMax();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,82,* Returns the variance of the values that have been added
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,83,* @return variance value
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,85,public abstract double getVariance();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,98,** Getter for property min.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,99, @return Value of property min.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,101,ublic abstract double getMin();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,88,* Returns the standard deviation of the values that have been added
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,89,* @return standard deviation value
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,91,public abstract double getStandardDeviation();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,103,** Getter for property n.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,104, @return Value of property n.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,106,ublic abstract double getN();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,93,/** Getter for property max.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,94,* @return Value of property max.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,96,public abstract double getMax();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,108,** Getter for property sum.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,109, @return Value of property sum.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,111,ublic abstract double getSum();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,98,/** Getter for property min.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,99,* @return Value of property min.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,101,public abstract double getMin();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,113,** Getter for property sumsq.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,114, @return Value of property sumsq.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,116,ublic abstract double getSumsq();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,103,/** Getter for property n.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,104,* @return Value of property n.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,106,public abstract double getN();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,118,"** Resets all sums to 0, resets min and max */"
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,119,ublic abstract void clear();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,122, This constant signals that a Univariate implementation
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,123, takes into account the contributions of an infinite number of
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,124," elements.  In other words, if getWindow returns this"
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,125," constant, there is, in effect, no ""window""."
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,127,ublic static final int INIFINTE_WINDOW = -1;
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,108,/** Getter for property sum.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,109,* @return Value of property sum.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,111,public abstract double getSum();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,130, Univariate has the ability to return only measures for the
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,131, last N elements added to the set of values.  This function returns
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,133,ublic abstract int getWindowSize();
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,136, Sets the window.  windowSize controls the number of value
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,137, which contribute to the values returned by Univariate.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,138," For example, a window value of 10 means that getMean()"
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,139, will return the mean of the last 10 values added.
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,141,ublic abstract void setWindowSize(int windowSize);
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,114,/** Getter for property sumsq.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,115,* @return Value of property sumsq.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,117,public abstract double getSumsq();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,119,"/** Resets all sums to 0, resets min and max */"
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,120,public abstract void clear();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,123,* This constant signals that a Univariate implementation
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,124,* takes into account the contributions of an infinite number of
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,125,"* elements.  In other words, if getWindow returns this"
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,126,"* constant, there is, in effect, no ""window""."
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,128,public static final int INIFINTE_WINDOW = -1;
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,131,* Univariate has the ability to return only measures for the
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,132,* last N elements added to the set of values.  This function returns
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,134,public abstract int getWindowSize();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,137,* Sets the window.  windowSize controls the number of value
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,138,* which contribute to the values returned by Univariate.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,139,"* For example, a window value of 10 means that getMean()"
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,140,* will return the mean of the last 10 values added.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,142,public abstract void setWindowSize(int windowSize);
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,67, @version $Revision: 1.4 $ $Date: 2003/05/17 23:24:21 $
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,67,* @version $Revision: 1.5 $ $Date: 2003/05/20 18:15:29 $
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,72,** hold the window size **/
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,73,rivate int windowSize = Univariate.INIFINTE_WINDOW;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,75,"** Just in case, the windowSize is not inifinite, we need to"
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,76,   keep an array to remember values 0 to N
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,78,rivate DoubleArray doubleArray;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,72,/** hold the window size **/
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,73,private int windowSize = Univariate.INIFINTE_WINDOW;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,75,"/** Just in case, the windowSize is not inifinite, we need to"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,76,*   keep an array to remember values 0 to N
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,78,private DoubleArray doubleArray;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,102,indowSize = window;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,103,oubleArray = new FixedDoubleArray( window );
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,102,windowSize = window;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,103,doubleArray = new FixedDoubleArray( window );
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,127, 	           an empty set of values and 0.0 is returned for a single value set.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,127,*         an empty set of values and 0.0 is returned for a single value set.
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,130,ouble variance = Double.NaN;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,132,f( n == 1 ) {
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,133,ariance = 0.0;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,134, else if( n > 1 ) {
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,135,ouble xbar = getMean();
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,136,ariance =  (sumsq - xbar*xbar*n)/(n-1);
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,139,eturn variance;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,130,double variance = Double.NaN;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,132,if( n == 1 ) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,133,variance = 0.0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,134,} else if( n > 1 ) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,135,double xbar = getMean();
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,136,variance =  (sumsq - xbar*xbar*n)/(n-1);
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,139,return variance;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,144, @return The standard deviation of a set of values.  Double.NaN is returned for
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,145, 		       an empty set of values and 0.0 is returned for a single value set.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,144,* @return The standard deviation of a set of values.  Double.NaN is
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,145,*         returned for an empty set of values and 0.0 is returned for
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,146,*         a single value set.
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,158,f( windowSize != Univariate.INIFINTE_WINDOW ) {
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,159,f( windowSize == n ) {
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,160,ouble discarded = doubleArray.addElementRolling( v );
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,162,/ Remove the influence of discarded value ONLY
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,163,/ if the discard value has any meaning.  In other words
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,164,"/ don't discount until we ""roll""."
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,165,f( windowSize > doubleArray.getNumElements() ) {
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,166,/ Remove the influence of the discarded
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,167,um -= discarded;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,168,umsq -= discarded * discarded;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,171,/ Include the influence of the new
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,172,"/ TODO: The next two lines seems rather expensive, but"
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,173,/ I don't see many alternatives.
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,174,in = doubleArray.getMin();
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,175,ax = doubleArray.getMax();
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,176,um += v;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,177,umsq += v*v;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,178, else {
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,179,oubleArray.addElement( v );
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,180, += 1.0;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,181,f (v < min) min = v;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,182,f (v > max) max = v;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,183,um += v;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,184,umsq += v*v;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,186, else {
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,187,/ If the windowSize is inifinite please don't take the time to
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,188,/ worry about storing any values.  We don't need to discard the
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,189,/ influence of any single item.
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,190, += 1.0;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,191,f (v < min) min = v;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,192,f (v > max) max = v;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,193,um += v;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,194,umsq += v*v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,159,if( windowSize != Univariate.INIFINTE_WINDOW ) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,160,if( windowSize == n ) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,161,double discarded = doubleArray.addElementRolling( v );
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,163,// Remove the influence of discarded value ONLY
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,164,// if the discard value has any meaning.  In other words
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,165,"// don't discount until we ""roll""."
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,166,if( windowSize > doubleArray.getNumElements() ) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,167,// Remove the influence of the discarded
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,168,sum -= discarded;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,169,sumsq -= discarded * discarded;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,172,// Include the influence of the new
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,173,"// TODO: The next two lines seems rather expensive, but"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,174,// I don't see many alternatives.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,175,min = doubleArray.getMin();
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,176,max = doubleArray.getMax();
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,177,sum += v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,178,sumsq += v*v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,179,} else {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,180,doubleArray.addElement( v );
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,181,n += 1.0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,182,if (v < min) min = v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,183,if (v > max) max = v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,184,sum += v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,185,sumsq += v*v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,187,} else {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,188,// If the windowSize is inifinite please don't take the time to
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,189,// worry about storing any values.  We don't need to discard the
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,190,// influence of any single item.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,191,n += 1.0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,192,if (v < min) min = v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,193,if (v > max) max = v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,194,sum += v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,195,sumsq += v*v;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,266,* (non-Javadoc)
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,267, @see org.apache.commons.math.Univariate#getWindowSize()
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,269,ublic int getWindowSize() {
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,270,eturn windowSize;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,273,* (non-Javadoc)
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,274, @see org.apache.commons.math.Univariate#setWindowSize(int)
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,276,ublic void setWindowSize(int windowSize) {
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,277,"hrow new RuntimeException( ""A fixed window size must be set via the UnivariateImpl constructor"");"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,267,/* (non-Javadoc)
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,268,* @see org.apache.commons.math.Univariate#getWindowSize()
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,270,public int getWindowSize() {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,271,return windowSize;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,274,/* (non-Javadoc)
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,275,* @see org.apache.commons.math.Univariate#setWindowSize(int)
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,277,public void setWindowSize(int windowSize) {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,278,"String msg = ""A fixed window size must be set via the "" +"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,279,"""UnivariateImpl constructor"";"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,280,throw new RuntimeException( msg );

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,34," <p>This implementation only uses the upper part of the matrix, the part below the"
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,35, diagonal is not accessed at all.</p>
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,34,"* <p>When called with a {@link RealMatrix} argument, this implementation only uses"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,35,"* the upper part of the matrix, the part below the diagonal is not accessed at all.</p>"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,181,* Calculates the eigen decomposition of the given tridiagonal symmetric matrix.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,182,* <p>Calling this constructor is equivalent to first call the no-arguments
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,183,"* constructor and then call {@link #decompose(double[], double[])}.</p>"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,184,* @param main the main diagonal of the matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,185,* @param secondary the secondary diagonal of the matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,186,* @exception InvalidMatrixException (wrapping a {@link ConvergenceException}
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,187,* if algorithm fails to converge
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,189,"public EigenDecompositionImpl(final double[] main, double[] secondary)"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,190,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,191,setRelativeAccuracySplitTolerance(MathUtils.SAFE_MIN);
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,192,"decompose(main, secondary);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,220,transformToTridiagonal(matrix);
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,221,decompose();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,225,* Decompose a tridiagonal symmetric matrix.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,226,* @param main the main diagonal of the matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,227,* @param secondary the secondary diagonal of the matrix
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,228,* @exception InvalidMatrixException (wrapping a {@link ConvergenceException}
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,229,* if algorithm fails to converge
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,231,"public void decompose(final double[] main, final double[] secondary) {"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,233,this.main      = main;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,234,this.secondary = secondary;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,235,orthoTridiag   = null;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,237,// pre-compute some elements
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,238,squaredSecondary = new double[secondary.length];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,239,for (int i = 0; i < squaredSecondary.length; ++i) {
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,240,final double s = secondary[i];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,241,squaredSecondary[i] = s * s;
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,244,decompose();
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,249,* Decompose a tridiagonal symmetric matrix.
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,250,* @exception InvalidMatrixException (wrapping a {@link ConvergenceException}
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,251,* if algorithm fails to converge
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,253,private void decompose() {
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,209,ork     = new double[6 * matrix.getRowDimension()];
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,258,work     = new double[6 * main.length];
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,211,/ compute tridiagonal representation of the initial matrix
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,212,ransformToTridiagonal(matrix);
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,260,// compute the Gershgorin circles
False,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1709,"eturn new RealVectorImpl(orthoTridiag.operate(eigenvector), true);"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1757,return (orthoTridiag == null) ?
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1758,"new RealVectorImpl(eigenvector, false) :"
True,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1759,"new RealVectorImpl(orthoTridiag.operate(eigenvector), false);"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,122,/** test a matrix already in tridiagonal form. */
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,123,public void testTridiagonal() {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,124,Random r = new Random(4366663527842l);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,125,double[] ref = new double[30];
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,126,for (int i = 0; i < ref.length; ++i) {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,127,if (i < 5) {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,128,ref[i] = 2 * r.nextDouble() - 1;
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,129,} else {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,130,ref[i] = 0.0001 * r.nextDouble() + 6;
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,133,Arrays.sort(ref);
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,134,TriDiagonalTransformer t =
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,135,"new TriDiagonalTransformer(createTestMatrix(r, ref));"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,136,EigenDecomposition ed =
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,137,"new EigenDecompositionImpl(t.getMainDiagonalRef(),"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,138,t.getSecondaryDiagonalRef());
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,139,double[] eigenValues = ed.getEigenvalues();
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,140,"assertEquals(ref.length, eigenValues.length);"
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,141,for (int i = 0; i < ref.length; ++i) {
True,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java,142,"assertEquals(ref[ref.length - i - 1], eigenValues[i], 2.0e-14);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,20, Exeption thrown when an error occurs evaluating a function.
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,20,* Exception thrown when an error occurs evaluating a function.
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,154,* @param maxIterationCount upper limit of the iteration count in
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,155,* the event time search
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,157,ouble convergence) {
False,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,158,"witchesHandler.add(function, maxCheckInterval, convergence);"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,159,"double convergence,"
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,160,int maxIterationCount) {
True,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java,161,"switchesHandler.add(function, maxCheckInterval, convergence, maxIterationCount);"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,61,* @param maxIterationCount upper limit of the iteration count in
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,62,* the event time search
False,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,64,ouble convergence);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,66,"double convergence,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java,67,int maxIterationCount);
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,294,* @param maxIterationCount upper limit of the iteration count in
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,295,* the event time search
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,297,ouble convergence) {
False,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,298,"uper.addSwitchingFunction(function, maxCheckInterval, convergence);"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,299,"double convergence,"
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,300,int maxIterationCount) {
True,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/GraggBulirschStoerIntegrator.java,301,"super.addSwitchingFunction(function, maxCheckInterval, convergence, maxIterationCount);"
False,src/java/org/apache/commons/math/ode/IntegratorException.java,src/java/org/apache/commons/math/ode/IntegratorException.java,39,rivate static final long serialVersionUID = -1390328069787882608L;
True,src/java/org/apache/commons/math/ode/IntegratorException.java,src/java/org/apache/commons/math/ode/IntegratorException.java,40,* Create an exception with a given root cause.
True,src/java/org/apache/commons/math/ode/IntegratorException.java,src/java/org/apache/commons/math/ode/IntegratorException.java,41,* @param cause  the exception or error that caused this exception to be thrown
True,src/java/org/apache/commons/math/ode/IntegratorException.java,src/java/org/apache/commons/math/ode/IntegratorException.java,43,public IntegratorException(Throwable cause) {
True,src/java/org/apache/commons/math/ode/IntegratorException.java,src/java/org/apache/commons/math/ode/IntegratorException.java,44,super(cause);
True,src/java/org/apache/commons/math/ode/IntegratorException.java,src/java/org/apache/commons/math/ode/IntegratorException.java,47,private static final long serialVersionUID = -1215318282266670558L;
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,98,* @param maxIterationCount upper limit of the iteration count in
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,99,* the event time search
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,101,ouble convergence) {
False,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,102,"witchesHandler.add(function, maxCheckInterval, convergence);"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,103,"double convergence,"
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,104,int maxIterationCount) {
True,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java,105,"switchesHandler.add(function, maxCheckInterval, convergence, maxIterationCount);"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,45,rivate static final long serialVersionUID = 3256541562455482289L;
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,45,private static final long serialVersionUID = -7307007422156119622L;
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,56,/** Upper limit in the iteration count for event localisation. */
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,57,private int maxIterationCount;
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,91,* @param maxIterationCount upper limit of the iteration count in
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,92,* the event time search
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,89,"ublic SwitchState(SwitchingFunction function,"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,90,"ouble maxCheckInterval, double convergence) {"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,91,his.function         = function;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,92,his.maxCheckInterval = maxCheckInterval;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,93,his.convergence      = Math.abs(convergence);
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,94,"public SwitchState(SwitchingFunction function, double maxCheckInterval,"
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,95,"double convergence, int maxIterationCount) {"
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,96,this.function          = function;
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,97,this.maxCheckInterval  = maxCheckInterval;
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,98,this.convergence       = Math.abs(convergence);
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,99,this.maxIterationCount = maxIterationCount;
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,118,* @exception FunctionEvaluationException if the switching function
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,119,* value cannot be evaluated at the beginning of the step
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,113,"ublic void reinitializeBegin(double t0, double[] y0) {"
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,121,"public void reinitializeBegin(double t0, double[] y0)"
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,122,throws FunctionEvaluationException {
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,133,* @exception DerivativeException if the interpolator fails to
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,134,* compute the function somewhere within the step
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,135,* @exception FunctionEvaluationException if the switching function
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,136,* cannot be evaluated
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,137,* @exception ConvergenceException if an event cannot be located
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,125,ublic boolean evaluateStep(final StepInterpolator interpolator) {
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,139,public boolean evaluateStep(final StepInterpolator interpolator)
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,140,"throws DerivativeException, FunctionEvaluationException, ConvergenceException {"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,150,ry {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,151,nivariateRealSolver solver = new BrentSolver(new UnivariateRealFunction() {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,152,ublic double value(double t) throws FunctionEvaluationException {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,153,ry {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,154,nterpolator.setInterpolatedTime(t);
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,155,"eturn function.g(t, interpolator.getInterpolatedState());"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,156, catch (DerivativeException e) {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,157,"hrow new FunctionEvaluationException(t, e);"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,161,olver.setAbsoluteAccuracy(convergence);
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,162,olver.setMaximalIterationCount(1000);
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,163,"ouble root = solver.solve(ta, tb);"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,164,f (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,165,endingEventTime = root;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,166,f (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,167,/ we were already waiting for this event which was
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,168,/ found during a previous call for a step that was
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,169,"/ rejected, this step must now be accepted since it"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,170,/ properly ends exactly at the event occurrence
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,171,eturn false;
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,165,UnivariateRealSolver solver = new BrentSolver(new UnivariateRealFunction() {
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,166,public double value(double t) throws FunctionEvaluationException {
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,167,try {
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,168,interpolator.setInterpolatedTime(t);
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,169,"return function.g(t, interpolator.getInterpolatedState());"
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,170,} catch (DerivativeException e) {
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,171,"throw new FunctionEvaluationException(t, e);"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,173,/ either we were not waiting for the event or it has
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,174,/ moved in such a way the step cannot be accepted
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,175,endingEvent = true;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,176,eturn true;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,178, catch (ConvergenceException ce) {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,179,"hrow new RuntimeException(""internal error"");"
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,175,solver.setAbsoluteAccuracy(convergence);
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,176,solver.setMaximalIterationCount(maxIterationCount);
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,177,"double root = solver.solve(ta, tb);"
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,178,if (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) {
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,179,pendingEventTime = root;
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,180,if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,181,// we were already waiting for this event which was
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,182,// found during a previous call for a step that was
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,183,"// rejected, this step must now be accepted since it"
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,184,// properly ends exactly at the event occurrence
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,185,return false;
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,187,// either we were not waiting for the event or it has
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,188,// moved in such a way the step cannot be accepted
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,189,pendingEvent = true;
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,190,return true;
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,195, catch (DerivativeException e) {
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,196,"hrow new RuntimeException(""unexpected exception: "" + e.getMessage());"
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,198,"hrow new RuntimeException(""unexpected exception: "" + e.getMessage());"
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,207,Throwable cause = e.getCause();
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,208,if ((cause != null) && (cause instanceof DerivativeException)) {
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,209,throw (DerivativeException) cause;
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,211,throw e;
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,230,* @exception FunctionEvaluationException if the value of the switching
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,231,* function cannot be evaluated
False,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,218,"ublic void stepAccepted(double t, double[] y) {"
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,233,"public void stepAccepted(double t, double[] y)"
True,src/java/org/apache/commons/math/ode/SwitchState.java,src/java/org/apache/commons/math/ode/SwitchState.java,234,throws FunctionEvaluationException {
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/SwitchingFunction.java,22,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/SwitchingFunction.java,96,* @exception FunctionEvaluationException if the value of the function
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/SwitchingFunction.java,97,* cannot be evaluated
False,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/SwitchingFunction.java,95,"ublic double g(double t, double[] y);"
True,src/java/org/apache/commons/math/ode/SwitchingFunction.java,src/java/org/apache/commons/math/ode/SwitchingFunction.java,99,"public double g(double t, double[] y) throws FunctionEvaluationException;"
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,20,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,21,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,53,* @param maxIterationCount upper limit of the iteration count in
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,54,* the event time search
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,52,"ublic void add(SwitchingFunction function,"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,53,"ouble maxCheckInterval, double convergence) {"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,54,"unctions.add(new SwitchState(function, maxCheckInterval, convergence));"
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,56,"public void add(SwitchingFunction function, double maxCheckInterval,"
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,57,"double convergence, int maxIterationCount) {"
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,58,"functions.add(new SwitchState(function, maxCheckInterval,"
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,59,"convergence, maxIterationCount));"
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,75,* @exception DerivativeException if the interpolator fails to
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,76,* compute the function somewhere within the step
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,77,* @exception IntegratorException if an event cannot be located
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,71,ublic boolean evaluateStep(StepInterpolator interpolator) {
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,79,public boolean evaluateStep(StepInterpolator interpolator)
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,80,"throws DerivativeException, IntegratorException {"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,121, catch (DerivativeException e) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,122,"hrow new RuntimeException(""unexpected exception: "" + e.getMessage());"
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,130,} catch (FunctionEvaluationException fee) {
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,131,throw new IntegratorException(fee);
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,132,} catch (ConvergenceException ce) {
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,133,throw new IntegratorException(ce);
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,154,* @exception IntegratorException if the value of one of the
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,155,* switching functions cannot be evaluated
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,144,"ublic void stepAccepted(double t, double[] y) {"
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,145,or (Iterator iter = functions.iterator(); iter.hasNext();) {
False,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,146,"(SwitchState) iter.next()).stepAccepted(t, y);"
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,157,"public void stepAccepted(double t, double[] y)"
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,158,throws IntegratorException {
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,159,try {
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,160,for (Iterator iter = functions.iterator(); iter.hasNext();) {
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,161,"((SwitchState) iter.next()).stepAccepted(t, y);"
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,163,} catch (FunctionEvaluationException fee) {
True,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,src/java/org/apache/commons/math/ode/SwitchingFunctionsHandler.java,164,throw new IntegratorException(fee);
False,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,89,"ouble.POSITIVE_INFINITY, 1.0e-6 * step);"
True,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/ClassicalRungeKuttaIntegratorTest.java,89,"Double.POSITIVE_INFINITY, 1.0e-6 * step, 1000);"
False,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,192,"ouble.POSITIVE_INFINITY, 1.0e-8 * maxStep);"
True,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,src/test/org/apache/commons/math/ode/DormandPrince54IntegratorTest.java,192,"Double.POSITIVE_INFINITY, 1.0e-8 * maxStep, 1000);"
False,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,145,"ouble.POSITIVE_INFINITY, 1.0e-8 * maxStep);"
True,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,145,"Double.POSITIVE_INFINITY, 1.0e-8 * maxStep, 1000);"
False,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,230,"nteg.addSwitchingFunction(stepProblem, 1.0, 1.0e-12);"
True,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,src/test/org/apache/commons/math/ode/DormandPrince853IntegratorTest.java,230,"integ.addSwitchingFunction(stepProblem, 1.0, 1.0e-12, 1000);"
False,src/test/org/apache/commons/math/ode/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/EulerIntegratorTest.java,67,"ouble.POSITIVE_INFINITY, 1.0e-6 * step);"
True,src/test/org/apache/commons/math/ode/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/EulerIntegratorTest.java,67,"Double.POSITIVE_INFINITY, 1.0e-6 * step, 1000);"
False,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,69,"ouble.POSITIVE_INFINITY, 1.0e-6 * step);"
True,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,69,"Double.POSITIVE_INFINITY, 1.0e-6 * step, 1000);"
False,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,141,"nteg.addSwitchingFunction(stepProblem, 1.0, 1.0e-12);"
True,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/GillIntegratorTest.java,141,"integ.addSwitchingFunction(stepProblem, 1.0, 1.0e-12, 1000);"
False,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,185,"ouble.POSITIVE_INFINITY, 1.0e-8 * maxStep);"
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,185,"Double.POSITIVE_INFINITY, 1.0e-8 * maxStep, 1000);"
False,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,241,"nteg.addSwitchingFunction(stepProblem, 1.0, 1.0e-12);"
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,241,"integ.addSwitchingFunction(stepProblem, 1.0, 1.0e-12, 1000);"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,20,import org.apache.commons.math.ConvergenceException;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,21,import org.apache.commons.math.FunctionEvaluationException;
False,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,152,"ouble.POSITIVE_INFINITY, 1.0e-8 * maxStep);"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,154,"Double.POSITIVE_INFINITY, 1.0e-8 * maxStep, 1000);"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,166,public void testSwitchingFunctionsError()
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,167,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,169,final TestProblem1 pb = new TestProblem1();
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,170,double minStep = 0;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,171,double maxStep = pb.getFinalTime() - pb.getInitialTime();
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,172,double scalAbsoluteTolerance = 1.0e-8;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,173,double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,175,FirstOrderIntegrator integ =
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,176,"new HighamHall54Integrator(minStep, maxStep,"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,177,"scalAbsoluteTolerance, scalRelativeTolerance);"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,178,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,179,integ.setStepHandler(handler);
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,181,integ.addSwitchingFunction(new SwitchingFunction() {
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,182,"public int eventOccurred(double t, double[] y) {"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,183,return SwitchingFunction.CONTINUE;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,185,"public double g(double t, double[] y) throws FunctionEvaluationException {"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,186,double middle = (pb.getInitialTime() + pb.getFinalTime()) / 2;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,187,double offset = t - middle;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,188,if (offset > 0) {
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,189,throw new FunctionEvaluationException(t);
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,191,return offset;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,193,"public void resetState(double t, double[] y) {"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,195,private static final long serialVersionUID = 935652725339916361L;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,196,"}, Double.POSITIVE_INFINITY, 1.0e-8 * maxStep, 1000);"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,198,try {
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,199,"integ.integrate(pb,"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,200,"pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,201,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,202,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,203,} catch (IntegratorException ie) {
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,204,// expected behavior
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,205,} catch (Exception e) {
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,206,"fail(""wrong exception type caught"");"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,211,public void testSwitchingFunctionsNoConvergence()
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,212,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,214,final TestProblem1 pb = new TestProblem1();
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,215,double minStep = 0;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,216,double maxStep = pb.getFinalTime() - pb.getInitialTime();
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,217,double scalAbsoluteTolerance = 1.0e-8;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,218,double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,220,FirstOrderIntegrator integ =
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,221,"new HighamHall54Integrator(minStep, maxStep,"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,222,"scalAbsoluteTolerance, scalRelativeTolerance);"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,223,"TestProblemHandler handler = new TestProblemHandler(pb, integ);"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,224,integ.setStepHandler(handler);
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,226,integ.addSwitchingFunction(new SwitchingFunction() {
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,227,"public int eventOccurred(double t, double[] y) {"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,228,return SwitchingFunction.CONTINUE;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,230,"public double g(double t, double[] y) {"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,231,double middle = (pb.getInitialTime() + pb.getFinalTime()) / 2;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,232,double offset = t - middle;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,233,return (offset > 0) ? (offset + 0.5) : (offset - 0.5);
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,235,"public void resetState(double t, double[] y) {"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,237,private static final long serialVersionUID = 935652725339916361L;
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,238,"}, Double.POSITIVE_INFINITY, 1.0e-8 * maxStep, 3);"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,240,try {
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,241,"integ.integrate(pb,"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,242,"pb.getInitialTime(), pb.getInitialState(),"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,243,"pb.getFinalTime(), new double[pb.getDimension()]);"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,244,"fail(""an exception should have been thrown"");"
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,245,} catch (IntegratorException ie) {
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,246,assertTrue(ie.getCause() != null);
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,247,assertTrue(ie.getCause() instanceof ConvergenceException);
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,248,} catch (Exception e) {
True,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,src/test/org/apache/commons/math/ode/HighamHall54IntegratorTest.java,249,"fail(""wrong exception type caught"");"
False,src/test/org/apache/commons/math/ode/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/MidpointIntegratorTest.java,66,"ouble.POSITIVE_INFINITY, 1.0e-6 * step);"
True,src/test/org/apache/commons/math/ode/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/MidpointIntegratorTest.java,66,"Double.POSITIVE_INFINITY, 1.0e-6 * step, 1000);"
False,src/test/org/apache/commons/math/ode/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/ThreeEighthesIntegratorTest.java,69,"ouble.POSITIVE_INFINITY, 1.0e-6 * step);"
True,src/test/org/apache/commons/math/ode/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/ThreeEighthesIntegratorTest.java,69,"Double.POSITIVE_INFINITY, 1.0e-6 * step, 1000);"

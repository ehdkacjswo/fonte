is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1273,ublic void checkVectorDimensions(RealVector v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1273,protected void checkVectorDimensions(RealVector v)
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1285,ublic void checkVectorDimensions(int n)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1285,protected void checkVectorDimensions(int n)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,235,checkVectorDimensions(v.getDimension());
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,720,terator iter = entries.iterator();
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,721,hile (iter.hasNext()) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,722,ter.advance();
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,723,"ntries.put(iter.key(), Math.cos(iter.value()));"
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,721,for(int i=0; i < virtualSize; i++){
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,722,"setEntry(i, Math.cos(getEntry(i)));"
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,735,terator iter = entries.iterator();
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,736,hile (iter.hasNext()) {
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,737,ter.advance();
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,738,"ntries.put(iter.key(), Math.cosh(iter.value()));"
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,734,for(int i = 0; i < virtualSize; i++){
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,735,"setEntry(i, Math.cosh(getEntry(i)));"
False,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1204,ublic void checkVectorDimensions(int n) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1201,protected void checkVectorDimensions(int n) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1213,/* (non-Javadoc)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1214,* @see java.lang.Object#hashCode()
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1216,@Override
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1217,public int hashCode() {
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1218,final int prime = 31;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1219,int result = 1;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1220,result = prime * result + ((entries == null) ? 0 : entries.hashCode());
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1221,long temp;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1222,temp = Double.doubleToLongBits(epsilon);
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1223,result = prime * result + (int) (temp ^ (temp >>> 32));
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1224,result = prime * result + virtualSize;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1225,return result;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1228,/* (non-Javadoc)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1229,* @see java.lang.Object#equals(java.lang.Object)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1231,@Override
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1232,public boolean equals(Object obj) {
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1233,"System.out.println(""Checking equality of ""+obj);"
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1234,if (this == obj)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1235,return true;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1236,if (obj == null)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1237,return false;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1238,if (!(obj instanceof SparseRealVector))
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1239,return false;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1240,"System.out.println(""is a sparse vector"");"
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1241,SparseRealVector other = (SparseRealVector) obj;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1242,if (entries == null) {
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1243,if (other.entries != null)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1244,return false;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1245,} else if (!entries.equals(other.entries)){
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1246,"System.out.println(""no entries match"");"
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1247,return false;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1248,}if (Double.doubleToLongBits(epsilon) != Double
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1249,.doubleToLongBits(other.epsilon))
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1250,return false;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1251,if (virtualSize != other.virtualSize)
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1252,return false;
True,src/java/org/apache/commons/math/linear/SparseRealVector.java,src/java/org/apache/commons/math/linear/SparseRealVector.java,1253,return true;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,23,import java.util.Arrays;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,598,/* (non-Javadoc)
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,599,* @see java.lang.Object#hashCode()
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,601,@Override
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,602,public int hashCode() {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,603,final int prime = 31;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,604,int result = 1;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,605,result = prime * result + Arrays.hashCode(keys);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,606,result = prime * result + mask;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,607,long temp;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,608,temp = Double.doubleToLongBits(missingEntries);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,609,result = prime * result + (int) (temp ^ (temp >>> 32));
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,610,result = prime * result + size;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,611,result = prime * result + Arrays.hashCode(states);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,612,result = prime * result + Arrays.hashCode(values);
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,613,return result;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,616,/* (non-Javadoc)
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,617,* @see java.lang.Object#equals(java.lang.Object)
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,619,@Override
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,620,public boolean equals(Object obj) {
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,621,if (this == obj)
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,622,return true;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,623,if (obj == null)
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,624,return false;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,625,if (getClass() != obj.getClass())
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,626,return false;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,627,OpenIntToDoubleHashMap other = (OpenIntToDoubleHashMap) obj;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,628,"if (!Arrays.equals(keys, other.keys))"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,629,return false;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,630,if (mask != other.mask)
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,631,return false;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,632,if (Double.doubleToLongBits(missingEntries) != Double
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,633,.doubleToLongBits(other.missingEntries))
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,634,return false;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,635,if (size != other.size)
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,636,return false;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,637,"if (!Arrays.equals(states, other.states)){"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,638,"System.out.println(""states not match:"" );"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,639,for(byte e : states){
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,640,"System.out.print(e+"" "");"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,642,System.out.println();
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,643,for(byte e : other.states){
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,644,"System.out.print(e+"" "");"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,646,return false;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,648,"if (!Arrays.equals(values, other.values)){"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,649,"System.out.println(""values don't match"");"
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,650,return false;
True,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java,652,return true;
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,476,* TODO: make this supported */
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,477,"/SparseRealVector v2 = new SparseRealVector(5, 1.23);"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,478,"/assertEquals(""testData len"", 5, v2.getDimension());"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,479,"/assertEquals(""testData is 1.23 "", 1.23, v2.getEntry(4));"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,563,* TODO: fixme */
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,564,/RealVector v_append_4 = v1.append(v2_t);
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,565,"/assertEquals(""testData len"", 6, v_append_4.getDimension());"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,566,"/assertEquals(""testData is 4.0 "", 4.0, v_append_4.getEntry(3));"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,568,* TODO: fixme */
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,569,/RealVector v_copy = v1.copy();
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,570,"/assertEquals(""testData len"", 3, v_copy.getDimension());"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,571,"/assertNotSame(""testData not same object "", v1.data, v_copy.getData());"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,572,* TODO: fixme */
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,573,/double[] a_double = v1.toArray();
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,574,"/assertEquals(""testData len"", 3, a_double.length);"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,575,"/assertNotSame(""testData not same object "", v1.data, a_double);"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,578,/      SparseRealVector vout4 = (SparseRealVector) v1.clone();
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,579,"/      assertEquals(""testData len"", 3, vout4.getDimension());"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,580,"/      assertEquals(""testData not same object "", v1.data, vout4.data);"
True,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,558,RealVector v_append_4 = v1.append(v2_t);
True,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,559,"assertEquals(""testData len"", 6, v_append_4.getDimension());"
True,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,560,"assertEquals(""testData is 4.0 "", 4.0, v_append_4.getEntry(3));"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1130,* TODO: fixme */
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1131,/try {
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1132,/    v1.checkVectorDimensions(v4);
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1133,"/    fail(""IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1134,/} catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1135,/ expected behavior
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1136,/} catch (Exception e) {
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1137,"/    fail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1140,* TODO: fixme */
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1141,/try {
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1142,/    v1.checkVectorDimensions(v4_2);
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1143,"/    fail(""IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1144,/} catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1145,/ expected behavior
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1146,/ } catch (Exception e) {
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1147,"/    fail(""wrong exception caught"");"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1162,/ TODO: fixme
True,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1122,// TODO: why is this test here
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1167,".setEntry(0, 0);"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1168,/ TODO: backing store doesn't yet implement equals
True,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1127,//TODO: differeciate from resetting to zero
True,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1128,"//v.setEntry(0, 0);"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1170,"/assertNotSame(v, new SparseRealVector(new double[] { 0, 1, 2 + Math.ulp(2)}));"
False,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1171,"/assertNotSame(v, new SparseRealVector(new double[] { 0, 1, 2, 3 }));"
True,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1130,"assertNotSame(v, new SparseRealVector(new double[] { 0, 1, 2 + Math.ulp(2)}));"
True,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/org/apache/commons/math/linear/SparseRealVectorTest.java,1131,"assertNotSame(v, new SparseRealVector(new double[] { 0, 1, 2, 3 }));"

is_addition,old_file_path,new_file_path,line_num,content
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,41,"ssertEquals(null, expected, actual, delta);"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,41,"assertEquals(null, expected, actual, delta);"
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,45,/ check for NaN
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,46,f(Double.isNaN(expected)){
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,47,"ssert.assertTrue("""" + actual + "" is not NaN."","
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,48,ouble.isNaN(actual));
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,49, else {
False,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,50,"ssert.assertEquals(msg, expected, actual, delta);"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,45,// check for NaN
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,46,if(Double.isNaN(expected)){
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,47,"Assert.assertTrue("""" + actual + "" is not NaN."","
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,48,Double.isNaN(actual));
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,49,} else {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,50,"Assert.assertEquals(msg, expected, actual, delta);"
False,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,189,hrows Exception{
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,189,throws Exception{
False,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,200,hrows Exception {
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,200,throws Exception {
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,27,omplexFormat complexFormat = null;
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,28,omplexFormat complexFormatJ = null;
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,27,ComplexFormat complexFormat = null;
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,28,ComplexFormat complexFormatJ = null;
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,34,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,35,omplexFormat = ComplexFormat.getInstance(getLocale());
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,36,omplexFormatJ = ComplexFormat.getInstance(getLocale());
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,34,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,35,complexFormat = ComplexFormat.getInstance(getLocale());
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,36,complexFormatJ = ComplexFormat.getInstance(getLocale());
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,47,ublic void testSimpleWithDecimals() {
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,48,"omplex c = new Complex(1.23, 1.43);"
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,47,public void testSimpleWithDecimals() {
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,48,"Complex c = new Complex(1.23, 1.43);"
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,54,ublic void testSimpleWithDecimalsTrunc() {
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,55,"omplex c = new Complex(1.2323, 1.4343);"
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,54,public void testSimpleWithDecimalsTrunc() {
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,55,"Complex c = new Complex(1.2323, 1.4343);"
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,61,ublic void testNegativeReal() {
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,62,"omplex c = new Complex(-1.2323, 1.4343);"
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,61,public void testNegativeReal() {
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,62,"Complex c = new Complex(-1.2323, 1.4343);"
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,68,ublic void testNegativeImaginary() {
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,69,"omplex c = new Complex(1.2323, -1.4343);"
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,68,public void testNegativeImaginary() {
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,69,"Complex c = new Complex(1.2323, -1.4343);"
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,75,ublic void testNegativeBoth() {
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,76,"omplex c = new Complex(-1.2323, -1.4343);"
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,75,public void testNegativeBoth() {
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,76,"Complex c = new Complex(-1.2323, -1.4343);"
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,82,ublic void testZeroReal() {
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,83,"omplex c = new Complex(0.0, -1.4343);"
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,82,public void testZeroReal() {
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,83,"Complex c = new Complex(0.0, -1.4343);"
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,89,ublic void testZeroImaginary() {
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,90,"omplex c = new Complex(30.233, 0);"
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,89,public void testZeroImaginary() {
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,90,"Complex c = new Complex(30.233, 0);"
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,96,ublic void testDifferentImaginaryChar() {
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,97,"omplex c = new Complex(1, 1);"
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,96,public void testDifferentImaginaryChar() {
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,97,"Complex c = new Complex(1, 1);"
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,103,ublic void testStaticFormatComplex() {
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,103,public void testStaticFormatComplex() {
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,107,"omplex c = new Complex(232.222, -342.33);"
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,107,"Complex c = new Complex(232.222, -342.33);"
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,115,ublic void testNan() {
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,116,"omplex c = new Complex(Double.NaN, Double.NaN);"
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,115,public void testNan() {
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,116,"Complex c = new Complex(Double.NaN, Double.NaN);"
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,122,ublic void testPositiveInfinity() {
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,123,"omplex c = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,122,public void testPositiveInfinity() {
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,123,"Complex c = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,129,ublic void testNegativeInfinity() {
False,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,130,"omplex c = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,129,public void testNegativeInfinity() {
True,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,130,"Complex c = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
False,src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,184,istribution.cumulativeProbability(lower);
True,src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,184,distribution.cumulativeProbability(lower);
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,29, Constructor for DistributionFactoryImplTest.
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,30, @param name
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,32,ublic DistributionFactoryImplTest(String name) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,33,uper(name);
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,36, @throws java.lang.Exception
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,38,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,39,uper.setUp();
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,29,* Constructor for DistributionFactoryImplTest.
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,30,* @param name
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,32,public DistributionFactoryImplTest(String name) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,33,super(name);
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,36,* @throws java.lang.Exception
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,38,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,39,super.setUp();
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,44, @throws java.lang.Exception
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,46,rotected void tearDown() throws Exception {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,44,* @throws java.lang.Exception
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,46,protected void tearDown() throws Exception {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,48,uper.tearDown();
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,48,super.tearDown();
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,103,"ammaDistribution distribution = factory.createGammaDistribution( a, b );"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,103,"GammaDistribution distribution = factory.createGammaDistribution( a, b );"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,109,istributionFactory factory = DistributionFactory.newInstance();
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,110,"ammaDistribution distribution = factory.createGammaDistribution( a, b );"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,109,DistributionFactory factory = DistributionFactory.newInstance();
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,110,"GammaDistribution distribution = factory.createGammaDistribution( a, b );"
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,68,DistributionImpl td = new TDistributionImpl(5.);
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,69,ouble est;
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,70,st = td.cumulativeProbability(.1);
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,71,st = td.cumulativeProbability(.01);
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,68,TDistributionImpl td = new TDistributionImpl(5.);
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,69,double est;
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,70,est = td.cumulativeProbability(.1);
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,71,est = td.cumulativeProbability(.01);
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,26,ractionFormat properFormat = null;
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,27,ractionFormat improperFormat = null;
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,26,FractionFormat properFormat = null;
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,27,FractionFormat improperFormat = null;
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,33,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,34,roperFormat = FractionFormat.getProperInstance(getLocale());
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,35,mproperFormat = FractionFormat.getImproperInstance(getLocale());
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,33,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,34,properFormat = FractionFormat.getProperInstance(getLocale());
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,35,improperFormat = FractionFormat.getImproperInstance(getLocale());
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,49,ublic void testFormatNegative() {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,49,public void testFormatNegative() {
False,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,60,ublic void testFormatZero() {
True,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/org/apache/commons/math/fraction/FractionFormatTest.java,60,public void testFormatZero() {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,35,rotected double mean = Double.NaN;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,35,protected double mean = Double.NaN;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,37,rotected double std = Double.NaN;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,37,protected double std = Double.NaN;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,40, Certified Data Test Constructor
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,41, @param name
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,43,ublic CertifiedDataTest(String name) {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,44,uper(name);
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,40,* Certified Data Test Constructor
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,41,* @param name
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,43,public CertifiedDataTest(String name) {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,44,super(name);
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,47,* (non-Javadoc)
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,48, @see junit.framework.TestCase#setUp()
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,50,ublic void setUp() {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,47,/* (non-Javadoc)
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,48,* @see junit.framework.TestCase#setUp()
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,50,public void setUp() {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,54, @return The test suite
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,56,ublic static Test suite() {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,57,estSuite suite = new TestSuite(CertifiedDataTest.class);
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,58,"uite.setName(""Certified Tests"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,59,eturn suite;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,54,* @return The test suite
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,56,public static Test suite() {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,57,TestSuite suite = new TestSuite(CertifiedDataTest.class);
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,58,"suite.setName(""Certified Tests"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,59,return suite;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,63, Test StorelessDescriptiveStatistics
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,65,ublic void testUnivariateImpl() throws Exception {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,66,ummaryStatistics u = SummaryStatistics.newInstance(SummaryStatisticsImpl.class);
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,67,"oadStats(""data/PiDigits.txt"", u);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,68,"ssertEquals(""PiDigits: std"", std, u.getStandardDeviation(), .0000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,69,"ssertEquals(""PiDigits: mean"", mean, u.getMean(), .0000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,63,* Test StorelessDescriptiveStatistics
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,65,public void testUnivariateImpl() throws Exception {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,66,SummaryStatistics u = SummaryStatistics.newInstance(SummaryStatisticsImpl.class);
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,67,"loadStats(""data/PiDigits.txt"", u);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,68,"assertEquals(""PiDigits: std"", std, u.getStandardDeviation(), .0000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,69,"assertEquals(""PiDigits: mean"", mean, u.getMean(), .0000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,71,"oadStats(""data/Mavro.txt"", u);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,72,"ssertEquals(""Mavro: std"", std, u.getStandardDeviation(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,73,"ssertEquals(""Mavro: mean"", mean, u.getMean(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,75,"/loadStats(""data/Michelso.txt"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,76,"/assertEquals(""Michelso: std"", std, u.getStandardDeviation(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,77,"/assertEquals(""Michelso: mean"", mean, u.getMean(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,79,"oadStats(""data/NumAcc1.txt"", u);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,80,"ssertEquals(""NumAcc1: std"", std, u.getStandardDeviation(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,81,"ssertEquals(""NumAcc1: mean"", mean, u.getMean(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,83,"/loadStats(""data/NumAcc2.txt"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,84,"/assertEquals(""NumAcc2: std"", std, u.getStandardDeviation(), .000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,85,"/assertEquals(""NumAcc2: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,71,"loadStats(""data/Mavro.txt"", u);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,72,"assertEquals(""Mavro: std"", std, u.getStandardDeviation(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,73,"assertEquals(""Mavro: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,75,"//loadStats(""data/Michelso.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,76,"//assertEquals(""Michelso: std"", std, u.getStandardDeviation(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,77,"//assertEquals(""Michelso: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,79,"loadStats(""data/NumAcc1.txt"", u);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,80,"assertEquals(""NumAcc1: std"", std, u.getStandardDeviation(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,81,"assertEquals(""NumAcc1: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,83,"//loadStats(""data/NumAcc2.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,84,"//assertEquals(""NumAcc2: std"", std, u.getStandardDeviation(), .000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,85,"//assertEquals(""NumAcc2: mean"", mean, u.getMean(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,89, Test StorelessDescriptiveStatistics
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,91,ublic void testStoredUnivariateImpl() throws Exception {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,89,* Test StorelessDescriptiveStatistics
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,91,public void testStoredUnivariateImpl() throws Exception {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,93,escriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,95,"oadStats(""data/PiDigits.txt"", u);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,96,"ssertEquals(""PiDigits: std"", std, u.getStandardDeviation(), .0000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,97,"ssertEquals(""PiDigits: mean"", mean, u.getMean(), .0000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,99,"oadStats(""data/Mavro.txt"", u);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,100,"ssertEquals(""Mavro: std"", std, u.getStandardDeviation(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,101,"ssertEquals(""Mavro: mean"", mean, u.getMean(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,103,"/loadStats(""data/Michelso.txt"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,104,"/assertEquals(""Michelso: std"", std, u.getStandardDeviation(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,105,"/assertEquals(""Michelso: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,93,DescriptiveStatistics u = DescriptiveStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,95,"loadStats(""data/PiDigits.txt"", u);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,96,"assertEquals(""PiDigits: std"", std, u.getStandardDeviation(), .0000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,97,"assertEquals(""PiDigits: mean"", mean, u.getMean(), .0000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,99,"loadStats(""data/Mavro.txt"", u);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,100,"assertEquals(""Mavro: std"", std, u.getStandardDeviation(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,101,"assertEquals(""Mavro: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,103,"//loadStats(""data/Michelso.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,104,"//assertEquals(""Michelso: std"", std, u.getStandardDeviation(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,105,"//assertEquals(""Michelso: mean"", mean, u.getMean(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,107,"oadStats(""data/NumAcc1.txt"", u);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,108,"ssertEquals(""NumAcc1: std"", std, u.getStandardDeviation(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,109,"ssertEquals(""NumAcc1: mean"", mean, u.getMean(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,111,"/loadStats(""data/NumAcc2.txt"");"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,112,"/assertEquals(""NumAcc2: std"", std, u.getStandardDeviation(), .000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,113,"/assertEquals(""NumAcc2: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,107,"loadStats(""data/NumAcc1.txt"", u);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,108,"assertEquals(""NumAcc1: std"", std, u.getStandardDeviation(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,109,"assertEquals(""NumAcc1: mean"", mean, u.getMean(), .00000000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,111,"//loadStats(""data/NumAcc2.txt"");"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,112,"//assertEquals(""NumAcc2: std"", std, u.getStandardDeviation(), .000000001);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,113,"//assertEquals(""NumAcc2: mean"", mean, u.getMean(), .00000000000001);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,117, loads a DescriptiveStatistics off of a test file
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,118, @param file
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,119, @param statistical summary
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,121,"rivate void loadStats(String resource, Object u) throws Exception {"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,123,escriptiveStatistics d = null;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,124,ummaryStatistics s = null;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,125,f (u instanceof DescriptiveStatistics) {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,126, = (DescriptiveStatistics) u;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,127, else {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,128, = (SummaryStatistics) u;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,131,".getClass().getDeclaredMethod(""clear"", null).invoke(u, null);"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,132,ean = Double.NaN;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,133,td = Double.NaN;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,135,ufferedReader in =
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,136,ew BufferedReader(
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,137,ew InputStreamReader(
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,138,etClass().getResourceAsStream(resource)));
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,140,tring line = null;
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,142,or (int j = 0; j < 60; j++) {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,143,ine = in.readLine();
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,144,f (j == 40) {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,145,ean =
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,146,ouble.parseDouble(
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,147,"ine.substring(line.lastIndexOf("":"") + 1).trim());"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,149,f (j == 41) {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,150,td =
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,151,ouble.parseDouble(
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,152,"ine.substring(line.lastIndexOf("":"") + 1).trim());"
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,156,ine = in.readLine();
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,158,hile (line != null) {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,159,f (d != null) {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,160,.addValue(Double.parseDouble(line.trim()));
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,161,  else {
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,162,.addValue(Double.parseDouble(line.trim()));
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,164,ine = in.readLine();
False,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,167,n.close();
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,117,* loads a DescriptiveStatistics off of a test file
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,118,* @param file
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,119,* @param statistical summary
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,121,"private void loadStats(String resource, Object u) throws Exception {"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,123,DescriptiveStatistics d = null;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,124,SummaryStatistics s = null;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,125,if (u instanceof DescriptiveStatistics) {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,126,d = (DescriptiveStatistics) u;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,127,} else {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,128,s = (SummaryStatistics) u;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,131,"u.getClass().getDeclaredMethod(""clear"", null).invoke(u, null);"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,132,mean = Double.NaN;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,133,std = Double.NaN;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,135,BufferedReader in =
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,136,new BufferedReader(
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,137,new InputStreamReader(
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,138,getClass().getResourceAsStream(resource)));
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,140,String line = null;
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,142,for (int j = 0; j < 60; j++) {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,143,line = in.readLine();
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,144,if (j == 40) {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,145,mean =
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,146,Double.parseDouble(
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,147,"line.substring(line.lastIndexOf("":"") + 1).trim());"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,149,if (j == 41) {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,150,std =
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,151,Double.parseDouble(
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,152,"line.substring(line.lastIndexOf("":"") + 1).trim());"
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,156,line = in.readLine();
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,158,while (line != null) {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,159,if (d != null) {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,160,d.addValue(Double.parseDouble(line.trim()));
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,161,}  else {
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,162,s.addValue(Double.parseDouble(line.trim()));
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,164,line = in.readLine();
True,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/org/apache/commons/math/stat/CertifiedDataTest.java,167,in.close();
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,50, = new Frequency();
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,50,f = new Frequency();
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,142,har aChar = 'a';
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,143,har bChar = 'b';
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,144,"tring aString = ""a"";"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,145,.addValue(aChar);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,146,.addValue(bChar);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,147,ry {
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,148,.addValue(aString);
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,149,"ail(""Expecting IllegalArgumentException"");"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,150, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,151,/ expected
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,153,"ssertEquals(""a pct"",0.5,f.getPct(aChar),tolerance);"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,154,"ssertEquals(""b cum pct"",1.0,f.getCumPct(bChar),tolerance);"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,155,"ssertEquals(""a string pct"",0.0,f.getPct(aString),tolerance);"
False,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,156,"ssertEquals(""a string cum pct"",0.0,f.getCumPct(aString),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,142,char aChar = 'a';
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,143,char bChar = 'b';
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,144,"String aString = ""a"";"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,145,f.addValue(aChar);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,146,f.addValue(bChar);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,147,try {
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,148,f.addValue(aString);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,149,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,150,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,151,// expected
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,153,"assertEquals(""a pct"",0.5,f.getPct(aChar),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,154,"assertEquals(""b cum pct"",1.0,f.getCumPct(bChar),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,155,"assertEquals(""a string pct"",0.0,f.getPct(aString),tolerance);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,156,"assertEquals(""a string cum pct"",0.0,f.getCumPct(aString),tolerance);"
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,39,rivate DescriptiveStatistics descriptives;
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,41,rivate SummaryStatistics summaries;
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,43,rivate Map certifiedValues;
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,45,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,46,escriptives = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,47,ummaries = SummaryStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,48,ertifiedValues = new HashMap();
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,50,oadData();
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,39,private DescriptiveStatistics descriptives;
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,41,private SummaryStatistics summaries;
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,43,private Map certifiedValues;
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,45,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,46,descriptives = DescriptiveStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,47,summaries = SummaryStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,48,certifiedValues = new HashMap();
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,50,loadData();
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,53,rivate void loadData() throws IOException {
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,54,ufferedReader in = null;
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,53,private void loadData() throws IOException {
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,54,BufferedReader in = null;
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,56,ry {
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,57,RL resourceURL = getClass().getClassLoader().getResource(getResourceName());
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,58,n = new BufferedReader(new InputStreamReader(resourceURL.openStream()));
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,60,tring line = in.readLine();
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,61,hile (line != null) {
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,63,* this call to StringUtils did little for the
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,64, following conditional structure
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,66,ine = line.trim();
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,56,try {
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,57,URL resourceURL = getClass().getClassLoader().getResource(getResourceName());
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,58,in = new BufferedReader(new InputStreamReader(resourceURL.openStream()));
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,60,String line = in.readLine();
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,61,while (line != null) {
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,63,/* this call to StringUtils did little for the
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,64,* following conditional structure
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,66,line = line.trim();
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,68,/ not empty line or comment
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,69,"f (!("""".equals(line) || line.startsWith(""#""))) {"
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,70,nt n = line.indexOf('=');
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,71,f (n == -1) {
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,72,/ data value
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,73,ouble value = Double.parseDouble(line);
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,74,escriptives.addValue(value);
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,75,ummaries.addValue(value);
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,76, else {
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,77,/ certified value
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,78,"tring name = line.substring(0, n).trim();"
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,79,tring valueString = line.substring(n + 1).trim();
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,80,ouble value = new Double(valueString);
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,81,"ertifiedValues.put(name, value);"
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,84,ine = in.readLine();
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,86, finally {
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,87,f (in != null) {
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,88,n.close();
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,68,// not empty line or comment
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,69,"if (!("""".equals(line) || line.startsWith(""#""))) {"
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,70,int n = line.indexOf('=');
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,71,if (n == -1) {
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,72,// data value
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,73,double value = Double.parseDouble(line);
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,74,descriptives.addValue(value);
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,75,summaries.addValue(value);
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,76,} else {
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,77,// certified value
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,78,"String name = line.substring(0, n).trim();"
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,79,String valueString = line.substring(n + 1).trim();
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,80,Double value = new Double(valueString);
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,81,"certifiedValues.put(name, value);"
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,84,line = in.readLine();
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,86,} finally {
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,87,if (in != null) {
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,88,in.close();
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,94, @return
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,96,rotected abstract String getResourceName();
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,94,* @return
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,96,protected abstract String getResourceName();
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,98,rotected double getMaximumAbsoluteError() {
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,99,eturn 1.0e-5;
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,102,rotected void tearDown() throws Exception {
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,103,escriptives.clear();
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,104,escriptives = null;
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,106,ummaries.clear();
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,107,ummaries = null;
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,109,ertifiedValues.clear();
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,110,ertifiedValues = null;
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,113,ublic void testCertifiedValues() throws Exception {
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,114,terator iter = certifiedValues.keySet().iterator();
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,115,hile (iter.hasNext()) {
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,116,tring name = iter.next().toString();
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,117,ouble expectedValue = (Double)certifiedValues.get(name);
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,118,ry {
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,119,"ouble summariesValue = (Double)this.getProperty(summaries, name);"
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,120,"estUtils.assertEquals(""summary value for "" + name + "" is incorrect."","
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,121,"ummariesValue.doubleValue(), expectedValue.doubleValue(), getMaximumAbsoluteError());"
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,122, catch (Exception ex) {
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,125,ry {
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,126,"ouble descriptivesValue = (Double)this.getProperty(descriptives, name);"
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,127,"estUtils.assertEquals(""descriptive value for "" + name + "" is incorrect."","
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,128,"escriptivesValue.doubleValue(), expectedValue.doubleValue(), getMaximumAbsoluteError());"
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,129, catch (Exception ex) {
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,135,"rotected Object getProperty(Object bean, String name) throws Exception{"
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,136,/ Get the value of prop
False,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,137,"tring prop = ""get"" + name.substring(0,1).toUpperCase() + name.substring(1);"
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,98,protected double getMaximumAbsoluteError() {
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,99,return 1.0e-5;
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,102,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,103,descriptives.clear();
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,104,descriptives = null;
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,106,summaries.clear();
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,107,summaries = null;
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,109,certifiedValues.clear();
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,110,certifiedValues = null;
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,113,public void testCertifiedValues() throws Exception {
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,114,Iterator iter = certifiedValues.keySet().iterator();
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,115,while (iter.hasNext()) {
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,116,String name = iter.next().toString();
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,117,Double expectedValue = (Double)certifiedValues.get(name);
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,118,try {
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,119,"Double summariesValue = (Double)this.getProperty(summaries, name);"
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,120,"TestUtils.assertEquals(""summary value for "" + name + "" is incorrect."","
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,121,"summariesValue.doubleValue(), expectedValue.doubleValue(), getMaximumAbsoluteError());"
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,122,} catch (Exception ex) {
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,125,try {
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,126,"Double descriptivesValue = (Double)this.getProperty(descriptives, name);"
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,127,"TestUtils.assertEquals(""descriptive value for "" + name + "" is incorrect."","
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,128,"descriptivesValue.doubleValue(), expectedValue.doubleValue(), getMaximumAbsoluteError());"
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,129,} catch (Exception ex) {
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,135,"protected Object getProperty(Object bean, String name) throws Exception{"
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,136,// Get the value of prop
True,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,137,"String prop = ""get"" + name.substring(0,1).toUpperCase() + name.substring(1);"
False,src/test/org/apache/commons/math/stat/data/LewTest.java,src/test/org/apache/commons/math/stat/data/LewTest.java,24,rotected String getResourceName() {
False,src/test/org/apache/commons/math/stat/data/LewTest.java,src/test/org/apache/commons/math/stat/data/LewTest.java,25,"eturn ""org/apache/commons/math/stat/data/Lew.txt"";"
True,src/test/org/apache/commons/math/stat/data/LewTest.java,src/test/org/apache/commons/math/stat/data/LewTest.java,24,protected String getResourceName() {
True,src/test/org/apache/commons/math/stat/data/LewTest.java,src/test/org/apache/commons/math/stat/data/LewTest.java,25,"return ""org/apache/commons/math/stat/data/Lew.txt"";"
False,src/test/org/apache/commons/math/stat/data/LotteryTest.java,src/test/org/apache/commons/math/stat/data/LotteryTest.java,24,rotected String getResourceName() {
False,src/test/org/apache/commons/math/stat/data/LotteryTest.java,src/test/org/apache/commons/math/stat/data/LotteryTest.java,25,"eturn ""org/apache/commons/math/stat/data/Lottery.txt"";"
True,src/test/org/apache/commons/math/stat/data/LotteryTest.java,src/test/org/apache/commons/math/stat/data/LotteryTest.java,24,protected String getResourceName() {
True,src/test/org/apache/commons/math/stat/data/LotteryTest.java,src/test/org/apache/commons/math/stat/data/LotteryTest.java,25,"return ""org/apache/commons/math/stat/data/Lottery.txt"";"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,81,escriptiveStatistics u = DescriptiveStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,81,DescriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,97,.getVariance() == 0);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,97,u.getVariance() == 0);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,101,escriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,103,ouble[] testArray =
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,101,DescriptiveStatistics u = DescriptiveStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,103,double[] testArray =
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,106,or( int i = 0; i < testArray.length; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,107,.addValue( testArray[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,110,"ssertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,111,"ssertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,112,"ssertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,113,"ssertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,106,for( int i = 0; i < testArray.length; i++) {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,107,u.addValue( testArray[i]);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,110,"assertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,111,"assertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,112,"assertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,113,"assertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,117,escriptiveStatistics u = DescriptiveStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsImplTest.java,117,DescriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,82,escriptiveStatistics u = DescriptiveStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,82,DescriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,98,.getVariance() == 0);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,98,u.getVariance() == 0);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,102,escriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,104,ouble[] testArray =
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,102,DescriptiveStatistics u = DescriptiveStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,104,double[] testArray =
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,107,or( int i = 0; i < testArray.length; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,108,.addValue( testArray[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,111,"ssertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,112,"ssertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,113,"ssertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,114,"ssertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,107,for( int i = 0; i < testArray.length; i++) {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,108,u.addValue( testArray[i]);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,111,"assertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,112,"assertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,113,"assertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,114,"assertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,118,escriptiveStatistics u = DescriptiveStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,118,DescriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,144,ublic void testAddValue() {
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,145,"ouble[] test1 = {5,4,3,2,1,0};"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,146,"ouble[] test2 = {5,2,1,0,4,3};"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,144,public void testAddValue() {
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,145,"double[] test1 = {5,4,3,2,1,0};"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,146,"double[] test2 = {5,2,1,0,4,3};"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,148,escriptiveStatistics stats = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,149,tats.setWindowSize(12);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,151,or(int i = 0; i < test1.length; i++){
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,152,tats.addValue(test1[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,155,ouble[] test3 = stats.getValues();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,157,or(int i = 0; i < 6; i++){
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,158,"ssertEquals( ""Added value [""+i+""] not equal"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,159,"est3[i], test1[i],0.0);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,160,"/System.out.println(test3[i] + "" ""+test1[i]);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,163,or(int i = 0; i < test2.length; i++){
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,164,tats.addValue(test2[i]);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,148,DescriptiveStatistics stats = DescriptiveStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,149,stats.setWindowSize(12);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,151,for(int i = 0; i < test1.length; i++){
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,152,stats.addValue(test1[i]);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,155,double[] test3 = stats.getValues();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,157,for(int i = 0; i < 6; i++){
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,158,"assertEquals( ""Added value [""+i+""] not equal"","
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,159,"test3[i], test1[i],0.0);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,160,"//System.out.println(test3[i] + "" ""+test1[i]);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,163,for(int i = 0; i < test2.length; i++){
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,164,stats.addValue(test2[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,167,est3 = stats.getValues();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,169,or(int i = 6; i < 12; i++){
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,170,"ssertEquals( ""Added value [""+i+""] not equal"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,171,"est3[i], test2[i-6],0.0);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,172,"/System.out.println(test3[i] + "" ""+test2[i-6]);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,175,or(int i = 0; i < test2.length; i++){
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,176,tats.addValue(test2[i]);
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,167,test3 = stats.getValues();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,169,for(int i = 6; i < 12; i++){
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,170,"assertEquals( ""Added value [""+i+""] not equal"","
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,171,"test3[i], test2[i-6],0.0);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,172,"//System.out.println(test3[i] + "" ""+test2[i-6]);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,175,for(int i = 0; i < test2.length; i++){
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,176,stats.addValue(test2[i]);
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,179,est3 = stats.getValues();
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,181,or(int i = 0; i < 6; i++){
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,182,"ssertEquals( ""Added value [""+i+""] not equal"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,183,"est3[i], test2[i],0.0);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,184,"/System.out.println(test3[i] + "" ""+test2[i]);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,187,or(int i = 6; i < 12; i++){
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,188,"ssertEquals( ""Added value [""+i+""] not equal"","
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,189,"est3[i], test2[i-6],0.0);"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,190,"/System.out.println(test3[i] + "" ""+test2[i-6]);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,179,test3 = stats.getValues();
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,181,for(int i = 0; i < 6; i++){
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,182,"assertEquals( ""Added value [""+i+""] not equal"","
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,183,"test3[i], test2[i],0.0);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,184,"//System.out.println(test3[i] + "" ""+test2[i]);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,187,for(int i = 6; i < 12; i++){
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,188,"assertEquals( ""Added value [""+i+""] not equal"","
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,189,"test3[i], test2[i-6],0.0);"
True,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,190,"//System.out.println(test3[i] + "" ""+test2[i-6]);"
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,49, No argument Constructor
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,51,ublic ListUnivariateImpl(){
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,52,his(new ArrayList());
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,49,* No argument Constructor
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,51,public ListUnivariateImpl(){
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,52,this(new ArrayList());
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,118,alue = transformer.transform(list.get(calcIndex));
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,119, catch (MathException e) {
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,120,.printStackTrace();
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,118,value = transformer.transform(list.get(calcIndex));
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,119,} catch (MathException e) {
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,120,e.printStackTrace();
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,202,his.windowSize = windowSize;
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,203,/Discard elements from the front of the list if the windowSize is less than
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,204,/ the size of the list.
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,205,nt extra = list.size() - windowSize;
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,206,or (int i = 0; i < extra; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,207,ist.remove(0);
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,202,this.windowSize = windowSize;
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,203,//Discard elements from the front of the list if the windowSize is less than
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,204,// the size of the list.
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,205,int extra = list.size() - windowSize;
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,206,for (int i = 0; i < extra; i++) {
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,207,list.remove(0);
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,215,eturn windowSize;
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,215,return windowSize;
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,66,ist externalList = new ArrayList();
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,66,List externalList = new ArrayList();
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,88,ist list = new ArrayList();
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,90,escriptiveStatistics u = new ListUnivariateImpl( list );
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,92,"ssertTrue(""Mean of n = 0 set should be NaN"", Double.isNaN( u.getMean() ) );"
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,93,"ssertTrue(""Standard Deviation of n = 0 set should be NaN"", Double.isNaN( u.getStandardDeviation() ) );"
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,94,"ssertTrue(""Variance of n = 0 set should be NaN"", Double.isNaN(u.getVariance() ) );"
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,96,ist.add( new Double(one));
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,98,"ssertTrue( ""Mean of n = 1 set should be value of single item n1"", u.getMean() == one);"
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,99,"ssertTrue( ""StdDev of n = 1 set should be zero, instead it is: "" + u.getStandardDeviation(), u.getStandardDeviation() == 0);"
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,100,"ssertTrue( ""Variance of n = 1 set should be zero"", u.getVariance() == 0);"
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,88,List list = new ArrayList();
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,90,DescriptiveStatistics u = new ListUnivariateImpl( list );
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,92,"assertTrue(""Mean of n = 0 set should be NaN"", Double.isNaN( u.getMean() ) );"
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,93,"assertTrue(""Standard Deviation of n = 0 set should be NaN"", Double.isNaN( u.getStandardDeviation() ) );"
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,94,"assertTrue(""Variance of n = 0 set should be NaN"", Double.isNaN(u.getVariance() ) );"
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,96,list.add( new Double(one));
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,98,"assertTrue( ""Mean of n = 1 set should be value of single item n1"", u.getMean() == one);"
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,99,"assertTrue( ""StdDev of n = 1 set should be zero, instead it is: "" + u.getStandardDeviation(), u.getStandardDeviation() == 0);"
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,100,"assertTrue( ""Variance of n = 1 set should be zero"", u.getVariance() == 0);"
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,104,escriptiveStatistics u = DescriptiveStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,106,"ouble[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,107,".9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,108,or( int i = 0; i < testArray.length; i++) {
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,109,.addValue( testArray[i]);
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,112,"ssertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,113,"ssertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,114,"ssertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,115,"ssertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,104,DescriptiveStatistics u = DescriptiveStatistics.newInstance();
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,106,"double[] testArray = { 12.5, 12, 11.8, 14.2, 14.9, 14.5, 21, 8.2, 10.3, 11.3, 14.1,"
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,107,"9.9, 12.2, 12, 12.1, 11, 19.8, 11, 10, 8.8, 9, 12.3 };"
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,108,for( int i = 0; i < testArray.length; i++) {
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,109,u.addValue( testArray[i]);
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,112,"assertEquals(""mean"", 12.40455, u.getMean(), 0.0001);"
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,113,"assertEquals(""variance"", 10.00236, u.getVariance(), 0.0001);"
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,114,"assertEquals(""skewness"", 1.437424, u.getSkewness(), 0.0001);"
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,115,"assertEquals(""kurtosis"", 2.37719, u.getKurtosis(), 0.0001);"
False,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,119,istUnivariateImpl u = new ListUnivariateImpl(new ArrayList());
True,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,119,ListUnivariateImpl u = new ListUnivariateImpl(new ArrayList());
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,83,"ssertTrue(""Standard Deviation of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,83,"assertTrue(""Standard Deviation of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,85,"ssertTrue(""Variance of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,85,"assertTrue(""Variance of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,88,* n=1 */
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,89,.addValue(one);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,90,"ssertTrue(""mean should be one (n = 1)"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,91,.getMean() == one);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,92,"ssertTrue(""geometric should be one (n = 1) instead it is "" + u.getGeometricMean(),"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,93,.getGeometricMean() == one);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,94,"ssertTrue(""Std should be zero (n = 1)"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,95,.getStandardDeviation() == 0.0);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,96,"ssertTrue(""variance should be zero (n = 1)"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,97,.getVariance() == 0.0);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,99,* n=2 */
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,100,.addValue(twoF);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,101,"ssertTrue(""Std should not be zero (n = 2)"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,102,.getStandardDeviation() != 0.0);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,103,"ssertTrue(""variance should not be zero (n = 2)"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,104,.getVariance() != 0.0);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,88,/* n=1 */
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,89,u.addValue(one);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,90,"assertTrue(""mean should be one (n = 1)"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,91,u.getMean() == one);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,92,"assertTrue(""geometric should be one (n = 1) instead it is "" + u.getGeometricMean(),"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,93,u.getGeometricMean() == one);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,94,"assertTrue(""Std should be zero (n = 1)"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,95,u.getStandardDeviation() == 0.0);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,96,"assertTrue(""variance should be zero (n = 1)"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,97,u.getVariance() == 0.0);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,99,/* n=2 */
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,100,u.addValue(twoF);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,101,"assertTrue(""Std should not be zero (n = 2)"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,102,u.getStandardDeviation() != 0.0);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,103,"assertTrue(""variance should not be zero (n = 2)"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,104,u.getVariance() != 0.0);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,108,ublic void testProductAndGeometricMean() throws Exception {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,108,public void testProductAndGeometricMean() throws Exception {
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,27, Constructor for ContinuedFractionTest.
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,28, @param name
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,30,ublic ContinuedFractionTest(String name) {
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,31,uper(name);
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,27,* Constructor for ContinuedFractionTest.
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,28,* @param name
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,30,public ContinuedFractionTest(String name) {
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,31,super(name);
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,34,ublic void testGoldenRation(){
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,34,public void testGoldenRation(){
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,36,"ublic double getA(int n, double x) {"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,37,eturn 1.0;
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,36,"public double getA(int n, double x) {"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,37,return 1.0;
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,40,"ublic double getB(int n, double x) {"
False,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,41,eturn 1.0;
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,40,"public double getB(int n, double x) {"
True,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,src/test/org/apache/commons/math/util/ContinuedFractionTest.java,41,return 1.0;
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,35,"ssertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,35,"assertEquals(expected, t.transform(input), 1.0e-4);"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,44,.transform(null);
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,45,"ail(""Expection MathException"");"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,46, catch (MathException e) {
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,47,/ expected
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,44,t.transform(null);
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,45,"fail(""Expection MathException"");"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,46,} catch (MathException e) {
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,47,// expected
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,58,"ssertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,58,"assertEquals(expected, t.transform(input), 1.0e-4);"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,68,"ssertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,68,"assertEquals(expected, t.transform(input), 1.0e-4);"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,78,"ssertEquals(expected, t.transform(input), 1.0e-4);"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,78,"assertEquals(expected, t.transform(input), 1.0e-4);"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,88,.transform(input);
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,89,"ail(""Expecting MathException"");"
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,90, catch (MathException e) {
False,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,91,/ expected
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,88,t.transform(input);
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,89,"fail(""Expecting MathException"");"
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,90,} catch (MathException e) {
True,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,src/test/org/apache/commons/math/util/DefaultTransformerTest.java,91,// expected
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,29,rotected DoubleArray da = null;
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,31,/ Array used to test rolling
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,32,rotected DoubleArray ra = null;
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,34,ublic DoubleArrayAbstractTest(String name) {
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,35,uper(name);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,38,ublic void testAdd1000() {
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,40,or (int i = 0; i < 1000; i++) {
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,41,a.addElement(i);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,44,ssertEquals(
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,45,"Number of elements should be equal to 1000 after adding 1000 values"","
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,46,"000,"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,47,a.getNumElements());
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,49,ssertEquals(
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,50,"The element at the 56th index should be 56"","
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,51,"6.0,"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,52,"a.getElement(56),"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,53,ouble.MIN_VALUE);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,57,ublic void testGetValues() {
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,58,"ouble[] controlArray = { 2.0, 4.0, 6.0 };"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,60,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,61,a.addElement(4.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,62,a.addElement(6.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,63,ouble[] testArray = da.getElements();
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,65,or (int i = 0; i < da.getNumElements(); i++) {
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,66,ssertEquals(
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,67,"The testArray values should equal the controlArray values, index i: """
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,68, i
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,69," "" does not match"","
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,70,"estArray[i],"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,71,"ontrolArray[i],"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,72,ouble.MIN_VALUE);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,77,ublic void testAddElementRolling() {
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,78,a.addElement(0.5);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,79,a.addElement(1.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,80,a.addElement(1.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,81,a.addElement(1.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,82,a.addElement(1.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,83,a.addElement(1.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,84,a.addElementRolling(2.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,86,ssertEquals(
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,87,"There should be 6 elements in the eda"","
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,88,","
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,89,a.getNumElements());
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,90,ssertEquals(
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,91,"The max element should be 2.0"","
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,92,".0,"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,29,protected DoubleArray da = null;
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,31,// Array used to test rolling
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,32,protected DoubleArray ra = null;
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,34,public DoubleArrayAbstractTest(String name) {
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,35,super(name);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,38,public void testAdd1000() {
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,40,for (int i = 0; i < 1000; i++) {
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,41,da.addElement(i);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,44,assertEquals(
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,45,"""Number of elements should be equal to 1000 after adding 1000 values"","
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,46,"1000,"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,47,da.getNumElements());
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,49,assertEquals(
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,50,"""The element at the 56th index should be 56"","
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,51,"56.0,"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,52,"da.getElement(56),"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,53,Double.MIN_VALUE);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,57,public void testGetValues() {
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,58,"double[] controlArray = { 2.0, 4.0, 6.0 };"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,60,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,61,da.addElement(4.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,62,da.addElement(6.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,63,double[] testArray = da.getElements();
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,65,for (int i = 0; i < da.getNumElements(); i++) {
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,66,assertEquals(
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,67,"""The testArray values should equal the controlArray values, index i: """
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,68,+ i
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,69,"+ "" does not match"","
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,70,"testArray[i],"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,71,"controlArray[i],"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,72,Double.MIN_VALUE);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,77,public void testAddElementRolling() {
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,78,ra.addElement(0.5);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,79,ra.addElement(1.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,80,ra.addElement(1.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,81,ra.addElement(1.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,82,ra.addElement(1.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,83,ra.addElement(1.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,84,ra.addElementRolling(2.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,86,assertEquals(
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,87,"""There should be 6 elements in the eda"","
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,88,"6,"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,89,ra.getNumElements());
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,90,assertEquals(
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,91,"""The max element should be 2.0"","
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,92,"2.0,"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,94,ouble.MIN_VALUE);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,95,ssertEquals(
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,96,"The min element should be 1.0"","
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,97,".0,"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,94,Double.MIN_VALUE);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,95,assertEquals(
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,96,"""The min element should be 1.0"","
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,97,"1.0,"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,99,ouble.MIN_VALUE);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,101,or (int i = 0; i < 1024; i++) {
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,102,a.addElementRolling(i);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,105,ssertEquals(
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,106,"We just inserted 1024 rolling elements, num elements should still be 6"","
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,107,","
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,108,a.getNumElements());
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,111,ublic void testMinMax() {
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,112,a.addElement(2.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,113,a.addElement(22.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,114,a.addElement(-2.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,115,a.addElement(21.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,116,a.addElement(22.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,117,a.addElement(42.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,118,a.addElement(62.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,119,a.addElement(22.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,120,a.addElement(122.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,121,a.addElement(1212.0);
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,123,"ssertEquals(""Min should be -2.0"", -2.0, StatUtils.min(da.getElements()), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,124,ssertEquals(
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,125,"Max should be 1212.0"","
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,126,"212.0,"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,99,Double.MIN_VALUE);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,101,for (int i = 0; i < 1024; i++) {
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,102,ra.addElementRolling(i);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,105,assertEquals(
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,106,"""We just inserted 1024 rolling elements, num elements should still be 6"","
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,107,"6,"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,108,ra.getNumElements());
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,111,public void testMinMax() {
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,112,da.addElement(2.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,113,da.addElement(22.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,114,da.addElement(-2.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,115,da.addElement(21.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,116,da.addElement(22.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,117,da.addElement(42.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,118,da.addElement(62.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,119,da.addElement(22.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,120,da.addElement(122.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,121,da.addElement(1212.0);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,123,"assertEquals(""Min should be -2.0"", -2.0, StatUtils.min(da.getElements()), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,124,assertEquals(
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,125,"""Max should be 1212.0"","
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,126,"1212.0,"
False,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,128,ouble.MIN_VALUE);
True,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/util/DoubleArrayAbstractTest.java,128,Double.MIN_VALUE);

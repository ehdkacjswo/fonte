is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,69,eturn Math.sqrt(squareSum());
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,69,if (Math.abs(real) < Math.abs(imaginary)) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,70,if (imaginary == 0.0) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,71,return Math.abs(real);
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,73,double q = real / imaginary;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,74,return (Math.abs(imaginary) * Math.sqrt(1 + q*q));
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,75,} else {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,76,if (real == 0.0) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,77,return Math.abs(imaginary);
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,79,double q = imaginary / real;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,80,return (Math.abs(real) * Math.sqrt(1 + q*q));
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,112,f (Math.abs(rhs.getReal()) < Math.abs(rhs.getImaginary())) {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,113,ouble q = rhs.getReal() / rhs.getImaginary();
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,114,ouble d = (rhs.getReal() * q) + rhs.getImaginary();
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,115,"eturn new Complex(((real * q) + imaginary) / d,"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,116,(imaginary * q) - real) / d);
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,124,double c = rhs.getReal();
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,125,double d = rhs.getImaginary();
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,126,if (c == 0.0 && d == 0.0) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,127,"throw new ArithmeticException(""Error: division by zero."");"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,130,if (Math.abs(c) < Math.abs(d)) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,131,if (d == 0.0) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,132,"return new Complex(real/c, imaginary/c);"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,134,double q = c / d;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,135,double denominator = c * q + d;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,136,"return new Complex((real * q + imaginary) / denominator,"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,137,(imaginary * q - real) / denominator);
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,118,ouble q = rhs.getImaginary() / rhs.getReal();
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,119,ouble d = (rhs.getImaginary() * q) + rhs.getReal();
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,120,"eturn new Complex(((imaginary * q) + real) / d,"
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,121,imaginary - (real * q)) / d);
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,139,if (c == 0.0) {
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,140,"return new Complex(imaginary/d, -real/c);"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,142,double q = d / c;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,143,double denominator = d * q + c;
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,144,"return new Complex((imaginary * q + real) / denominator,"
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,145,(imaginary - real * q) / denominator);
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,219, Return the sum of the squared terms.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,221, @return the square sum.
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,223,rivate double squareSum() {
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,224,eturn real * real + imaginary * imaginary;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,21,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,57,"number of successes must be less than or equal to population size"");"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,56,"""number of successes must be less than or equal to "" +"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,57,"""population size"");"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,72, @throws MathException if the cumulative probability can not be
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,73,            computed due to convergence or other numerical errors.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,75,ublic double cumulativeProbability(int x) throws MathException{
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,73,public double cumulativeProbability(int x) {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,85,} else if (x - domain[0] < domain[1] - x) {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,86,"ret = lowerCumulativeProbability(domain[0], x, n, m, k);"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,88,et = 0.0;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,89,or (int i = domain[0]; i <= x; ++i){
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,90,"et += probability(n, m, k, i);"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,88,"ret = 1.0 - upperCumulativeProbability(x + 1, domain[1], n, m, k);"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,182,"* For this disbution, X, this method returns P(x0 &le; X &le; x1).  This"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,183,* probability is computed by summing the point probabilities for the values
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,184,"* x0, x0 + 1, x0 + 2, ..., x1, in that order."
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,185,"* @param x0 the inclusive, lower bound"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,186,"* @param x1 the inclusive, upper bound"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,187,* @param n the population size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,188,* @param m number of successes in the population.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,189,* @param k the sample size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,190,* @return P(x0 &le; X &le; x1).
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,192,private double lowerCumulativeProbability(
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,193,"int x0, int x1, int n, int m, int k)"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,195,double ret;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,196,ret = 0.0;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,197,for (int i = x0; i <= x1; ++i) {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,198,"ret += probability(n, m, k, i);"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,200,return ret;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,282,"* For this disbution, X, this method returns P(X &ge; x)."
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,283,* @param x the value at which the CDF is evaluated.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,284,* @return upper tail CDF for this distribution.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,286,public double upperCumulativeProbability(int x) {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,287,double ret;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,289,int n = getPopulationSize();
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,290,int m = getNumberOfSuccesses();
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,291,int k = getSampleSize();
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,293,"int[] domain = getDomain(n, m, k);"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,294,if (x < domain[0]) {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,295,ret = 1.0;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,296,} else if(x >= domain[1]) {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,297,ret = 0.0;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,298,} else if (x - domain[0] < domain[1] - x) {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,299,"ret = 1.0 - lowerCumulativeProbability(domain[0], x - 1, n, m, k);"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,300,} else {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,301,"ret = upperCumulativeProbability(x, domain[1], n, m, k);"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,304,return ret;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,308,"* For this disbution, X, this method returns P(x0 &le; X &le; x1).  This"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,309,* probability is computed by summing the point probabilities for the values
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,310,"* x1, x1 - 1, x1 - 2, ..., x0, in that order."
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,311,"* @param x0 the inclusive, lower bound"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,312,"* @param x1 the inclusive, upper bound"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,313,* @param n the population size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,314,* @param m number of successes in the population.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,315,* @param k the sample size.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,316,* @return P(x0 &le; X &le; x1).
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,318,private double upperCumulativeProbability(
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,319,"int x0, int x1, int n, int m, int k)"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,321,double ret = 0.0;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,322,for (int i = x1; i >= x0; --i) {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,323,"ret += probability(n, m, k, i);"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,325,return ret;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,158, else if (a > 1.0 && x > a) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,158,} else if (a >= 1.0 && x > a) {
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,234, else if (x < a || a <= 1.0) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,234,} else if (x < a || a < 1.0) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,607,f (n < 2) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,608,"hrow new IllegalArgumentException(""Input array lengths must be at least 2."");"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,607,if (n < 2 || n != sample2.length) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,608,"throw new IllegalArgumentException(""Input array lengths must be equal and at least 2."");"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,103,* <p>
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,105,* </p>
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,105, The implementation of this method is based on:
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,107,* <p>
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,108,* The implementation of this method is based on equations 14-17 of:
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,107," <li>O. E-gecio-glu, C . K. Koc, J. Rifa i Coma,"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,108," <a href=""http://citeseer.ist.psu.edu/egecioglu91fast.html"">"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,109," On Fast Computation of Continued Fractions</a>, Computers Math. Applic.,"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,110," 21(2--3), 1991, 167--169.</li>"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,110,* <li>
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,111,"*   Eric W. Weisstein. ""Continued Fraction."" From MathWorld--A Wolfram Web"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,112,"*   Resource. <a target=""_blank"""
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,113,"*   href=""http://mathworld.wolfram.com/ContinuedFraction.html"">"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,114,*   http://mathworld.wolfram.com/ContinuedFraction.html</a>
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,115,* </li>
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,117,* The recurrence relationship defined in those equations can result in
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,118,* very large intermediate results which can result in numerical overflow.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,119,"* As a means to combat these overflow conditions, the intermediate results"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,120,* are scaled whenever they threaten to become numerically unstable.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,122,ouble[][] f = new double[2][2];
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,123,ouble[][] a = new double[2][2];
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,124,ouble[][] an = new double[2][2];
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,126,"[0][0] = getA(0, x);"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,127,[0][1] = 1.0;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,128,[1][0] = 1.0;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,129,[1][1] = 0.0;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,131,"eturn evaluate(1, x, a, an, f, epsilon, maxIterations);"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,135," Evaluates the n-th convergent, fn = pn / qn, for this continued fraction"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,136, at the value x.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,137, @param n the convergent to compute.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,138, @param x the evaluation point.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,139, @param a (n-1)-th convergent matrix.  (Input)
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,140, @param an the n-th coefficient matrix. (Output)
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,141, @param f the n-th convergent matrix. (Output)
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,142, @param epsilon maximum error allowed.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,143, @param maxIterations maximum number of convergents
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,144, @return the value of the the n-th convergent for this continued fraction
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,145,         evaluated at x.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,146, @throws MathException if the algorithm fails to converge.
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,148,rivate double evaluate(
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,149,"nt n,"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,150,"ouble x,"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,151,"ouble[][] a,"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,152,"ouble[][] an,"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,153,"ouble[][] f,"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,154,"ouble epsilon,"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,155,nt maxIterations) throws MathException
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,157,ouble ret;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,159,/ create next matrix
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,160,"n[0][0] = getA(n, x);"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,161,n[0][1] = 1.0;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,162,"n[1][0] = getB(n, x);"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,163,n[1][1] = 0.0;
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,165,"/ multiply a and an, save as f"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,166,[0][0] = (a[0][0] * an[0][0]) + (a[0][1] * an[1][0]);
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,167,[0][1] = (a[0][0] * an[0][1]) + (a[0][1] * an[1][1]);
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,168,[1][0] = (a[1][0] * an[0][0]) + (a[1][1] * an[1][0]);
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,169,[1][1] = (a[1][0] * an[0][1]) + (a[1][1] * an[1][1]);
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,171,/ determine if we're close enough
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,172,f (Math.abs((f[0][0] * f[1][1]) - (f[1][0] * f[0][1])) <
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,173,ath.abs(epsilon * f[1][0] * f[1][1]))
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,175,et = f[0][0] / f[1][0];
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,176, else {
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,177,f (n >= maxIterations) {
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,178,hrow new ConvergenceException(
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,179,"Continued fraction convergents failed to converge."");"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,181,/ compute next
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,182,"et = evaluate(n + 1, x, f /* new a */"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,183, an /* reuse an */
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,184, a /* new f */
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,185," epsilon, maxIterations);"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,131,double p0 = 1.0;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,132,"double p1 = getA(0, x);"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,133,double q0 = 0.0;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,134,double q1 = 1.0;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,135,double c = p1 / q1;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,136,int n = 0;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,137,double relativeError = Double.MAX_VALUE;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,138,while (n < maxIterations && relativeError > epsilon) {
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,139,++n;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,140,"double a = getA(n, x);"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,141,"double b = getB(n, x);"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,142,double p2 = a * p1 + b * p0;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,143,double q2 = a * q1 + b * q0;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,144,if (Double.isInfinite(p2) || Double.isInfinite(q2)) {
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,145,// need to scale
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,146,if (a != 0.0) {
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,147,p2 = p1 + (b / a * p0);
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,148,q2 = q1 + (b / a * q0);
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,149,} else if (b != 0) {
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,150,p2 = (a / b * p1) + p0;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,151,q2 = (a / b * q1) + q0;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,152,} else {
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,153,// can not scale an convergent is unbounded.
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,154,throw new ConvergenceException(
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,155,"""Continued fraction convergents diverged to +/- "" +"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,156,"""infinity."");"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,159,double r = p2 / q2;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,160,relativeError = Math.abs(r / c - 1.0);
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,162,// prepare for next iteration
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,163,c = p2 / q2;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,164,p0 = p1;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,165,p1 = p2;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,166,q0 = q1;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,167,q1 = q2;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,170,if (n >= maxIterations) {
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,171,throw new ConvergenceException(
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,172,"""Continued fraction convergents failed to converge."");"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,188,eturn ret;
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,175,return c;
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,2, Copyright 2003-2005 The Apache Software Foundation. Licensed under the Apache
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,3," License, Version 2.0 (the ""License""); you may not use this file except in"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,4, compliance with the License. You may obtain a copy of the License at
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,5, http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,6," or agreed to in writing, software distributed under the License is"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,7," distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,8," KIND, either express or implied. See the License for the specific language"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,9, governing permissions and limitations under the License.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,2,* Copyright 2003-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,14,* limitations under the License.
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,19," @version $Revision$ $Date: 2005-07-30 02:25:26 -0500 (Sat, 30 Jul"
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,20,          2005) $
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,23,* @version $Revision$ $Date$
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,499,ouble sign = sign(x);
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,502,double sign = indicator(x);
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,530,loat sign = sign(x);
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,533,float sign = indicator(x);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,18,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,139,public void testLargeMeanCumulativeProbability() {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,140,PoissonDistribution dist = DistributionFactory.newInstance().createPoissonDistribution(1.0);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,141,double mean = 1.0;
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,142,while (mean <= 10000000.0) {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,143,dist.setMean(mean);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,145,double x = mean * 2.0;
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,146,double dx = x / 10.0;
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,147,while (x >= 0) {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,148,try {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,149,dist.cumulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,150,} catch (MathException ex) {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,151,"fail(""mean of "" + mean + "" and x of "" + x + "" caused "" + ex.getMessage());"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,153,x -= dx;
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,156,mean *= 10.0;
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,160,public void testLargeMeanInverseCumulativeProbability() {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,161,PoissonDistribution dist = DistributionFactory.newInstance().createPoissonDistribution(1.0);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,162,double mean = 1.0;
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,163,while (mean <= 10000000.0) {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,164,dist.setMean(mean);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,166,double p = 0.1;
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,167,double dp = p;
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,168,while (p < 1.0) {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,169,try {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,170,dist.inverseCumulativeProbability(p);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,171,} catch (MathException ex) {
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,172,"fail(""mean of "" + mean + "" and p of "" + p + "" caused "" + ex.getMessage());"
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,174,p += dp;
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,177,mean *= 10.0;
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,425,// access LU decomposition on same object to verify caching.
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,426,lu = m.getLUMatrix();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,427,"assertClose(""LU decomposition"", lu, (RealMatrix) new RealMatrixImpl(testDataLU), normTolerance);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,428,"verifyDecomposition(m, lu);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,650,// dimension underflow
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,651,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,652,"m.setSubMatrix(testData,-1,1);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,653,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,654,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,655,// expected
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,657,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,658,"m.setSubMatrix(testData,1,-1);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,659,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,660,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,661,// expected
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,23,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,117,f = null;
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,118,f = new Frequency();
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,119,"assertEquals(0L, f.getCount('a'));"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,120,"assertEquals(0L, f.getCumFreq('b'));"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,121,"TestUtils.assertEquals(Double.NaN, f.getPct('a'), 0.0);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,122,"TestUtils.assertEquals(Double.NaN, f.getCumPct('b'), 0.0);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,123,f.addValue('a');
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,124,f.addValue('b');
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,125,f.addValue('c');
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,126,f.addValue('d');
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,127,"assertEquals(1L, f.getCount('a'));"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,128,"assertEquals(2L, f.getCumFreq('b'));"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,129,"assertEquals(0.25, f.getPct('a'), 0.0);"
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,130,"assertEquals(0.5, f.getCumPct('b'), 0.0);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,374,try {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,375,"StatUtils.varianceDifference(sample1, small, meanDifference);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,376,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,377,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,378,// expected
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,380,try {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,381,double[] single = {1.0};
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,382,"StatUtils.varianceDifference(single, single, meanDifference);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,383,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,384,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,385,// expected
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,400,"assertEquals(Math.exp(0.5 * StatUtils.sumLog(test, 0, 2)),"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,401,"StatUtils.geometricMean(test, 0, 2), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,76,// invalid percentiles
True,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,77,try {
True,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,78,"p.evaluate(d, 0, d.length, -1.0);"
True,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,79,fail();
True,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,80,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,81,// success
True,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,83,try {
True,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,84,"p.evaluate(d, 0, d.length, 101.0);"
True,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,85,fail();
True,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,86,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,87,// success
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,20,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,562,// special values
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,563,"TestUtils.assertEquals(Float.NaN, MathUtils.round(Float.NaN, 2), 0.0f);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,564,"assertEquals(0.0f, MathUtils.round(0.0f, 2), 0.0f);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,565,"assertEquals(Float.POSITIVE_INFINITY, MathUtils.round(Float.POSITIVE_INFINITY, 2), 0.0f);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,566,"assertEquals(Float.NEGATIVE_INFINITY, MathUtils.round(Float.NEGATIVE_INFINITY, 2), 0.0f);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,658,// special values
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,659,"TestUtils.assertEquals(Double.NaN, MathUtils.round(Double.NaN, 2), 0.0);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,660,"assertEquals(0.0, MathUtils.round(0.0, 2), 0.0);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,661,"assertEquals(Double.POSITIVE_INFINITY, MathUtils.round(Double.POSITIVE_INFINITY, 2), 0.0);"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,662,"assertEquals(Double.NEGATIVE_INFINITY, MathUtils.round(Double.NEGATIVE_INFINITY, 2), 0.0);"

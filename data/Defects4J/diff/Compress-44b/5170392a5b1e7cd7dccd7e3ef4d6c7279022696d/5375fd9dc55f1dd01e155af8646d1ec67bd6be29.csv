is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,101,"this(os, createParameterBuilder().build());"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,105,* Creates a new LZ4 output stream.
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,107,* @param os
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,108,*            An OutputStream to read compressed data from
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,109,* @param params
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,110,*            The parameters to use for LZ77 compression.
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,112,* @throws IOException if reading fails
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,114,"public BlockLZ4CompressorOutputStream(final OutputStream os, Parameters params) throws IOException {"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,102,nt maxLen = BlockLZ4CompressorInputStream.WINDOW_SIZE - 1;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,103,"ompressor = new LZ77Compressor(new Parameters(BlockLZ4CompressorInputStream.WINDOW_SIZE,"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,104,"IN_BACK_REFERENCE_LENGTH, maxLen, maxLen, maxLen),"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,116,"compressor = new LZ77Compressor(params,"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,404,* Returns a builder correctly configured for the LZ4 algorithm.
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,406,public static Parameters.Builder createParameterBuilder() {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,407,int maxLen = BlockLZ4CompressorInputStream.WINDOW_SIZE - 1;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,408,return Parameters.builder(BlockLZ4CompressorInputStream.WINDOW_SIZE)
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,409,.withMinBackReferenceLength(MIN_BACK_REFERENCE_LENGTH)
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,410,.withMaxBackReferenceLength(maxLen)
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,411,.withMaxOffset(maxLen)
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,412,.withMaxLiteralLength(maxLen);
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,66,  <dt><code>minMatchLength</code></dt>
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,67,  <dd>Minimal length of a match found. A true minimum of 3 is
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,66,*  <dt><code>minBackReferenceLength</code></dt>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,67,*  <dd>Minimal length of a back-reference found. A true minimum of 3 is
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,71,  <dt><code>maxMatchLength</code></dt>
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,72,  <dd>Maximal length of a match found.</dd>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,71,*  <dt><code>maxBackReferenceLength</code></dt>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,72,*  <dd>Maximal length of a back-reference found.</dd>
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,138, Represents a back-reference to a match.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,138,* Represents a back-reference.
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,147, Provides the offset of the match.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,147,* Provides the offset of the back-reference.
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,154, Provides the length of the match.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,154,* Provides the length of the back-reference.
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,360,f (!initialized && lookahead >= params.getMinMatchLength()) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,360,if (!initialized && lookahead >= params.getMinBackReferenceLength()) {
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,396,inal int minMatch = params.getMinMatchLength();
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,396,final int minMatch = params.getMinBackReferenceLength();
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,478,inal int minLength = params.getMinMatchLength();
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,478,final int minLength = params.getMinBackReferenceLength();
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,480,"inal int maxPossibleLength = Math.min(params.getMaxMatchLength(), lookahead);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,480,"final int maxPossibleLength = Math.min(params.getMaxBackReferenceLength(), lookahead);"
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,25,ublic static final int TRUE_MIN_MATCH_LENGTH = LZ77Compressor.NUMBER_OF_BYTES_IN_HASH;
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,26,"rivate final int windowSize, minMatchLength, maxMatchLength, maxOffset, maxLiteralLength;"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,26,* The hard-coded absolute minimal length of a back-reference.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,28,public static final int TRUE_MIN_BACK_REFERENCE_LENGTH = LZ77Compressor.NUMBER_OF_BYTES_IN_HASH;
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,29, Initializes the compressor's parameters with a
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,30, <code>minMatchLength</code> of 3 and <code>max*Length</code>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,31,* Initializes the builder for the compressor's parameters with a
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,32,* <code>minBackReferenceLength</code> of 3 and <code>max*Length</code>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,35,* <p>It is recommended to not use this method directly but rather
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,36,* tune a pre-configured builder created by a format specific
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,37,* factory like {@link
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,38,* org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#createParameterBuilder}.</p>
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,34, determines the maximum offset a back-reference can take.
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,35, @throws IllegalArgumentException if <code>windowSize</code>
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,36, is smaller than <code>minMatchLength</code>.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,41,* determines the maximum offset a back-reference can take. Must
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,42,* be a power of two.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,43,* @throws IllegalArgumentException if windowSize is not a power of two.
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,38,ublic Parameters(int windowSize) {
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,39,"his(windowSize, TRUE_MIN_MATCH_LENGTH, windowSize - 1, windowSize - 1, windowSize);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,45,public static Builder builder(int windowSize) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,46,return new Builder(windowSize);
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,43, Initializes the compressor's parameters.
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,45," @param windowSize the size of the sliding window, must be a"
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,46, power of two - this determines the maximum offset a
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,47, back-reference can take.
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,48, @param minMatchLength the minimal length of a match found. A
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,49, true minimum of 3 is hard-coded inside of this implemention
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,50, but bigger lengths can be configured.
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,51, @param maxMatchLength maximal length of a match found. A value
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,52, smaller than <code>minMatchLength</code> as well as values
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,53, bigger than <code>windowSize - 1</code> are interpreted as
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,54, <code>windowSize - 1</code>.
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,55, @param maxOffset maximal offset of a back-reference. A
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,56, non-positive value as well as values bigger than
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,57, <code>windowSize - 1</code> are interpreted as <code>windowSize
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,58, - 1</code>.
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,59, @param maxLiteralLength maximal length of a literal
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,60, block. Negative numbers and 0 as well as values bigger than
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,61, <code>windowSize</code> are interpreted as
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,62, <code>windowSize</code>.
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,63, @throws IllegalArgumentException if <code>windowSize</code> is
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,64, smaller than <code>minMatchLength</code> or not a power of two.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,50,* Builder for {@link Parameters} instances.
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,66,"ublic Parameters(int windowSize, int minMatchLength, int maxMatchLength,"
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,67,"nt maxOffset, int maxLiteralLength) {"
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,68,"his.minMatchLength = Math.max(TRUE_MIN_MATCH_LENGTH, minMatchLength);"
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,69,f (windowSize < this.minMatchLength) {
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,70,"hrow new IllegalArgumentException(""windowSize must be at least as big as minMatchLength"");"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,52,public static class Builder {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,53,private final int windowSize;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,54,"private int minBackReferenceLength, maxBackReferenceLength, maxOffset, maxLiteralLength;"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,56,private Builder(int windowSize) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,57,if (windowSize < 2 || !isPowerOfTwo(windowSize)) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,58,"throw new IllegalArgumentException(""windowSize must be a power of two"");"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,60,this.windowSize = windowSize;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,61,minBackReferenceLength = TRUE_MIN_BACK_REFERENCE_LENGTH;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,62,maxBackReferenceLength = windowSize - 1;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,63,maxOffset = windowSize - 1;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,64,maxLiteralLength = windowSize;
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,72,f (!isPowerOfTwo(windowSize)) {
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,73,"hrow new IllegalArgumentException(""windowSize must be a power of two"");"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,68,* Sets the mininal length of a back-reference.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,70,* <p>Ensures <code>maxBackReferenceLength</code> is not
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,71,* smaller than <code>minBackReferenceLength</code>.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,73,* <p>It is recommended to not use this method directly but
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,74,* rather tune a pre-configured builder created by a format
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,75,* specific factory like {@link
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,76,* org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#createParameterBuilder}.</p>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,78,* @param minBackReferenceLength the minimal length of a back-reference found. A
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,79,* true minimum of 3 is hard-coded inside of this implemention
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,80,* but bigger lengths can be configured.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,81,* @throws IllegalArgumentException if <code>windowSize</code>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,82,* is smaller than <code>minBackReferenceLength</code>.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,84,public Builder withMinBackReferenceLength(int minBackReferenceLength) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,85,"this.minBackReferenceLength = Math.max(TRUE_MIN_BACK_REFERENCE_LENGTH, minBackReferenceLength);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,86,if (windowSize < this.minBackReferenceLength) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,87,"throw new IllegalArgumentException(""minBackReferenceLength can't be bigger than windowSize"");"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,89,if (maxBackReferenceLength < this.minBackReferenceLength) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,90,maxBackReferenceLength = this.minBackReferenceLength;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,92,return this;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,96,* Sets the maximal length of a back-reference.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,98,* <p>It is recommended to not use this method directly but
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,99,* rather tune a pre-configured builder created by a format
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,100,* specific factory like {@link
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,101,* org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#createParameterBuilder}.</p>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,103,* @param maxBackReferenceLength maximal length of a
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,104,* back-reference found. A value smaller than
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,105,* <code>minBackReferenceLength</code> is interpreted as
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,106,* <code>minBackReferenceLength</code>. <code>maxBackReferenceLength</code>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,107,* is capped at <code>windowSize - 1</code>.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,109,public Builder withMaxBackReferenceLength(int maxBackReferenceLength) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,110,this.maxBackReferenceLength = maxBackReferenceLength < minBackReferenceLength ? minBackReferenceLength
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,111,": Math.min(maxBackReferenceLength, windowSize - 1);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,112,return this;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,116,* Sets the maximal offset of a back-reference.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,118,* <p>It is recommended to not use this method directly but
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,119,* rather tune a pre-configured builder created by a format
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,120,* specific factory like {@link
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,121,* org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#createParameterBuilder}.</p>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,123,* @param maxOffset maximal offset of a back-reference. A
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,124,* non-positive value as well as values bigger than
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,125,* <code>windowSize - 1</code> are interpreted as <code>windowSize
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,126,* - 1</code>.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,128,public Builder withMaxOffset(int maxOffset) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,129,"this.maxOffset = maxOffset < 1 ? windowSize - 1 : Math.min(maxOffset, windowSize - 1);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,130,return this;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,134,* Sets the maximal length of a literal block.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,136,* <p>It is recommended to not use this method directly but
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,137,* rather tune a pre-configured builder created by a format
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,138,* specific factory like {@link
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,139,* org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#createParameterBuilder}.</p>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,141,* @param maxLiteralLength maximal length of a literal
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,142,* block. Negative numbers and 0 as well as values bigger than
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,143,* <code>windowSize</code> are interpreted as
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,144,* <code>windowSize</code>.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,146,public Builder withMaxLiteralLength(int maxLiteralLength) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,147,this.maxLiteralLength = maxLiteralLength < 1 ? windowSize
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,148,": Math.min(maxLiteralLength, windowSize);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,149,return this;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,153,* Creates the {@link Parameters} instance.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,154,* @return the configured {@link Parameters} instance.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,156,public Parameters build() {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,157,"return new Parameters(windowSize, minBackReferenceLength, maxBackReferenceLength,"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,158,"maxOffset, maxLiteralLength);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,162,"private final int windowSize, minBackReferenceLength, maxBackReferenceLength, maxOffset, maxLiteralLength;"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,164,"private Parameters(int windowSize, int minBackReferenceLength, int maxBackReferenceLength, int maxOffset,"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,165,int maxLiteralLength) {
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,76,nt limit = windowSize - 1;
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,77,"his.maxOffset = maxOffset < 1 ? limit : Math.min(maxOffset, limit);"
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,78,his.maxMatchLength = maxMatchLength < this.minMatchLength ? limit
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,79," Math.min(maxMatchLength, limit);"
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,80,his.maxLiteralLength = maxLiteralLength < 1 ? windowSize
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,81," Math.min(maxLiteralLength, windowSize);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,167,this.minBackReferenceLength = minBackReferenceLength;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,168,this.maxBackReferenceLength = maxBackReferenceLength;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,169,this.maxOffset = maxOffset;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,170,this.maxLiteralLength = maxLiteralLength;
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,93, Gets the minimal length of a match found.
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,94, @return the minimal length of a match found
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,182,* Gets the minimal length of a back-reference found.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,183,* @return the minimal length of a back-reference found
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,96,ublic int getMinMatchLength() {
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,97,eturn minMatchLength;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,185,public int getMinBackReferenceLength() {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,186,return minBackReferenceLength;
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,100, Gets the maximal length of a match found.
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,101, @return the maximal length of a match found
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,189,* Gets the maximal length of a back-reference found.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,190,* @return the maximal length of a back-reference found
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,103,ublic int getMaxMatchLength() {
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,104,eturn maxMatchLength;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,192,public int getMaxBackReferenceLength() {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,193,return maxBackReferenceLength;
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,107, Gets the maximal offset of a match found.
False,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,108, @return the maximal offset of a match found
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,196,* Gets the maximal offset of a back-reference found.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java,197,* @return the maximal offset of a back-reference found
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,85,"his(os, uncompressedSize, createParams(blockSize));"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,85,"this(os, uncompressedSize, createParameterBuilder(blockSize).build());"
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,265,/ package private for tests
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,266,tatic Parameters createParams(int blockSize) {
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,266,* Returns a builder correctly configured for the Snappy algorithm using the gven block size.
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,267,* @param blockSize the block size.
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,269,public static Parameters.Builder createParameterBuilder(int blockSize) {
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,270,"eturn new Parameters(blockSize, MIN_MATCH_LENGTH, MAX_MATCH_LENGTH, blockSize, blockSize);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,273,return Parameters.builder(blockSize)
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,274,.withMinBackReferenceLength(MIN_MATCH_LENGTH)
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,275,.withMaxBackReferenceLength(MAX_MATCH_LENGTH)
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,276,.withMaxOffset(blockSize)
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java,277,.withMaxLiteralLength(blockSize);
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,95,"ist<LZ77Compressor.Block> blocks = compress(new Parameters(128), ONE_TO_TEN);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,95,"List<LZ77Compressor.Block> blocks = compress(newParameters(128), ONE_TO_TEN);"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,102,"ist<LZ77Compressor.Block> blocks = compress(new Parameters(8), ONE_TO_TEN);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,102,"List<LZ77Compressor.Block> blocks = compress(newParameters(8), ONE_TO_TEN);"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,110,"ist<LZ77Compressor.Block> blocks = compress(new Parameters(4), ONE_TO_TEN);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,110,"List<LZ77Compressor.Block> blocks = compress(newParameters(4), ONE_TO_TEN);"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,119,"ist<LZ77Compressor.Block> blocks = compress(new Parameters(8), stagger(ONE_TO_TEN));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,119,"List<LZ77Compressor.Block> blocks = compress(newParameters(8), stagger(ONE_TO_TEN));"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,128,"ist<LZ77Compressor.Block> blocks = compress(new Parameters(128), BLA);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,128,"List<LZ77Compressor.Block> blocks = compress(newParameters(128), BLA);"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,136,ublic void blaExampleWithShorterMatchLength() throws IOException {
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,137,"ist<LZ77Compressor.Block> blocks = compress(new Parameters(128, 3, 5, 0, 0), BLA);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,136,public void blaExampleWithShorterBackReferenceLength() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,137,"List<LZ77Compressor.Block> blocks = compress(newParameters(128, 3, 5, 0, 0), BLA);"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,149,"ist<LZ77Compressor.Block> blocks = compress(new Parameters(8), BLA);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,149,"List<LZ77Compressor.Block> blocks = compress(newParameters(8), BLA);"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,161,"ist<LZ77Compressor.Block> blocks = compress(new Parameters(128), stagger(BLA));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,161,"List<LZ77Compressor.Block> blocks = compress(newParameters(128), stagger(BLA));"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,175,"ist<LZ77Compressor.Block> blocks = compress(new Parameters(1024), SAM);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,175,"List<LZ77Compressor.Block> blocks = compress(newParameters(1024), SAM);"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,202,"Z77Compressor c = new LZ77Compressor(new Parameters(128), new LZ77Compressor.Callback() {"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,202,"LZ77Compressor c = new LZ77Compressor(newParameters(128), new LZ77Compressor.Callback() {"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,230,"Z77Compressor c = new LZ77Compressor(new Parameters(128), new LZ77Compressor.Callback() {"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,230,"LZ77Compressor c = new LZ77Compressor(newParameters(128), new LZ77Compressor.Callback() {"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,259,"Z77Compressor c = new LZ77Compressor(new Parameters(4), new LZ77Compressor.Callback() {"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,259,"LZ77Compressor c = new LZ77Compressor(newParameters(4), new LZ77Compressor.Callback() {"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,289,"Z77Compressor c = new LZ77Compressor(new Parameters(128), new LZ77Compressor.Callback() {"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,289,"LZ77Compressor c = new LZ77Compressor(newParameters(128), new LZ77Compressor.Callback() {"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,300,"Z77Compressor c = new LZ77Compressor(new Parameters(128), new LZ77Compressor.Callback() {"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,300,"LZ77Compressor c = new LZ77Compressor(newParameters(128), new LZ77Compressor.Callback() {"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,339,private static Parameters newParameters(int windowSize) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,340,return Parameters.builder(windowSize).build();
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,343,"private static Parameters newParameters(int windowSize, int minBackReferenceLength, int maxBackReferenceLength,"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,344,"int maxOffset, int maxLiteralLength) {"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,345,return Parameters.builder(windowSize)
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,346,.withMinBackReferenceLength(minBackReferenceLength)
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,347,.withMaxBackReferenceLength(maxBackReferenceLength)
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,348,.withMaxOffset(maxOffset)
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,349,.withMaxLiteralLength(maxLiteralLength)
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,350,.build();
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,29,arameters p = new Parameters(128);
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,29,Parameters p = newParameters(128);
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,31,"ssertEquals(3, p.getMinMatchLength());"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,32,"ssertEquals(127, p.getMaxMatchLength());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,31,"assertEquals(3, p.getMinBackReferenceLength());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,32,"assertEquals(127, p.getMaxBackReferenceLength());"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,38,ublic void minMatchLengthIsAtLeastThree() {
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,39,"arameters p = new Parameters(128, 2, 3, 4, 5);"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,40,"ssertEquals(3, p.getMinMatchLength());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,38,public void minBackReferenceLengthIsAtLeastThree() {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,39,"Parameters p = newParameters(128, 2, 3, 4, 5);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,40,"assertEquals(3, p.getMinBackReferenceLength());"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,44,ublic void maxMatchLengthIsWinsizeMinus1WhenSmallerThanMinMatchLength() {
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,45,"arameters p = new Parameters(128, 2, 2, 4, 5);"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,46,"ssertEquals(127, p.getMaxMatchLength());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,44,public void maxBackReferenceLengthIsMinBackReferenceLengthWhenSmallerThanMinBackReferenceLength() {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,45,"Parameters p = newParameters(128, 2, 2, 4, 5);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,46,"assertEquals(3, p.getMaxBackReferenceLength());"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,50,ublic void maxMatchLengthIsMinMatchLengthIfBothAreEqual() {
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,51,"arameters p = new Parameters(128, 2, 3, 4, 5);"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,52,"ssertEquals(3, p.getMaxMatchLength());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,50,public void maxBackReferenceLengthIsMinBackReferenceLengthWhenSmallerThanMinBackReferenceLengthReversedInvocationOrder() {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,51,Parameters p = Parameters.builder(128)
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,52,.withMaxBackReferenceLength(2)
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,53,.withMinBackReferenceLength(2)
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,54,.withMaxOffset(4)
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,55,.withMaxLiteralLength(5)
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,56,.build();
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,57,"assertEquals(3, p.getMaxBackReferenceLength());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,60,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,61,public void maxBackReferenceLengthIsMinBackReferenceLengthIfBothAreEqual() {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,62,"Parameters p = newParameters(128, 2, 3, 4, 5);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,63,"assertEquals(3, p.getMaxBackReferenceLength());"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,57,"arameters p = new Parameters(128, 2, 3, 0, 5);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,68,"Parameters p = newParameters(128, 2, 3, 0, 5);"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,63,"arameters p = new Parameters(128, 2, 3, -1, 5);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,74,"Parameters p = newParameters(128, 2, 3, -1, 5);"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,69,"arameters p = new Parameters(128, 2, 3, 129, 5);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,80,"Parameters p = newParameters(128, 2, 3, 129, 5);"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,75,"arameters p = new Parameters(128, 2, 3, 4, 0);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,86,"Parameters p = newParameters(128, 2, 3, 4, 0);"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,81,"arameters p = new Parameters(128, 2, 3, 0, -1);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,92,"Parameters p = newParameters(128, 2, 3, 0, -1);"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,87,"arameters p = new Parameters(128, 2, 3, 0, 259);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,98,"Parameters p = newParameters(128, 2, 3, 0, 259);"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,93,"arameters p = new Parameters(256, 4, 5, 6, 7);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,104,"Parameters p = newParameters(256, 4, 5, 6, 7);"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,95,"ssertEquals(4, p.getMinMatchLength());"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,96,"ssertEquals(5, p.getMaxMatchLength());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,106,"assertEquals(4, p.getMinBackReferenceLength());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,107,"assertEquals(5, p.getMaxBackReferenceLength());"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,102,ublic void windowSizeMustNotBeSmallerThanMinMatchLength() {
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,103,"ew Parameters(128, 200, 300, 400, 500);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,113,public void windowSizeMustNotBeSmallerThanMinBackReferenceLength() {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,114,"newParameters(128, 200, 300, 400, 500);"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,108,"ew Parameters(100, 200, 300, 400, 500);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,119,"newParameters(100, 200, 300, 400, 500);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,122,private static Parameters newParameters(int windowSize) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,123,return Parameters.builder(windowSize).build();
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,126,"private static Parameters newParameters(int windowSize, int minBackReferenceLength, int maxBackReferenceLength,"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,127,"int maxOffset, int maxLiteralLength) {"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,128,return Parameters.builder(windowSize)
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,129,.withMinBackReferenceLength(minBackReferenceLength)
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,130,.withMaxBackReferenceLength(maxBackReferenceLength)
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,131,.withMaxOffset(maxOffset)
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,132,.withMaxLiteralLength(maxLiteralLength)
True,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java,133,.build();
False,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,36,nappyCompressorOutputStream.createParams(SnappyCompressorInputStream.DEFAULT_BLOCK_SIZE));
True,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,36,SnappyCompressorOutputStream.createParameterBuilder(SnappyCompressorInputStream.DEFAULT_BLOCK_SIZE)
True,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,37,.build());
False,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,105,"oundTripTest(f, new Parameters(1 << 17, 4, 64, 1 << 17 - 1, 1 << 17 - 1));"
True,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,106,"roundTripTest(f, newParameters(1 << 17, 4, 64, 1 << 17 - 1, 1 << 17 - 1));"
False,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,131,"oundTripTest(f, new Parameters(1 << 18, 4, 64, 1 << 16 - 1, 1 << 18 - 1));"
True,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,132,"roundTripTest(f, newParameters(1 << 18, 4, 64, 1 << 16 - 1, 1 << 18 - 1));"
True,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,135,"private static Parameters newParameters(int windowSize, int minBackReferenceLength, int maxBackReferenceLength,"
True,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,136,"int maxOffset, int maxLiteralLength) {"
True,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,137,return Parameters.builder(windowSize)
True,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,138,.withMinBackReferenceLength(minBackReferenceLength)
True,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,139,.withMaxBackReferenceLength(maxBackReferenceLength)
True,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,140,.withMaxOffset(maxOffset)
True,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,141,.withMaxLiteralLength(maxLiteralLength)
True,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java,142,.build();

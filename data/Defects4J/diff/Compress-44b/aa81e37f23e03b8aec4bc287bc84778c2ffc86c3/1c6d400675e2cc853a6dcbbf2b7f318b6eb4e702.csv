is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,210,// number of insertString calls for the up to three last bytes of the last match
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,211,private int missedInserts = 0;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,346,catchUpMissedInserts();
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,345,nt hashHead = insertString();
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,348,int hashHead = insertString(currentPosition);
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,356,ookahead -= matchLength;
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,357,/ inserts strings contained in current match
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,358,or (int i = 0; i < matchLength - 1; i++) {
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,359,urrentPosition++;
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,360,nsertString();
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,362,urrentPosition++;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,360,insertStringsInMatch(matchLength);
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,361,lookahead -= matchLength;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,362,currentPosition += matchLength;
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,384,rivate int insertString() {
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,385,"nsertHash = nextHash(insertHash, window[currentPosition -1 + NUMBER_OF_BYTES_IN_HASH]);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,383,private int insertString(int pos) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,384,"insertHash = nextHash(insertHash, window[pos - 1 + NUMBER_OF_BYTES_IN_HASH]);"
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,388,ead[insertHash] = currentPosition;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,387,head[insertHash] = pos;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,391,private void insertStringsInMatch(int matchLength) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,392,// inserts strings contained in current match
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,393,"// insertString inserts the byte 2 bytes after position, which may not yet be available -> missedInserts"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,394,"final int stop = Math.min(matchLength - 1, lookahead - NUMBER_OF_BYTES_IN_HASH);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,395,// currentPosition has been inserted already
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,396,for (int i = 1; i <= stop; i++) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,397,insertString(currentPosition + i);
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,399,missedInserts = matchLength - stop - 1;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,402,private void catchUpMissedInserts() {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,403,while (missedInserts > 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,404,insertString(currentPosition - missedInserts--);
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,393,"allback.accept(new BackReference(matchStart, matchLength));"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,409,"callback.accept(new BackReference(currentPosition - matchStart, matchLength));"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,417,* Searches the hash chain for real matches and returns the length
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,418,* of the longest match (0 if none were found) that isn't too far
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,419,* away (WRT maxOffset).
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,421,* <p>Sets matchStart to the index of the start position of the
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,422,* longest match as a side effect.</p>
False,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,401,eturn 0;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,425,final int minLength = params.getMinMatchSize();
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,426,int longestMatchLength = minLength - 1;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,427,"final int maxPossibleLength = Math.min(params.getMaxMatchSize(), lookahead);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,428,"final int minIndex = Math.max(0, currentPosition - params.getMaxOffset());"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,429,while (matchHead >= minIndex) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,430,int currentLength = 0;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,431,for (int i = 0; i < maxPossibleLength; i++) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,432,if (window[matchHead + i] != window[currentPosition + i]) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,433,break;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,435,currentLength++;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,437,if (currentLength > longestMatchLength) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,438,longestMatchLength = currentLength;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,439,matchStart = matchHead;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,441,matchHead = prev[matchHead & wMask];
True,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java,443,"return longestMatchLength; // < minLength if no matches have been found, will be ignored in compress()"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,21,import java.io.UnsupportedEncodingException;
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,33,"private static final byte[] BLA, SAM, ONE_TO_TEN;"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,35,static {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,36,try {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,38,"* Example from ""An Explanation of the Deflate Algorithm"" by ""Antaeus Feldspar""."
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,39,"* @see ""http://zlib.net/feldspar.html"""
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,41,"BLA = ""Blah blah blah blah blah!"".getBytes(""ASCII"");"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,44,* Example from Wikipedia article about LZSS.
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,45,* Note the example uses indices instead of offsets.
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,46,"* @see ""https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Storer%E2%80%93Szymanski"""
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,48,"SAM = (""I am Sam\n"""
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,49,"+ ""\n"""
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,50,"+ ""Sam I am\n"""
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,51,"+ ""\n"""
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,52,"+ ""That Sam-I-am!\n"""
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,53,"+ ""That Sam-I-am!\n"""
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,54,"+ ""I do not like\n"""
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,55,"+ ""that Sam-I-am!\n"""
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,56,"+ ""\n"""
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,57,"+ ""Do you like green eggs and ham?\n"""
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,58,"+ ""\n"""
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,59,"+ ""I do not like them, Sam-I-am.\n"""
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,60,"+ ""I do not like green eggs and ham."").getBytes(""ASCII"");"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,61,} catch (UnsupportedEncodingException ex) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,62,"throw new RuntimeException(""ASCII not supported"");"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,64,"ONE_TO_TEN = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,72,//System.err.println(block);
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,59,"yte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,60,"ist<LZ77Compressor.Block> blocks = compress(new Parameters(128), data);"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,61,"ssertEquals(2, blocks.size());"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,62,"ssertEquals(LZ77Compressor.LiteralBlock.class, blocks.get(0).getClass());"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,63,"ssertArrayEquals(data, ((LZ77Compressor.LiteralBlock) blocks.get(0)).getData());"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,64,"ssertEquals(LZ77Compressor.EOD.class, blocks.get(1).getClass());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,95,"List<LZ77Compressor.Block> blocks = compress(new Parameters(128), ONE_TO_TEN);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,96,"assertSize(2, blocks);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,97,"assertLiteralBlock(ONE_TO_TEN, blocks.get(0));"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,69,"yte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,70,"ist<LZ77Compressor.Block> blocks = compress(new Parameters(8), data);"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,71,"ssertEquals(3, blocks.size());"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,72,"ssertEquals(LZ77Compressor.LiteralBlock.class, blocks.get(0).getClass());"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,73,"ssertArrayEquals(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 },"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,74,(LZ77Compressor.LiteralBlock) blocks.get(0)).getData());
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,75,"ssertEquals(LZ77Compressor.LiteralBlock.class, blocks.get(1).getClass());"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,76,"ssertArrayEquals(new byte[] { 9, 10 },"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,77,(LZ77Compressor.LiteralBlock) blocks.get(1)).getData());
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,78,"ssertEquals(LZ77Compressor.EOD.class, blocks.get(2).getClass());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,102,"List<LZ77Compressor.Block> blocks = compress(new Parameters(8), ONE_TO_TEN);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,103,"assertSize(3, blocks);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,104,"assertLiteralBlock(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, blocks.get(0));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,105,"assertLiteralBlock(new byte[] { 9, 10 }, blocks.get(1));"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,83,"yte[] data = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,84,"ist<LZ77Compressor.Block> blocks = compress(new Parameters(4), data);"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,85,"ssertEquals(4, blocks.size());"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,86,"ssertEquals(LZ77Compressor.LiteralBlock.class, blocks.get(0).getClass());"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,87,"ssertArrayEquals(new byte[] { 1, 2, 3, 4 },"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,88,(LZ77Compressor.LiteralBlock) blocks.get(0)).getData());
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,89,"ssertEquals(LZ77Compressor.LiteralBlock.class, blocks.get(1).getClass());"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,90,"ssertArrayEquals(new byte[] { 5, 6, 7, 8 },"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,91,(LZ77Compressor.LiteralBlock) blocks.get(1)).getData());
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,92,"ssertEquals(LZ77Compressor.LiteralBlock.class, blocks.get(2).getClass());"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,93,"ssertArrayEquals(new byte[] { 9, 10 },"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,94,(LZ77Compressor.LiteralBlock) blocks.get(2)).getData());
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,95,"ssertEquals(LZ77Compressor.EOD.class, blocks.get(3).getClass());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,110,"List<LZ77Compressor.Block> blocks = compress(new Parameters(4), ONE_TO_TEN);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,111,"assertSize(4, blocks);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,112,"assertLiteralBlock(new byte[] { 1, 2, 3, 4, }, blocks.get(0));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,113,"assertLiteralBlock(new byte[] { 5, 6, 7, 8 }, blocks.get(1));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,114,"assertLiteralBlock(new byte[] { 9, 10 }, blocks.get(2));"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,100,"ist<LZ77Compressor.Block> blocks = compress(new Parameters(8), new byte[][] {"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,101," 1 }, { 2 }, { 3 } , { 4 }, { 5 },"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,102," 6 }, { 7 }, { 8 } , { 9 }, { 10 },"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,104,"ssertEquals(3, blocks.size());"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,105,"ssertEquals(LZ77Compressor.LiteralBlock.class, blocks.get(0).getClass());"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,106,"ssertArrayEquals(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 },"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,107,(LZ77Compressor.LiteralBlock) blocks.get(0)).getData());
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,108,"ssertEquals(LZ77Compressor.LiteralBlock.class, blocks.get(1).getClass());"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,109,"ssertArrayEquals(new byte[] { 9, 10 },"
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,110,(LZ77Compressor.LiteralBlock) blocks.get(1)).getData());
False,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,111,"ssertEquals(LZ77Compressor.EOD.class, blocks.get(2).getClass());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,119,"List<LZ77Compressor.Block> blocks = compress(new Parameters(8), stagger(ONE_TO_TEN));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,120,"assertSize(3, blocks);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,121,"assertLiteralBlock(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, blocks.get(0));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,122,"assertLiteralBlock(new byte[] { 9, 10 }, blocks.get(1));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,125,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,126,public void blaExampleWithFullArrayAvailableForCompression()
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,127,throws UnsupportedEncodingException {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,128,"List<LZ77Compressor.Block> blocks = compress(new Parameters(128), BLA);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,129,"assertSize(4, blocks);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,130,"assertLiteralBlock(""Blah b"", blocks.get(0));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,131,"assertBackReference(5, 18, blocks.get(1));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,132,"assertLiteralBlock(""!"", blocks.get(2));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,135,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,136,public void blaExampleWithShorterMatchLength() throws UnsupportedEncodingException {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,137,"List<LZ77Compressor.Block> blocks = compress(new Parameters(128, 3, 5, 0, 0), BLA);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,138,"assertSize(7, blocks);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,139,"assertLiteralBlock(""Blah b"", blocks.get(0));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,140,"assertBackReference(5, 5, blocks.get(1));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,141,"assertBackReference(5, 5, blocks.get(2));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,142,"assertBackReference(5, 5, blocks.get(3));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,143,"assertBackReference(5, 3, blocks.get(4));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,144,"assertLiteralBlock(""!"", blocks.get(5));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,147,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,148,public void blaExampleSmallerWindowSize() throws UnsupportedEncodingException {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,149,"List<LZ77Compressor.Block> blocks = compress(new Parameters(8), BLA);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,150,"assertSize(5, blocks);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,151,"assertLiteralBlock(""Blah b"", blocks.get(0));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,152,"assertEquals(LZ77Compressor.BackReference.class, blocks.get(1).getClass());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,153,"assertBackReference(5, 8, blocks.get(1));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,154,"assertBackReference(5, 8, blocks.get(2));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,155,"assertLiteralBlock(""ah!"", blocks.get(3));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,158,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,159,public void blaExampleWithSingleByteWrites() throws UnsupportedEncodingException {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,160,"List<LZ77Compressor.Block> blocks = compress(new Parameters(128), stagger(BLA));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,161,"assertEquals(9, blocks.size());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,162,"assertLiteralBlock(""Blah b"", blocks.get(0));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,163,"assertBackReference(5, 3, blocks.get(1));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,164,"assertBackReference(5, 3, blocks.get(2));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,165,"assertBackReference(5, 3, blocks.get(3));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,166,"assertBackReference(5, 3, blocks.get(4));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,167,"assertBackReference(5, 3, blocks.get(5));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,168,"assertBackReference(5, 3, blocks.get(6));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,169,"assertLiteralBlock(""!"", blocks.get(7));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,172,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,173,public void samIAmExampleWithFullArrayAvailableForCompression() throws UnsupportedEncodingException {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,174,"List<LZ77Compressor.Block> blocks = compress(new Parameters(1024), SAM);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,175,"assertEquals(21, blocks.size());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,176,"assertLiteralBlock(""I am Sam\n\n"", blocks.get(0));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,177,"assertBackReference(5, 3, blocks.get(1));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,178,"assertLiteralBlock("" "", blocks.get(2));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,179,"assertBackReference(14, 4, blocks.get(3));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,180,"assertLiteralBlock(""\n\nThat"", blocks.get(4));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,181,"assertBackReference(20, 4, blocks.get(5));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,182,"assertLiteralBlock(""-I-am!"", blocks.get(6));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,183,"assertBackReference(15, 16, blocks.get(7));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,184,"assertLiteralBlock(""I do not like\nt"", blocks.get(8));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,185,"assertBackReference(29, 14, blocks.get(9));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,186,"assertLiteralBlock(""\nDo you"", blocks.get(10));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,187,"assertBackReference(28, 5, blocks.get(11));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,188,"assertLiteralBlock("" green eggs and ham?\n"", blocks.get(12));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,189,"assertBackReference(63, 14, blocks.get(13));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,190,"assertLiteralBlock("" them,"", blocks.get(14));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,191,"assertBackReference(64, 9, blocks.get(15));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,192,"assertLiteralBlock(""."", blocks.get(16));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,193,"assertBackReference(30, 15, blocks.get(17));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,194,"assertBackReference(65, 18, blocks.get(18));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,195,"assertLiteralBlock(""."", blocks.get(19));"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,198,"private static final void assertSize(int expectedSize, List<LZ77Compressor.Block> blocks) {"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,199,"assertEquals(expectedSize, blocks.size());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,200,"assertEquals(LZ77Compressor.EOD.class, blocks.get(expectedSize - 1).getClass());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,203,"private static final void assertLiteralBlock(String expectedContent, LZ77Compressor.Block block)"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,204,throws UnsupportedEncodingException {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,205,"assertLiteralBlock(expectedContent.getBytes(""ASCII""), block);"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,208,"private static final void assertLiteralBlock(byte[] expectedContent, LZ77Compressor.Block block) {"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,209,"assertEquals(LZ77Compressor.LiteralBlock.class, block.getClass());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,210,"assertArrayEquals(expectedContent, ((LZ77Compressor.LiteralBlock) block).getData());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,213,"private static final void assertBackReference(int expectedOffset, int expectedLength, LZ77Compressor.Block block) {"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,214,"assertEquals(LZ77Compressor.BackReference.class, block.getClass());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,215,LZ77Compressor.BackReference b = (LZ77Compressor.BackReference) block;
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,216,"assertEquals(expectedOffset, b.getOffset());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,217,"assertEquals(expectedLength, b.getLength());"
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,220,private static final byte[][] stagger(byte[] data) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,221,byte[][] r = new byte[data.length][1];
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,222,for (int i = 0; i < data.length; i++) {
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,223,r[i][0] = data[i];
True,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java,225,return r;

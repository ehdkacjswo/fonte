is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,204,oolean expectChecksum = dialect.usesChecksumWithCompressedChunks();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,204,final boolean expectChecksum = dialect.usesChecksumWithCompressedChunks();
False,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,286,haracter.UnicodeBlock block = Character.UnicodeBlock.of(c);
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,286,final Character.UnicodeBlock block = Character.UnicodeBlock.of(c);
False,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,72,"tring input = ""012345678901234567890123456789012345678901234567890123456789"""
True,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,72,"final String input = ""012345678901234567890123456789012345678901234567890123456789"""
False,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,77,"tring expected = ""012345678901234567890123456789012345678901234567890123456789"""
True,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,77,"final String expected = ""012345678901234567890123456789012345678901234567890123456789"""
False,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,87,"tring input = ""012345678901234567890123456789012345678901234567890123456789"";"
True,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,87,"final String input = ""012345678901234567890123456789012345678901234567890123456789"";"
False,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,93,"tring input = ""\b12345678901234567890123456789012345678901234567890123456789"";"
False,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,94,"tring expected = ""?12345678901234567890123456789012345678901234567890123456789"";"
True,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,93,"final String input = ""\b12345678901234567890123456789012345678901234567890123456789"";"
True,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,94,"final String expected = ""?12345678901234567890123456789012345678901234567890123456789"";"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,274,nt b = sevenZFile.read();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,274,final int b = sevenZFile.read();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,190, catch (EOFException ex) {
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,191,tring m = ex.getMessage();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,190,} catch (final EOFException ex) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,191,final String m = ex.getMessage();
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,178,"nputStream is = zip.getInputStream(zip.getEntry(""Index/Document.iwa""));"
True,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,178,"final InputStream is = zip.getInputStream(zip.getEntry(""Index/Document.iwa""));"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,58,* @return configuration options that have been used to create the given InputStream from the given Coder
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,60,"Object getOptionsFromCoder(Coder coder, InputStream in) {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,61,return null;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,34,"nputStream decode(final InputStream in, final Coder coder, byte[] password)"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,35,hrows IOException {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,36,inal int dictionarySizeBits = 0xff & coder.properties[0];
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,37,f ((dictionarySizeBits & (~0x3f)) != 0) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,38,"hrow new IOException(""Unsupported LZMA2 property bits"");"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,40,f (dictionarySizeBits > 40) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,41,"hrow new IOException(""Dictionary larger than 4GiB maximum size"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,34,"InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,35,try {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,36,int dictionarySize = getDictionarySize(coder);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,37,"return new LZMA2InputStream(in, dictionarySize);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,38,} catch (IllegalArgumentException ex) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,39,throw new IOException(ex.getMessage());
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,43,inal int dictionarySize;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,44,f (dictionarySizeBits == 40) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,45,ictionarySize = 0xFFFFffff;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,46, else {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,47,ictionarySize = (2 | (dictionarySizeBits & 0x1)) << (dictionarySizeBits / 2 + 11);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,49,"eturn new LZMA2InputStream(in, dictionarySize);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,61,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,62,"Object getOptionsFromCoder(Coder coder, InputStream in) {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,63,return getDictionarySize(coder);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,73,private int getDictionarySize(Coder coder) throws IllegalArgumentException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,74,final int dictionarySizeBits = 0xff & coder.properties[0];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,75,if ((dictionarySizeBits & (~0x3f)) != 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,76,"throw new IllegalArgumentException(""Unsupported LZMA2 property bits"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,78,if (dictionarySizeBits > 40) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,79,"throw new IllegalArgumentException(""Dictionary larger than 4GiB maximum size"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,81,if (dictionarySizeBits == 40) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,82,return 0xFFFFffff;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,84,return (2 | (dictionarySizeBits & 0x1)) << (dictionarySizeBits / 2 + 11);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,853,ethods.addFirst(new SevenZMethodConfiguration(method));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,854,"methods.addFirst(new SevenZMethodConfiguration(method,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,855,"Coders.findByMethod(method).getOptionsFromCoder(coder, inputStreamStack)));"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,23,import java.util.Arrays;
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,107,public void testReadingBackLZMA2DictSize() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,108,"File output = new File(dir, ""lzma2-dictsize.7z"");"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,109,SevenZOutputFile outArchive = new SevenZOutputFile(output);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,110,try {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,111,"outArchive.setContentMethods(Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.LZMA2, 1 << 20)));"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,112,SevenZArchiveEntry entry = new SevenZArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,113,"entry.setName(""foo.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,114,outArchive.putArchiveEntry(entry);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,115,outArchive.write(new byte[] { 'A' });
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,116,outArchive.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,117,} finally {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,118,outArchive.close();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,121,SevenZFile archive = new SevenZFile(output);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,122,try {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,123,SevenZArchiveEntry entry = archive.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,124,SevenZMethodConfiguration m = entry.getContentMethods().iterator().next();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,125,"assertEquals(SevenZMethod.LZMA2, m.getMethod());"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,126,"assertEquals(1 << 20, m.getOptions());"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,127,} finally {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,128,archive.close();

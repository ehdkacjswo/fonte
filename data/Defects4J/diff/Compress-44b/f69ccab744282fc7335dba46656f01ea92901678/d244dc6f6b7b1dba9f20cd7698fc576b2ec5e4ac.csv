is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,18,package org.apache.commons.compress.archivers.sevenz;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,20,import java.util.BitSet;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,22,class Archive {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,23,/// Offset from beginning of file + SIGNATURE_HEADER_SIZE to packed streams.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,24,long packPos;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,25,/// Size of each packed stream.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,26,long[] packSizes;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,27,/// Whether each particular packed streams has a CRC.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,28,BitSet packCrcsDefined;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,29,"/// CRCs for each packed stream, valid only if that packed stream has one."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,30,int[] packCrcs;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,31,/// Properties of solid compression blocks.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,32,Folder[] folders;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,33,/// Temporary properties for non-empty files (subsumed into the files array later).
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,34,SubStreamsInfo subStreamsInfo;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,35,/// The files and directories in the archive.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,36,SevenZArchiveEntry[] files;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,37,"/// Mapping between folders, files and streams."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java,38,StreamMap streamMap;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,18,package org.apache.commons.compress.archivers.sevenz;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,20,class BindPair {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,21,long inIndex;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java,22,long outIndex;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,18,package org.apache.commons.compress.archivers.sevenz;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,20,class Coder {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,21,byte[] decompressionMethodId;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,22,long numInStreams;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,23,long numOutStreams;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java,24,byte[] properties = null;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,18,package org.apache.commons.compress.archivers.sevenz;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,21,* The unit of solid compression.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,23,class Folder {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,24,"/// List of coders used in this folder, eg. one for compression, one for encryption."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,25,Coder[] coders;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,26,/// Total number of input streams across all coders.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,27,long totalInputStreams;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,28,/// Total number of output streams across all coders.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,29,long totalOutputStreams;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,30,/// Mapping between input and output streams.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,31,BindPair[] bindPairs;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,32,"/// Indeces of input streams, one per input stream not listed in bindPairs."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,33,long[] packedStreams;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,34,"/// Unpack sizes, per each output stream."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,35,long[] unpackSizes;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,36,/// Whether the folder has a CRC.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,37,boolean hasCrc;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,38,"/// The CRC, if present."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,39,int crc;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,40,"/// The number of unpack substreams, one per non-empty file in this folder."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,41,int numUnpackSubStreams;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,43,int findBindPairForInStream(final int index) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,44,for (int i = 0; i < bindPairs.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,45,if (bindPairs[i].inIndex == index) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,46,return i;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,49,return -1;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,52,int findBindPairForOutStream(final int index) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,53,for (int i = 0; i < bindPairs.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,54,if (bindPairs[i].outIndex == index) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,55,return i;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,58,return -1;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,61,long getUnpackSize() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,62,if (totalOutputStreams == 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,63,return 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,65,for (int i = ((int)totalOutputStreams) - 1; i >= 0; i--) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,66,if (findBindPairForOutStream(i) < 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,67,return unpackSizes[i];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,70,return 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,18,package org.apache.commons.compress.archivers.sevenz;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,20,final class NID {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,21,public static final int kEnd = 0x00;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,22,public static final int kHeader = 0x01;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,23,public static final int kArchiveProperties = 0x02;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,24,public static final int kAdditionalStreamsInfo = 0x03;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,25,public static final int kMainStreamsInfo = 0x04;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,26,public static final int kFilesInfo = 0x05;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,27,public static final int kPackInfo = 0x06;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,28,public static final int kUnpackInfo = 0x07;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,29,public static final int kSubStreamsInfo = 0x08;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,30,public static final int kSize = 0x09;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,31,public static final int kCRC = 0x0A;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,32,public static final int kFolder = 0x0B;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,33,public static final int kCodersUnpackSize = 0x0C;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,34,public static final int kNumUnpackStream = 0x0D;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,35,public static final int kEmptyStream = 0x0E;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,36,public static final int kEmptyFile = 0x0F;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,37,public static final int kAnti = 0x10;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,38,public static final int kName = 0x11;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,39,public static final int kCTime = 0x12;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,40,public static final int kATime = 0x13;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,41,public static final int kMTime = 0x14;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,42,public static final int kWinAttributes = 0x15;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,43,public static final int kComment = 0x16;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,44,public static final int kEncodedHeader = 0x17;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,45,public static final int kStartPos = 0x18;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java,46,public static final int kDummy = 0x19;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,18,package org.apache.commons.compress.archivers.sevenz;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,20,import java.util.Calendar;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,21,import java.util.Date;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,22,import java.util.TimeZone;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,24,import org.apache.commons.compress.archivers.ArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,27,* An entry in a 7z archive.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,29,* @NotThreadSafe
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,31,public class SevenZArchiveEntry implements ArchiveEntry {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,32,private String name;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,33,private boolean hasStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,34,private boolean isDirectory;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,35,private boolean isAntiItem;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,36,private boolean hasCreationDate;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,37,private boolean hasLastModifiedDate;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,38,private boolean hasAcessDate;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,39,private long creationDate;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,40,private long lastModifiedDate;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,41,private long accessDate;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,42,private boolean hasWindowsAttributes;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,43,private int windowsAttributes;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,44,private boolean hasCrc;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,45,private int crc;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,46,private long size;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,48,public SevenZArchiveEntry() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,51,public String getName() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,52,return name;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,55,public void setName(String name) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,56,this.name = name;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,59,public boolean hasStream() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,60,return hasStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,63,public void setHasStream(boolean hasStream) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,64,this.hasStream = hasStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,67,public boolean isDirectory() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,68,return isDirectory;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,71,public void setDirectory(boolean isDirectory) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,72,this.isDirectory = isDirectory;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,76,"* Indicates whether this is an ""anti-item"" used in differential backups,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,77,* meaning it should delete the same file from a previous backup.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,78,"* @return true if it is an anti-item, false otherwise"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,80,public boolean isAntiItem() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,81,return isAntiItem;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,85,"* Sets whether this is an ""anti-item"" used in differential backups,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,86,* meaning it should delete the same file from a previous backup.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,87,"* @param isAntiItem true if it is an ait-item, false otherwise"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,89,public void setAntiItem(boolean isAntiItem) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,90,this.isAntiItem = isAntiItem;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,93,public boolean getHasCreationDate() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,94,return hasCreationDate;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,97,public void setHasCreationDate(boolean hasCreationDate) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,98,this.hasCreationDate = hasCreationDate;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,101,public Date getCreationDate() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,102,if (hasCreationDate) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,103,return ntfsTimeToJavaTime(creationDate);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,104,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,105,throw new UnsupportedOperationException(
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,106,"""The entry doesn't have this timestamp"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,110,public void setCreationDate(long ntfsCreationDate) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,111,this.creationDate = ntfsCreationDate;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,114,public void setCreationDate(Date creationDate) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,115,this.creationDate = javaTimeToNtfsTime(creationDate);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,118,public boolean getHasLastModifiedDate() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,119,return hasLastModifiedDate;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,122,public void setHasLastModifiedDate(boolean hasLastModifiedDate) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,123,this.hasLastModifiedDate = hasLastModifiedDate;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,126,public Date getLastModifiedDate() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,127,if (hasLastModifiedDate) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,128,return ntfsTimeToJavaTime(lastModifiedDate);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,129,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,130,throw new UnsupportedOperationException(
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,131,"""The entry doesn't have this timestamp"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,135,public void setLastModifiedDate(long ntfsLastModifiedDate) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,136,this.lastModifiedDate = ntfsLastModifiedDate;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,139,public void setLastModifiedDate(Date lastModifiedDate) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,140,this.lastModifiedDate = javaTimeToNtfsTime(lastModifiedDate);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,143,public boolean getHasAcessDate() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,144,return hasAcessDate;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,147,public void setHasAcessDate(boolean hasAcessDate) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,148,this.hasAcessDate = hasAcessDate;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,151,public Date getAccessDate() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,152,if (hasAcessDate) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,153,return ntfsTimeToJavaTime(accessDate);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,154,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,155,throw new UnsupportedOperationException(
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,156,"""The entry doesn't have this timestamp"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,160,public void setAccessDate(long ntfsAccessDate) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,161,this.accessDate = ntfsAccessDate;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,164,public void setAccessDate(Date accessDate) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,165,this.accessDate = javaTimeToNtfsTime(accessDate);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,168,public boolean getHasWindowsAttributes() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,169,return hasWindowsAttributes;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,172,public void setHasWindowsAttributes(boolean hasWindowsAttributes) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,173,this.hasWindowsAttributes = hasWindowsAttributes;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,176,public int getWindowsAttributes() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,177,return windowsAttributes;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,180,public void setWindowsAttributes(int windowsAttributes) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,181,this.windowsAttributes = windowsAttributes;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,184,public boolean getHasCrc() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,185,return hasCrc;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,188,public void setHasCrc(boolean hasCrc) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,189,this.hasCrc = hasCrc;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,192,public int getCrc() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,193,return crc;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,196,public void setCrc(int crc) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,197,this.crc = crc;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,200,public long getSize() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,201,return size;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,204,public void setSize(long size) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,205,this.size = size;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,209,* Converts NTFS time (100 nanosecond units since 1 January 1601)
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,210,* to Java time.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,211,* @param ntfsTime the NTFS time in 100 nanosecond units
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,212,* @return the Java time
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,214,public static Date ntfsTimeToJavaTime(final long ntfsTime) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,215,final Calendar ntfsEpoch = Calendar.getInstance();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,216,"ntfsEpoch.setTimeZone(TimeZone.getTimeZone(""GMT+0""));"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,217,"ntfsEpoch.set(1601, 0, 1, 0, 0, 0);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,218,"ntfsEpoch.set(Calendar.MILLISECOND, 0);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,219,final long realTime = ntfsEpoch.getTimeInMillis() + (ntfsTime / (10*1000));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,220,return new Date(realTime);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,224,* Converts Java time to NTFS time.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,225,* @param date the Java time
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,226,* @return the NTFS time
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,228,public static long javaTimeToNtfsTime(final Date date) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,229,final Calendar ntfsEpoch = Calendar.getInstance();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,230,"ntfsEpoch.setTimeZone(TimeZone.getTimeZone(""GMT+0""));"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,231,"ntfsEpoch.set(1601, 0, 1, 0, 0, 0);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,232,"ntfsEpoch.set(Calendar.MILLISECOND, 0);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,233,return ((date.getTime() - ntfsEpoch.getTimeInMillis())* 1000 * 10);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,18,package org.apache.commons.compress.archivers.sevenz;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,20,import java.io.ByteArrayInputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,21,import java.io.DataInput;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,22,import java.io.DataInputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,23,import java.io.File;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,24,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,25,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,26,import java.io.RandomAccessFile;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,27,import java.util.Arrays;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,28,import java.util.BitSet;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,29,import java.util.zip.CRC32;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,31,import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,32,import org.tukaani.xz.LZMA2InputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,35,"* Reads a 7z file, using RandomAccessFile under"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,36,* the covers.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,37,* <p>
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,38,* The 7z file format is a flexible container
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,39,"* that can contain many compression types, but"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,40,* at the moment only Copy and LZMA2 are
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,41,"* supported, and archive header compression"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,42,* (which always uses the unsupported LZMA
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,43,* compression) isn't. So the only archives
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,44,* that can be read are the following:
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,45,* <pre>
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,46,* 7z -mhc=off -mx=0 archive.7z files
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,47,* 7z -mhc=off -m0=LZMA2 archive.7z files
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,48,* </pre>
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,49,* <p>
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,50,"* The format is very Windows/Intel specific,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,51,"* so it uses little-endian byte order,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,52,"* doesn't store user/group or permission bits,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,53,* and represents times using NTFS timestamps
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,54,* (100 nanosecond units since 1 January 1601).
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,55,* Hence the official tools recommend against
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,56,"* using it for backup purposes on *nix, and"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,57,* recommend .tar.7z or .tar.lzma or .tar.xz
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,58,* instead.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,59,* <p>
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,60,* Both the header and file contents may be
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,61,* compressed and/or encrypted. With both
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,62,"* encrypted, neither file names nor file"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,63,"* contents can be read, but the use of"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,64,* encryption isn't plausibly deniable.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,66,* @NotThreadSafe
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,68,public class SevenZFile {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,69,private static final boolean DEBUG = false;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,70,private static final int SIGNATURE_HEADER_SIZE = 32;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,71,private RandomAccessFile file;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,72,private final Archive archive;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,73,private int currentEntryIndex = -1;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,74,private int currentFolderIndex = -1;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,75,private InputStream currentFolderInputStream = null;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,76,private InputStream currentEntryInputStream = null;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,78,private static final byte[] sevenZSignature = {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,79,"(byte)'7', (byte)'z', (byte)0xBC, (byte)0xAF, (byte)0x27, (byte)0x1C"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,82,public SevenZFile(final File filename) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,83,boolean succeeded = false;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,84,"this.file = new RandomAccessFile(filename, ""r"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,85,try {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,86,archive = readHeaders();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,87,succeeded = true;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,88,} finally {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,89,if (!succeeded) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,90,this.file.close();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,95,public void close() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,96,if (file != null) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,97,try {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,98,file.close();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,99,} catch (IOException ignored) { // NOPMD
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,101,file = null;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,105,private static void debug(String str) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,106,if (DEBUG) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,107,System.out.println(str);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,111,"private static void debug(String fmt, Object... args) {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,112,if (DEBUG) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,113,"System.out.format(fmt, args);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,117,public SevenZArchiveEntry getNextEntry() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,118,if (currentEntryIndex >= (archive.files.length - 1)) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,119,return null;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,121,++currentEntryIndex;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,122,final SevenZArchiveEntry entry = archive.files[currentEntryIndex];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,123,buildDecodingStream();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,124,return entry;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,127,private Archive readHeaders() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,128,"debug(""SignatureHeader"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,130,final byte[] signature = new byte[6];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,131,file.readFully(signature);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,132,"if (!Arrays.equals(signature, sevenZSignature)) {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,133,"throw new IOException(""Bad 7z signature"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,135,// 7zFormat.txt has it wrong - it's first major then minor
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,136,final byte archiveVersionMajor = file.readByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,137,final byte archiveVersionMinor = file.readByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,138,"debug(""  archiveVersion major=%d, minor=%d\n"","
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,139,"archiveVersionMajor, archiveVersionMinor);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,140,if (archiveVersionMajor != 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,141,"throw new IOException(String.format(""Unsupported 7z version (%d,%d)"","
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,142,"archiveVersionMajor, archiveVersionMinor));"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,145,final int startHeaderCrc = Integer.reverseBytes(file.readInt());
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,146,final StartHeader startHeader = readStartHeader(startHeaderCrc);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,148,final int nextHeaderSizeInt = (int) startHeader.nextHeaderSize;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,149,if (nextHeaderSizeInt != startHeader.nextHeaderSize) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,150,"throw new IOException(""cannot handle nextHeaderSize "" + startHeader.nextHeaderSize);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,152,file.seek(SIGNATURE_HEADER_SIZE + startHeader.nextHeaderOffset);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,153,final byte[] nextHeader = new byte[nextHeaderSizeInt];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,154,file.readFully(nextHeader);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,155,final CRC32 crc = new CRC32();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,156,crc.update(nextHeader);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,157,if (startHeader.nextHeaderCrc != (int) crc.getValue()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,158,"throw new IOException(""NextHeader CRC mismatch"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,161,final Archive archive = new Archive();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,162,final ByteArrayInputStream byteStream = new ByteArrayInputStream(nextHeader);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,163,final DataInputStream nextHeaderInputStream = new DataInputStream(
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,164,byteStream);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,165,int nid = nextHeaderInputStream.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,166,if (nid == NID.kEncodedHeader) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,167,"readEncodedHeader(nextHeaderInputStream, archive);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,168,nid = nextHeaderInputStream.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,170,if (nid == NID.kHeader) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,171,"readHeader(nextHeaderInputStream, archive);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,173,return archive;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,176,private StartHeader readStartHeader(final int startHeaderCrc) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,177,final StartHeader startHeader = new StartHeader();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,178,DataInputStream dataInputStream = null;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,179,try {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,180,dataInputStream = new DataInputStream(new CRC32VerifyingInputStream(
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,181,"new BoundedRandomAccessFileInputStream(20), 20, startHeaderCrc));"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,182,startHeader.nextHeaderOffset = Long.reverseBytes(dataInputStream.readLong());
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,183,startHeader.nextHeaderSize = Long.reverseBytes(dataInputStream.readLong());
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,184,startHeader.nextHeaderCrc = Integer.reverseBytes(dataInputStream.readInt());
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,185,return startHeader;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,186,} finally {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,187,if (dataInputStream != null) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,188,dataInputStream.close();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,193,"private void readHeader(final DataInput header, final Archive archive) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,194,"debug(""Header"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,196,int nid = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,198,if (nid == NID.kArchiveProperties) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,199,readArchiveProperties(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,200,nid = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,203,if (nid == NID.kAdditionalStreamsInfo) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,204,"throw new IOException(""Additional streams unsupported"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,205,//nid = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,208,if (nid == NID.kMainStreamsInfo) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,209,"readStreamsInfo(header, archive);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,210,nid = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,213,if (nid == NID.kFilesInfo) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,214,"readFilesInfo(header, archive);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,215,nid = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,218,if (nid != NID.kEnd) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,219,"throw new IOException(""Badly terminated header"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,223,private void readArchiveProperties(final DataInput input) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,224,// FIXME: the reference implementation just throws them away?
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,225,"debug(""ArchiveProperties"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,227,int nid =  input.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,228,while (nid != NID.kEnd) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,229,final long propertySize = readUint64(input);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,230,final byte[] property = new byte[(int)propertySize];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,231,input.readFully(property);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,232,nid = input.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,236,"private void readEncodedHeader(final DataInputStream header, final Archive archive) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,237,"debug(""EncodedHeader"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,239,"readStreamsInfo(header, archive);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,241,// FIXME: and decompress it etc.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,243,"throw new IOException(""LZMA compression unsupported, so files with compressed header cannot be read"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,244,// FIXME: this extracts the header to an LZMA file which can then be
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,245,// manually decompressed.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,246,//        long offset = SIGNATURE_HEADER_SIZE + archive.packPos;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,247,//        file.seek(offset);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,248,//        long unpackSize = archive.folders[0].getUnpackSize();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,249,//        byte[] packed = new byte[(int)archive.packSizes[0]];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,250,//        file.readFully(packed);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,252,"//        FileOutputStream fos = new FileOutputStream(new File(""/tmp/encodedHeader.7z""));"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,253,//        fos.write(archive.folders[0].coders[0].properties);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,254,//        // size - assuming < 256
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,255,//        fos.write((int)(unpackSize & 0xff));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,256,//        fos.write(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,257,//        fos.write(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,258,//        fos.write(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,259,//        fos.write(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,260,//        fos.write(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,261,//        fos.write(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,262,//        fos.write(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,263,//        fos.write(packed);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,264,//        fos.close();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,267,"private void readStreamsInfo(final DataInput header, final Archive archive) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,268,"debug(""StreamsInfo"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,270,int nid = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,272,if (nid == NID.kPackInfo) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,273,"readPackInfo(header, archive);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,274,nid = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,277,if (nid == NID.kUnpackInfo) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,278,"readUnpackInfo(header, archive);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,279,nid = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,282,if (nid == NID.kSubStreamsInfo) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,283,"readSubStreamsInfo(header, archive);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,284,nid = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,287,if (nid != NID.kEnd) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,288,"throw new IOException(""Badly terminated StreamsInfo"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,292,"private void readPackInfo(final DataInput header, final Archive archive) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,293,"debug(""PackInfo"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,295,archive.packPos = readUint64(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,296,final long numPackStreams = readUint64(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,297,"debug(""  "" + numPackStreams + "" pack streams"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,299,int nid = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,300,if (nid == NID.kSize) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,301,archive.packSizes = new long[(int)numPackStreams];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,302,for (int i = 0; i < archive.packSizes.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,303,archive.packSizes[i] = readUint64(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,304,"debug(""  pack size %d is %d\n"", i, archive.packSizes[i]);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,306,nid = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,309,if (nid == NID.kCRC) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,310,"archive.packCrcsDefined = readAllOrBits(header, (int)numPackStreams);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,311,archive.packCrcs = new int[(int)numPackStreams];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,312,for (int i = 0; i < (int)numPackStreams; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,313,if (archive.packCrcsDefined.get(i)) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,314,archive.packCrcs[i] = Integer.reverseBytes(header.readInt());
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,318,nid = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,321,if (nid != NID.kEnd) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,322,"throw new IOException(""Badly terminated PackInfo ("" + nid + "")"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,326,"private void readUnpackInfo(final DataInput header, final Archive archive) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,327,"debug(""UnpackInfo"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,329,int nid = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,330,if (nid != NID.kFolder) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,331,"throw new IOException(""Expected kFolder, got "" + nid);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,333,final long numFolders = readUint64(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,334,"debug(""  "" + numFolders + "" folders"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,335,final Folder[] folders = new Folder[(int)numFolders];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,336,archive.folders = folders;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,337,final int external = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,338,if (external != 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,339,"throw new IOException(""External unsupported"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,340,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,341,for (int i = 0; i < (int)numFolders; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,342,folders[i] = readFolder(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,346,nid = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,347,if (nid != NID.kCodersUnpackSize) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,348,"throw new IOException(""Expected kCodersUnpackSize, got "" + nid);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,350,for (final Folder folder : folders) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,351,folder.unpackSizes = new long[(int)folder.totalOutputStreams];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,352,for (int i = 0; i < folder.totalOutputStreams; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,353,folder.unpackSizes[i] = readUint64(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,357,nid = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,358,if (nid == NID.kCRC) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,359,"final BitSet crcsDefined = readAllOrBits(header, (int)numFolders);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,360,for (int i = 0; i < (int)numFolders; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,361,if (crcsDefined.get(i)) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,362,folders[i].hasCrc = true;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,363,folders[i].crc = Integer.reverseBytes(header.readInt());
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,364,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,365,folders[i].hasCrc = false;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,369,nid = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,372,if (nid != NID.kEnd) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,373,"throw new IOException(""Badly terminated UnpackInfo"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,377,"private void readSubStreamsInfo(final DataInput header, final Archive archive) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,378,"debug(""SubStreamsInfo"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,380,for (final Folder folder : archive.folders) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,381,folder.numUnpackSubStreams = 1;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,383,int totalUnpackStreams = archive.folders.length;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,385,int nid = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,386,if (nid == NID.kNumUnpackStream) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,387,totalUnpackStreams = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,388,for (final Folder folder : archive.folders) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,389,final long numStreams = readUint64(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,390,folder.numUnpackSubStreams = (int)numStreams;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,391,totalUnpackStreams += numStreams;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,393,nid = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,396,final SubStreamsInfo subStreamsInfo = new SubStreamsInfo();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,397,subStreamsInfo.unpackSizes = new long[(int)totalUnpackStreams];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,398,subStreamsInfo.hasCrc = new BitSet((int)totalUnpackStreams);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,399,subStreamsInfo.crcs = new int[(int)totalUnpackStreams];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,401,int nextUnpackStream = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,402,for (final Folder folder : archive.folders) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,403,if (folder.numUnpackSubStreams == 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,404,continue;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,406,long sum = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,407,if (nid == NID.kSize) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,408,for (int i = 0; i < (folder.numUnpackSubStreams - 1); i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,409,final long size = readUint64(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,410,subStreamsInfo.unpackSizes[nextUnpackStream++] = size;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,411,sum += size;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,414,subStreamsInfo.unpackSizes[nextUnpackStream++] = folder.getUnpackSize() - sum;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,416,if (nid == NID.kSize) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,417,nid = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,420,int numDigests = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,421,for (final Folder folder : archive.folders) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,422,if (folder.numUnpackSubStreams != 1 || !folder.hasCrc) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,423,numDigests += folder.numUnpackSubStreams;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,427,if (nid == NID.kCRC) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,428,"final BitSet hasMissingCrc = readAllOrBits(header, (int)numDigests);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,429,final int[] missingCrcs = new int[(int)numDigests];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,430,for (int i = 0; i < (int)numDigests; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,431,if (hasMissingCrc.get(i)) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,432,missingCrcs[i] = Integer.reverseBytes(header.readInt());
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,435,int nextCrc = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,436,int nextMissingCrc = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,437,for (final Folder folder: archive.folders) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,438,if (folder.numUnpackSubStreams == 1 && folder.hasCrc) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,439,"subStreamsInfo.hasCrc.set(nextCrc, true);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,440,subStreamsInfo.crcs[nextCrc] = folder.crc;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,441,++nextCrc;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,442,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,443,for (int i = 0; i < folder.numUnpackSubStreams; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,444,"subStreamsInfo.hasCrc.set(nextCrc, hasMissingCrc.get(nextMissingCrc));"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,445,subStreamsInfo.crcs[nextCrc] = missingCrcs[nextMissingCrc];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,446,++nextCrc;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,447,++nextMissingCrc;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,452,nid = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,455,if (nid != NID.kEnd) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,456,"throw new IOException(""Badly terminated SubStreamsInfo"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,459,archive.subStreamsInfo = subStreamsInfo;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,462,private Folder readFolder(final DataInput header) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,463,final Folder folder = new Folder();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,465,final long numCoders = readUint64(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,466,final Coder[] coders = new Coder[(int)numCoders];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,467,long totalInStreams = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,468,long totalOutStreams = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,469,for (int i = 0; i < coders.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,470,coders[i] = new Coder();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,471,int bits = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,472,final int idSize = bits & 0xf;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,473,final boolean isSimple = ((bits & 0x10) == 0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,474,final boolean hasAttributes = ((bits & 0x20) != 0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,475,final boolean moreAlternativeMethods = ((bits & 0x80) != 0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,477,coders[i].decompressionMethodId = new byte[idSize];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,478,header.readFully(coders[i].decompressionMethodId);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,479,if (isSimple) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,480,coders[i].numInStreams = 1;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,481,coders[i].numOutStreams = 1;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,482,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,483,coders[i].numInStreams = readUint64(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,484,coders[i].numOutStreams = readUint64(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,486,totalInStreams += coders[i].numInStreams;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,487,totalOutStreams += coders[i].numOutStreams;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,488,if (hasAttributes) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,489,final long propertiesSize = readUint64(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,490,coders[i].properties = new byte[(int)propertiesSize];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,491,header.readFully(coders[i].properties);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,493,if (DEBUG) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,494,final StringBuilder methodStr = new StringBuilder();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,495,for (final byte b : coders[i].decompressionMethodId) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,496,"methodStr.append(String.format(""%02X"", 0xff & b));"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,498,"debug(""  coder entry %d numInStreams=%d, numOutStreams=%d, method=%s, properties=%s\n"", i,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,499,"coders[i].numInStreams, coders[i].numOutStreams, methodStr.toString(),"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,500,Arrays.toString(coders[i].properties));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,502,// would need to keep looping as above:
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,503,while (moreAlternativeMethods) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,504,"throw new IOException(""Alternative methods are unsupported, please report. "" +"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,505,"""The reference implementation doesn't support them either."");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,508,folder.coders = coders;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,509,folder.totalInputStreams = totalInStreams;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,510,folder.totalOutputStreams = totalOutStreams;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,512,if (totalOutStreams == 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,513,"throw new IOException(""Total output streams can't be 0"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,515,final long numBindPairs = totalOutStreams - 1;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,516,final BindPair[] bindPairs = new BindPair[(int)numBindPairs];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,517,for (int i = 0; i < bindPairs.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,518,bindPairs[i] = new BindPair();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,519,bindPairs[i].inIndex = readUint64(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,520,bindPairs[i].outIndex = readUint64(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,521,"debug(""  bind pair in=%d out=%d\n"", bindPairs[i].inIndex, bindPairs[i].outIndex);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,523,folder.bindPairs = bindPairs;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,525,if (totalInStreams < numBindPairs) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,526,"throw new IOException(""Total input streams can't be less than the number of bind pairs"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,528,final long numPackedStreams = totalInStreams - numBindPairs;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,529,final long packedStreams[] = new long[(int)numPackedStreams];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,530,if (numPackedStreams == 1) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,531,int i;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,532,for (i = 0; i < (int)totalInStreams; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,533,if (folder.findBindPairForInStream(i) < 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,534,break;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,537,if (i == (int)totalInStreams) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,538,"throw new IOException(""Couldn't find stream's bind pair index"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,540,packedStreams[0] = i;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,541,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,542,for (int i = 0; i < (int)numPackedStreams; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,543,packedStreams[i] = readUint64(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,546,folder.packedStreams = packedStreams;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,548,return folder;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,551,"private BitSet readAllOrBits(final DataInput header, final int size) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,552,final int areAllDefined = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,553,final BitSet bits;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,554,if (areAllDefined != 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,555,bits = new BitSet(size);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,556,for (int i = 0; i < size; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,557,"bits.set(i, true);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,559,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,560,"bits = readBits(header, size);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,562,return bits;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,565,"private BitSet readBits(final DataInput header, final int size) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,566,final BitSet bits = new BitSet(size);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,567,int mask = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,568,int cache = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,569,for (int i = 0; i < size; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,570,if (mask == 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,571,mask = 0x80;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,572,cache = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,574,"bits.set(i, (cache & mask) != 0);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,575,mask >>>= 1;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,577,return bits;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,580,"private void readFilesInfo(final DataInput header, final Archive archive) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,581,"debug(""FilesInfo"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,583,final long numFiles = readUint64(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,584,final SevenZArchiveEntry[] files = new SevenZArchiveEntry[(int)numFiles];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,585,for (int i = 0; i < files.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,586,files[i] = new SevenZArchiveEntry();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,588,BitSet isEmptyStream = null;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,589,BitSet isEmptyFile = null;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,590,BitSet isAnti = null;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,591,while (true) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,592,final int propertyType = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,593,if (propertyType == 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,594,break;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,596,long size = readUint64(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,597,switch (propertyType) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,598,case NID.kEmptyStream: {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,599,"debug(""  kEmptyStream"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,600,"isEmptyStream = readBits(header, files.length);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,601,break;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,603,case NID.kEmptyFile: {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,604,"debug(""  kEmptyFile"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,605,"isEmptyFile = readBits(header, isEmptyStream.cardinality());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,606,break;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,608,case NID.kAnti: {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,609,"debug(""  kAnti"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,610,"isAnti = readBits(header, isEmptyStream.cardinality());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,611,break;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,613,case NID.kName: {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,614,"debug(""  kNames"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,615,final int external = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,616,if (external != 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,617,"throw new IOException(""Not implemented"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,618,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,619,if (((size - 1) & 1) != 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,620,"throw new IOException(""File names length invalid"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,622,final byte[] names = new byte[(int)(size - 1)];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,623,header.readFully(names);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,624,int nextFile = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,625,int nextName = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,626,for (int i = 0; i < names.length; i += 2) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,627,if (names[i] == 0 && names[i+1] == 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,628,"files[nextFile++].setName(new String(names, nextName, i-nextName, ""UTF-16LE""));"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,629,nextName = i + 2;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,632,if (nextName != names.length || nextFile != files.length) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,633,"throw new IOException(""Error parsing file names"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,636,break;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,638,case NID.kCTime: {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,639,"debug(""  kCreationTime"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,640,"final BitSet timesDefined = readAllOrBits(header, files.length);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,641,final int external = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,642,if (external != 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,643,"throw new IOException(""Unimplemented"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,644,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,645,for (int i = 0; i < files.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,646,files[i].setHasCreationDate(timesDefined.get(i));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,647,if (files[i].getHasCreationDate()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,648,files[i].setCreationDate(Long.reverseBytes(header.readLong()));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,652,break;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,654,case NID.kATime: {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,655,"debug(""  kLastAccessTime"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,656,"final BitSet timesDefined = readAllOrBits(header, files.length);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,657,final int external = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,658,if (external != 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,659,"throw new IOException(""Unimplemented"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,660,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,661,for (int i = 0; i < files.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,662,files[i].setHasAcessDate(timesDefined.get(i));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,663,if (files[i].getHasAcessDate()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,664,files[i].setAccessDate(Long.reverseBytes(header.readLong()));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,668,break;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,670,case NID.kMTime: {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,671,"debug(""  kLastWriteTime"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,672,"final BitSet timesDefined = readAllOrBits(header, files.length);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,673,final int external = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,674,if (external != 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,675,"throw new IOException(""Unimplemented"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,676,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,677,for (int i = 0; i < files.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,678,files[i].setHasLastModifiedDate(timesDefined.get(i));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,679,if (files[i].getHasLastModifiedDate()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,680,files[i].setLastModifiedDate(Long.reverseBytes(header.readLong()));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,684,break;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,686,case NID.kWinAttributes: {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,687,"debug(""  kWinAttributes"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,688,"final BitSet attributesDefined = readAllOrBits(header, files.length);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,689,final int external = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,690,if (external != 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,691,"throw new IOException(""Unimplemented"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,692,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,693,for (int i = 0; i < files.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,694,files[i].setHasWindowsAttributes(attributesDefined.get(i));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,695,if (files[i].getHasWindowsAttributes()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,696,files[i].setWindowsAttributes(Integer.reverseBytes(header.readInt()));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,700,break;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,702,case NID.kStartPos: {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,703,"debug(""  kStartPos"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,704,"throw new IOException(""kStartPos is unsupported, please report"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,706,case NID.kDummy: {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,707,"debug(""  kDummy"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,708,"throw new IOException(""kDummy is unsupported, please report"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,711,default: {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,712,"throw new IOException(""Unknown property "" + propertyType);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,713,// FIXME: Should actually:
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,714,//header.skipBytes((int)size);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,718,int nonEmptyFileCounter = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,719,int emptyFileCounter = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,720,for (int i = 0; i < files.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,721,files[i].setHasStream((isEmptyStream == null) ? true : !isEmptyStream.get(i));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,722,if (files[i].hasStream()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,723,files[i].setDirectory(false);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,724,files[i].setAntiItem(false);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,725,files[i].setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,726,files[i].setCrc(archive.subStreamsInfo.crcs[nonEmptyFileCounter]);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,727,files[i].setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,728,++nonEmptyFileCounter;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,729,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,730,files[i].setDirectory((isEmptyFile == null) ? true : !isEmptyFile.get(emptyFileCounter));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,731,files[i].setAntiItem((isAnti == null) ? false : isAnti.get(emptyFileCounter));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,732,files[i].setHasCrc(false);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,733,files[i].setSize(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,734,++emptyFileCounter;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,737,archive.files = files;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,738,calculateStreamMap(archive);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,741,private void calculateStreamMap(final Archive archive) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,742,final StreamMap streamMap = new StreamMap();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,744,int nextFolderPackStreamIndex = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,745,streamMap.folderFirstPackStreamIndex = new int[archive.folders.length];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,746,for (int i = 0; i < archive.folders.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,747,streamMap.folderFirstPackStreamIndex[i] = nextFolderPackStreamIndex;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,748,nextFolderPackStreamIndex += archive.folders[i].packedStreams.length;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,751,long nextPackStreamOffset = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,752,streamMap.packStreamOffsets = new long[archive.packSizes.length];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,753,for (int i = 0; i < archive.packSizes.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,754,streamMap.packStreamOffsets[i] = nextPackStreamOffset;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,755,nextPackStreamOffset += archive.packSizes[i];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,758,streamMap.folderFirstFileIndex = new int[archive.folders.length];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,759,streamMap.fileFolderIndex = new int[archive.files.length];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,760,int nextFolderIndex = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,761,int nextFolderUnpackStreamIndex = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,762,for (int i = 0; i < archive.files.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,763,if (!archive.files[i].hasStream() && nextFolderUnpackStreamIndex == 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,764,streamMap.fileFolderIndex[i] = -1;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,765,continue;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,767,if (nextFolderUnpackStreamIndex == 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,768,for (; nextFolderIndex < archive.folders.length; ++nextFolderIndex) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,769,streamMap.folderFirstFileIndex[nextFolderIndex] = i;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,770,if (archive.folders[nextFolderIndex].numUnpackSubStreams > 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,771,break;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,774,if (nextFolderIndex >= archive.folders.length) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,775,"throw new IOException(""Too few folders in archive"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,778,streamMap.fileFolderIndex[i] = nextFolderIndex;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,779,if (!archive.files[i].hasStream()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,780,continue;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,782,++nextFolderUnpackStreamIndex;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,783,if (nextFolderUnpackStreamIndex >= archive.folders[nextFolderIndex].numUnpackSubStreams) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,784,++nextFolderIndex;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,785,nextFolderUnpackStreamIndex = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,789,archive.streamMap = streamMap;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,792,private void buildDecodingStream() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,793,final int folderIndex = archive.streamMap.fileFolderIndex[currentEntryIndex];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,794,if (folderIndex < 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,795,currentEntryInputStream = new BoundedInputStream(
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,796,"new ByteArrayInputStream(new byte[0]), 0);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,797,return;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,799,if (currentFolderIndex == folderIndex) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,800,// need to advance the folder input stream past the current file
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,801,drainPreviousEntry();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,802,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,803,currentFolderIndex = folderIndex;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,804,if (currentFolderInputStream != null) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,805,currentFolderInputStream.close();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,806,currentFolderInputStream = null;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,809,final Folder folder = archive.folders[folderIndex];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,810,final int firstPackStreamIndex = archive.streamMap.folderFirstPackStreamIndex[folderIndex];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,811,final long folderOffset = SIGNATURE_HEADER_SIZE + archive.packPos +
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,812,archive.streamMap.packStreamOffsets[firstPackStreamIndex];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,813,"currentFolderInputStream = buildDecoderStack(folder, folderOffset, firstPackStreamIndex);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,815,final SevenZArchiveEntry file = archive.files[currentEntryIndex];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,816,final InputStream fileStream = new BoundedInputStream(
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,817,"currentFolderInputStream, file.getSize());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,818,if (file.getHasCrc()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,819,currentEntryInputStream = new CRC32VerifyingInputStream(
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,820,"fileStream, file.getSize(), file.getCrc());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,821,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,822,currentEntryInputStream = fileStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,827,private void drainPreviousEntry() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,828,if (currentEntryInputStream != null) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,829,final byte[] buffer = new byte[64*1024];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,830,while (currentEntryInputStream.read(buffer) >= 0) { // NOPMD
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,832,currentEntryInputStream.close();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,833,currentEntryInputStream = null;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,837,"private InputStream buildDecoderStack(final Folder folder, final long folderOffset,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,838,final int firstPackStreamIndex) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,839,InputStream inputStreamStack = null;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,840,for (int i = 0; i < folder.coders.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,841,if (i > 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,842,"throw new IOException(""Unsupported multi-codec stream"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,844,file.seek(folderOffset);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,845,if (folder.coders[i].decompressionMethodId.length == 1 &&
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,846,folder.coders[i].decompressionMethodId[0] == 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,847,// 00 - Copy
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,848,inputStreamStack = new BoundedRandomAccessFileInputStream(
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,849,archive.packSizes[firstPackStreamIndex]);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,850,// FIXME: LZMA is the default coder yet ironically we don't have it.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,851,//            } else if (folder.coders[i].decompressionMethodId.length == 3 &&
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,852,//                    folder.coders[i].decompressionMethodId[0] == 3 &&
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,853,//                    folder.coders[i].decompressionMethodId[1] == 1 &&
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,854,//                    folder.coders[i].decompressionMethodId[2] == 1) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,855,//                // 03.. - 7z
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,856,//                //    01 - LZMA
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,857,//                //       01 - Version
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,858,} else if (folder.coders[i].decompressionMethodId.length == 1 &&
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,859,folder.coders[i].decompressionMethodId[0] == 0x21) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,860,// 21 - LZMA2
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,861,final int dictionarySizeBits = 0xff & folder.coders[i].properties[0];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,862,if ((dictionarySizeBits & (~0x3f)) != 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,863,"throw new IOException(""Unsupported LZMA2 property bits"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,865,if (dictionarySizeBits > 40) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,866,"throw new IOException(""Dictionary larger than 4GiB maximum size"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,868,final int dictionarySize;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,869,if (dictionarySizeBits == 40) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,870,dictionarySize = 0xFFFFffff;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,871,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,872,dictionarySize = (2 | (dictionarySizeBits & 0x1)) << (dictionarySizeBits / 2 + 11);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,874,inputStreamStack = new LZMA2InputStream(
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,875,new BoundedRandomAccessFileInputStream(
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,876,"archive.packSizes[firstPackStreamIndex]),"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,877,dictionarySize);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,878,// FIXME: gives corrupt output:
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,879,//            } else if (folder.coders[i].decompressionMethodId.length == 3 &&
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,880,//                    folder.coders[i].decompressionMethodId[0] == 0x4 &&
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,881,//                    folder.coders[i].decompressionMethodId[1] == 0x1 &&
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,882,//                    folder.coders[i].decompressionMethodId[2] == 0x8) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,883,//                // 04.. - Misc
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,884,//                //    00 - Reserved
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,885,//                //    01 - Zip
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,886,//                //       00 - Copy (not used). Use {00} instead
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,887,//                //       01 - Shrink
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,888,//                //       06 - Implode
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,889,//                //       08 - Deflate
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,890,//                return new DeflaterInputStream(
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,891,//                        new BoundedRandomAccessFileInputStream(
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,892,"//                                archive.packSizes[firstPackStreamIndex]),"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,893,"//                                new Deflater(Deflater.DEFAULT_COMPRESSION, true));"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,894,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,895,"throw new IOException(""Unsupported compression method "" +"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,896,Arrays.toString(folder.coders[i].decompressionMethodId));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,899,if (folder.hasCrc) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,900,"return new CRC32VerifyingInputStream(inputStreamStack,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,901,"folder.getUnpackSize(), folder.crc);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,902,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,903,return inputStreamStack;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,907,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,908,return currentEntryInputStream.read();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,911,public int read(byte[] b) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,912,"return read(b, 0, b.length);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,915,"public int read(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,916,"return currentEntryInputStream.read(b, off, len);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,919,private static long readUint64(final DataInput in) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,920,int firstByte = in.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,921,int mask = 0x80;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,922,int value = 0;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,923,for (int i = 0; i < 8; i++) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,924,if ((firstByte & mask) == 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,925,return value | ((firstByte & (mask - 1)) << (8 * i));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,927,int nextByte = in.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,928,value |= (nextByte << (8 * i));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,929,mask >>>= 1;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,931,return value;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,934,private class BoundedRandomAccessFileInputStream extends InputStream {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,935,private long bytesRemaining;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,937,public BoundedRandomAccessFileInputStream(final long size) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,938,bytesRemaining = size;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,941,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,942,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,943,if (bytesRemaining > 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,944,--bytesRemaining;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,945,return file.read();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,946,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,947,return -1;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,951,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,952,"public int read(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,953,if (bytesRemaining == 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,954,return -1;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,956,int bytesToRead = len;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,957,if (bytesToRead > bytesRemaining) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,958,bytesToRead = (int) bytesRemaining;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,960,"final int bytesRead = file.read(b, off, bytesToRead);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,961,if (bytesRead >= 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,962,bytesRemaining -= bytesRead;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,964,return bytesRead;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,967,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,968,public void close() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,972,private static class BoundedInputStream extends InputStream {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,973,private InputStream is;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,974,private long bytesRemaining;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,976,"public BoundedInputStream(final InputStream is, final long size) {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,977,this.is = is;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,978,bytesRemaining = size;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,981,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,982,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,983,if (bytesRemaining > 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,984,--bytesRemaining;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,985,return is.read();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,986,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,987,return -1;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,991,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,992,"public int read(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,993,if (bytesRemaining == 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,994,return -1;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,996,int bytesToRead = len;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,997,if (bytesToRead > bytesRemaining) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,998,bytesToRead = (int) bytesRemaining;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,1000,"final int bytesRead = is.read(b, off, bytesToRead);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,1001,if (bytesRead >= 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,1002,bytesRemaining -= bytesRead;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,1004,return bytesRead;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,1007,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,1008,public void close() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,18,package org.apache.commons.compress.archivers.sevenz;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,20,class StartHeader {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,21,long nextHeaderOffset;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,22,long nextHeaderSize;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java,23,int nextHeaderCrc;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,18,package org.apache.commons.compress.archivers.sevenz;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,20,"/// Map between folders, files and streams."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,21,class StreamMap {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,22,/// The first Archive.packStream index of each folder.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,23,int[] folderFirstPackStreamIndex;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,24,"/// Offset to beginning of this pack stream's data, relative to the beginning of the first pack stream."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,25,long[] packStreamOffsets;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,26,/// Index of first file for each folder.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,27,int[] folderFirstFileIndex;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,28,/// Index of folder for each file.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java,29,int[] fileFolderIndex;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,18,package org.apache.commons.compress.archivers.sevenz;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,20,import java.util.BitSet;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,22,/// Properties for non-empty files.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,23,class SubStreamsInfo {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,24,/// Unpacked size of each unpacked stream.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,25,long[] unpackSizes;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,26,/// Whether CRC is present for each unpacked stream.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,27,BitSet hasCrc;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,28,"/// CRCs of unpacked streams, if present."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java,29,int[] crcs;
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,18,package org.apache.commons.compress.utils;
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,20,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,21,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,22,import java.util.zip.CRC32;
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,24,public class CRC32VerifyingInputStream extends InputStream {
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,25,private final InputStream is;
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,26,private long bytesRemaining;
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,27,private final int expectedCrc32;
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,28,private final CRC32 crc32 = new CRC32();
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,30,"public CRC32VerifyingInputStream(final InputStream is, final long size, final int expectedCrc32) {"
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,31,this.is = is;
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,32,this.expectedCrc32 = expectedCrc32;
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,33,this.bytesRemaining = size;
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,36,@Override
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,37,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,38,if (bytesRemaining <= 0) {
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,39,return -1;
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,41,int ret = is.read();
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,42,if (ret >= 0) {
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,43,crc32.update(ret);
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,44,--bytesRemaining;
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,46,if (bytesRemaining == 0 && expectedCrc32 != (int)crc32.getValue()) {
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,47,"throw new IOException(""CRC32 verification failed"");"
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,49,return ret;
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,52,@Override
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,53,public int read(byte[] b) throws IOException {
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,54,"return read(b, 0, b.length);"
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,57,@Override
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,58,"public int read(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,59,"int ret = is.read(b, off, len);"
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,60,if (ret >= 0) {
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,61,"crc32.update(b, off, ret);"
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,62,bytesRemaining -= ret;
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,64,if (bytesRemaining <= 0 && expectedCrc32 != (int)crc32.getValue()) {
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,65,"throw new IOException(""CRC32 verification failed"");"
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,67,return ret;
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,70,@Override
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,71,public long skip(long n) throws IOException {
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,72,"// Can't really skip, we have to hash everything to verify the checksum"
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,73,if (read() >= 0) {
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,74,return 1;
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,75,} else {
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,76,return 0;
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,80,@Override
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,81,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java,82,is.close();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,4,*  this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,7,*  the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,14,*  See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,15,*  limitations under the License.
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,18,package org.apache.commons.compress.archivers.sevenz;
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,20,import org.apache.commons.compress.AbstractTestCase;
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,22,public class SevenZFileTest extends AbstractTestCase {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,23,public void testHelloWorldHeaderCompressionOffCopy() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,24,"checkHelloWorld(""7z-hello-mhc-off-copy.7z"");"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,27,public void testHelloWorldHeaderCompressionOffLZMA2() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,28,"checkHelloWorld(""7z-hello-mhc-off-lzma2.7z"");"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,31,private void checkHelloWorld(final String filename) throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,32,SevenZFile sevenZFile = new SevenZFile(getFile(filename));
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,33,try {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,34,SevenZArchiveEntry entry = sevenZFile.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,35,"assertEquals(""Hello world.txt"", entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,36,byte[] contents = new byte[(int)entry.getSize()];
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,37,int off = 0;
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,38,while ((off < contents.length)) {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,39,"int bytesRead = sevenZFile.read(contents, off, contents.length - off);"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,40,assert(bytesRead >= 0);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,41,off += bytesRead;
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,43,"assertEquals(""Hello, world!\n"", new String(contents, ""UTF-8""));"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,44,assertNull(sevenZFile.getNextEntry());
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,45,} finally {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,46,sevenZFile.close();

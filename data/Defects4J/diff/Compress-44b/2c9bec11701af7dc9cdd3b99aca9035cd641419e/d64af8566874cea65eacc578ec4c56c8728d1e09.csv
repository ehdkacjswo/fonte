is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,42,mport org.tukaani.xz.LZMA2InputStream;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,106,tatic class LZMA2Decoder extends CoderBase {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,107,Override
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,108,"nputStream decode(final InputStream in, final Coder coder,"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,109,tring password) throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,110,inal int dictionarySizeBits = 0xff & coder.properties[0];
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,111,f ((dictionarySizeBits & (~0x3f)) != 0) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,112,"hrow new IOException(""Unsupported LZMA2 property bits"");"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,114,f (dictionarySizeBits > 40) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,115,"hrow new IOException(""Dictionary larger than 4GiB maximum size"");"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,117,inal int dictionarySize;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,118,f (dictionarySizeBits == 40) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,119,ictionarySize = 0xFFFFffff;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,120, else {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,121,ictionarySize = (2 | (dictionarySizeBits & 0x1)) << (dictionarySizeBits / 2 + 11);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,123,"eturn new LZMA2InputStream(in, dictionarySize);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,18,package org.apache.commons.compress.archivers.sevenz;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,20,import java.io.FilterOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,23,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,24,import org.tukaani.xz.FinishableWrapperOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,25,import org.tukaani.xz.FinishableOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,26,import org.tukaani.xz.LZMA2InputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,27,import org.tukaani.xz.LZMA2Options;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,29,class LZMA2Decoder extends Coders.CoderBase {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,30,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,31,"InputStream decode(final InputStream in, final Coder coder, String password)"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,32,throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,33,final int dictionarySizeBits = 0xff & coder.properties[0];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,34,if ((dictionarySizeBits & (~0x3f)) != 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,35,"throw new IOException(""Unsupported LZMA2 property bits"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,37,if (dictionarySizeBits > 40) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,38,"throw new IOException(""Dictionary larger than 4GiB maximum size"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,40,final int dictionarySize;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,41,if (dictionarySizeBits == 40) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,42,dictionarySize = 0xFFFFffff;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,43,} else {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,44,dictionarySize = (2 | (dictionarySizeBits & 0x1)) << (dictionarySizeBits / 2 + 11);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,46,"return new LZMA2InputStream(in, dictionarySize);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,49,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,50,"OutputStream encode(final OutputStream out, final String password)"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,51,throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,52,LZMA2Options options = new LZMA2Options();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,53,options.setDictSize(LZMA2Options.DICT_SIZE_DEFAULT);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,54,FinishableOutputStream wrapped = new FinishableWrapperOutputStream(out);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,55,return new FinishOnCloseStream(options.getOutputStream(wrapped));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,58,private static class FinishOnCloseStream extends FilterOutputStream {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,60,private FinishOnCloseStream(FinishableOutputStream out) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,61,super(out);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,64,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,65,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,66,((FinishableOutputStream) out).finish();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,67,super.close();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,20,import org.tukaani.xz.LZMA2Options;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,28,** LZMA2 - only supported when reading */
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,29,"ZMA2(new byte[] { (byte)0x21 }),"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,30,** Deflate - only supported when reading */
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,30,/** LZMA2 */
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,31,LZMA2(new byte[] { (byte)0x21 }) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,32,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,33,byte[] getProperties() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,34,int dictSize = LZMA2Options.DICT_SIZE_DEFAULT;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,35,int lead = Integer.numberOfLeadingZeros(dictSize);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,36,int secondBit = (dictSize >>> (30 - lead)) - 2;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,37,return new byte[] {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,38,(byte) ((19 - lead) * 2 + secondBit)
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,42,/** Deflate */
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,32,** BZIP2 - only supported when reading */
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,44,/** BZIP2 */
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,64,byte[] getProperties() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,65,return new byte[0];
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,49,rivate SevenZMethod contentCompression = SevenZMethod.COPY;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,49,private SevenZMethod contentCompression = SevenZMethod.LZMA2;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,315,/ FIXME - deal with coder properties
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,316,eader.write(id.length);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,315,byte[] properties = contentCompression.getProperties();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,317,int codecFlags = id.length;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,318,if (properties.length > 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,319,codecFlags |= 0x20;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,321,header.write(codecFlags);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,324,if (properties.length > 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,325,header.write(properties.length);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,326,header.write(properties);
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,36,public void testSevenZArchiveCreationUsingLZMA2() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,37,testSevenZArchiveCreation(SevenZMethod.LZMA2);

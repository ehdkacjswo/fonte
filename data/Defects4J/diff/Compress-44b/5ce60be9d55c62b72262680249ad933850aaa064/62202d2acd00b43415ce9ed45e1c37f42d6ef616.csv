is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,267,/ offsetRemaining is negative and points into the expanded bytes
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,267,// offsetRemaining is negative or 0 and points into the expanded bytes
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,269,opyOffset = writeOffset  + offsetRemaining;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,269,copyOffset = -offsetRemaining;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,322,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,323,public void rewritingWithFinalBackreferenceAndOffsetBiggerThan1() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,324,"// this caused trouble when expandFromList() fell into the ""offsetRemaining is negative"" self-copy case as the"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,325,// calculation of copyOffset was wrong
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,326,byte[] toCompress = prepareExpected(25);
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,327,for (int i = 0; i < toCompress.length; i += 4) {
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,328,toCompress[i] = 1;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,330,// LZ77Compressor creates a four byte literal and a back-reference with offset 4 and length 21
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,331,// we'll need to split the back-reference and chop off the last 12 bytes
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,332,byte[] compressed = compress(toCompress);
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,333,byte[] expected = prepareExpected(1 + 4 + 2 + 1 + 12);
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,334,expected[0] = (byte) ((4<<4) | 5);
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,335,expected[1] = 1;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,336,expected[5] = 4;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,337,expected[6] = 0;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,338,expected[7] = (byte) (12<<4);
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,339,for (int i = 11; i < expected.length; i += 4) {
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,340,expected[i] = 1;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java,342,"Assert.assertArrayEquals(expected, compressed);"

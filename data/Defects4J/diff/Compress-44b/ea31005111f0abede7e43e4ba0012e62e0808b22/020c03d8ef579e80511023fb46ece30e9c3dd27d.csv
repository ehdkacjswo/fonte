is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,25,* <p>This class is based on a Java port of Julian Seward's
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,26,* blocksort.c in his libbzip2</p>
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,28,* <p>The Burrows-Wheeler transform is a reversible transform of the
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,29,* original data that is supposed to group similiar bytes close to
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,30,* each other.  The idea is to sort all permutations of the input and
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,31,"* only keep the last byte of each permutation.  E.g. for ""Commons"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,32,"* Compress"" you'd get:</p>"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,34,* <pre>
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,35,* Commons Compress
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,36,* CompressCommons
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,37,* essCommons Compr
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,38,* mmons CompressCo
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,39,* mons CompressCom
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,40,* mpressCommons Co
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,41,* ns CompressCommo
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,42,* ommons CompressC
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,43,* ompressCommons C
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,44,* ons CompressComm
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,45,* pressCommons Com
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,46,* ressCommons Comp
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,47,* s CompressCommon
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,48,* sCommons Compres
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,49,* ssCommons Compre
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,50,* </pre>
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,52,"* <p>Which results in a new text ""s romooCCmmpnse"", in adition the"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,53,* index of the first line that contained the original text is kept -
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,54,* in this case it is 0.  The idea is that in a long English text all
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,55,"* permutations that start with ""he"" are likely suffixes of a ""the"" and"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,56,"* thus they end in ""t"" leading to a larger block of ""t""s that can"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,57,"* better be compressed by the subsequent Move-to-Front, run-length"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,58,* und Huffman encoding steps.</p>
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,60,* <p>For more information see for example:</p>
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,61,* <ul>
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,62,*   <li><a
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,63,"*   href=""http://www.hpl.hp.com/techreports/Compaq-DEC/SRC-RR-124.pdf"">Burrows,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,64,"*   M. and Wheeler, D.: A Block-sorting Lossless Data Compression"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,65,*   Algorithm</a></li>
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,66,"*   <li><a href=""http://webglimpse.net/pubs/suffix.pdf"">Manber, U. and"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,67,"*   Myers, G.: Suffix arrays: A new method for on-line string"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,68,*   searches</a></li>
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,69,*   <li><a
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,70,"*   href=""http://www.cs.tufts.edu/~nr/comp150fp/archive/bob-sedgewick/fast-strings.pdf"">Bentley,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,71,"*   J.L. and Sedgewick, R.: Fast Algorithms for Sorting and Searching"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,72,*   Strings</a></li>
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,73,* </ul>
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,80,* Some of the constructs used in the C code cannot be ported
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,81,"* literally to Java - for example macros, unsigned types.  Some"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,82,* code has been hand-tuned to improve performance.  In order to
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,83,* avoid memory pressure some structures are reused for several
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,84,* blocks and some memory is even shared between sorting and the
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,85,* MTF stage even though either algorithm uses it for its own
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,86,* purpose.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,88,* Comments preserved from the actual C code are prefixed with
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,89,"* ""LBZ2:""."
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,93,* 2012-05-20 Stefan Bodewig:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,95,* The class seems to mix several revisions of libbzip2's code.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,96,* The mainSort function and those used by it look closer to the
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,97,* 0.9.5 version but show some variations introduced later.  At
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,98,* the same time the logic to randomize the block on bad input has
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,99,* been dropped after 0.9.0 and replaced by a fallback sorting
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,100,* algorithm.
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,36, <p> If you are ever unlucky/improbable enough to get a stack
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,110,* LBZ2: If you are ever unlucky/improbable enough to get a stack
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,39," elems, so the following limit seems very generous.  </p>"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,113,"* elems, so the following limit seems very generous."
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,44, Knuth's increments seem to work better than Incerpi-Sedgewick here.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,118,* LBZ2: Knuth's increments seem to work better than Incerpi-Sedgewick here.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,159,LBZ2: The following is an implementation of
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,160,"an elegant 3-way quicksort for strings,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,161,"described in a paper ""Fast Algorithms for"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,162,"Sorting and Searching Strings"", by Robert"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,163,Sedgewick and Jon L. Bentley.
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,438,/ Set up the 2-byte frequency table
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,521,// LBZ2: Set up the 2-byte frequency table
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,456,/ Complete the initial radix sort:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,539,// LBZ2: Complete the initial radix sort:
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,479, Now ftab contains the first loc of every small bucket. Calculate the
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,562,* LBZ2: Now ftab contains the first loc of every small bucket. Calculate the
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,507, The main sorting loop.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,590,* LBZ2: The main sorting loop.
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,511," Process big buckets, starting with the least full."
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,594,"* LBZ2: Process big buckets, starting with the least full."
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,517, Complete the big bucket [ss] by quicksorting any unsorted small
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,600,* LBZ2: Complete the big bucket [ss] by quicksorting any unsorted small
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,540,/ Now scan this big bucket so as to synthesise the
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,623,// LBZ2: Now scan this big bucket so as to synthesise the
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,562," The ss big bucket is now done. Record this fact, and update the"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,645,"* LBZ2: The ss big bucket is now done. Record this fact, and update the"

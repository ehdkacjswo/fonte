is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,205, Holds the offsets of the LFH starts for each entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,205,* Holds some book-keeping data for each entry.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,207,"rivate final Map<ZipArchiveEntry, Long> offsets ="
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,207,"private final Map<ZipArchiveEntry, EntryMetaData> metaData ="
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,476,ffsets.clear();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,476,metaData.clear();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,542,riteDataDescriptor(entry.entry);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,542,if (!phased) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,543,writeDataDescriptor(entry.entry);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,698,riteOut(ZipShort.getBytes(versionNeededToExtractMethod(entry.entry.getMethod())));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,700,"writeOut(ZipShort.getBytes(versionNeededToExtract(entry.entry.getMethod(), false, false)));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1032,"ffsets.put(ze, localHeaderStart);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1034,"metaData.put(ze, new EntryMetaData(localHeaderStart, usesDataDescriptor(ze.getMethod(), phased)));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1075,"final boolean dataDescriptor = usesDataDescriptor(zipMethod, phased);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1074,"f (phased &&  !isZip64Required(entry.entry, zip64Mode)){"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1075,"utShort(versionNeededToExtractMethod(zipMethod), buf, LFH_VERSION_NEEDED_OFFSET);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1076, else {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1077,"utShort(versionNeededToExtract(zipMethod, hasZip64Extra(ze)), buf, LFH_VERSION_NEEDED_OFFSET);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1077,"putShort(versionNeededToExtract(zipMethod, hasZip64Extra(ze), dataDescriptor), buf, LFH_VERSION_NEEDED_OFFSET);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1080,"inal GeneralPurposeBit generalPurposeBit = getGeneralPurposeBits(zipMethod, !encodable && fallbackToUTF8);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1079,"final GeneralPurposeBit generalPurposeBit = getGeneralPurposeBits(!encodable && fallbackToUTF8, dataDescriptor);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1172,f (ze.getMethod() != DEFLATED || channel != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1171,"if (!usesDataDescriptor(ze.getMethod(), false)) {"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1201,inal long lfhOffset = offsets.get(ze);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1200,final EntryMetaData entryMetaData = metaData.get(ze);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1205,| lfhOffset >= ZIP64_MAGIC
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1204,|| entryMetaData.offset >= ZIP64_MAGIC
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1217,"andleZip64Extra(ze, lfhOffset, needsZip64Extra);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1216,"handleZip64Extra(ze, entryMetaData.offset, needsZip64Extra);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1219,"eturn createCentralFileHeader(ze, getName(ze), lfhOffset, needsZip64Extra);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1218,"return createCentralFileHeader(ze, getName(ze), entryMetaData, needsZip64Extra);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1226, @param lfhOffset Local file header offset for this file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1225,* @param entryMetaData meta data for this file
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1229,"rivate byte[] createCentralFileHeader(final ZipArchiveEntry ze, final ByteBuffer name, final long lfhOffset,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1228,"private byte[] createCentralFileHeader(final ZipArchiveEntry ze, final ByteBuffer name,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1229,"final EntryMetaData entryMetaData,"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1254,"utShort(versionNeededToExtract(zipMethod, needsZip64Extra), buf, CFH_VERSION_NEEDED_OFFSET);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1255,"etGeneralPurposeBits(zipMethod, !encodable && fallbackToUTF8).encode(buf, CFH_GPB_OFFSET);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1254,"putShort(versionNeededToExtract(zipMethod, needsZip64Extra, entryMetaData.usesDataDescriptor),"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1255,"buf, CFH_VERSION_NEEDED_OFFSET);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1256,"getGeneralPurposeBits(!encodable && fallbackToUTF8, entryMetaData.usesDataDescriptor).encode(buf, CFH_GPB_OFFSET);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1295,f (lfhOffset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1296,if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1298,"utLong(Math.min(lfhOffset, ZIP64_MAGIC), buf, CFH_LFH_OFFSET);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1299,"putLong(Math.min(entryMetaData.offset, ZIP64_MAGIC), buf, CFH_LFH_OFFSET);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1472,"rivate GeneralPurposeBit getGeneralPurposeBits(final int zipMethod, final boolean utfFallback) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1473,"private GeneralPurposeBit getGeneralPurposeBits(final boolean utfFallback, boolean usesDataDescriptor) {"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1475,f (isDeflatedToOutputStream(zipMethod)) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1476,if (usesDataDescriptor) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1481,"rivate int versionNeededToExtract(final int zipMethod, final boolean zip64) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1482,"private int versionNeededToExtract(final int zipMethod, final boolean zip64, final boolean usedDataDescriptor) {"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1485,/ requires version 2 as we are going to store length info
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1486,/ in the data descriptor
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1487,eturn isDeflatedToOutputStream(zipMethod)
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1488, DATA_DESCRIPTOR_MIN_VERSION
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1489, versionNeededToExtractMethod(zipMethod);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1486,if (usedDataDescriptor) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1487,return DATA_DESCRIPTOR_MIN_VERSION;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1489,return versionNeededToExtractMethod(zipMethod);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1492,rivate boolean isDeflatedToOutputStream(final int zipMethod) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1493,eturn zipMethod == DEFLATED && channel == null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1492,"private boolean usesDataDescriptor(final int zipMethod, boolean phased) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1493,return !phased && zipMethod == DEFLATED && channel == null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1678,private static final class EntryMetaData {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1679,private final long offset;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1680,private final boolean usesDataDescriptor;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1681,"private EntryMetaData(long offset, boolean usesDataDescriptor) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1682,this.offset = offset;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1683,this.usesDataDescriptor = usesDataDescriptor;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,4,*  this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,7,*  the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,14,*  See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,15,*  limitations under the License.
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,18,package org.apache.commons.compress.archivers.zip;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,20,import java.io.ByteArrayOutputStream;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,21,import java.io.File;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,22,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,23,import java.io.FileOutputStream;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,24,import java.io.IOException;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,25,import java.util.Arrays;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,27,import org.apache.commons.compress.utils.IOUtils;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,28,import org.junit.After;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,29,import org.junit.Before;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,30,import org.junit.Test;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,32,import static org.apache.commons.compress.AbstractTestCase.mkdir;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,33,import static org.apache.commons.compress.AbstractTestCase.rmdir;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,34,import static org.junit.Assert.assertArrayEquals;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,35,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,36,import static org.junit.Assert.assertNotEquals;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,38,public class DataDescriptorTest {
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,40,private File dir;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,42,@Before
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,43,public void setUp() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,44,"dir = mkdir(""ddtest"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,47,@After
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,48,public void tearDown() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,49,rmdir(dir);
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,52,@Test
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,53,public void writesDataDescriptorForDeflatedEntryOnUnseekableOutput() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,54,ByteArrayOutputStream o = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,55,try (ZipArchiveOutputStream zos = new ZipArchiveOutputStream(o)) {
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,56,"zos.putArchiveEntry(new ZipArchiveEntry(""test1.txt""));"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,57,"zos.write(""foo"".getBytes(""UTF-8""));"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,58,zos.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,60,byte[] data = o.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,62,"byte[] versionInLFH = Arrays.copyOfRange(data, 4, 6);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,63,// 2.0 because of DD
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,64,"assertArrayEquals(new byte[] { 20, 0 }, versionInLFH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,65,"byte[] gpbInLFH = Arrays.copyOfRange(data, 6, 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,66,// DD and EFS flags
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,67,"assertArrayEquals(new byte[] { 8, 8 }, gpbInLFH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,68,"byte[] crcAndSizedInLFH = Arrays.copyOfRange(data, 14, 26);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,69,"assertArrayEquals(new byte[12], crcAndSizedInLFH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,71,int cdhStart = findCentralDirectory(data);
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,72,"byte[] versionInCDH = Arrays.copyOfRange(data, cdhStart + 6, cdhStart + 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,73,"assertArrayEquals(new byte[] { 20, 0 }, versionInCDH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,74,"byte[] gpbInCDH = Arrays.copyOfRange(data, cdhStart + 8, cdhStart + 10);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,75,"assertArrayEquals(new byte[] { 8, 8 }, gpbInCDH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,77,int ddStart = cdhStart - 16;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,78,"assertEquals(ZipLong.DD_SIG, new ZipLong(data, ddStart));"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,79,"long crcFromDD = ZipLong.getValue(data, ddStart + 4);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,80,"long cSizeFromDD = ZipLong.getValue(data, ddStart + 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,81,"long sizeFromDD = ZipLong.getValue(data, ddStart + 12);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,82,"assertEquals(3, sizeFromDD);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,84,"long crcFromCDH = ZipLong.getValue(data, cdhStart + 16);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,85,"assertEquals(crcFromDD, crcFromCDH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,86,"long cSizeFromCDH = ZipLong.getValue(data, cdhStart + 20);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,87,"assertEquals(cSizeFromDD, cSizeFromCDH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,88,"long sizeFromCDH = ZipLong.getValue(data, cdhStart + 24);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,89,"assertEquals(sizeFromDD, sizeFromCDH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,92,@Test
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,93,public void doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,94,"File f = new File(dir, ""test.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,95,try (ZipArchiveOutputStream zos = new ZipArchiveOutputStream(f)) {
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,96,"zos.putArchiveEntry(new ZipArchiveEntry(""test1.txt""));"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,97,"zos.write(""foo"".getBytes(""UTF-8""));"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,98,zos.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,101,byte[] data;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,102,try (FileInputStream fis = new FileInputStream(f)) {
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,103,data = IOUtils.toByteArray(fis);
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,106,"byte[] versionInLFH = Arrays.copyOfRange(data, 4, 6);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,107,// still 2.0 because of Deflate
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,108,"assertArrayEquals(new byte[] { 20, 0 }, versionInLFH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,109,"byte[] gpbInLFH = Arrays.copyOfRange(data, 6, 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,110,// no DD but EFS flag
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,111,"assertArrayEquals(new byte[] { 0, 8 }, gpbInLFH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,113,int cdhStart = findCentralDirectory(data);
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,114,"byte[] versionInCDH = Arrays.copyOfRange(data, cdhStart + 6, cdhStart + 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,115,"assertArrayEquals(new byte[] { 20, 0 }, versionInCDH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,116,"byte[] gpbInCDH = Arrays.copyOfRange(data, cdhStart + 8, cdhStart + 10);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,117,"assertArrayEquals(new byte[] { 0, 8 }, gpbInCDH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,119,int ddStart = cdhStart - 16;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,120,"assertNotEquals(ZipLong.DD_SIG, new ZipLong(data, ddStart));"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,121,"long crcFromLFH = ZipLong.getValue(data, 14);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,122,"long cSizeFromLFH = ZipLong.getValue(data, 18);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,123,"long sizeFromLFH = ZipLong.getValue(data, 22);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,124,"assertEquals(3, sizeFromLFH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,126,"long crcFromCDH = ZipLong.getValue(data, cdhStart + 16);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,127,"assertEquals(crcFromLFH, crcFromCDH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,128,"long cSizeFromCDH = ZipLong.getValue(data, cdhStart + 20);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,129,"assertEquals(cSizeFromLFH, cSizeFromCDH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,130,"long sizeFromCDH = ZipLong.getValue(data, cdhStart + 24);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,131,"assertEquals(sizeFromLFH, sizeFromCDH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,134,@Test
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,135,public void doesntWriteDataDescriptorWhenAddingRawEntries() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,136,ByteArrayOutputStream init = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,137,try (ZipArchiveOutputStream zos = new ZipArchiveOutputStream(init)) {
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,138,"zos.putArchiveEntry(new ZipArchiveEntry(""test1.txt""));"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,139,"zos.write(""foo"".getBytes(""UTF-8""));"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,140,zos.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,143,"File f = new File(dir, ""test.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,144,try (FileOutputStream fos = new FileOutputStream(f)) {
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,145,fos.write(init.toByteArray());
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,148,ByteArrayOutputStream o = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,149,ZipArchiveEntry zae;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,150,try (ZipFile zf = new ZipFile(f);
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,151,ZipArchiveOutputStream zos = new ZipArchiveOutputStream(o)) {
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,152,"zae = zf.getEntry(""test1.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,153,"zos.addRawArchiveEntry(zae, zf.getRawInputStream(zae));"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,156,byte[] data = o.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,157,"byte[] versionInLFH = Arrays.copyOfRange(data, 4, 6);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,158,// still 2.0 because of Deflate
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,159,"assertArrayEquals(new byte[] { 20, 0 }, versionInLFH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,160,"byte[] gpbInLFH = Arrays.copyOfRange(data, 6, 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,161,// no DD but EFS flag
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,162,"assertArrayEquals(new byte[] { 0, 8 }, gpbInLFH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,164,int cdhStart = findCentralDirectory(data);
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,165,"byte[] versionInCDH = Arrays.copyOfRange(data, cdhStart + 6, cdhStart + 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,166,"assertArrayEquals(new byte[] { 20, 0 }, versionInCDH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,167,"byte[] gpbInCDH = Arrays.copyOfRange(data, cdhStart + 8, cdhStart + 10);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,168,"assertArrayEquals(new byte[] { 0, 8 }, gpbInCDH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,170,int ddStart = cdhStart - 16;
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,171,"assertNotEquals(ZipLong.DD_SIG, new ZipLong(data, ddStart));"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,172,"long crcFromLFH = ZipLong.getValue(data, 14);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,173,"long cSizeFromLFH = ZipLong.getValue(data, 18);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,174,"long sizeFromLFH = ZipLong.getValue(data, 22);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,175,"assertEquals(3, sizeFromLFH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,177,"long crcFromCDH = ZipLong.getValue(data, cdhStart + 16);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,178,"assertEquals(crcFromLFH, crcFromCDH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,179,"long cSizeFromCDH = ZipLong.getValue(data, cdhStart + 20);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,180,"assertEquals(cSizeFromLFH, cSizeFromCDH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,181,"long sizeFromCDH = ZipLong.getValue(data, cdhStart + 24);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,182,"assertEquals(sizeFromLFH, sizeFromCDH);"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,185,private int findCentralDirectory(byte[] data) {
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,186,"// not a ZIP64 archive, no comment, ""End of central directory record"" at the end"
True,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,187,"return (int) ZipLong.getValue(data, data.length - 22 + 16);"

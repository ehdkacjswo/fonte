is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,19,package org.apache.commons.compress;
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,24,"* If a stream checks for estimated memory allocation, and the estimate"
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,25,"* goes above the memory limit, this is thrown.  This can also be thrown"
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,26,* if a stream tries to allocate a byte array that is larger than
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,27,* the allowable limit.
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,29,* @since 1.14
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,31,public class MemoryLimitException extends IOException {
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,33,//long instead of int to account for overflow for corrupt files
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,34,private final long memoryNeededInKb;
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,35,private final int memoryLimitInKb;
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,37,"public MemoryLimitException(long memoryNeededInKb, int memoryLimitInKb) {"
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,38,"super(buildMessage(memoryNeededInKb, memoryLimitInKb));"
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,39,this.memoryNeededInKb = memoryNeededInKb;
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,40,this.memoryLimitInKb = memoryLimitInKb;
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,43,"public MemoryLimitException(long memoryNeededInKb, int memoryLimitInKb, Exception e) {"
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,44,"super(buildMessage(memoryNeededInKb, memoryLimitInKb), e);"
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,45,this.memoryNeededInKb = memoryNeededInKb;
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,46,this.memoryLimitInKb = memoryLimitInKb;
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,49,public long getMemoryNeededInKb() {
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,50,return memoryNeededInKb;
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,53,public int getMemoryLimitInKb() {
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,54,return memoryLimitInKb;
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,57,"private static String buildMessage(long memoryNeededInKb, int memoryLimitInKb) {"
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,58,"return """" + memoryNeededInKb + "" kb of memory would be needed; limit was """
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,59,"+ memoryLimitInKb + "" kb. "" +"
True,src/main/java/org/apache/commons/compress/MemoryLimitException.java,src/main/java/org/apache/commons/compress/MemoryLimitException.java,60,"""If the file is not corrupt, consider increasing the memory limit."";"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,352,private final int memoryLimitInKb;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,358,this.memoryLimitInKb = -1;
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,367, @since 1.10
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,370,* @param memoryLimitInKb
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,371,*            Some streams require allocation of potentially significant
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,372,"*            byte arrays/tables, and they can offer checks to prevent OOMs"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,373,*            on corrupt files.  Set the maximum allowed memory allocation in KBs.
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,375,* @since 1.14
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,369,ublic CompressorStreamFactory(final boolean decompressUntilEOF) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,377,"public CompressorStreamFactory(final boolean decompressUntilEOF, final int memoryLimitInKb) {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,382,this.memoryLimitInKb = memoryLimitInKb;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,387,* Create an instance with the provided decompress Concatenated option.
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,389,* @param decompressUntilEOF
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,390,"*            if true, decompress until the end of the input; if false, stop"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,391,*            after the first stream and leave the input position to point
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,392,*            to the next byte after the stream. This setting applies to the
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,393,"*            gzip, bzip2 and xz formats only."
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,394,* @since 1.10
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,396,public CompressorStreamFactory(final boolean decompressUntilEOF) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,397,"this(decompressUntilEOF, -1);"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,476,             if the compressor name is not known or not available
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,500,"*             if the compressor name is not known or not available,"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,501,*             or if there's an IOException or MemoryLimitException thrown
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,502,*             during initialization
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,506,"eturn new XZCompressorInputStream(in, actualDecompressConcatenated);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,532,"return new XZCompressorInputStream(in, actualDecompressConcatenated, memoryLimitInKb);"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,513,eturn new LZMACompressorInputStream(in);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,539,"return new LZMACompressorInputStream(in, memoryLimitInKb);"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,529,eturn new ZCompressorInputStream(in);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,555,"return new ZCompressorInputStream(in, memoryLimitInKb);"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,24,import org.apache.commons.compress.MemoryLimitException;
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,36,public LZMACompressorInputStream(final InputStream inputStream)
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,37,throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,38,"in = new LZMAInputStream(inputStream, -1);"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,47,* @param       memoryLimitInKb calculated memory use threshold.  Throws MemoryLimitException
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,48,*                            if calculate memory use is above this threshold
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,56,* @since 1.14
False,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,46,ublic LZMACompressorInputStream(final InputStream inputStream)
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,58,"public LZMACompressorInputStream(final InputStream inputStream, int memoryLimitInKb)"
False,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,48,n = new LZMAInputStream(inputStream);
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,60,try {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,61,"in = new LZMAInputStream(inputStream, memoryLimitInKb);"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,62,} catch (org.tukaani.xz.MemoryLimitException e) {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,63,//convert to commons-compress exception
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,64,"throw new MemoryLimitException(e.getMemoryNeeded(), e.getMemoryLimit(), e);"
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,25,import org.apache.commons.compress.MemoryLimitException;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,116,* Initializes the arrays based on the maximum code size.
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,117,* First checks that the estimated memory usage is below memoryLimitInKb
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,119,* @param maxCodeSize maximum code size
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,120,* @param memoryLimitInKb maximum allowed estimated memory usage in Kb
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,121,* @throws MemoryLimitException if estimated memory usage is greater than memoryLimitInKb
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,123,"protected void initializeTables(final int maxCodeSize, final int memoryLimitInKb)"
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,124,throws MemoryLimitException {
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,126,if (memoryLimitInKb > -1) {
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,127,final int maxTableSize = 1 << maxCodeSize;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,128,//account for potential overflow
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,129,long memoryUsageInBytes = (long) maxTableSize * 6;//(4 (prefixes) + 1 (characters) +1 (outputStack))
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,130,long memoryUsageInKb = memoryUsageInBytes >> 10;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,132,if (memoryUsageInKb > (long)memoryLimitInKb) {
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,133,"throw new MemoryLimitException(memoryUsageInKb, memoryLimitInKb);"
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,136,initializeTables(maxCodeSize);
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,24,import org.apache.commons.compress.MemoryLimitException;
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,97,"this(inputStream, decompressConcatenated, -1);"
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,101,* Creates a new input stream that decompresses XZ-compressed data
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,102,* from the specified input stream.
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,104,* @param       inputStream where to read the compressed data
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,105,* @param       decompressConcatenated
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,106,"*                          if true, decompress until the end of the"
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,107,"*                          input; if false, stop after the first .xz"
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,108,*                          stream and leave the input position to point
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,109,*                          to the next byte after the .xz stream
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,110,* @param       memoryLimitInKb memory limit used when reading blocks.  If
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,111,"*                          the estimated memory limit is exceeded on {@link #read()},"
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,112,*                          a {@link MemoryLimitException} is thrown.
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,114,"* @throws      IOException if the input is not in the .xz format,"
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,115,"*                          the input is corrupt or truncated, the .xz"
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,116,*                          headers specify options that are not supported
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,117,"*                          by this implementation,"
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,118,*                          or the underlying <code>inputStream</code> throws an exception
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,120,* @since 1.14
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,122,"public XZCompressorInputStream(InputStream inputStream,"
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,123,"boolean decompressConcatenated, final int memoryLimitInKb)"
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,124,throws IOException {
False,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,96,n = new XZInputStream(inputStream);
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,126,"in = new XZInputStream(inputStream, memoryLimitInKb);"
False,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,98,n = new SingleXZInputStream(inputStream);
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,128,"in = new SingleXZInputStream(inputStream, memoryLimitInKb);"
False,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,104,inal int ret = in.read();
False,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,105,ount(ret == -1 ? -1 : 1);
False,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,106,eturn ret;
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,134,try {
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,135,final int ret = in.read();
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,136,count(ret == -1 ? -1 : 1);
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,137,return ret;
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,138,} catch (org.tukaani.xz.MemoryLimitException e) {
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,139,"throw new MemoryLimitException(e.getMemoryNeeded(), e.getMemoryLimit(), e);"
False,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,111,"inal int ret = in.read(buf, off, len);"
False,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,112,ount(ret);
False,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,113,eturn ret;
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,145,try {
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,146,"final int ret = in.read(buf, off, len);"
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,147,count(ret);
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,148,return ret;
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,149,} catch (org.tukaani.xz.MemoryLimitException e) {
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,150,//convert to commons-compress MemoryLimtException
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,151,"throw new MemoryLimitException(e.getMemoryNeeded(), e.getMemoryLimit(), e);"
False,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,118,eturn in.skip(n);
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,157,try {
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,158,return in.skip(n);
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,159,} catch (org.tukaani.xz.MemoryLimitException e) {
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,160,//convert to commons-compress MemoryLimtException
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,161,"throw new MemoryLimitException(e.getMemoryNeeded(), e.getMemoryLimit(), e);"
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,41,ublic ZCompressorInputStream(final InputStream inputStream) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,41,"public ZCompressorInputStream(final InputStream inputStream, final int memoryLimitInKb)"
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,42,throws IOException {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,54,nitializeTables(maxCodeSize);
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,55,"initializeTables(maxCodeSize, memoryLimitInKb);"
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,59,public ZCompressorInputStream(final InputStream inputStream) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,60,"this(inputStream, -1);"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,34,import org.apache.commons.compress.MemoryLimitException;
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,137,//make sure we don't oom on detect
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,138,"assertEquals(CompressorStreamFactory.Z, detect(""COMPRESS-386""));"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,139,"assertEquals(CompressorStreamFactory.LZMA, detect(""COMPRESS-382""));"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,174,@Test(expected = MemoryLimitException.class)
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,175,public void testLZMAMemoryLimit() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,176,"getStreamFor(""COMPRESS-382"", 100);"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,179,@Test(expected = MemoryLimitException.class)
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,180,public void testZMemoryLimit() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,181,"getStreamFor(""COMPRESS-386"", 100);"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,184,@Test(expected = MemoryLimitException.class)
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,185,public void testXZMemoryLimitOnRead() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,186,"//Even though the file is very small, the memory limit"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,187,//has to be quite large (8296 KiB) because of the dictionary size
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,189,//This is triggered on read(); not during initialization.
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,190,//This test is here instead of the xz unit test to make sure
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,191,//that the parameter is properly passed via the CompressorStreamFactory
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,192,"try (InputStream compressorIs = getStreamFor(""bla.tar.xz"", 100)) {"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,193,compressorIs.read();
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,197,@Test(expected = MemoryLimitException.class)
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,198,public void testXZMemoryLimitOnSkip() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,199,"try (InputStream compressorIs = getStreamFor(""bla.tar.xz"", 100)) {"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,200,compressorIs.skip(10);
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,204,"private InputStream getStreamFor(final String fileName, final int memoryLimitInKb) throws Exception {"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,205,"CompressorStreamFactory fac = new CompressorStreamFactory(true,"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,206,memoryLimitInKb);
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,207,InputStream is = new BufferedInputStream(
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,208,new FileInputStream(getFile(fileName)));
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,209,try {
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,210,return fac.createCompressorInputStream(is);
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,211,} catch (CompressorException e) {
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,212,if (e.getCause() != null && e.getCause() instanceof Exception) {
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,213,//unwrap cause to reveal MemoryLimitException
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,214,throw (Exception)e.getCause();
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,215,} else {
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,216,throw e;

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,37,tatic final int COPY_SIZE_MASK = (1 << SIZE_BITS) - 1;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,38,tatic final int LITERAL_SIZE_MASK = COPY_SIZE_MASK << SIZE_BITS;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,37,static final int BACK_REFERENCE_SIZE_MASK = (1 << SIZE_BITS) - 1;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,38,static final int LITERAL_SIZE_MASK = BACK_REFERENCE_SIZE_MASK << SIZE_BITS;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,40,** Copy-size part of the block starting byte. */
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,41,rivate int nextCopySize;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,40,/** Back-Reference-size part of the block starting byte. */
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,41,private int nextBackReferenceSize;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,72,tate = State.LOOKING_FOR_COPY;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,72,state = State.LOOKING_FOR_BACK_REFERENCE;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,75,ase LOOKING_FOR_COPY:
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,76,f (!initializeCopy()) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,75,case LOOKING_FOR_BACK_REFERENCE:
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,76,if (!initializeBackReference()) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,81,ase IN_COPY:
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,82,"nt copyLen = readCopy(b, off, len);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,81,case IN_BACK_REFERENCE:
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,82,"int backReferenceLen = readBackReference(b, off, len);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,86,eturn copyLen;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,86,return backReferenceLen;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,97,extCopySize = nextBlock & COPY_SIZE_MASK;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,97,nextBackReferenceSize = nextBlock & BACK_REFERENCE_SIZE_MASK;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,99,f (literalSizePart == COPY_SIZE_MASK) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,99,if (literalSizePart == BACK_REFERENCE_SIZE_MASK) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,120, @return false if there is no more copy - this means this is the
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,120,* @return false if there is no more back-reference - this means this is the
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,123,rivate boolean initializeCopy() throws IOException {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,124,nt copyOffset = 0;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,123,private boolean initializeBackReference() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,124,int backReferenceOffset = 0;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,126,"opyOffset = (int) ByteUtils.fromLittleEndian(supplier, 2);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,126,"backReferenceOffset = (int) ByteUtils.fromLittleEndian(supplier, 2);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,128,f (nextCopySize == 0) { // the last block has no copy
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,128,if (nextBackReferenceSize == 0) { // the last block has no back-reference
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,133,ong copySize = nextCopySize;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,134,f (nextCopySize == COPY_SIZE_MASK) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,135,opySize += readSizeBytes();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,133,long backReferenceSize = nextBackReferenceSize;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,134,if (nextBackReferenceSize == BACK_REFERENCE_SIZE_MASK) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,135,backReferenceSize += readSizeBytes();
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,138,"tartCopy(copyOffset, copySize + 4);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,139,tate = State.IN_COPY;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,138,"startBackReference(backReferenceOffset, backReferenceSize + 4);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,139,state = State.IN_BACK_REFERENCE;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,144,"O_BLOCK, IN_LITERAL, LOOKING_FOR_COPY, IN_COPY, EOF"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,144,"NO_BLOCK, IN_LITERAL, LOOKING_FOR_BACK_REFERENCE, IN_BACK_REFERENCE, EOF"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,48,f the copy (at least some part of it) so we can't start
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,49,riting the literal before we know how long the next copy is
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,50,oing to be.
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,48,of the back-reference (at least some part of it) so we can't
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,49,start writing the literal before we know how long the next
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,50,back-reference is going to be.
False,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,54,** Number of bytes still to be read from the current literal or copy. */
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,54,/** Number of bytes still to be read from the current literal or back-reference. */
False,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,57,** Offset of the current copy. */
False,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,58,rivate int copyOffset;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,57,/** Offset of the current back-reference. */
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,58,private int backReferenceOffset;
False,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,195,"rotected final void startCopy(int offset, long length) {"
False,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,196,opyOffset = offset;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,195,"protected final void startBackReference(int offset, long length) {"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,196,backReferenceOffset = offset;
False,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,208,"rotected final int readCopy(final byte[] b, final int off, final int len) {"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,208,"protected final int readBackReference(final byte[] b, final int off, final int len) {"
False,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,218,/ require more than is available inside the copy
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,218,// require more than is available inside the back-reference
False,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,223, else if (copyOffset == 1) { // pretty common special case
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,223,} else if (backReferenceOffset == 1) { // pretty common special case
False,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,228, else if (copy < copyOffset) {
False,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,229,"ystem.arraycopy(buf, writeIndex - copyOffset, buf, writeIndex, copy);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,228,} else if (copy < backReferenceOffset) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,229,"System.arraycopy(buf, writeIndex - backReferenceOffset, buf, writeIndex, copy);"
False,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,232,inal int fullRots = copy / copyOffset;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,232,final int fullRots = copy / backReferenceOffset;
False,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,234,"ystem.arraycopy(buf, writeIndex - copyOffset, buf, writeIndex, copyOffset);"
False,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,235,riteIndex += copyOffset;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,234,"System.arraycopy(buf, writeIndex - backReferenceOffset, buf, writeIndex, backReferenceOffset);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,235,writeIndex += backReferenceOffset;
False,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,238,inal int pad = copy - (copyOffset * fullRots);
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,238,final int pad = copy - (backReferenceOffset * fullRots);
False,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,240,"ystem.arraycopy(buf, writeIndex - copyOffset, buf, writeIndex, pad);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,240,"System.arraycopy(buf, writeIndex - backReferenceOffset, buf, writeIndex, pad);"
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,107,ase IN_COPY:
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,108,"nt copyLen = readCopy(b, off, len);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,107,case IN_BACK_REFERENCE:
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,108,"int backReferenceLen = readBackReference(b, off, len);"
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,112,eturn copyLen;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,112,return backReferenceLen;
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,163,"hrow new IOException(""Premature end of stream reading copy length"");"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,163,"throw new IOException(""Premature end of stream reading back-reference length"");"
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,167,"tartCopy(offset, length);"
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,168,tate = State.IN_COPY;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,167,"startBackReference(offset, length);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,168,state = State.IN_BACK_REFERENCE;
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,186,"tartCopy(offset, length);"
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,187,tate = State.IN_COPY;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,186,"startBackReference(offset, length);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,187,state = State.IN_BACK_REFERENCE;
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,204,"tartCopy(offset, length);"
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,205,tate = State.IN_COPY;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,204,"startBackReference(offset, length);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,205,state = State.IN_BACK_REFERENCE;
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,285,"O_BLOCK, IN_LITERAL, IN_COPY"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,285,"NO_BLOCK, IN_LITERAL, IN_BACK_REFERENCE"

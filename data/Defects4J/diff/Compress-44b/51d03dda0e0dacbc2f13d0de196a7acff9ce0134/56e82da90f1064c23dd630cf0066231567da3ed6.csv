is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,24,mport org.apache.commons.compress.compressors.CompressorInputStream;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,24,import org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,26,mport org.apache.commons.compress.utils.IOUtils;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,34,ublic class BlockLZ4CompressorInputStream extends CompressorInputStream {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,33,public class BlockLZ4CompressorInputStream extends AbstractLZ77CompressorInputStream {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,41,** Buffer to write decompressed bytes to for back-references */
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,42,rivate final byte[] buf = new byte[3 * WINDOW_SIZE];
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,44,** One behind the index of the last byte in the buffer that was written */
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,45,rivate int writeIndex;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,47,** Index of the next byte to be read. */
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,48,rivate int readIndex;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,50,** The underlying stream to read compressed data from */
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,51,rivate final InputStream in;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,53,** Number of bytes still to be read from the current literal or copy. */
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,54,rivate long bytesRemaining;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,59,** Offset of the current copy. */
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,60,rivate int copyOffset;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,65,** uncompressed size */
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,66,rivate int size = 0;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,68,/ used in no-arg read method
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,69,rivate final byte[] oneByte = new byte[1];
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,71,rivate final ByteUtils.ByteSupplier supplier = new ByteUtils.ByteSupplier() {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,72,Override
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,73,ublic int getAsByte() throws IOException {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,74,eturn readOneByte();
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,87,his.in = is;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,88,riteIndex = readIndex = 0;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,89,ytesRemaining = 0;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,92,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,93,Override
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,94,ublic int read() throws IOException {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,95,"eturn read(oneByte, 0, 1) == -1 ? -1 : oneByte[0] & 0xFF;"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,98,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,99,Override
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,100,ublic void close() throws IOException {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,101,n.close();
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,104,** {@inheritDoc} */
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,105,Override
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,106,ublic int available() {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,107,eturn writeIndex - readIndex;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,55,"super(is, WINDOW_SIZE);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,124,f (bytesRemaining == 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,72,if (!hasMoreDataInBlock()) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,136,f (bytesRemaining == 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,84,if (!hasMoreDataInBlock()) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,146, Get the uncompressed size of the stream
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,148, @return the uncompressed size
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,150,ublic int getSize() {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,151,eturn size;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,164,ytesRemaining = literalSizePart;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,103,startLiteral(literalSizePart);
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,181,"rivate int readLiteral(final byte[] b, final int off, final int len) throws IOException {"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,182,inal int avail = available();
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,183,f (len > avail) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,184,ryToReadLiteral(len - avail);
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,186,"eturn readFromBuffer(b, off, len);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,189,rivate void tryToReadLiteral(int bytesToRead) throws IOException {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,190,"inal int reallyTryToRead = (int) Math.min(Math.min(bytesToRead, bytesRemaining),"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,191,uf.length - writeIndex);
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,192,inal int bytesRead = reallyTryToRead > 0
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,193," IOUtils.readFully(in, buf, writeIndex, reallyTryToRead)"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,194, 0 /* happens for bytesRemaining == 0 */;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,195,ount(bytesRead);
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,196,f (reallyTryToRead != bytesRead) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,197,"hrow new IOException(""Premature end of stream reading literal"");"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,199,riteIndex += reallyTryToRead;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,200,ytesRemaining -= reallyTryToRead;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,203,"rivate int readFromBuffer(final byte[] b, final int off, final int len) throws IOException {"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,204,"inal int readable = Math.min(len, available());"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,205,f (readable > 0) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,206,"ystem.arraycopy(buf, readIndex, b, off, readable);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,207,eadIndex += readable;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,208,f (readIndex > 2 * WINDOW_SIZE) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,209,lideBuffer();
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,212,ize += readable;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,213,eturn readable;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,216,rivate void slideBuffer() {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,217,"ystem.arraycopy(buf, WINDOW_SIZE, buf, 0, WINDOW_SIZE);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,218,riteIndex -= WINDOW_SIZE;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,219,eadIndex -= WINDOW_SIZE;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,125,int copyOffset = 0;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,239,ytesRemaining = copySize + 4; // minimal match length 4 is encoded as 0
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,138,// minimal match length 4 is encoded as 0
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,139,"startCopy(copyOffset, copySize + 4);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,244,"rivate int readCopy(final byte[] b, final int off, final int len) throws IOException {"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,245,inal int avail = available();
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,246,f (len > avail) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,247,ryToCopy(len - avail);
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,249,"eturn readFromBuffer(b, off, len);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,252,rivate void tryToCopy(int bytesToCopy) throws IOException {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,253,/ this will fit into the buffer without sliding and not
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,254,/ require more than is available inside the copy
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,255,"nt copy = (int) Math.min(Math.min(bytesToCopy, bytesRemaining),"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,256,uf.length - writeIndex);
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,257,f (copy == 0) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,258,/ NOP
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,259, else if (copyOffset == 1) { // pretty common special case
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,260,inal byte last = buf[writeIndex - 1];
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,261,or (int i = 0; i < copy; i++) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,262,uf[writeIndex++] = last;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,264, else if (copy < copyOffset) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,265,"ystem.arraycopy(buf, writeIndex - copyOffset, buf, writeIndex, copy);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,266,riteIndex += copy;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,267, else {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,268,inal int fullRots = copy / copyOffset;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,269,or (int i = 0; i < fullRots; i++) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,270,"ystem.arraycopy(buf, writeIndex - copyOffset, buf, writeIndex, copyOffset);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,271,riteIndex += copyOffset;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,274,inal int pad = copy - (copyOffset * fullRots);
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,275,f (pad > 0) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,276,"ystem.arraycopy(buf, writeIndex - copyOffset, buf, writeIndex, pad);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,277,riteIndex += pad;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,280,ytesRemaining -= copy;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,283,rivate int readOneByte() throws IOException {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,284,inal int b = in.read();
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,285,f (b != -1) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,286,ount(1);
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,287,eturn b & 0xFF;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java,289,eturn -1;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,19,package org.apache.commons.compress.compressors.lz77support;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,24,import org.apache.commons.compress.compressors.CompressorInputStream;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,25,import org.apache.commons.compress.utils.ByteUtils;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,26,import org.apache.commons.compress.utils.IOUtils;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,29,* Encapsulates code common to LZ77 decompressors.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,31,* <p>Assumes the stream consists of blocks of literal data and
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,32,* back-references (called copies) in any order. Of course the first
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,33,* block must be a literal block for the scheme to work.</p>
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,35,* @since 1.14
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,37,public abstract class AbstractLZ77CompressorInputStream extends CompressorInputStream {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,39,/** Size of the window - must be bigger than the biggest offset expected. */
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,40,private final int windowSize;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,42,/** Buffer to write decompressed bytes to for back-references */
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,43,private final byte[] buf;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,45,/** One behind the index of the last byte in the buffer that was written */
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,46,private int writeIndex;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,48,/** Index of the next byte to be read. */
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,49,private int readIndex;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,51,/** The underlying stream to read compressed data from */
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,52,private final InputStream in;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,54,/** Number of bytes still to be read from the current literal or copy. */
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,55,private long bytesRemaining;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,57,/** Offset of the current copy. */
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,58,private int copyOffset;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,60,/** uncompressed size */
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,61,private int size = 0;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,63,// used in no-arg read method
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,64,private final byte[] oneByte = new byte[1];
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,67,* Supplier that delegates to {@link #readOneByte}.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,69,protected final ByteUtils.ByteSupplier supplier = new ByteUtils.ByteSupplier() {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,70,@Override
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,71,public int getAsByte() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,72,return readOneByte();
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,77,* Creates a new LZ77 input stream.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,79,* @param is
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,80,*            An InputStream to read compressed data from
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,81,* @param windowSize
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,82,"*            Size of the window kept for back-references, must be bigger than the biggest offset expected."
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,84,* @throws IOException if reading fails
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,86,"public AbstractLZ77CompressorInputStream(final InputStream is, int windowSize) throws IOException {"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,87,this.in = is;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,88,this.windowSize = windowSize;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,89,buf = new byte[3 * windowSize];
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,90,writeIndex = readIndex = 0;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,91,bytesRemaining = 0;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,94,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,95,@Override
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,96,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,97,"return read(oneByte, 0, 1) == -1 ? -1 : oneByte[0] & 0xFF;"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,100,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,101,@Override
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,102,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,103,in.close();
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,106,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,107,@Override
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,108,public int available() {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,109,return writeIndex - readIndex;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,113,* Get the uncompressed size of the stream
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,115,* @return the uncompressed size
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,117,public int getSize() {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,118,return size;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,122,* Used by subclasses to signal the next block contains the given
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,123,* amount of literal data.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,124,* @param length the length of the block
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,126,protected final void startLiteral(long length) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,127,bytesRemaining = length;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,131,* Is there still data remaining inside the current block?
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,132,* @return true if there is still data remaining inside the current block.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,134,protected final boolean hasMoreDataInBlock() {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,135,return bytesRemaining > 0;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,139,* Reads data from the current literal block.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,140,* @param b buffer to write data to
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,141,* @param off offset to start writing to
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,142,* @param len maximum amount of data to read
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,143,"* @return number of bytes read, may be 0. Will never return -1 as"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,144,* EOF-detection is the responsibility of the subclass
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,145,* @throws IOException if the underlying stream throws or signals
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,146,* an EOF before the amount of data promised for the block have
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,147,* been read
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,149,"protected final int readLiteral(final byte[] b, final int off, final int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,150,final int avail = available();
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,151,if (len > avail) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,152,tryToReadLiteral(len - avail);
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,154,"return readFromBuffer(b, off, len);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,157,private void tryToReadLiteral(int bytesToRead) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,158,"final int reallyTryToRead = (int) Math.min(Math.min(bytesToRead, bytesRemaining),"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,159,buf.length - writeIndex);
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,160,final int bytesRead = reallyTryToRead > 0
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,161,"? IOUtils.readFully(in, buf, writeIndex, reallyTryToRead)"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,162,: 0 /* happens for bytesRemaining == 0 */;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,163,count(bytesRead);
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,164,if (reallyTryToRead != bytesRead) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,165,"throw new IOException(""Premature end of stream reading literal"");"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,167,writeIndex += reallyTryToRead;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,168,bytesRemaining -= reallyTryToRead;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,171,"private int readFromBuffer(final byte[] b, final int off, final int len) {"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,172,"final int readable = Math.min(len, available());"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,173,if (readable > 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,174,"System.arraycopy(buf, readIndex, b, off, readable);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,175,readIndex += readable;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,176,if (readIndex > 2 * windowSize) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,177,slideBuffer();
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,180,size += readable;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,181,return readable;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,184,private void slideBuffer() {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,185,"System.arraycopy(buf, windowSize, buf, 0, windowSize);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,186,writeIndex -= windowSize;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,187,readIndex -= windowSize;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,191,* Used by subclasses to signal the next block contains a back-reference with the given coordinates.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,192,* @param the offset of the back-reference
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,193,* @param length the length of the back-reference
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,195,"protected final void startCopy(int offset, long length) {"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,196,copyOffset = offset;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,197,bytesRemaining = length;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,201,* Reads data from the current back-reference.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,202,* @param b buffer to write data to
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,203,* @param off offset to start writing to
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,204,* @param len maximum amount of data to read
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,205,"* @return number of bytes read, may be 0. Will never return -1 as"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,206,* EOF-detection is the responsibility of the subclass
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,208,"protected final int readCopy(final byte[] b, final int off, final int len) {"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,209,final int avail = available();
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,210,if (len > avail) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,211,tryToCopy(len - avail);
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,213,"return readFromBuffer(b, off, len);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,216,private void tryToCopy(int bytesToCopy) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,217,// this will fit into the buffer without sliding and not
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,218,// require more than is available inside the copy
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,219,"int copy = (int) Math.min(Math.min(bytesToCopy, bytesRemaining),"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,220,buf.length - writeIndex);
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,221,if (copy == 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,222,// NOP
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,223,} else if (copyOffset == 1) { // pretty common special case
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,224,final byte last = buf[writeIndex - 1];
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,225,for (int i = 0; i < copy; i++) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,226,buf[writeIndex++] = last;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,228,} else if (copy < copyOffset) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,229,"System.arraycopy(buf, writeIndex - copyOffset, buf, writeIndex, copy);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,230,writeIndex += copy;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,231,} else {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,232,final int fullRots = copy / copyOffset;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,233,for (int i = 0; i < fullRots; i++) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,234,"System.arraycopy(buf, writeIndex - copyOffset, buf, writeIndex, copyOffset);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,235,writeIndex += copyOffset;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,238,final int pad = copy - (copyOffset * fullRots);
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,239,if (pad > 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,240,"System.arraycopy(buf, writeIndex - copyOffset, buf, writeIndex, pad);"
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,241,writeIndex += pad;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,244,bytesRemaining -= copy;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,248,* Reads a single byte from the real input stream and ensures the data is accounted for.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,250,* @return the byte read as value between 0 and 255 or -1 if EOF has been reached.
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,251,* @throws IOException if the underlying stream throws
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,253,protected final int readOneByte() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,254,final int b = in.read();
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,255,if (b != -1) {
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,256,count(1);
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,257,return b & 0xFF;
True,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java,259,return -1;

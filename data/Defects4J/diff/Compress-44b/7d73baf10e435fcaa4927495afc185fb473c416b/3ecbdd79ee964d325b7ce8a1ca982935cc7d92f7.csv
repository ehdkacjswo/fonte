is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,19,package org.apache.commons.compress.compressors;
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,22,"* If a stream checks for estimated memory allocation, and the estimate"
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,23,"* goes above the memory limit, this is thrown."
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,25,* @since 1.14
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,27,public class CompressorMemoryLimitException extends CompressorException {
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,29,public CompressorMemoryLimitException(String message) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,30,super(message);
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,33,"public CompressorMemoryLimitException(String message, Exception e) {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,src/main/java/org/apache/commons/compress/compressors/CompressorMemoryLimitException.java,34,"super(message, e);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,60,import org.tukaani.xz.MemoryLimitException;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,353,private final int memoryLimitInKb;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,359,this.memoryLimitInKb = -1;
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,367, @since 1.10
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,371,* @param memoryLimitInKb
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,372,*            Some streams require allocation of potentially significant
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,373,"*            byte arrays/tables, and they can offer checks to prevent OOMs"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,374,*            on corrupt files.  Set the maximum allowed memory allocation in KBs.
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,376,* @since 1.14
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,369,ublic CompressorStreamFactory(final boolean decompressUntilEOF) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,378,"public CompressorStreamFactory(final boolean decompressUntilEOF, final int memoryLimitInKb) {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,383,this.memoryLimitInKb = memoryLimitInKb;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,388,* Create an instance with the provided decompress Concatenated option.
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,390,* @param decompressUntilEOF
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,391,"*            if true, decompress until the end of the input; if false, stop"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,392,*            after the first stream and leave the input position to point
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,393,*            to the next byte after the stream. This setting applies to the
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,394,"*            gzip, bzip2 and xz formats only."
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,395,* @since 1.10
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,397,public CompressorStreamFactory(final boolean decompressUntilEOF) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,398,"this(decompressUntilEOF, -1);"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,513,eturn new LZMACompressorInputStream(in);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,538,try {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,539,"return new LZMACompressorInputStream(in, memoryLimitInKb);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,540,} catch (MemoryLimitException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,541,"throw new CompressorMemoryLimitException(""exceeded calculated memory limit"", e);"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,529,eturn new ZCompressorInputStream(in);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,558,try {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,559,"return new ZCompressorInputStream(in, memoryLimitInKb);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,560,} catch (ZCompressorInputStream.IOExceptionWrappingMemoryLimitException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,561,throw new CompressorMemoryLimitException(e.getMessage());
False,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,45, @param       memoryLimitKb calculated memory use threshold.  Throws MemoryLimitException
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,45,* @param       memoryLimitInKb calculated memory use threshold.  Throws MemoryLimitException
False,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,56,"ublic LZMACompressorInputStream(final InputStream inputStream, int memoryLimitKb)"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,56,"public LZMACompressorInputStream(final InputStream inputStream, int memoryLimitInKb)"
False,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,58,"n = new LZMAInputStream(inputStream, memoryLimitKb);"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,58,"in = new LZMAInputStream(inputStream, memoryLimitInKb);"
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,26,import org.apache.commons.compress.compressors.CompressorMemoryLimitException;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,116,* Initializes the arrays based on the maximum code size.
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,117,* @param maxCodeSize maximum code size
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,118,* @param memoryLimitInKb maximum allowed table size in Kb
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,119,* @throws CompressorMemoryLimitException if maxTableSize is > memoryLimitInKb
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,121,"protected void initializeTables(final int maxCodeSize, final int memoryLimitInKb)"
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,122,throws CompressorMemoryLimitException {
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,123,final int maxTableSize = 1 << maxCodeSize;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,124,if (memoryLimitInKb > -1 && maxTableSize > memoryLimitInKb*1024) {
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,125,"throw new CompressorMemoryLimitException(""Tried to allocate ""+maxTableSize +"
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,126,""" but memoryLimitInKb only allows ""+(memoryLimitInKb*1024));"
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,128,initializeTables(maxCodeSize);
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,25,import org.apache.commons.compress.compressors.CompressorMemoryLimitException;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,41,ublic ZCompressorInputStream(final InputStream inputStream) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,42,"public ZCompressorInputStream(final InputStream inputStream, int memoryLimitInKb)"
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,43,throws IOException {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,54,nitializeTables(maxCodeSize);
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,56,try {
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,57,"initializeTables(maxCodeSize, memoryLimitInKb);"
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,58,} catch (CompressorMemoryLimitException e) {
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,59,throw new IOExceptionWrappingMemoryLimitException(e.getMessage());
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,64,public ZCompressorInputStream(final InputStream inputStream) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,65,"this(inputStream, -1);"
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,177,* Wrapper that subclasses IOException to wrap a MemoryLimitException
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,179,public static class IOExceptionWrappingMemoryLimitException extends IOException {
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,180,public IOExceptionWrappingMemoryLimitException(String message) {
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,181,super(message);
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,136,//make sure we don't oom on detect
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,137,"assertEquals(CompressorStreamFactory.Z, detect(""COMPRESS-386""));"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,138,"assertEquals(CompressorStreamFactory.LZMA, detect(""COMPRESS-382""));"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,173,@Test
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,174,public void testMemoryLimit() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,175,"testMemoryLimit(""COMPRESS-382"");"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,176,"testMemoryLimit(""COMPRESS-386"");"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,179,"private void testMemoryLimit(String fileName) throws IOException, CompressorException {"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,180,"CompressorStreamFactory fac = new CompressorStreamFactory(true,"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,181,100);
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,182,try (InputStream is = new BufferedInputStream(
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,183,new FileInputStream(getFile(fileName)))) {
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,184,InputStream compressorInputStream = fac.createCompressorInputStream(is);
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,185,"fail(""Should have thrown CompressorMemoryLimitException"");"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,186,} catch (CompressorMemoryLimitException e) {

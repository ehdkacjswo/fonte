is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,41, @param zipEncoding The encoding of the filenames in the zip
False,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,42," file, usually <code>""CP437""</code>."
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,41,* @param bytes The encoded of the filename or comment in the zip
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,42,* file.
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,43,* @param off The offset of the encoded filename or comment in
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,44,* <code>bytes</code>.
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,45,* @param len The length of the encoded filename or commentin
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,46,* <code>bytes</code>.
False,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,44,"rotected AbstractUnicodeExtraField(String text, String zipEncoding) {"
False,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,45,"his(text, ZipEncodingHelper.encodeName(text, zipEncoding));"
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,48,"protected AbstractUnicodeExtraField(String text, byte[] bytes, int off,"
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,49,int len) {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,50,CRC32 crc32 = new CRC32();
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,51,"crc32.update(bytes, off, len);"
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,52,nameCRC32 = crc32.getValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,54,try {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,55,"unicodeName = text.getBytes(""UTF-8"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,56,} catch (UnsupportedEncodingException e) {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,57,"throw new RuntimeException(""FATAL: UTF-8 encoding not supported."","
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,58,e);
False,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,53, @param zipEncoding The encoding of the filenames in the zip
False,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,54," file, usually <code>""CP437""</code>."
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,67,* @param bytes The encoded of the filename or comment in the zip
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,68,* file.
False,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,57,RC32 crc32 = new CRC32();
False,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,58,rc32.update(bytes);
False,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,59,ameCRC32 = crc32.getValue();
False,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,61,ry {
False,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,62,"nicodeName = text.getBytes(""UTF-8"");"
False,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,63, catch (UnsupportedEncodingException e) {
False,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,64,"hrow new RuntimeException(""FATAL: UTF-8 encoding not supported."","
False,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,65,);
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,72,"this(text, bytes, 0, bytes.length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,20,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,22,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,23,import java.nio.ByteBuffer;
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,26,"* A fallback ZipEncoding, which uses a java.io means to encode names."
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,28,* <p>This implementation is not favorable for encodings other than
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,29,"* utf-8, because java.io encodes unmappable character as question"
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,30,* marks leading to unreadable ZIP entries on some operating
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,31,* systems.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,33,"* <p>Furthermore this implementation is unable to tell, whether a"
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,34,* given name can be safely encoded or not.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,36,"* <p>This implementation acts as a last resort implementation, when"
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,37,* neither {@see Simple8BitZipEnoding} nor {@see NioZipEncoding} is
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,38,* available.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,40,* <p>The methods of this class are reentrant.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,42,class FallbackZipEncoding implements ZipEncoding {
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,43,private final String charset;
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,46,"* Construct a fallback zip encoding, which uses the platform's"
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,47,* default charset.
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,49,public FallbackZipEncoding() {
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,50,this.charset = null;
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,54,"* Construct a fallback zip encoding, which uses the given charset."
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,56,* @param charset The name of the charset or <code>null</code> for
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,57,*                the platform's default character set.
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,59,public FallbackZipEncoding(String charset) {
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,60,this.charset = charset;
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,64,* @see
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,65,* org.apache.commons.compress.archivers.zip.ZipEncoding#canEncode(java.lang.String)
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,67,public boolean canEncode(String name) {
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,68,return true;
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,72,* @see
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,73,* org.apache.commons.compress.archivers.zip.ZipEncoding#encode(java.lang.String)
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,75,public ByteBuffer encode(String name) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,76,if (this.charset == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,77,return ByteBuffer.wrap(name.getBytes());
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,78,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,79,return ByteBuffer.wrap(name.getBytes(this.charset));
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,84,* @see
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,85,* org.apache.commons.compress.archivers.zip.ZipEncoding#decode(byte[])
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,87,public String decode(byte[] data) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,88,if (this.charset == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,89,return new String(data);
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,90,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java,91,"return new String(data,this.charset);"
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,20,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,22,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,23,import java.nio.ByteBuffer;
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,24,import java.nio.CharBuffer;
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,25,import java.nio.charset.Charset;
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,26,import java.nio.charset.CharsetEncoder;
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,27,import java.nio.charset.CoderResult;
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,28,import java.nio.charset.CodingErrorAction;
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,31,"* A ZipEncoding, which uses a java.nio {@link"
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,32,* java.nio.charset.Charset Charset} to encode names.
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,34,* <p>This implementation works for all cases under java-1.5 or
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,35,"* later. However, in java-1.4, some charsets don't have a java-nio"
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,36,"* implementation, most notably the default ZIP encoding Cp437.</p>"
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,38,* <p>The methods of this class are reentrant.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,40,class NioZipEncoding implements ZipEncoding {
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,41,private final Charset charset;
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,44,"* Construct an NIO based zip encoding, which wraps the given"
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,45,* charset.
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,47,* @param charset The NIO charset to wrap.
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,49,public NioZipEncoding(Charset charset) {
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,50,this.charset = charset;
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,54,* @see
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,55,* org.apache.commons.compress.archivers.zip.ZipEncoding#canEncode(java.lang.String)
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,57,public boolean canEncode(String name) {
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,58,CharsetEncoder enc = this.charset.newEncoder();
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,59,enc.onMalformedInput(CodingErrorAction.REPORT);
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,60,enc.onUnmappableCharacter(CodingErrorAction.REPORT);
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,62,return enc.canEncode(name);
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,66,* @see
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,67,* org.apache.commons.compress.archivers.zip.ZipEncoding#encode(java.lang.String)
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,69,public ByteBuffer encode(String name) {
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,70,CharsetEncoder enc = this.charset.newEncoder();
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,72,enc.onMalformedInput(CodingErrorAction.REPORT);
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,73,enc.onUnmappableCharacter(CodingErrorAction.REPORT);
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,75,CharBuffer cb = CharBuffer.wrap(name);
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,76,ByteBuffer out = ByteBuffer.allocate(name.length()
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,77,+ (name.length() + 1) / 2);
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,79,while (cb.remaining() > 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,80,"CoderResult res = enc.encode(cb, out,true);"
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,82,if (res.isUnmappable() || res.isMalformed()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,84,// write the unmappable characters in utf-16
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,85,// pseudo-URL encoding style to ByteBuffer.
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,86,if (res.length() * 6 > out.remaining()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,87,"out = ZipEncodingHelper.growBuffer(out, out.position()"
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,88,+ res.length() * 6);
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,91,for (int i=0; i<res.length(); ++i) {
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,92,"ZipEncodingHelper.appendSurrogate(out,cb.get());"
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,95,} else if (res.isOverflow()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,97,"out = ZipEncodingHelper.growBuffer(out, 0);"
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,99,} else if (res.isUnderflow()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,101,enc.flush(out);
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,102,break;
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,107,out.limit(out.position());
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,108,out.rewind();
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,109,return out;
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,113,* @see
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,114,* org.apache.commons.compress.archivers.zip.ZipEncoding#decode(byte[])
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,116,public String decode(byte[] data) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,117,return this.charset.newDecoder()
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,118,.onMalformedInput(CodingErrorAction.REPORT)
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,119,.onUnmappableCharacter(CodingErrorAction.REPORT)
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,120,.decode(ByteBuffer.wrap(data)).toString();
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,20,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,22,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,23,import java.nio.ByteBuffer;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,24,import java.nio.charset.Charset;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,25,import java.util.ArrayList;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,26,import java.util.Collections;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,27,import java.util.List;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,30,* This ZipEncoding implementation implements a simple 8bit character
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,31,"* set, which mets the following restrictions:"
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,33,* <ul>
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,34,* <li>Characters 0x0000 to 0x007f are encoded as the corresponding
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,35,*        byte values 0x00 to 0x7f.</li>
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,36,* <li>All byte codes from 0x80 to 0xff are mapped to a unique unicode
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,37,*       character in the range 0x0080 to 0x7fff. (No support for
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,38,*       UTF-16 surrogates)
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,39,* </ul>
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,41,* <p>These restrictions most notably apply to the most prominent
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,42,* omissions of java-1.4's {@link java.nio.charset.Charset Charset}
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,43,"* implementation, Cp437 and Cp850.</p>"
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,45,* <p>The methods of this class are reentrant.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,47,class Simple8BitZipEnoding implements ZipEncoding {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,50,"* A character entity, which is put to the reverse mapping table"
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,51,* of a simple encoding.
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,53,private static final class Simple8BitChar implements Comparable {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,54,public final char unicode;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,55,public final byte code;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,57,"Simple8BitChar(byte code, char unicode) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,58,this.code = code;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,59,this.unicode = unicode;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,62,public int compareTo(Object o) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,63,Simple8BitChar a = (Simple8BitChar) o;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,65,return this.unicode - a.unicode;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,68,public String toString() {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,69,"return ""0x"" + Integer.toHexString(0xffff & (int) unicode)"
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,70,"+ ""->0x"" + Integer.toHexString(0xff & (int) code);"
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,75,* The characters for byte values of 128 to 255 stored as an array of
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,76,* 128 chars.
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,78,private final char[] highChars;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,81,* A list of {@see Simple8BitChar} objects sorted by the unicode
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,82,* field.  This list is used to binary search reverse mapping of
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,83,* unicode characters with a character code greater than 127.
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,85,private final List reverseMapping;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,88,* @param highChars The characters for byte values of 128 to 255
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,89,* stored as an array of 128 chars.
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,91,public Simple8BitZipEnoding(char[] highChars) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,92,this.highChars = highChars;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,93,this.reverseMapping = new ArrayList(this.highChars.length);
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,95,byte code = 127;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,97,for (int i = 0; i < this.highChars.length; ++i) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,98,"this.reverseMapping.add(new Simple8BitChar(++code,"
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,99,this.highChars[i]));
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,102,Collections.sort(this.reverseMapping);
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,106,* Return the character code for a given encoded byte.
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,108,* @param b The byte to decode.
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,109,* @return The associated character value.
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,111,public char decodeByte(byte b) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,112,// code 0-127
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,113,if (b >= 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,114,return (char) b;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,117,"// byte is signed, so 128 == -128 and 255 == -1"
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,118,return this.highChars[128 + (int) b];
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,122,* @param c The character to encode.
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,123,* @return Whether the given unicode character is covered by this encoding.
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,125,public boolean canEncodeChar(char c) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,127,if (c >= 0 && c < 128) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,128,return true;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,131,Simple8BitChar r = this.encodeHighChar(c);
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,132,return r != null;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,136,* Pushes the encoded form of the given character to the given byte buffer.
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,138,* @param bb The byte buffer to write to.
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,139,* @param c The character to encode.
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,140,* @return Whether the given unicode character is covered by this encoding.
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,141,"*         If <code>false</code> is returned, nothing is pushed to the"
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,142,*         byte buffer.
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,144,"public boolean pushEncodedChar(ByteBuffer bb, char c) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,146,if (c >= 0 && c < 128) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,147,bb.put((byte) c);
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,148,return true;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,151,Simple8BitChar r = this.encodeHighChar(c);
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,152,if (r == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,153,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,155,bb.put(r.code);
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,156,return true;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,160,* @param c A unicode character in the range from 0x0080 to 0x7f00
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,161,"* @return A Simple8BitChar, if this character is covered by this encoding."
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,162,"*         A <code>null</code> value is returned, if this character is not"
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,163,*         covered by this encoding.
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,165,private Simple8BitChar encodeHighChar(char c) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,166,"// for performance an simplicity, yet another reincarnation of"
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,167,// binary search...
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,168,int i0 = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,169,int i1 = this.reverseMapping.size();
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,171,while (i1 > i0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,173,int i = i0 + (i1 - i0) / 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,175,Simple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,177,if (m.unicode == c) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,178,return m;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,181,if (m.unicode < c) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,182,i0 = i + 1;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,183,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,184,i1 = i;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,188,if (i0 >= this.reverseMapping.size()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,189,return null;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,192,Simple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,194,if (r.unicode != c) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,195,return null;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,198,return r;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,202,* @see
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,203,* org.apache.commons.compress.archivers.zip.ZipEncoding#canEncode(java.lang.String)
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,205,public boolean canEncode(String name) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,207,for (int i=0;i<name.length();++i) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,209,char c = name.charAt(i);
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,211,if (!this.canEncodeChar(c)) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,212,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,216,return true;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,220,* @see
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,221,* org.apache.commons.compress.archivers.zip.ZipEncoding#encode(java.lang.String)
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,223,public ByteBuffer encode(String name) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,224,ByteBuffer out = ByteBuffer.allocate(name.length()
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,225,+ 6 + (name.length() + 1) / 2);
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,227,for (int i=0;i<name.length();++i) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,229,char c = name.charAt(i);
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,231,if (out.remaining() < 6) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,232,"out = ZipEncodingHelper.growBuffer(out,out.position() + 6);"
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,235,"if (!this.pushEncodedChar(out,c)) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,237,"ZipEncodingHelper.appendSurrogate(out,c);"
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,241,out.limit(out.position());
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,242,out.rewind();
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,243,return out;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,247,* @see
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,248,* org.apache.commons.compress.archivers.zip.ZipEncoding#decode(byte[])
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,250,public String decode(byte[] data) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,251,char [] ret = new char[data.length];
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,253,for (int i=0;i<data.length;++i) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,254,ret[i] = this.decodeByte(data[i]);
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEnoding.java,257,return new String(ret);
False,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,45, Assemble as unicode comment extension from the comment and
False,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,46, encoding of the original zip entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,45,* Assemble as unicode comment extension from the name given as
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,46,* text as well as the encoded bytes actually written to the archive.
False,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,48, @param comment The file comment
False,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,49," @param zipEncoding The encoding of the comment in the zip file,"
False,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,50," usually <code>""CP437""</code>."
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,48,* @param name The file name
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,49,* @param bytes the bytes actually written to the archive
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,50,* @param off The offset of the encoded comment in <code>bytes</code>.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,51,* @param len The length of the encoded comment or comment in
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,52,* <code>bytes</code>.
False,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,52,"ublic UnicodeCommentExtraField(String comment, String zipEncoding) {"
False,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,53,"uper(comment, zipEncoding);"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,54,"public UnicodeCommentExtraField(String text, byte[] bytes, int off,"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,55,int len) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java,56,"super(text, bytes, off, len);"
False,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,45, Assemble as unicode path extension from the name and encoding
False,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,46, of the original zip entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,45,* Assemble as unicode path extension from the name given as
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,46,* text as well as the encoded bytes actually written to the archive.
False,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,49, @param zipEncoding The encoding of the filename in the zip
False,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,50," file, usually <code>""CP437""</code>."
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,49,* @param bytes the bytes actually written to the archive
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,50,* @param off The offset of the encoded filename in <code>bytes</code>.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,51,* @param len The length of the encoded filename or comment in
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,52,* <code>bytes</code>.
False,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,52,"ublic UnicodePathExtraField(String name, String zipEncoding) {"
False,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,53,"uper(name, zipEncoding);"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,54,"public UnicodePathExtraField(String text, byte[] bytes, int off, int len) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,55,"super(text, bytes, off, len);"
False,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,58, text as well as the bytes actually written to the archive.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java,60,* text as well as the encoded bytes actually written to the archive.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,25,mport java.io.UnsupportedEncodingException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,25,import java.nio.ByteBuffer;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,90, name of the encoding UTF-8
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,92,"tatic final String UTF8 = ""UTF8"";"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,97,tatic final String DEFAULT_ENCODING = UTF8;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,92,static final String DEFAULT_ENCODING = ZipEncodingHelper.UTF8;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,191,/ CheckStyle:VisibilityModifier OFF - bc
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,187,* The zip encoding to use for filenames and the file comment.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,189,* This field is of internal use and will be set in {@link
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,190,* #setEncoding(String)}.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,192,private ZipEncoding zipEncoding =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,193,ZipEncodingHelper.getZipEncoding(DEFAULT_ENCODING);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,195,// CheckStyle:VisibilityModifier OFF - bc
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,266," This method indicates whether this archive is writing to a seekable stream (i.e., to a random"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,267, access file).
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,270,* This method indicates whether this archive is writing to a
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,271,"* seekable stream (i.e., to a random access file)."
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,289,seEFS &= isUTF8(encoding);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,293,this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,294,useEFS &= ZipEncodingHelper.isUTF8(encoding);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,308,seEFS = b && isUTF8(encoding);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,313,useEFS = b && ZipEncodingHelper.isUTF8(encoding);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,455, @throws IllegalArgumentException if an invalid compression level is specified.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,460,* @throws IllegalArgumentException if an invalid compression
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,461,* level is specified.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,460,hrow new IllegalArgumentException(
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,461,"Invalid compression level: "" + level);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,466,"throw new IllegalArgumentException(""Invalid compression level: """
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,467,+ level);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,609,yte[] name = getBytes(ze.getName());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,615,boolean encodable = this.zipEncoding.canEncode(ze.getName());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,616,ByteBuffer name = this.zipEncoding.encode(ze.getName());
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,611,"e.addExtraField(new UnicodePathExtraField(ze.getName(), name));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,620,/*            if (!encodable) { -- FIXME decide what to*/
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,621,"ze.addExtraField(new UnicodePathExtraField(ze.getName(),"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,622,"name.array(),"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,623,"name.arrayOffset(),"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,624,name.limit()));
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,614,yte[] commentB = getBytes(comm);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,615,"e.addExtraField(new UnicodeCommentExtraField(comm, commentB));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,630,boolean commentEncodable = this.zipEncoding.canEncode(comm);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,632,/*            if (!commentEncodable) { -- FIXME decide what to*/
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,633,ByteBuffer commentB = this.zipEncoding.encode(comm);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,634,"ze.addExtraField(new UnicodeCommentExtraField(comm,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,635,"commentB.array(),"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,636,"commentB.arrayOffset(),"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,637,commentB.limit())
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,656,riteOut(ZipShort.getBytes(name.length));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,680,writeOut(ZipShort.getBytes(name.limit()));
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,665,riteOut(name);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,666,ritten += name.length;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,689,"writeOut(name.array(), name.arrayOffset(), name.limit());"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,690,written += name.limit();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,730,yte[] name = getBytes(ze.getName());
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,731,riteOut(ZipShort.getBytes(name.length));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,754,ByteBuffer name = this.zipEncoding.encode(ze.getName());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,755,writeOut(ZipShort.getBytes(name.limit()));
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,744,yte[] commentB = getBytes(comm);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,745,riteOut(ZipShort.getBytes(commentB.length));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,768,ByteBuffer commentB = this.zipEncoding.encode(comm);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,769,writeOut(ZipShort.getBytes(commentB.limit()));
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,765,riteOut(name);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,766,ritten += name.length;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,789,"writeOut(name.array(), name.arrayOffset(), name.limit());"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,790,written += name.limit();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,773,riteOut(commentB);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,774,ritten += commentB.length;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,797,"writeOut(commentB.array(), commentB.arrayOffset(), commentB.limit());"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,798,written += commentB.limit();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,798,yte[] data = getBytes(comment);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,799,riteOut(ZipShort.getBytes(data.length));
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,800,riteOut(data);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,822,ByteBuffer data = this.zipEncoding.encode(comment);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,823,writeOut(ZipShort.getBytes(data.limit()));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,824,"writeOut(data.array(), data.arrayOffset(), data.limit());"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,844, Retrieve the bytes for the given String in the encoding set for
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,845, this Stream.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,846, @param name the string to get bytes from
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,847, @return the bytes as a byte array
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,848, @throws ZipException on error
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,850,rotected byte[] getBytes(String name) throws ZipException {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,851,f (encoding == null) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,852,eturn name.getBytes();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,853, else {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,854,ry {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,855,"eturn ZipEncodingHelper.encodeName(name, encoding);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,856, catch (java.nio.charset.UnsupportedCharsetException ex) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,857,/ Java 1.4's NIO doesn't recognize a few names that
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,858,/ String.getBytes does
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,859,ry {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,860,eturn name.getBytes(encoding);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,861, catch (UnsupportedEncodingException uee) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,862,hrow new ZipException(uee.getMessage());
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,914, Whether a given encoding - or the platform's default encoding
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,915, if the parameter is null - is UTF-8.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,917,tatic boolean isUTF8(String encoding) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,918,f (encoding == null) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,919,/ check platform's default encoding
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,920,"ncoding = System.getProperty(""file.encoding"");"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,922,eturn UTF8.equalsIgnoreCase(encoding)
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,923,"| ""utf-8"".equalsIgnoreCase(encoding);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,20,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,22,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,23,import java.nio.ByteBuffer;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,24,import java.nio.charset.Charset;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,27,* An interface for encoders that do a pretty encoding of ZIP
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,28,* filenames.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,30,"* <p>There are mostly two implementations, one that uses java.nio"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,31,"* {@link java.nio.charset.Charset Charset} and one implementation,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,32,"* which copes with simple 8 bit charsets, because java-1.4 did not"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,33,* support Cp437 in java.nio.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,35,* <p>The main reason for defining an own encoding layer comes from
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,36,* the problems with {@link java.lang.String#getBytes(String)
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,37,"* String.getBytes}, which encodes unknown characters as ASCII"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,38,"* quotation marks ('?'), which is per definition an invalid filename"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,39,"* character under some operating systems (Windows, e.g.) leading to"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,40,* ignored ZIP entries.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,42,* <p>All implementations should implement this interface in a
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,43,* reentrant way.<(p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,45,interface ZipEncoding {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,47,"* Check, whether the given string may be losslessly encoded using this"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,48,* encoding.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,50,* @param name A filename or ZIP comment.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,51,* @return Whether the given name may be encoded with out any losses.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,53,boolean canEncode(String name);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,56,* Encode a filename or a comment to a byte array suitable for
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,57,* storing it to a serialized zip entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,59,"* <p>Examples for CP 437 (in pseudo-notation, right hand side is"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,60,* C-style notation):</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,61,* <pre>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,62,"*  encode(""\u20AC_for_Dollar.txt"") = ""%U20AC_for_Dollar.txt"""
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,63,"*  encode(""\u00D6lf\u00E4sser.txt"") = ""\231lf\204sser.txt"""
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,64,* </pre>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,66,* @param name A filename or ZIP comment.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,67,* @return A byte buffer with a backing array containing the
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,68,*         encoded name.  Unmappable characters or malformed
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,69,*         character sequences are mapped to a sequence of utf-16
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,70,*         words encoded in the format <code>%Uxxxx</code>.  It is
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,71,"*         assumed, that the byte buffer is positioned at the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,72,"*         beinning of the encoded result, the byte buffer has a"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,73,*         backing array and the limit of the byte buffer points
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,74,*         to the end of the encoded result.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,75,* @throws IOException
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,77,ByteBuffer encode(String name) throws IOException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,80,* @param data The byte values to decode.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,81,* @return The decoded string.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,82,* @throws IOException
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java,84,String decode(byte [] data) throws IOException;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,22,mport java.nio.CharBuffer;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,24,mport java.nio.charset.CharsetEncoder;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,25,mport java.nio.charset.CoderResult;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,26,mport java.nio.charset.CodingErrorAction;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,23,import java.nio.charset.UnsupportedCharsetException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,24,import java.util.HashMap;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,25,import java.util.Map;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,33,"* A class, which holds the high characters of a simple encoding"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,34,* and lazily instantiates a Simple8BitZipEnoding instance in a
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,35,* thread-safe manner.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,37,private static class SimpleEncodingHolder {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,39,private final char [] highChars;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,40,private Simple8BitZipEnoding encoding;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,43,* Instantiate a simple encoding holder.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,45,* @param highChars The characters for byte codes 128 to 255.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,47,* @see Simple8BitZipEnoding#Simple8BitZipEnoding(char[])
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,49,SimpleEncodingHolder(char [] highChars) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,50,this.highChars = highChars;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,54,"* @return The associated {@see Simple8BitZipEncoding}, which"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,55,*         is instantiated if not done so far.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,57,public synchronized Simple8BitZipEnoding getEncoding() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,58,if (this.encoding == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,59,this.encoding = new Simple8BitZipEnoding(this.highChars);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,61,return this.encoding;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,65,private static final Map simpleEncodings;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,67,static {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,68,simpleEncodings = new HashMap();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,70,char[] cp437_high_chars =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,71,"new char[] { 0x00c7, 0x00fc, 0x00e9, 0x00e2, 0x00e4, 0x00e0,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,72,"0x00e5, 0x00e7, 0x00ea, 0x00eb, 0x00e8, 0x00ef,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,73,"0x00ee, 0x00ec, 0x00c4, 0x00c5, 0x00c9, 0x00e6,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,74,"0x00c6, 0x00f4, 0x00f6, 0x00f2, 0x00fb, 0x00f9,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,75,"0x00ff, 0x00d6, 0x00dc, 0x00a2, 0x00a3, 0x00a5,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,76,"0x20a7, 0x0192, 0x00e1, 0x00ed, 0x00f3, 0x00fa,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,77,"0x00f1, 0x00d1, 0x00aa, 0x00ba, 0x00bf, 0x2310,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,78,"0x00ac, 0x00bd, 0x00bc, 0x00a1, 0x00ab, 0x00bb,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,79,"0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,80,"0x2562, 0x2556, 0x2555, 0x2563, 0x2551, 0x2557,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,81,"0x255d, 0x255c, 0x255b, 0x2510, 0x2514, 0x2534,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,82,"0x252c, 0x251c, 0x2500, 0x253c, 0x255e, 0x255f,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,83,"0x255a, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,84,"0x256c, 0x2567, 0x2568, 0x2564, 0x2565, 0x2559,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,85,"0x2558, 0x2552, 0x2553, 0x256b, 0x256a, 0x2518,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,86,"0x250c, 0x2588, 0x2584, 0x258c, 0x2590, 0x2580,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,87,"0x03b1, 0x00df, 0x0393, 0x03c0, 0x03a3, 0x03c3,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,88,"0x00b5, 0x03c4, 0x03a6, 0x0398, 0x03a9, 0x03b4,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,89,"0x221e, 0x03c6, 0x03b5, 0x2229, 0x2261, 0x00b1,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,90,"0x2265, 0x2264, 0x2320, 0x2321, 0x00f7, 0x2248,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,91,"0x00b0, 0x2219, 0x00b7, 0x221a, 0x207f, 0x00b2,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,92,"0x25a0, 0x00a0 };"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,94,SimpleEncodingHolder cp437 = new SimpleEncodingHolder(cp437_high_chars);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,96,"simpleEncodings.put(""CP437"",cp437);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,97,"simpleEncodings.put(""Cp437"",cp437);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,98,"simpleEncodings.put(""cp437"",cp437);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,99,"simpleEncodings.put(""IBM437"",cp437);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,100,"simpleEncodings.put(""ibm437"",cp437);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,102,char[] cp850_high_chars =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,103,"new char[] { 0x00c7, 0x00fc, 0x00e9, 0x00e2, 0x00e4, 0x00e0,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,104,"0x00e5, 0x00e7, 0x00ea, 0x00eb, 0x00e8, 0x00ef,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,105,"0x00ee, 0x00ec, 0x00c4, 0x00c5, 0x00c9, 0x00e6,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,106,"0x00c6, 0x00f4, 0x00f6, 0x00f2, 0x00fb, 0x00f9,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,107,"0x00ff, 0x00d6, 0x00dc, 0x00f8, 0x00a3, 0x00d8,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,108,"0x00d7, 0x0192, 0x00e1, 0x00ed, 0x00f3, 0x00fa,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,109,"0x00f1, 0x00d1, 0x00aa, 0x00ba, 0x00bf, 0x00ae,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,110,"0x00ac, 0x00bd, 0x00bc, 0x00a1, 0x00ab, 0x00bb,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,111,"0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x00c1,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,112,"0x00c2, 0x00c0, 0x00a9, 0x2563, 0x2551, 0x2557,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,113,"0x255d, 0x00a2, 0x00a5, 0x2510, 0x2514, 0x2534,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,114,"0x252c, 0x251c, 0x2500, 0x253c, 0x00e3, 0x00c3,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,115,"0x255a, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,116,"0x256c, 0x00a4, 0x00f0, 0x00d0, 0x00ca, 0x00cb,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,117,"0x00c8, 0x0131, 0x00cd, 0x00ce, 0x00cf, 0x2518,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,118,"0x250c, 0x2588, 0x2584, 0x00a6, 0x00cc, 0x2580,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,119,"0x00d3, 0x00df, 0x00d4, 0x00d2, 0x00f5, 0x00d5,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,120,"0x00b5, 0x00fe, 0x00de, 0x00da, 0x00db, 0x00d9,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,121,"0x00fd, 0x00dd, 0x00af, 0x00b4, 0x00ad, 0x00b1,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,122,"0x2017, 0x00be, 0x00b6, 0x00a7, 0x00f7, 0x00b8,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,123,"0x00b0, 0x00a8, 0x00b7, 0x00b9, 0x00b3, 0x00b2,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,124,"0x25a0, 0x00a0 };"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,126,SimpleEncodingHolder cp850 = new SimpleEncodingHolder(cp850_high_chars);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,128,"simpleEncodings.put(""CP850"",cp850);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,129,"simpleEncodings.put(""Cp850"",cp850);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,130,"simpleEncodings.put(""cp850"",cp850);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,131,"simpleEncodings.put(""IBM850"",cp850);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,132,"simpleEncodings.put(""ibm850"",cp850);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,68, Encode a filename or a comment to a byte array suitable for
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,69, storing it to a serialized zip entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,170,* Append <code>%Uxxxx</code> to the given byte buffer.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,171,"* The caller must assure, that <code>bb.remaining()&gt;=6</code>."
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,71," Examples (in pseudo-notation, right hand side is C-style notation):"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,72, <pre>
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,73,"  encodeName(""\u20AC_for_Dollar.txt"",""CP437"") = ""%U20AC_for_Dollar.txt"""
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,74,"  encodeName(""\u00D6lf\u00E4sser.txt"",""CP437"") = ""\231lf\204sser.txt"""
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,75, </pre>
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,77, @param name The filename or comment with possible non-ASCII
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,78, unicode characters.  Must not be null.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,79, @param encoding A valid encoding name. The standard zip
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,80,"                 encoding is <code>""CP437""</code>,"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,81,"                 <code>""UTF-8""</code> is supported in ZIP file"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,82,"                 version <code>6.3</code> or later.  If null,"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,83,                 will use the platform's {@link
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,84,                 java.lang.String#getBytes default encoding}.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,85, @return A byte array containing the mapped file
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,86,         name. Unmappable characters or malformed character
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,87,         sequences are mapped to a sequence of utf-16 words
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,88,         encoded in the format <code>%Uxxxx</code>.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,173,* @param bb The byte buffer to write to.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,174,* @param c The character to write.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,90,"tatic final byte[] encodeName(String name, String encoding) {"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,91,f (encoding == null) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,92,eturn name.getBytes();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,95,harset cs = Charset.forName(encoding);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,96,harsetEncoder enc = cs.newEncoder();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,98,nc.onMalformedInput(CodingErrorAction.REPORT);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,99,nc.onUnmappableCharacter(CodingErrorAction.REPORT);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,101,harBuffer cb = CharBuffer.wrap(name);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,102,yteBuffer out = ByteBuffer.allocate(name.length()
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,103, (name.length() + 1) / 2);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,105,hile (cb.remaining() > 0) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,106,"oderResult res = enc.encode(cb, out,true);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,108,f (res.isUnmappable() || res.isMalformed()) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,110,/ write the unmappable characters in utf-16
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,111,/ pseudo-URL encoding style to ByteBuffer.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,112,f (res.length() * 6 > out.remaining()) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,113,"ut = growBuffer(out,out.position() + res.length() * 6);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,116,or (int i=0; i<res.length(); ++i) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,117,ut.put((byte) '%');
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,118,ut.put((byte) 'U');
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,176,"static void appendSurrogate(ByteBuffer bb, char c) {"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,120,har c = cb.get();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,178,bb.put((byte) '%');
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,179,bb.put((byte) 'U');
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,122,ut.put(HEX_DIGITS[(c >> 12)&0x0f]);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,123,ut.put(HEX_DIGITS[(c >> 8)&0x0f]);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,124,ut.put(HEX_DIGITS[(c >> 4)&0x0f]);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,125,ut.put(HEX_DIGITS[c & 0x0f]);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,181,bb.put(HEX_DIGITS[(c >> 12)&0x0f]);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,182,bb.put(HEX_DIGITS[(c >> 8)&0x0f]);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,183,bb.put(HEX_DIGITS[(c >> 4)&0x0f]);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,184,bb.put(HEX_DIGITS[c & 0x0f]);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,128, else if (res.isOverflow()) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,130,"ut = growBuffer(out, 0);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,189,* name of the encoding UTF-8
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,191,"static final String UTF8 = ""UTF8"";"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,132, else if (res.isUnderflow()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,194,* name of the encoding UTF-8
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,196,static final ZipEncoding UTF8_ZIP_ENCODING = new FallbackZipEncoding(UTF8);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,134,nc.flush(out);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,135,reak;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,199,* Instantiates a zip encoding.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,201,* @param name The name of the zip encoding. Specify <code>null</code> for
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,202,*             the platform's default encoding.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,203,* @return A zip encoding for the given encoding name.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,205,static ZipEncoding getZipEncoding(String name) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,207,// fallback encoding is good enough for utf-8.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,208,if (isUTF8(name)) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,209,return UTF8_ZIP_ENCODING;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,212,if (name == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,213,return new FallbackZipEncoding();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,140,yte [] ret = new byte[out.position()];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,141,ut.rewind();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,142,ut.get(ret);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,216,SimpleEncodingHolder h =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,217,(SimpleEncodingHolder) simpleEncodings.get(name);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,144,eturn ret;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,148," Return, whether a filename or a comment may be encoded to a"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,149, byte array suitable for storing it to a serialized zip entry
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,150, without any losses.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,152," Examples (in pseudo-notation, right hand side is C-style notation):"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,153, <pre>
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,154,"  canEncodeName(""\u20AC_for_Dollar.txt"",""CP437"") = false"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,155,"  canEncodeName(""\u20AC_for_Dollar.txt"",""UTF-8"") = true"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,156,"  canEncodeName(""\u00D6lf\u00E4sser.txt"",""CP437"") = true"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,157, </pre>
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,159, @param name The filename or comment with possible non-ASCII
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,160, unicode characters.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,161, @param encoding A valid encoding name. The standard zip
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,162,"                 encoding is <code>""CP437""</code>,"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,163,"                 <code>""UTF-8""</code> is supported in ZIP file"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,164,                 version <code>6.3</code> or later.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,165, @return Whether the given encoding may encode the given name.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,167,"tatic final boolean canEncodeName(String name, String encoding) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,219,if (h!=null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,220,return h.getEncoding();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,169,harset cs = Charset.forName(encoding);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,223,try {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,171,harsetEncoder enc = cs.newEncoder();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,172,nc.onMalformedInput(CodingErrorAction.REPORT);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,173,nc.onUnmappableCharacter(CodingErrorAction.REPORT);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,225,Charset cs = Charset.forName(name);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,226,return new NioZipEncoding(cs);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,175,eturn enc.canEncode(name);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,228,} catch (UnsupportedCharsetException e) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,229,return new FallbackZipEncoding(name);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,179, Decode a filename or a comment from a byte array.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,181, @param name The filename or comment.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,182, @param encoding A valid encoding name. The standard zip
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,183,"                 encoding is <code>""CP437""</code>,"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,184,"                 <code>""UTF-8""</code> is supported in ZIP file"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,185,                 version <code>6.3</code> or later.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,234,* Whether a given encoding - or the platform's default encoding
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,235,* if the parameter is null - is UTF-8.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,187,"tatic final String decodeName(byte[] name, String encoding)"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,188,hrows java.nio.charset.CharacterCodingException {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,189,harset cs = Charset.forName(encoding);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,190,eturn cs.newDecoder()
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,191,onMalformedInput(CodingErrorAction.REPORT)
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,192,onUnmappableCharacter(CodingErrorAction.REPORT)
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,193,decode(ByteBuffer.wrap(name)).toString();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,237,static boolean isUTF8(String encoding) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,238,if (encoding == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,239,// check platform's default encoding
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,240,"encoding = System.getProperty(""file.encoding"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,242,return UTF8.equalsIgnoreCase(encoding)
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,243,"|| ""utf-8"".equalsIgnoreCase(encoding);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,24,mport java.io.UnsupportedEncodingException;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,25,mport java.nio.charset.CharacterCodingException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,100,* The zip encoding to use for filenames and the file comment.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,102,private final ZipEncoding zipEncoding;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,119,"his(f, ZipArchiveOutputStream.UTF8);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,122,"this(f, ZipEncodingHelper.UTF8);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,130,"his(new File(name), ZipArchiveOutputStream.UTF8);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,133,"this(new File(name), ZipEncodingHelper.UTF8);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,168, @param useUnicodeExtraFields whether to use InfoZIP Unicode Extra Fields (if present)
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,169, to set the file names.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,171,* @param useUnicodeExtraFields whether to use InfoZIP Unicode
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,172,* Extra Fields (if present) to set the file names.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,179,this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,250, @throws ZipException if the zipentry has an unsupported compression method
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,254,* @throws ZipException if the zipentry has an unsupported
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,255,* compression method
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,333,inal String entryEncoding =
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,334,asEFS ? ZipArchiveOutputStream.UTF8 : encoding;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,338,final ZipEncoding entryEncoding =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,339,hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,376,"e.setName(getString(fileName, entryEncoding));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,381,ze.setName(entryEncoding.decode(fileName));
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,398,"e.setComment(getString(comment, entryEncoding));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,403,ze.setComment(entryEncoding.decode(comment));
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,532, SHORT + SHORT + fileNameLen + extraFieldLen;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,537,+ SHORT + SHORT + fileNameLen + extraFieldLen;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,571, Retrieve a String from the given bytes using the encoding set
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,572, for this ZipFile.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,574, @param bytes the byte array to transform
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,575, @return String obtained by using the given encoding
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,576, @throws ZipException if the encoding cannot be recognized.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,578,"rotected String getString(byte[] bytes, String enc)"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,579,hrows ZipException {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,580,f (enc == null) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,581,eturn new String(bytes);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,582, else {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,583,ry {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,584,ry {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,585,"eturn ZipEncodingHelper.decodeName(bytes, enc);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,586, catch (CharacterCodingException ex) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,587,hrow new ZipException(ex.getMessage());
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,589, catch (java.nio.charset.UnsupportedCharsetException ex) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,590,/ Java 1.4's NIO doesn't recognize a few names that
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,591,/ String.getBytes does
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,592,ry {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,593,"eturn new String(bytes, enc);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,594, catch (UnsupportedEncodingException uee) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,595,hrow new ZipException(uee.getMessage());
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,662,"decodeName(f.getUnicodeName(),"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,663,ipArchiveOutputStream.UTF8);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,664, catch (CharacterCodingException ex) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,636,.UTF8_ZIP_ENCODING.decode(f.getUnicodeName());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,637,} catch (IOException ex) {
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,20,package org.apache.commons.compress.archivers.zip;
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,22,import java.io.IOException;
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,23,import java.nio.ByteBuffer;
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,25,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,28,* Test zip encodings.
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,30,public class TestZipEncodings extends TestCase {
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,31,"private static final String UNENC_STRING = ""\u2016"";"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,33,// stress test for internal grow method.
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,34,private static final String BAD_STRING =
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,35,"""\u2016\u2015\u2016\u2015\u2016\u2015\u2016\u2015\u2016\u2015\u2016"";"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,37,private static final String BAD_STRING_ENC =
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,38,"""%U2016%U2015%U2016%U2015%U2016%U2015%U2016%U2015%U2016%U2015%U2016"";"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,40,public void testSimpleCp437Encoding() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,42,"doSimpleEncodingTest(""Cp437"", null);"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,45,public void testSimpleCp850Encoding() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,47,"doSimpleEncodingTest(""Cp850"", null);"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,50,public void testNioCp1252Encoding() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,51,"// CP1252 has some undefined code points, these are"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,52,// the defined ones
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,53,// retrieved by
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,54,//    awk '/^0x/ && NF>2 {print $1;}' CP1252.TXT
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,55,byte[] b =
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,56,"new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,57,"0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,58,"0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,59,"0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,60,"0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,61,"0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,62,"0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,63,"0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,64,"0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,65,"0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,66,"0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,67,"0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,68,"0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,69,"0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,70,"0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,71,"0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,72,"(byte) 0x80, (byte) 0x82, (byte) 0x83, (byte) 0x84,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,73,"(byte) 0x85, (byte) 0x86, (byte) 0x87, (byte) 0x88,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,74,"(byte) 0x89, (byte) 0x8A, (byte) 0x8B, (byte) 0x8C,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,75,"(byte) 0x8E, (byte) 0x91, (byte) 0x92, (byte) 0x93,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,76,"(byte) 0x94, (byte) 0x95, (byte) 0x96, (byte) 0x97,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,77,"(byte) 0x98, (byte) 0x99, (byte) 0x9A, (byte) 0x9B,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,78,"(byte) 0x9C, (byte) 0x9E, (byte) 0x9F, (byte) 0xA0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,79,"(byte) 0xA1, (byte) 0xA2, (byte) 0xA3, (byte) 0xA4,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,80,"(byte) 0xA5, (byte) 0xA6, (byte) 0xA7, (byte) 0xA8,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,81,"(byte) 0xA9, (byte) 0xAA, (byte) 0xAB, (byte) 0xAC,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,82,"(byte) 0xAD, (byte) 0xAE, (byte) 0xAF, (byte) 0xB0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,83,"(byte) 0xB1, (byte) 0xB2, (byte) 0xB3, (byte) 0xB4,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,84,"(byte) 0xB5, (byte) 0xB6, (byte) 0xB7, (byte) 0xB8,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,85,"(byte) 0xB9, (byte) 0xBA, (byte) 0xBB, (byte) 0xBC,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,86,"(byte) 0xBD, (byte) 0xBE, (byte) 0xBF, (byte) 0xC0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,87,"(byte) 0xC1, (byte) 0xC2, (byte) 0xC3, (byte) 0xC4,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,88,"(byte) 0xC5, (byte) 0xC6, (byte) 0xC7, (byte) 0xC8,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,89,"(byte) 0xC9, (byte) 0xCA, (byte) 0xCB, (byte) 0xCC,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,90,"(byte) 0xCD, (byte) 0xCE, (byte) 0xCF, (byte) 0xD0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,91,"(byte) 0xD1, (byte) 0xD2, (byte) 0xD3, (byte) 0xD4,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,92,"(byte) 0xD5, (byte) 0xD6, (byte) 0xD7, (byte) 0xD8,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,93,"(byte) 0xD9, (byte) 0xDA, (byte) 0xDB, (byte) 0xDC,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,94,"(byte) 0xDD, (byte) 0xDE, (byte) 0xDF, (byte) 0xE0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,95,"(byte) 0xE1, (byte) 0xE2, (byte) 0xE3, (byte) 0xE4,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,96,"(byte) 0xE5, (byte) 0xE6, (byte) 0xE7, (byte) 0xE8,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,97,"(byte) 0xE9, (byte) 0xEA, (byte) 0xEB, (byte) 0xEC,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,98,"(byte) 0xED, (byte) 0xEE, (byte) 0xEF, (byte) 0xF0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,99,"(byte) 0xF1, (byte) 0xF2, (byte) 0xF3, (byte) 0xF4,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,100,"(byte) 0xF5, (byte) 0xF6, (byte) 0xF7, (byte) 0xF8,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,101,"(byte) 0xF9, (byte) 0xFA, (byte) 0xFB, (byte) 0xFC,"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,102,"(byte) 0xFD, (byte) 0xFE, (byte) 0xFF };"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,104,"doSimpleEncodingTest(""Cp1252"",b);"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,107,"private static final void assertEquals(byte[] expected, ByteBuffer actual) {"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,109,"assertEquals(expected.length, actual.limit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,111,for (int i = 0; i < expected.length; ++i) {
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,113,byte a = actual.get();
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,114,"assertEquals(expected[i], a);"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,119,"private void doSimpleEncodingTest(String name, byte[] testBytes)"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,120,throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,122,ZipEncoding enc = ZipEncodingHelper.getZipEncoding(name);
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,124,if (testBytes == null) {
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,126,testBytes = new byte[256];
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,127,for (int i = 0; i < 256; ++i) {
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,128,testBytes[i] = (byte) i;
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,132,String decoded = enc.decode(testBytes);
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,134,"assertEquals(true, enc.canEncode(decoded));"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,136,ByteBuffer encoded = enc.encode(decoded);
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,138,"assertEquals(testBytes, encoded);"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,140,"assertEquals(false, enc.canEncode(UNENC_STRING));"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,141,"assertEquals(""%U2016"".getBytes(""US-ASCII""), enc.encode(UNENC_STRING));"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,142,"assertEquals(false, enc.canEncode(BAD_STRING));"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,143,"assertEquals(BAD_STRING_ENC.getBytes(""US-ASCII""),"
True,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,src/test/java/org/apache/commons/compress/archivers/zip/TestZipEncodings.java,144,enc.encode(BAD_STRING));
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,25,mport java.net.URL;
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,27,mport java.nio.charset.Charset;
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,28,mport java.nio.charset.UnsupportedCharsetException;
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,26,import java.net.URL;
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,27,import java.nio.ByteBuffer;
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,30,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,29,import java.util.zip.CRC32;
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,31,import org.apache.commons.compress.AbstractTestCase;
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,32,ublic class UTF8ZipFilesTest extends TestCase {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,33,public class UTF8ZipFilesTest extends AbstractTestCase {
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,122,ry {
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,123,harset.forName(encoding);
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,124, catch (UnsupportedCharsetException use) {
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,125,"ystem.err.println(""Skipping testFileRoundtrip for unsupported """
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,126," "" encoding "" + encoding);"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,127,eturn;
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,139,ZipEncoding zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,155,"& !ZipEncodingHelper.canEncodeName(ze.getName(),"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,156,os.getEncoding())) {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,150,&& !zipEncoding.canEncode(ze.getName())) {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,152,ByteBuffer en = zipEncoding.encode(ze.getName());
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,158,os.getEncoding()));
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,155,"en.array(),"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,156,"en.arrayOffset(),"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,157,en.limit()));
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,167,"& !ZipEncodingHelper.canEncodeName(ze.getName(),"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,168,os.getEncoding())) {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,166,&& !zipEncoding.canEncode(ze.getName())) {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,168,ByteBuffer en = zipEncoding.encode(ze.getName());
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,170,os.getEncoding()));
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,171,"en.array(),"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,172,"en.arrayOffset(),"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,173,en.limit()));
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,180,"& !ZipEncodingHelper.canEncodeName(ze.getName(),"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,181,os.getEncoding())) {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,183,&& !zipEncoding.canEncode(ze.getName())) {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,185,ByteBuffer en = zipEncoding.encode(ze.getName());
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,183,os.getEncoding()));
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,188,"en.array(),"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,189,"en.arrayOffset(),"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,190,en.limit()));
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,236,"nicodePathExtraField ucpe = new UnicodePathExtraField(expectedName,"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,237,ncoding);
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,238,"ssertEquals(ucpe.getNameCRC32(), ucpf.getNameCRC32());"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,243,ZipEncoding enc = ZipEncodingHelper.getZipEncoding(encoding);
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,244,ByteBuffer ne = enc.encode(ze.getName());
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,246,CRC32 crc = new CRC32();
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,247,"crc.update(ne.array(),ne.arrayOffset(),ne.limit());"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,249,"assertEquals(crc.getValue(), ucpf.getNameCRC32());"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,38,rivate static final ZipShort ID = new ZipShort(0xffff);
True,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,38,public static final ZipShort ID = new ZipShort(0xffff);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1047,nt len= LFH_FILENAME_OFFSET + nameLen + extra.length;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1047,int len = LFH_FILENAME_OFFSET + nameLen + extra.length;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1051,ZipExtraField pex = (PaddingExtraField) ze.getExtraField(PaddingExtraField.ID);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1052,if (pex != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1053,padding += pex.getLocalFileDataLength().getValue() + EXTRAFIELD_HEADER_SIZE;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1055,// will overwrite an existing PaddingExtraField
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1053,en += EXTRAFIELD_HEADER_SIZE + padding;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1058,len = LFH_FILENAME_OFFSET + nameLen + extra.length;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,485,"ZipArchiveEntry storedEntry2 = new ZipArchiveEntry(""stored2.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,486,storedEntry2.setMethod(ZipEntry.STORED);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,487,storedEntry2.setAlignment(1024);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,488,storedEntry2.addExtraField(new PaddingExtraField(123));
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,489,zipOutput.putArchiveEntry(storedEntry2);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,490,"zipOutput.write(""Hello pre-aligned Stored\n"".getBytes(Charset.forName(""UTF-8"")));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,491,zipOutput.closeArchiveEntry();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,501,"ssertEquals(0L, inflatedEntry.getDataOffset()%1024);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,509,"assertEquals(0L, storedEntry.getDataOffset()%1024);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,515,"ZipArchiveEntry storedEntry2 = zf.getEntry(""stored2.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,516,"assertNotEquals(-1L, storedEntry2.getCompressedSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,517,"assertNotEquals(-1L, storedEntry2.getSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,518,"assertEquals(0L, storedEntry2.getDataOffset()%1024);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,519,try (InputStream stream = zf.getInputStream(storedEntry2)) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,520,"Assert.assertEquals(""Hello pre-aligned Stored\n"","
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,521,"new String(IOUtils.toByteArray(stream), Charset.forName(""UTF-8"")));"

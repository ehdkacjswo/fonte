is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,27,import java.nio.ByteBuffer;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,28,import java.nio.channels.SeekableByteChannel;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,100,* Create a stream compressor with the given compression level.
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,102,* @param os       The SeekableByteChannel to receive output
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,103,* @param deflater The deflater to use for the compressor
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,104,* @return A stream compressor
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,105,* @since 1.13
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,107,"static StreamCompressor create(final SeekableByteChannel os, final Deflater deflater) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,108,"return new SeekableByteChannelCompressor(deflater, os);"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,325,private static final class SeekableByteChannelCompressor extends StreamCompressor {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,326,private final SeekableByteChannel channel;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,328,"public SeekableByteChannelCompressor(final Deflater deflater,"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,329,final SeekableByteChannel channel) {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,330,super(deflater);
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,331,this.channel = channel;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,334,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,335,"protected final void writeOut(final byte[] data, final int offset, final int length)"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,336,throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,337,"channel.write(ByteBuffer.wrap(data, offset, length));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,26,mport java.io.RandomAccessFile;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,27,import java.nio.channels.SeekableByteChannel;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,28,import java.nio.file.Files;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,29,import java.nio.file.StandardOpenOption;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,31,import java.util.EnumSet;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,58, <p>This class will try to use {@link java.io.RandomAccessFile
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,59, RandomAccessFile} when you know that the output is going to go to a
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,60, file.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,61,* <p>This class will try to use {@link
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,62,* java.nio.channels.SeekableByteChannel} when you know that the
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,63,* output is going to go to a file.</p>
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,62," <p>If RandomAccessFile cannot be used, this implementation will use"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,65,"* <p>If SeekableByteChannel cannot be used, this implementation will use"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,74, user RandomAccessFile and you try to write a ZipArchiveEntry of
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,77,* use SeekableByteChannel and you try to write a ZipArchiveEntry of
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,233,rivate final RandomAccessFile raf;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,236,private final SeekableByteChannel channel;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,271,his.raf = null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,274,this.channel = null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,286,"def = new Deflater(level, true);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,284,andomAccessFile _raf = null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,288,SeekableByteChannel _channel = null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,289,StreamCompressor _streamCompressor = null;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,286,"raf = new RandomAccessFile(file, ""rw"");"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,287,raf.setLength(0);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,291,"_channel = Files.newByteChannel(file.toPath(),"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,292,"EnumSet.of(StandardOpenOption.CREATE, StandardOpenOption.WRITE,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,293,"StandardOpenOption.READ,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,294,StandardOpenOption.TRUNCATE_EXISTING));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,295,"_streamCompressor = StreamCompressor.create(_channel, def);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,289,OUtils.closeQuietly(_raf);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,290,raf = null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,297,IOUtils.closeQuietly(_channel);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,298,_channel = null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,300,"_streamCompressor = StreamCompressor.create(o, def);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,293,"ef = new Deflater(level, true);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,294,"treamCompressor = StreamCompressor.create(_raf, def);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,296,af = _raf;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,303,channel = _channel;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,304,streamCompressor = _streamCompressor;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,308,* Creates a new ZIP OutputStream writing to a SeekableByteChannel.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,309,* @param channel the channel to zip to
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,310,* @throws IOException on error
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,311,* @since 1.13
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,313,public ZipArchiveOutputStream(SeekableByteChannel channel) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,314,this.channel = channel;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,315,"def = new Deflater(level, true);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,316,"streamCompressor = StreamCompressor.create(channel, def);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,317,out = null;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,309,eturn raf != null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,330,return channel != null;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,509,f (!phased && raf != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,530,if (!phased && channel != null) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,588, else if (raf == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,609,} else if (channel == null) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,643,inal long save = raf.getFilePointer();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,664,final long save = channel.position();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,645,af.seek(entry.localDataStart);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,666,channel.position(entry.localDataStart);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,659,af.seek(entry.localDataStart + 3 * WORD + 2 * SHORT
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,660, nameLen + 2 * SHORT);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,680,channel.position(entry.localDataStart + 3 * WORD + 2 * SHORT
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,681,+ nameLen + 2 * SHORT);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,669,af.seek(entry.localDataStart  - 5 * SHORT);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,690,channel.position(entry.localDataStart  - 5 * SHORT);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,685,af.seek(save);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,706,channel.position(save);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,781,f (entry.entry.getMethod() == STORED && raf == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,802,if (entry.entry.getMethod() == STORED && channel == null) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,821,& raf != null && mode != Zip64Mode.Never);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,842,&& channel != null && mode != Zip64Mode.Never);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1039, else if (zipMethod == DEFLATED || raf != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1060,} else if (zipMethod == DEFLATED || channel != null) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1056, else if (zipMethod == DEFLATED || raf != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1077,} else if (zipMethod == DEFLATED || channel != null) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1118,f (ze.getMethod() != DEFLATED || raf != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1139,if (ze.getMethod() != DEFLATED || channel != null) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1439,eturn zipMethod == DEFLATED && raf == null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1460,return zipMethod == DEFLATED && channel == null;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1484," "", raf: "" + (raf != null));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1505,"+ "", channel: "" + (channel != null));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1516,| raf != null
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1537,|| channel != null
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1542,f (raf != null) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1543,af.close();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1563,if (channel != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1564,channel.close();

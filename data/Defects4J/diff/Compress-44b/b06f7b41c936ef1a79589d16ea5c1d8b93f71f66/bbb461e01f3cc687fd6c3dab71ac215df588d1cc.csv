is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,140,rivate static final int SETMASK = (1 << 21);
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,141,rivate static final int CLEARMASK = (~SETMASK);
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,144,rivate static final int SMALL_THRESH = 20;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,145,rivate static final int DEPTH_THRESH = 10;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,146,rivate static final int WORK_FACTOR = 30;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,149, <p> If you are ever unlucky/improbable enough to get a stack
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,150," overflow whilst sorting, increase the following constant and"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,151, try again. In practice I have never seen the stack go above 27
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,152," elems, so the following limit seems very generous.  </p>"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,154,rivate static final int QSORT_STACK_SIZE = 1000;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,157, Knuth's increments seem to work better than Incerpi-Sedgewick here.
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,158," Possibly because the number of elems to sort is usually small, typically"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,159, &lt;= 20.
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,161,"rivate static final int[] INCS = { 1, 4, 13, 40, 121, 364, 1093, 3280,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,162,"841, 29524, 88573, 265720, 797161,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,163,391484 };
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,322, Index in fmap[] of original string after sorting.
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,324,rivate int origPtr;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,332,rivate boolean blockRandomised;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,343," Used when sorting. If too many long comparisons happen, we stop sorting,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,344," randomise the block slightly, and try again."
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,346,rivate int workDone;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,347,rivate int workLimit;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,348,rivate boolean firstAttempt;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,587,lockSort();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,550,final boolean blockRandomised = blockSort();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,611,f (this.blockRandomised) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,574,if (blockRandomised) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1181,"sW(24, this.origPtr);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1144,"bsW(24, this.data.origPtr);"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1187, This is the most hammered method of this class.
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1189, <p>
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1190, This is the version using unrolled loops. Normally I never use such ones
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1191, in Java code. The unrolling has shown a noticable performance improvement
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1192, on JRE 1.4.2 (Linux i586 / HotSpot Client). Of course it depends on the
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1193, JIT compiler of the vm.
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1194, </p>
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1196,"rivate boolean mainSimpleSort(final Data dataShadow, final int lo,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1197,"inal int hi, final int d) {"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1198,inal int bigN = hi - lo + 1;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1199,f (bigN < 2) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1200,eturn this.firstAttempt && (this.workDone > this.workLimit);
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1203,nt hp = 0;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1204,hile (INCS[hp] < bigN) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1205,p++;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1208,inal int[] fmap = dataShadow.fmap;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1209,inal char[] quadrant = dataShadow.quadrant;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1210,inal byte[] block = dataShadow.block;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1211,inal int lastShadow = this.last;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1212,inal int lastPlus1 = lastShadow + 1;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1213,inal boolean firstAttemptShadow = this.firstAttempt;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1214,inal int workLimitShadow = this.workLimit;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1215,nt workDoneShadow = this.workDone;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1217,/ Following block contains unrolled code which could be shortened by
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1218,/ coding it in additional loops.
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1220,P: while (--hp >= 0) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1221,inal int h = INCS[hp];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1222,inal int mj = lo + h - 1;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1224,or (int i = lo + h; i <= hi;) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1225,/ copy
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1226,or (int k = 3; (i <= hi) && (--k >= 0); i++) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1227,inal int v = fmap[i];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1228,inal int vd = v + d;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1229,nt j = i;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1231,/ for (int a;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1232,"/ (j > mj) && mainGtU((a = fmap[j - h]) + d, vd,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1233,"/ block, quadrant, lastShadow);"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1234,/ j -= h) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1235,/ fmap[j] = a;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1238,/ unrolled version:
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1240,/ start inline mainGTU
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1241,oolean onceRunned = false;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1242,nt a = 0;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1244,AMMER: while (true) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1245,f (onceRunned) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1246,map[j] = a;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1247,f ((j -= h) <= mj) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1248,reak HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1250, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1251,nceRunned = true;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1254, = fmap[j - h];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1255,nt i1 = a + d;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1256,nt i2 = vd;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1258,"/ following could be done in a loop, but"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1259,/ unrolled it for performance:
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1260,f (block[i1 + 1] == block[i2 + 1]) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1261,f (block[i1 + 2] == block[i2 + 2]) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1262,f (block[i1 + 3] == block[i2 + 3]) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1263,f (block[i1 + 4] == block[i2 + 4]) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1264,f (block[i1 + 5] == block[i2 + 5]) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1265,f (block[(i1 += 6)] == block[(i2 += 6)]) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1266,nt x = lastShadow;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1267,: while (x > 0) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1268, -= 4;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1270,f (block[i1 + 1] == block[i2 + 1]) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1271,f (quadrant[i1] == quadrant[i2]) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1272,f (block[i1 + 2] == block[i2 + 2]) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1273,f (quadrant[i1 + 1] == quadrant[i2 + 1]) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1274,f (block[i1 + 3] == block[i2 + 3]) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1275,f (quadrant[i1 + 2] == quadrant[i2 + 2]) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1276,f (block[i1 + 4] == block[i2 + 4]) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1277,f (quadrant[i1 + 3] == quadrant[i2 + 3]) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1278,f ((i1 += 4) >= lastPlus1) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1279,1 -= lastPlus1;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1281,f ((i2 += 4) >= lastPlus1) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1282,2 -= lastPlus1;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1284,orkDoneShadow++;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1285,ontinue X;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1286, else if ((quadrant[i1 + 3] > quadrant[i2 + 3])) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1287,ontinue HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1288, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1289,reak HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1291, else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff)) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1292,ontinue HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1293, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1294,reak HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1296, else if ((quadrant[i1 + 2] > quadrant[i2 + 2])) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1297,ontinue HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1298, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1299,reak HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1301, else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff)) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1302,ontinue HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1303, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1304,reak HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1306, else if ((quadrant[i1 + 1] > quadrant[i2 + 1])) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1307,ontinue HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1308, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1309,reak HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1311, else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff)) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1312,ontinue HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1313, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1314,reak HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1316, else if ((quadrant[i1] > quadrant[i2])) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1317,ontinue HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1318, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1319,reak HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1321, else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff)) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1322,ontinue HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1323, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1324,reak HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1328,reak HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1329, // while x > 0
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1330,lse {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1331,f ((block[i1] & 0xff) > (block[i2] & 0xff)) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1332,ontinue HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1333, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1334,reak HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1337, else if ((block[i1 + 5] & 0xff) > (block[i2 + 5] & 0xff)) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1338,ontinue HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1339, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1340,reak HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1342, else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff)) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1343,ontinue HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1344, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1345,reak HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1347, else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff)) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1348,ontinue HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1349, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1350,reak HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1352, else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff)) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1353,ontinue HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1354, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1355,reak HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1357, else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff)) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1358,ontinue HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1359, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1360,reak HAMMER;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1363, // HAMMER
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1364,/ end inline mainGTU
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1366,map[j] = v;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1369,f (firstAttemptShadow && (i <= hi)
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1370,& (workDoneShadow > workLimitShadow)) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1371,reak HP;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1376,his.workDone = workDoneShadow;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1377,eturn firstAttemptShadow && (workDoneShadow > workLimitShadow);
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1380,"rivate static void vswap(int[] fmap, int p1, int p2, int n) {"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1381, += p1;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1382,hile (p1 < n) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1383,nt t = fmap[p1];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1384,map[p1++] = fmap[p2];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1385,map[p2++] = t;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1389,"rivate static byte med3(byte a, byte b, byte c) {"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1390,eturn (a < b) ? (b < c ? b : a < c ? c : a) : (b > c ? b : a > c ? c
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1391, a);
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1394,rivate void blockSort() {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1395,his.workLimit = WORK_FACTOR * this.last;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1396,his.workDone = 0;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1397,his.blockRandomised = false;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1398,his.firstAttempt = true;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1399,ainSort();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1401,f (this.firstAttempt && (this.workDone > this.workLimit)) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1402,andomiseBlock();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1403,his.workLimit = this.workDone = 0;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1404,his.firstAttempt = false;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1405,ainSort();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1408,nt[] fmap = this.data.fmap;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1409,his.origPtr = -1;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1410,"or (int i = 0, lastShadow = this.last; i <= lastShadow; i++) {"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1411,f (fmap[i] == 0) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1412,his.origPtr = i;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1413,reak;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1417,/ assert (this.origPtr != -1) : this.origPtr;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1421," Method ""mainQSort3"", file ""blocksort.c"", BZip2 1.0.2"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1423,"rivate void mainQSort3(final Data dataShadow, final int loSt,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1424,"inal int hiSt, final int dSt) {"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1425,inal int[] stack_ll = dataShadow.stack_ll;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1426,inal int[] stack_hh = dataShadow.stack_hh;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1427,inal int[] stack_dd = dataShadow.stack_dd;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1428,inal int[] fmap = dataShadow.fmap;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1429,inal byte[] block = dataShadow.block;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1431,tack_ll[0] = loSt;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1432,tack_hh[0] = hiSt;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1433,tack_dd[0] = dSt;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1435,or (int sp = 1; --sp >= 0;) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1436,inal int lo = stack_ll[sp];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1437,inal int hi = stack_hh[sp];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1438,inal int d = stack_dd[sp];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1440,f ((hi - lo < SMALL_THRESH) || (d > DEPTH_THRESH)) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1441,"f (mainSimpleSort(dataShadow, lo, hi, d)) {"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1442,eturn;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1444, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1445,inal int d1 = d + 1;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1446,"inal int med = med3(block[fmap[lo] + d1],"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1447,"lock[fmap[hi] + d1], block[fmap[(lo + hi) >>> 1] + d1]) & 0xff;"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1449,nt unLo = lo;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1450,nt unHi = hi;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1451,nt ltLo = lo;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1452,nt gtHi = hi;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1454,hile (true) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1455,hile (unLo <= unHi) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1456,inal int n = (block[fmap[unLo] + d1] & 0xff)
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1457, med;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1458,f (n == 0) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1459,inal int temp = fmap[unLo];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1460,map[unLo++] = fmap[ltLo];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1461,map[ltLo++] = temp;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1462, else if (n < 0) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1463,nLo++;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1464, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1465,reak;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1469,hile (unLo <= unHi) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1470,inal int n = (block[fmap[unHi] + d1] & 0xff)
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1471, med;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1472,f (n == 0) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1473,inal int temp = fmap[unHi];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1474,map[unHi--] = fmap[gtHi];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1475,map[gtHi--] = temp;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1476, else if (n > 0) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1477,nHi--;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1478, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1479,reak;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1483,f (unLo <= unHi) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1484,inal int temp = fmap[unLo];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1485,map[unLo++] = fmap[unHi];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1486,map[unHi--] = temp;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1487, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1488,reak;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1492,f (gtHi < ltLo) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1493,tack_ll[sp] = lo;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1494,tack_hh[sp] = hi;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1495,tack_dd[sp] = d1;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1496,p++;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1497, else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1498,nt n = ((ltLo - lo) < (unLo - ltLo)) ? (ltLo - lo)
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1499, (unLo - ltLo);
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1500,"swap(fmap, lo, unLo - n, n);"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1501,nt m = ((hi - gtHi) < (gtHi - unHi)) ? (hi - gtHi)
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1502, (gtHi - unHi);
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1503,"swap(fmap, unLo, hi - m + 1, m);"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1505, = lo + unLo - ltLo - 1;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1506, = hi - (gtHi - unHi) + 1;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1508,tack_ll[sp] = lo;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1509,tack_hh[sp] = n;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1510,tack_dd[sp] = d;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1511,p++;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1513,tack_ll[sp] = n + 1;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1514,tack_hh[sp] = m - 1;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1515,tack_dd[sp] = d1;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1516,p++;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1518,tack_ll[sp] = m;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1519,tack_hh[sp] = hi;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1520,tack_dd[sp] = d;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1521,p++;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1527,rivate void mainSort() {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1528,inal Data dataShadow = this.data;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1529,inal int[] runningOrder = dataShadow.mainSort_runningOrder;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1530,inal int[] copy = dataShadow.mainSort_copy;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1531,inal boolean[] bigDone = dataShadow.mainSort_bigDone;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1532,inal int[] ftab = dataShadow.ftab;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1533,inal byte[] block = dataShadow.block;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1534,inal int[] fmap = dataShadow.fmap;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1535,inal char[] quadrant = dataShadow.quadrant;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1536,inal int lastShadow = this.last;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1537,inal int workLimitShadow = this.workLimit;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1538,inal boolean firstAttemptShadow = this.firstAttempt;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1540,/ Set up the 2-byte frequency table
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1541,or (int i = 65537; --i >= 0;) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1542,tab[i] = 0;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1546," In the various block-sized structures, live data runs from 0 to"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1547," last+NUM_OVERSHOOT_BYTES inclusive. First, set up the overshoot area"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1548, for block.
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1550,or (int i = 0; i < NUM_OVERSHOOT_BYTES; i++) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1551,lock[lastShadow + i + 2] = block[(i % (lastShadow + 1)) + 1];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1553,or (int i = lastShadow + NUM_OVERSHOOT_BYTES +1; --i >= 0;) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1554,uadrant[i] = 0;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1556,lock[0] = block[lastShadow + 1];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1558,/ Complete the initial radix sort:
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1560,nt c1 = block[0] & 0xff;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1561,or (int i = 0; i <= lastShadow; i++) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1562,inal int c2 = block[i + 1] & 0xff;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1563,tab[(c1 << 8) + c2]++;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1564,1 = c2;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1567,or (int i = 1; i <= 65536; i++) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1568,tab[i] += ftab[i - 1];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1571,1 = block[1] & 0xff;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1572,or (int i = 0; i < lastShadow; i++) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1573,inal int c2 = block[i + 2] & 0xff;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1574,map[--ftab[(c1 << 8) + c2]] = i;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1575,1 = c2;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1578,map[--ftab[((block[lastShadow + 1] & 0xff) << 8) + (block[1] & 0xff)]] = lastShadow;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1581, Now ftab contains the first loc of every small bucket. Calculate the
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1582," running order, from smallest to largest big bucket."
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1584,or (int i = 256; --i >= 0;) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1585,igDone[i] = false;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1586,unningOrder[i] = i;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1589,or (int h = 364; h != 1;) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1590, /= 3;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1591,or (int i = h; i <= 255; i++) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1592,inal int vv = runningOrder[i];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1593,inal int a = ftab[(vv + 1) << 8] - ftab[vv << 8];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1594,inal int b = h - 1;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1595,nt j = i;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1596,or (int ro = runningOrder[j - h]; (ftab[(ro + 1) << 8] - ftab[ro << 8]) > a; ro = runningOrder[j
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1597, h]) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1598,unningOrder[j] = ro;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1599, -= h;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1600,f (j <= b) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1601,reak;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1604,unningOrder[j] = vv;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1609, The main sorting loop.
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1611,or (int i = 0; i <= 255; i++) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1613," Process big buckets, starting with the least full."
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1615,inal int ss = runningOrder[i];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1617,/ Step 1:
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1619, Complete the big bucket [ss] by quicksorting any unsorted small
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1620," buckets [ss, j]. Hopefully previous pointer-scanning phases have"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1621," already completed many of the small buckets [ss, j], so we don't"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1622, have to sort them at all.
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1624,or (int j = 0; j <= 255; j++) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1625,inal int sb = (ss << 8) + j;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1626,inal int ftab_sb = ftab[sb];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1627,f ((ftab_sb & SETMASK) != SETMASK) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1628,inal int lo = ftab_sb & CLEARMASK;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1629,inal int hi = (ftab[sb + 1] & CLEARMASK) - 1;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1630,f (hi > lo) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1631,"ainQSort3(dataShadow, lo, hi, 2);"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1632,f (firstAttemptShadow
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1633,& (this.workDone > workLimitShadow)) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1634,eturn;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1637,tab[sb] = ftab_sb | SETMASK;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1641,/ Step 2:
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1642,/ Now scan this big bucket so as to synthesise the
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1643,"/ sorted order for small buckets [t, ss] for all t != ss."
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1645,or (int j = 0; j <= 255; j++) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1646,opy[j] = ftab[(j << 8) + ss] & CLEARMASK;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1649,"or (int j = ftab[ss << 8] & CLEARMASK, hj = (ftab[(ss + 1) << 8] & CLEARMASK); j < hj; j++) {"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1650,inal int fmap_j = fmap[j];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1651,1 = block[fmap_j] & 0xff;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1652,f (!bigDone[c1]) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1653,map[copy[c1]] = (fmap_j == 0) ? lastShadow : (fmap_j - 1);
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1654,opy[c1]++;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1658,or (int j = 256; --j >= 0;) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1659,tab[(j << 8) + ss] |= SETMASK;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1662,/ Step 3:
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1664," The ss big bucket is now done. Record this fact, and update the"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1665, quadrant descriptors. Remember to update quadrants in the
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1666," overshoot area too, if necessary. The ""if (i < 255)"" test merely"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1667," skips this updating for the last bucket processed, since updating"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1668, for the last bucket is pointless.
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1670,igDone[ss] = true;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1672,f (i < 255) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1673,inal int bbStart = ftab[ss << 8] & CLEARMASK;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1674,inal int bbSize = (ftab[(ss + 1) << 8] & CLEARMASK) - bbStart;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1675,nt shifts = 0;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1677,hile ((bbSize >> shifts) > 65534) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1678,hifts++;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1681,or (int j = 0; j < bbSize; j++) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1682,inal int a2update = fmap[bbStart + j];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1683,inal char qVal = (char) (j >> shifts);
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1684,uadrant[a2update] = qVal;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1685,f (a2update < NUM_OVERSHOOT_BYTES) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1686,uadrant[a2update + lastShadow + 1] = qVal;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1694,rivate void randomiseBlock() {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1695,inal boolean[] inUse = this.data.inUse;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1696,inal byte[] block = this.data.block;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1697,inal int lastShadow = this.last;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1699,or (int i = 256; --i >= 0;) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1700,nUse[i] = false;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1703,nt rNToGo = 0;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1704,nt rTPos = 0;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1705,"or (int i = 0, j = 1; i <= lastShadow; i = j, j++) {"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1706,f (rNToGo == 0) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1707,NToGo = (char) Rand.rNums(rTPos);
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1708,f (++rTPos == 512) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1709,TPos = 0;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1713,NToGo--;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1714,lock[j] ^= ((rNToGo == 1) ? 1 : 0);
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1716,/ handle 16 bit signed numbers
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1717,nUse[block[j] & 0xff] = true;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1720,his.blockRandomised = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1149,private boolean blockSort() {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1150,"return new BlockSort().blockSort(data, last);"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1826,rivate static final class Data extends Object {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1256,static final class Data extends Object {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1847,inal int[] stack_ll = new int[QSORT_STACK_SIZE]; // 4000 byte
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1848,inal int[] stack_hh = new int[QSORT_STACK_SIZE]; // 4000 byte
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1849,inal int[] stack_dd = new int[QSORT_STACK_SIZE]; // 4000 byte
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1277,final int[] stack_ll = new int[BlockSort.QSORT_STACK_SIZE]; // 4000 byte
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1278,final int[] stack_hh = new int[BlockSort.QSORT_STACK_SIZE]; // 4000 byte
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1279,final int[] stack_dd = new int[BlockSort.QSORT_STACK_SIZE]; // 4000 byte
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1308,* Index in fmap[] of original string after sorting.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1310,int origPtr;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,19,package org.apache.commons.compress.compressors.bzip2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,22,* Encapsulates the sorting algorithms needed by {@link BZip2CompressorOutputStream}.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,24,* @NotThreadSafe
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,26,class BlockSort {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,28,private static final int SETMASK = (1 << 21);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,29,private static final int CLEARMASK = (~SETMASK);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,30,private static final int SMALL_THRESH = 20;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,31,private static final int DEPTH_THRESH = 10;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,32,private static final int WORK_FACTOR = 30;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,35,* <p> If you are ever unlucky/improbable enough to get a stack
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,36,"* overflow whilst sorting, increase the following constant and"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,37,* try again. In practice I have never seen the stack go above 27
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,38,"* elems, so the following limit seems very generous.  </p>"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,40,static final int QSORT_STACK_SIZE = 1000;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,43,* Knuth's increments seem to work better than Incerpi-Sedgewick here.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,44,"* Possibly because the number of elems to sort is usually small, typically"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,45,* &lt;= 20.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,47,"private static final int[] INCS = { 1, 4, 13, 40, 121, 364, 1093, 3280,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,48,"9841, 29524, 88573, 265720, 797161,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,49,2391484 };
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,51,private boolean blockRandomised;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,54,"* Used when sorting. If too many long comparisons happen, we stop sorting,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,55,"* randomise the block slightly, and try again."
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,57,private int workDone;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,58,private int workLimit;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,59,private boolean firstAttempt;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,62,* This is the most hammered method of this class.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,64,* <p>
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,65,* This is the version using unrolled loops. Normally I never use such ones
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,66,* in Java code. The unrolling has shown a noticable performance improvement
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,67,* on JRE 1.4.2 (Linux i586 / HotSpot Client). Of course it depends on the
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,68,* JIT compiler of the vm.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,69,* </p>
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,71,"private boolean mainSimpleSort(final BZip2CompressorOutputStream.Data dataShadow,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,72,"final int lo, final int hi, final int d,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,73,final int lastShadow) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,74,final int bigN = hi - lo + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,75,if (bigN < 2) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,76,return this.firstAttempt && (this.workDone > this.workLimit);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,79,int hp = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,80,while (INCS[hp] < bigN) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,81,hp++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,84,final int[] fmap = dataShadow.fmap;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,85,final char[] quadrant = dataShadow.quadrant;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,86,final byte[] block = dataShadow.block;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,87,final int lastPlus1 = lastShadow + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,88,final boolean firstAttemptShadow = this.firstAttempt;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,89,final int workLimitShadow = this.workLimit;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,90,int workDoneShadow = this.workDone;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,92,// Following block contains unrolled code which could be shortened by
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,93,// coding it in additional loops.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,95,HP: while (--hp >= 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,96,final int h = INCS[hp];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,97,final int mj = lo + h - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,99,for (int i = lo + h; i <= hi;) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,100,// copy
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,101,for (int k = 3; (i <= hi) && (--k >= 0); i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,102,final int v = fmap[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,103,final int vd = v + d;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,104,int j = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,106,// for (int a;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,107,"// (j > mj) && mainGtU((a = fmap[j - h]) + d, vd,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,108,"// block, quadrant, lastShadow);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,109,// j -= h) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,110,// fmap[j] = a;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,113,// unrolled version:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,115,// start inline mainGTU
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,116,boolean onceRunned = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,117,int a = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,119,HAMMER: while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,120,if (onceRunned) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,121,fmap[j] = a;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,122,if ((j -= h) <= mj) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,123,break HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,125,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,126,onceRunned = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,129,a = fmap[j - h];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,130,int i1 = a + d;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,131,int i2 = vd;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,133,"// following could be done in a loop, but"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,134,// unrolled it for performance:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,135,if (block[i1 + 1] == block[i2 + 1]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,136,if (block[i1 + 2] == block[i2 + 2]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,137,if (block[i1 + 3] == block[i2 + 3]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,138,if (block[i1 + 4] == block[i2 + 4]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,139,if (block[i1 + 5] == block[i2 + 5]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,140,if (block[(i1 += 6)] == block[(i2 += 6)]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,141,int x = lastShadow;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,142,X: while (x > 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,143,x -= 4;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,145,if (block[i1 + 1] == block[i2 + 1]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,146,if (quadrant[i1] == quadrant[i2]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,147,if (block[i1 + 2] == block[i2 + 2]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,148,if (quadrant[i1 + 1] == quadrant[i2 + 1]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,149,if (block[i1 + 3] == block[i2 + 3]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,150,if (quadrant[i1 + 2] == quadrant[i2 + 2]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,151,if (block[i1 + 4] == block[i2 + 4]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,152,if (quadrant[i1 + 3] == quadrant[i2 + 3]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,153,if ((i1 += 4) >= lastPlus1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,154,i1 -= lastPlus1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,156,if ((i2 += 4) >= lastPlus1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,157,i2 -= lastPlus1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,159,workDoneShadow++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,160,continue X;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,161,} else if ((quadrant[i1 + 3] > quadrant[i2 + 3])) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,162,continue HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,163,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,164,break HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,166,} else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,167,continue HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,168,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,169,break HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,171,} else if ((quadrant[i1 + 2] > quadrant[i2 + 2])) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,172,continue HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,173,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,174,break HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,176,} else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,177,continue HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,178,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,179,break HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,181,} else if ((quadrant[i1 + 1] > quadrant[i2 + 1])) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,182,continue HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,183,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,184,break HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,186,} else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,187,continue HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,188,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,189,break HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,191,} else if ((quadrant[i1] > quadrant[i2])) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,192,continue HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,193,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,194,break HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,196,} else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,197,continue HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,198,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,199,break HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,203,break HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,204,} // while x > 0
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,205,else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,206,if ((block[i1] & 0xff) > (block[i2] & 0xff)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,207,continue HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,208,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,209,break HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,212,} else if ((block[i1 + 5] & 0xff) > (block[i2 + 5] & 0xff)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,213,continue HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,214,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,215,break HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,217,} else if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,218,continue HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,219,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,220,break HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,222,} else if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,223,continue HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,224,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,225,break HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,227,} else if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,228,continue HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,229,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,230,break HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,232,} else if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,233,continue HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,234,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,235,break HAMMER;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,238,} // HAMMER
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,239,// end inline mainGTU
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,241,fmap[j] = v;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,244,if (firstAttemptShadow && (i <= hi)
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,245,&& (workDoneShadow > workLimitShadow)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,246,break HP;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,251,this.workDone = workDoneShadow;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,252,return firstAttemptShadow && (workDoneShadow > workLimitShadow);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,255,"private static void vswap(int[] fmap, int p1, int p2, int n) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,256,n += p1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,257,while (p1 < n) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,258,int t = fmap[p1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,259,fmap[p1++] = fmap[p2];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,260,fmap[p2++] = t;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,264,"private static byte med3(byte a, byte b, byte c) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,265,return (a < b) ? (b < c ? b : a < c ? c : a) : (b > c ? b : a > c ? c
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,266,: a);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,269,"boolean blockSort(final BZip2CompressorOutputStream.Data data, final int last) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,270,this.workLimit = WORK_FACTOR * last;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,271,this.workDone = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,272,this.blockRandomised = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,273,this.firstAttempt = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,274,"mainSort(data, last);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,276,if (this.firstAttempt && (this.workDone > this.workLimit)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,277,"randomiseBlock(data, last);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,278,this.workLimit = this.workDone = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,279,this.firstAttempt = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,280,"mainSort(data, last);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,283,int[] fmap = data.fmap;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,284,data.origPtr = -1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,285,for (int i = 0; i <= last; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,286,if (fmap[i] == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,287,data.origPtr = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,288,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,292,// assert (data.origPtr != -1) : data.origPtr;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,293,return blockRandomised;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,297,"* Method ""mainQSort3"", file ""blocksort.c"", BZip2 1.0.2"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,299,"private void mainQSort3(final BZip2CompressorOutputStream.Data dataShadow,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,300,"final int loSt, final int hiSt, final int dSt,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,301,final int last) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,302,final int[] stack_ll = dataShadow.stack_ll;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,303,final int[] stack_hh = dataShadow.stack_hh;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,304,final int[] stack_dd = dataShadow.stack_dd;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,305,final int[] fmap = dataShadow.fmap;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,306,final byte[] block = dataShadow.block;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,308,stack_ll[0] = loSt;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,309,stack_hh[0] = hiSt;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,310,stack_dd[0] = dSt;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,312,for (int sp = 1; --sp >= 0;) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,313,final int lo = stack_ll[sp];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,314,final int hi = stack_hh[sp];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,315,final int d = stack_dd[sp];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,317,if ((hi - lo < SMALL_THRESH) || (d > DEPTH_THRESH)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,318,"if (mainSimpleSort(dataShadow, lo, hi, d, last)) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,319,return;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,321,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,322,final int d1 = d + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,323,"final int med = med3(block[fmap[lo] + d1],"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,324,"block[fmap[hi] + d1], block[fmap[(lo + hi) >>> 1] + d1]) & 0xff;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,326,int unLo = lo;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,327,int unHi = hi;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,328,int ltLo = lo;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,329,int gtHi = hi;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,331,while (true) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,332,while (unLo <= unHi) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,333,final int n = (block[fmap[unLo] + d1] & 0xff)
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,334,- med;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,335,if (n == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,336,final int temp = fmap[unLo];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,337,fmap[unLo++] = fmap[ltLo];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,338,fmap[ltLo++] = temp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,339,} else if (n < 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,340,unLo++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,341,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,342,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,346,while (unLo <= unHi) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,347,final int n = (block[fmap[unHi] + d1] & 0xff)
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,348,- med;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,349,if (n == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,350,final int temp = fmap[unHi];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,351,fmap[unHi--] = fmap[gtHi];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,352,fmap[gtHi--] = temp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,353,} else if (n > 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,354,unHi--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,355,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,356,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,360,if (unLo <= unHi) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,361,final int temp = fmap[unLo];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,362,fmap[unLo++] = fmap[unHi];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,363,fmap[unHi--] = temp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,364,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,365,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,369,if (gtHi < ltLo) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,370,stack_ll[sp] = lo;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,371,stack_hh[sp] = hi;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,372,stack_dd[sp] = d1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,373,sp++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,374,} else {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,375,int n = ((ltLo - lo) < (unLo - ltLo)) ? (ltLo - lo)
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,376,: (unLo - ltLo);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,377,"vswap(fmap, lo, unLo - n, n);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,378,int m = ((hi - gtHi) < (gtHi - unHi)) ? (hi - gtHi)
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,379,: (gtHi - unHi);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,380,"vswap(fmap, unLo, hi - m + 1, m);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,382,n = lo + unLo - ltLo - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,383,m = hi - (gtHi - unHi) + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,385,stack_ll[sp] = lo;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,386,stack_hh[sp] = n;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,387,stack_dd[sp] = d;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,388,sp++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,390,stack_ll[sp] = n + 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,391,stack_hh[sp] = m - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,392,stack_dd[sp] = d1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,393,sp++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,395,stack_ll[sp] = m;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,396,stack_hh[sp] = hi;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,397,stack_dd[sp] = d;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,398,sp++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,404,"private void mainSort(final BZip2CompressorOutputStream.Data dataShadow,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,405,final int lastShadow) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,406,final int[] runningOrder = dataShadow.mainSort_runningOrder;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,407,final int[] copy = dataShadow.mainSort_copy;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,408,final boolean[] bigDone = dataShadow.mainSort_bigDone;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,409,final int[] ftab = dataShadow.ftab;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,410,final byte[] block = dataShadow.block;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,411,final int[] fmap = dataShadow.fmap;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,412,final char[] quadrant = dataShadow.quadrant;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,413,final int workLimitShadow = this.workLimit;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,414,final boolean firstAttemptShadow = this.firstAttempt;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,416,// Set up the 2-byte frequency table
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,417,for (int i = 65537; --i >= 0;) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,418,ftab[i] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,422,"* In the various block-sized structures, live data runs from 0 to"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,423,"* last+NUM_OVERSHOOT_BYTES inclusive. First, set up the overshoot area"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,424,* for block.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,426,for (int i = 0; i < BZip2Constants.NUM_OVERSHOOT_BYTES; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,427,block[lastShadow + i + 2] = block[(i % (lastShadow + 1)) + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,429,for (int i = lastShadow + BZip2Constants.NUM_OVERSHOOT_BYTES +1; --i >= 0;) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,430,quadrant[i] = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,432,block[0] = block[lastShadow + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,434,// Complete the initial radix sort:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,436,int c1 = block[0] & 0xff;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,437,for (int i = 0; i <= lastShadow; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,438,final int c2 = block[i + 1] & 0xff;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,439,ftab[(c1 << 8) + c2]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,440,c1 = c2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,443,for (int i = 1; i <= 65536; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,444,ftab[i] += ftab[i - 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,447,c1 = block[1] & 0xff;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,448,for (int i = 0; i < lastShadow; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,449,final int c2 = block[i + 2] & 0xff;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,450,fmap[--ftab[(c1 << 8) + c2]] = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,451,c1 = c2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,454,fmap[--ftab[((block[lastShadow + 1] & 0xff) << 8) + (block[1] & 0xff)]] = lastShadow;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,457,* Now ftab contains the first loc of every small bucket. Calculate the
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,458,"* running order, from smallest to largest big bucket."
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,460,for (int i = 256; --i >= 0;) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,461,bigDone[i] = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,462,runningOrder[i] = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,465,for (int h = 364; h != 1;) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,466,h /= 3;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,467,for (int i = h; i <= 255; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,468,final int vv = runningOrder[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,469,final int a = ftab[(vv + 1) << 8] - ftab[vv << 8];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,470,final int b = h - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,471,int j = i;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,472,for (int ro = runningOrder[j - h]; (ftab[(ro + 1) << 8] - ftab[ro << 8]) > a; ro = runningOrder[j
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,473,- h]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,474,runningOrder[j] = ro;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,475,j -= h;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,476,if (j <= b) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,477,break;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,480,runningOrder[j] = vv;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,485,* The main sorting loop.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,487,for (int i = 0; i <= 255; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,489,"* Process big buckets, starting with the least full."
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,491,final int ss = runningOrder[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,493,// Step 1:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,495,* Complete the big bucket [ss] by quicksorting any unsorted small
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,496,"* buckets [ss, j]. Hopefully previous pointer-scanning phases have"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,497,"* already completed many of the small buckets [ss, j], so we don't"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,498,* have to sort them at all.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,500,for (int j = 0; j <= 255; j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,501,final int sb = (ss << 8) + j;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,502,final int ftab_sb = ftab[sb];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,503,if ((ftab_sb & SETMASK) != SETMASK) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,504,final int lo = ftab_sb & CLEARMASK;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,505,final int hi = (ftab[sb + 1] & CLEARMASK) - 1;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,506,if (hi > lo) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,507,"mainQSort3(dataShadow, lo, hi, 2, lastShadow);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,508,if (firstAttemptShadow
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,509,&& (this.workDone > workLimitShadow)) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,510,return;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,513,ftab[sb] = ftab_sb | SETMASK;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,517,// Step 2:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,518,// Now scan this big bucket so as to synthesise the
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,519,"// sorted order for small buckets [t, ss] for all t != ss."
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,521,for (int j = 0; j <= 255; j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,522,copy[j] = ftab[(j << 8) + ss] & CLEARMASK;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,525,"for (int j = ftab[ss << 8] & CLEARMASK, hj = (ftab[(ss + 1) << 8] & CLEARMASK); j < hj; j++) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,526,final int fmap_j = fmap[j];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,527,c1 = block[fmap_j] & 0xff;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,528,if (!bigDone[c1]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,529,fmap[copy[c1]] = (fmap_j == 0) ? lastShadow : (fmap_j - 1);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,530,copy[c1]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,534,for (int j = 256; --j >= 0;) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,535,ftab[(j << 8) + ss] |= SETMASK;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,538,// Step 3:
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,540,"* The ss big bucket is now done. Record this fact, and update the"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,541,* quadrant descriptors. Remember to update quadrants in the
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,542,"* overshoot area too, if necessary. The ""if (i < 255)"" test merely"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,543,"* skips this updating for the last bucket processed, since updating"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,544,* for the last bucket is pointless.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,546,bigDone[ss] = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,548,if (i < 255) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,549,final int bbStart = ftab[ss << 8] & CLEARMASK;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,550,final int bbSize = (ftab[(ss + 1) << 8] & CLEARMASK) - bbStart;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,551,int shifts = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,553,while ((bbSize >> shifts) > 65534) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,554,shifts++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,557,for (int j = 0; j < bbSize; j++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,558,final int a2update = fmap[bbStart + j];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,559,final char qVal = (char) (j >> shifts);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,560,quadrant[a2update] = qVal;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,561,if (a2update < BZip2Constants.NUM_OVERSHOOT_BYTES) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,562,quadrant[a2update + lastShadow + 1] = qVal;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,570,"private void randomiseBlock(final BZip2CompressorOutputStream.Data data,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,571,final int lastShadow) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,572,final boolean[] inUse = data.inUse;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,573,final byte[] block = data.block;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,575,for (int i = 256; --i >= 0;) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,576,inUse[i] = false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,579,int rNToGo = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,580,int rTPos = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,581,"for (int i = 0, j = 1; i <= lastShadow; i = j, j++) {"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,582,if (rNToGo == 0) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,583,rNToGo = (char) Rand.rNums(rTPos);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,584,if (++rTPos == 512) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,585,rTPos = 0;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,589,rNToGo--;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,590,block[j] ^= ((rNToGo == 1) ? 1 : 0);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,592,// handle 16 bit signed numbers
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,593,inUse[block[j] & 0xff] = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,596,this.blockRandomised = true;

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,62, final OutputStream out = new FileOutputStream(output);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,62,* final OutputStream out = Files.newOutputStream(output.toPath());
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,66," IOUtils.copy(new FileInputStream(file1), os);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,66,"* IOUtils.copy(Files.newInputStream(file1.toPath()), os);"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,70," IOUtils.copy(new FileInputStream(file2), os);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,70,"* IOUtils.copy(Files.newInputStream(file2.toPath()), os);"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,78, final InputStream is = new FileInputStream(input);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,78,* final InputStream is = Files.newInputStream(input.toPath());
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,81," OutputStream out = new FileOutputStream(new File(dir, entry.getName()));"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,81,* OutputStream out = Files.newOutputStream(dir.toPath().resolve(entry.getName()));
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,302, @throws IllegalStateException if the constructor {@link #ArchiveStreamFactory(String)}
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,302,* @throws IllegalStateException if the constructor {@link #ArchiveStreamFactory(String)}
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,398," i.e. {@value #AR}, {@value #ZIP}, {@value #TAR}, {@value #JAR} or {@value #CPIO}"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,398,"* i.e. {@value #AR}, {@value #ZIP}, {@value #TAR}, {@value #JAR} or {@value #CPIO}"
False,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,23,mport java.io.FileInputStream;
True,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,24,import java.nio.file.Files;
False,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,47,ry (final InputStream fis = new BufferedInputStream(new FileInputStream(f));
True,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,47,try (final InputStream fis = new BufferedInputStream(Files.newInputStream(f.toPath()));
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,45,         new FileInputStream(new File(&quot;test.cpio&quot;)));
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,45,*         Files.newInputStream(Paths.get(&quot;test.cpio&quot;)));
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,71, final OutputStream out = new FileOutputStream(output);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,71,* final OutputStream out = Files.newOutputStream(output.toPath());
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,74," IOUtils.copy(new FileInputStream(input), cos);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,74,"* IOUtils.copy(Files.newInputStream(input.toPath()), cos);"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,81, final InputStream is = new FileInputStream(input);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,81,* final InputStream is = Files.newInputStream(input.toPath());
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,84," IOUtils.copy(in, new FileOutputStream(output));"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,84,"* IOUtils.copy(in, Files.newOutputStream(output.toPath()));"
False,src/main/java/org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge.java,src/main/java/org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge.java,23,mport java.io.FileInputStream;
False,src/main/java/org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge.java,src/main/java/org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge.java,24,mport java.io.FileOutputStream;
True,src/main/java/org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge.java,src/main/java/org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge.java,23,import java.io.FilterInputStream;
True,src/main/java/org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge.java,src/main/java/org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge.java,26,import java.nio.file.Files;
False,src/main/java/org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge.java,src/main/java/org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge.java,39,ut = new FileOutputStream(f);
True,src/main/java/org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge.java,src/main/java/org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge.java,39,out = Files.newOutputStream(f.toPath());
False,src/main/java/org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge.java,src/main/java/org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge.java,45,eturn new FileInputStream(f) {
True,src/main/java/org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge.java,src/main/java/org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge.java,45,return new FilterInputStream(Files.newInputStream(f.toPath())) {
False,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,22,mport java.io.FileInputStream;
False,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,23,mport java.io.FileOutputStream;
True,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,24,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,25,import java.nio.file.Files;
False,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,34,rivate final FileOutputStream os;
True,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,34,private final OutputStream os;
False,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,39,s = new FileOutputStream(target);
True,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,39,try {
True,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,40,os = Files.newOutputStream(target.toPath());
True,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,41,} catch (FileNotFoundException ex) {
True,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,42,throw ex;
True,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,43,} catch (IOException ex) {
True,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,44,// must convert exception to stay backwards compatible with Compress 1.10 to 1.13
True,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,45,throw new RuntimeException(ex);
False,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,44,eturn new FileInputStream(target);
True,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java,51,return Files.newInputStream(target.toPath());

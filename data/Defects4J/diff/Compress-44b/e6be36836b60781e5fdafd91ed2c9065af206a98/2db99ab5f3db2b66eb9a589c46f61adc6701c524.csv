is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,20,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,24,public interface InputStreamSupplier {
True,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,27,* Supply an input stream for a resource.
True,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,28,"* @return the input stream, may be null if there is no content for the resource."
True,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java,30,InputStream get();
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,18,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,20,import java.io.File;
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,22,import java.util.ArrayList;
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,23,import java.util.Collections;
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,24,import java.util.List;
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,25,import java.util.concurrent.Callable;
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,26,import java.util.concurrent.ExecutorService;
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,27,import java.util.concurrent.Executors;
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,28,import java.util.concurrent.TimeUnit;
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,29,import java.util.concurrent.atomic.AtomicInteger;
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,30,import java.util.zip.Deflater;
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,33,* Creates a zip in parallel by using multiple threadlocal #ScatterZipOutputStream instances.
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,34,* <p/>
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,35,* Note that this class generally makes no guarantees about the order of things written to
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,36,"* the output file. Things that need to come in a specific order (manifests, directories)"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,37,"* must be handled by the client of this class, usually by writing these things to the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,38,* #ZipArchiveOutputStream *before* calling #writeTo on this class.
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,40,public class ParallelScatterZipCreator {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,41,private List<ScatterZipOutputStream> streams = Collections.synchronizedList(new ArrayList<ScatterZipOutputStream>());
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,42,private final ExecutorService es;
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,44,private final long startedAt = System.currentTimeMillis();
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,45,private long compressionDoneAt = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,46,private long scatterDoneAt;
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,48,static ScatterGatherBackingStoreSupplier defaultSupplier = new DefaultSupplier();
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,50,static class DefaultSupplier implements ScatterGatherBackingStoreSupplier {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,51,AtomicInteger storeNum = new AtomicInteger(0);
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,53,public ScatterGatherBackingStore get() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,54,"File tempFile = File.createTempFile(""parallelscatter"", ""n"" + storeNum.incrementAndGet());"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,55,return new FileBasedScatterGatherBackingStore(tempFile);
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,59,static ScatterZipOutputStream createDeferred(ScatterGatherBackingStoreSupplier scatterGatherBackingStoreSupplier)
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,60,throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,61,ScatterGatherBackingStore bs = scatterGatherBackingStoreSupplier.get();
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,62,"StreamCompressor sc = StreamCompressor.create(Deflater.DEFAULT_COMPRESSION, bs);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,63,"return new ScatterZipOutputStream(bs, sc);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,67,ThreadLocal<ScatterZipOutputStream> tlScatterStreams = new ThreadLocal<ScatterZipOutputStream>() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,68,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,69,protected ScatterZipOutputStream initialValue() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,70,try {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,71,ScatterZipOutputStream scatterStream = createDeferred(defaultSupplier);
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,72,streams.add(scatterStream);
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,73,return scatterStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,74,} catch (IOException e) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,75,throw new RuntimeException(e);
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,81,* Create a ParallelScatterZipCreator with default threads
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,83,public ParallelScatterZipCreator() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,84,this(Runtime.getRuntime().availableProcessors());
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,88,* Create a ParallelScatterZipCreator
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,90,* @param nThreads the number of threads to use in parallel.
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,92,public ParallelScatterZipCreator(int nThreads) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,93,es = Executors.newFixedThreadPool(nThreads);
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,97,* Adds an archive entry to this archive.
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,98,* <p/>
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,99,* This method is expected to be called from a single client thread
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,101,* @param zipArchiveEntry The entry to add. Compression method
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,102,* @param source          The source input stream supplier
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,105,"public void addArchiveEntry(final ZipArchiveEntry zipArchiveEntry, final InputStreamSupplier source) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,106,final int method = zipArchiveEntry.getMethod();
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,107,"if (method == -1) throw new IllegalArgumentException(""Method must be set on the supplied zipArchiveEntry"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,108,// Consider if we want to constrain the number of items that can enqueue here.
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,109,es.submit(new Callable<ScatterZipOutputStream>() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,110,public ScatterZipOutputStream call() throws Exception {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,111,ScatterZipOutputStream streamToUse = tlScatterStreams.get();
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,112,"streamToUse.addArchiveEntry(zipArchiveEntry, source.get(), method);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,113,return streamToUse;
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,121,* Write the contents this to the target #ZipArchiveOutputStream.
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,122,* <p/>
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,123,* It may be beneficial to write things like directories and manifest files to the targetStream
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,124,* before calling this method.
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,126,* @param targetStream The ZipArchiveOutputStream to receive the contents of the scatter streams
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,127,* @throws IOException          If writing fails
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,128,* @throws InterruptedException If we get interrupted
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,130,"public void writeTo(ZipArchiveOutputStream targetStream) throws IOException, InterruptedException {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,131,es.shutdown();
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,132,"es.awaitTermination(1000 * 60, TimeUnit.SECONDS);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,134,"// It is important that all threads terminate before we go on, ensure happens-before relationship"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,135,compressionDoneAt = System.currentTimeMillis();
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,137,for (ScatterZipOutputStream scatterStream : streams) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,138,scatterStream.writeTo(targetStream);
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,141,scatterDoneAt = System.currentTimeMillis();
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,142,// Maybe close ScatterZipOS. We should do something to get rid of tempfiles.
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,146,* Returns a message describing the overall statistics of the compression run
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,148,* @return A string
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,150,public String getStatisticsMessage() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,151,"return ""Compression: "" + (compressionDoneAt - startedAt) + ""ms,"" +"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,152,"""Merging files: "" + (scatterDoneAt - compressionDoneAt) + ""ms"";"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,23,public interface ScatterGatherBackingStoreSupplier {
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,25,* Get a ScatterGatherBackingStore.
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,27,"* @return a ScatterGatherBackingStore, not null"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStoreSupplier.java,29,ScatterGatherBackingStore get() throws IOException;
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,4,*  this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,7,*  the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,14,*  See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,15,*  limitations under the License.
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,18,package org.apache.commons.compress.archivers.zip;
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,20,import org.apache.commons.compress.utils.IOUtils;
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,21,import org.junit.Test;
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,23,import java.io.ByteArrayInputStream;
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,24,import java.io.File;
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,25,import java.io.IOException;
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,26,import java.io.InputStream;
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,27,import java.util.Enumeration;
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,28,import java.util.HashMap;
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,29,import java.util.Map;
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,31,import static org.junit.Assert.*;
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,33,"@SuppressWarnings(""OctalInteger"")"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,34,public class ParallelScatterZipCreatorTest {
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,36,@Test
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,37,public void concurrent()
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,38,throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,39,"File result = File.createTempFile(""parallelScatterGather1"", """");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,40,ZipArchiveOutputStream zos = new ZipArchiveOutputStream(result);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,41,"zos.setEncoding(""UTF-8"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,42,ParallelScatterZipCreator zipCreator = new ParallelScatterZipCreator();
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,44,"Map<String, byte[]> entries = writeEntries(zipCreator);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,45,zipCreator.writeTo(zos);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,46,zos.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,48,"removeEntriesFoundInZipFile(result, entries);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,49,assertTrue(entries.size() == 0);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,50,assertNotNull( zipCreator.getStatisticsMessage());
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,53,"private void removeEntriesFoundInZipFile(File result, Map<String, byte[]> entries) throws IOException {"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,54,ZipFile zf = new ZipFile(result);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,55,Enumeration<ZipArchiveEntry> entriesInPhysicalOrder = zf.getEntriesInPhysicalOrder();
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,56,while (entriesInPhysicalOrder.hasMoreElements()){
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,57,ZipArchiveEntry zipArchiveEntry = entriesInPhysicalOrder.nextElement();
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,58,InputStream inputStream = zf.getInputStream(zipArchiveEntry);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,59,byte[] actual = IOUtils.toByteArray(inputStream);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,60,byte[] expected = entries.remove(zipArchiveEntry.getName());
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,61,"assertArrayEquals( expected, actual);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,63,zf.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,66,"private Map<String, byte[]> writeEntries(ParallelScatterZipCreator zipCreator) {"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,67,"Map<String, byte[]> entries = new HashMap<String, byte[]>();"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,68,for (int i = 0; i < 10000; i++){
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,69,"ZipArchiveEntry za = new ZipArchiveEntry( ""file"" + i);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,70,"final String payload = ""content"" + i;"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,71,final byte[] payloadBytes = payload.getBytes();
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,72,"entries.put( za.getName(), payloadBytes);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,73,za.setMethod(ZipArchiveEntry.DEFLATED);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,74,za.setSize(payload.length());
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,75,za.setUnixMode(UnixStat.FILE_FLAG | 0664);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,76,"zipCreator.addArchiveEntry(za, new InputStreamSupplier() {"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,77,public InputStream get() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,78,return new ByteArrayInputStream(payloadBytes);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,82,return entries;

is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,21,import org.junit.After;
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,35,import static org.apache.commons.compress.AbstractTestCase.tryHardToDelete;
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,43,private File result;
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,44,private File tmp;
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,46,@After
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,47,public void cleanup() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,48,tryHardToDelete(result);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,49,tryHardToDelete(tmp);
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,44,"ile result = File.createTempFile(""parallelScatterGather1"", """");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,55,"result = File.createTempFile(""parallelScatterGather1"", """");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,60,"ile result = File.createTempFile(""parallelScatterGather2"", """");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,71,"result = File.createTempFile(""parallelScatterGather2"", """");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,67,"eturn new FileBasedScatterGatherBackingStore(File.createTempFile(""parallelscatter"", ""n1""));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,78,"return new FileBasedScatterGatherBackingStore(tmp = File.createTempFile(""parallelscatter"", ""n1""));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,21,import org.junit.After;
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,28,import static org.apache.commons.compress.AbstractTestCase.tryHardToDelete;
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,35,private File scatterFile = null;
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,36,private File target = null;
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,38,@After
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,39,public void cleanup() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,40,tryHardToDelete(scatterFile);
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,41,tryHardToDelete(target);
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,35,"ile scatteFile = File.createTempFile(""scattertest"", "".notzip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,36,catterZipOutputStream scatterZipOutputStream = ScatterZipOutputStream.fileBased(scatteFile);
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,46,"scatterFile = File.createTempFile(""scattertest"", "".notzip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,47,ScatterZipOutputStream scatterZipOutputStream = ScatterZipOutputStream.fileBased(scatterFile);
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,50,"ile target = File.createTempFile(""scattertest"", "".zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,61,"target = File.createTempFile(""scattertest"", "".zip"");"

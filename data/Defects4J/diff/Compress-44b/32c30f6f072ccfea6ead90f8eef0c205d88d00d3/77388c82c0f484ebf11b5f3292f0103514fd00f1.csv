is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,249,f (magicString.equals(MAGIC_NEW)) {
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,250,his.entry = readNewEntry(false);
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,251, else if (magicString.equals(MAGIC_NEW_CRC)) {
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,252,his.entry = readNewEntry(true);
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,253, else if (magicString.equals(MAGIC_OLD_ASCII)) {
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,254,his.entry = readOldAsciiEntry();
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,255, else {
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,256,"hrow new IOException(""Unknown magic ["" + magicString + ""]. Occured at byte: "" + getBytesRead());"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,249,switch (magicString) {
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,250,case MAGIC_NEW:
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,251,this.entry = readNewEntry(false);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,252,break;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,253,case MAGIC_NEW_CRC:
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,254,this.entry = readNewEntry(true);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,255,break;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,256,case MAGIC_OLD_ASCII:
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,257,this.entry = readOldAsciiEntry();
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,258,break;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,259,default:
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,260,"throw new IOException(""Unknown magic ["" + magicString + ""]. Occured at byte: "" + getBytesRead());"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,304,inal DataInputStream nextHeaderInputStream = new DataInputStream(inputStreamStack);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,305,ry {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,304,try (DataInputStream nextHeaderInputStream = new DataInputStream(inputStreamStack)) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,307, finally {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,308,extHeaderInputStream.close();
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,184, catch (final InstantiationException ie) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,184,} catch (final InstantiationException | IllegalAccessException ie) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,186, catch (final IllegalAccessException iae) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,187,hrow (ZipException) new ZipException(iae.getMessage()).initCause(iae);
False,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,281,inal int len = chars.length;
False,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,283,or (int i = 0; i < len; i++) {
False,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,284,inal char c = chars[i];
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,282,for (final char c : chars) {
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,287,inal InputStream is = new FileInputStream(archive);
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,288,ry {
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,287,try (InputStream is = new FileInputStream(archive)) {
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,292, finally {
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,293,s.close();
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,333,inal OutputStream out = new FileOutputStream(outfile);
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,334,ry {
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,335,"opied=IOUtils.copy(in, out);"
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,336, finally {
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,337,ut.close();
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,330,try (OutputStream out = new FileOutputStream(outfile)) {
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,331,"copied = IOUtils.copy(in, out);"
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,387,inal FileOutputStream fos = new FileOutputStream(tmpFile);
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,388,ry {
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,389,"os.write(new byte[] {'f', 'o', 'o'});"
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,390,"eturn new File[] {tmpDir, tmpFile};"
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,391, finally {
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,392,os.close();
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,381,try (FileOutputStream fos = new FileOutputStream(tmpFile)) {
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,382,"fos.write(new byte[] { 'f', 'o', 'o' });"
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,383,"return new File[] { tmpDir, tmpFile };"
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,66,"inal FileInputStream fis = new FileInputStream(""src/test/resources/testAIFF.aif"");"
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,67,ry {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,68,inal InputStream is = new BufferedInputStream(fis);
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,69,ry {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,66,"try (FileInputStream fis = new FileInputStream(""src/test/resources/testAIFF.aif"")) {"
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,67,try (InputStream is = new BufferedInputStream(fis)) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,74, finally {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,75,s.close();
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,77, finally {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,78,is.close();
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,84,"inal FileInputStream fis = new FileInputStream(""src/test/resources/testCompress209.doc"");"
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,85,ry {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,86,inal InputStream bis = new BufferedInputStream(fis);
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,87,ry {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,78,"try (FileInputStream fis = new FileInputStream(""src/test/resources/testCompress209.doc"")) {"
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,79,try (InputStream bis = new BufferedInputStream(fis)) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,92, finally {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,93,is.close();
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,95, finally {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,96,is.close();
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,121,"inal FileInputStream fis = new FileInputStream(""src/test/resources/bla.7z"");"
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,122,ry {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,123,inal InputStream bis = new BufferedInputStream(fis);
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,124,ry {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,109,"try (FileInputStream fis = new FileInputStream(""src/test/resources/bla.7z"")) {"
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,110,try (InputStream bis = new BufferedInputStream(fis)) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,129, finally {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,130,is.close();
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,132, finally {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,133,is.close();
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,144,"inal FileInputStream fis = new FileInputStream(""src/test/resources/COMPRESS-208.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,145,ry {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,146,inal InputStream bis = new BufferedInputStream(fis);
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,147,ry {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,148,inal ArchiveInputStream ais = new ArchiveStreamFactory().createArchiveInputStream(bis);
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,149,ry {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,126,"try (FileInputStream fis = new FileInputStream(""src/test/resources/COMPRESS-208.zip"")) {"
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,127,try (InputStream bis = new BufferedInputStream(fis)) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,128,try (ArchiveInputStream ais = new ArchiveStreamFactory().createArchiveInputStream(bis)) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,151, finally {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,152,is.close();
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,154, finally {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,155,is.close();
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,157, finally {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,158,is.close();
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,236, catch (final ArchiveException e) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,237,.printStackTrace();
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,245, catch (final ArchiveException e) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,246,.printStackTrace();
False,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,93,inal InputStream is = new FileInputStream(f);
False,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,94,ry {
True,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,93,try (InputStream is = new FileInputStream(f)) {
False,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,96,ew ArchiveStreamFactory()
False,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,97,createArchiveInputStream(new BufferedInputStream(is))
False,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,98,getClass());
False,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,99, finally {
False,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,100,s.close();
True,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,95,new ArchiveStreamFactory()
True,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,96,.createArchiveInputStream(new BufferedInputStream(is))
True,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,97,.getClass());
False,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,120,inal InputStream is = new FileInputStream(f);
False,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,121,ry {
True,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,117,try (InputStream is = new FileInputStream(f)) {
False,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,123,xpected);
False,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,124, finally {
False,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,125,s.close();
True,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,119,expected);
False,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,78,inal SevenZFile archive = new SevenZFile(output);
False,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,79,ry {
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,78,try (SevenZFile archive = new SevenZFile(output)) {
False,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,83,ssert(entry != null);
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,82,assert (entry != null);
False,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,87,ssert(entry != null);
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,86,assert (entry != null);
False,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,90,ssert(archive.getNextEntry() == null);
False,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,91, finally {
False,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,92,rchive.close();
True,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java,89,assert (archive.getNextEntry() == null);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,92,inal OutputStream o = new FileOutputStream(outfile);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,93,ry {
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,92,try (OutputStream o = new FileOutputStream(outfile)) {
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,95, finally {
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,96,.close();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,138,inal InputStream is = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,142,ry {
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,138,try (InputStream is = new FileInputStream(input)) {
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,144, finally {
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,145,s.close();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,180,inal ZipArchiveInputStream zip =
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,181,"ew ZipArchiveInputStream(new FileInputStream(getFile(""moby.zip"")));"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,182,ry {
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,174,"try (ZipArchiveInputStream zip = new ZipArchiveInputStream(new FileInputStream(getFile(""moby.zip"")))) {"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,193, finally {
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,194,ip.close();
False,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,34,"inal FileInputStream is = new FileInputStream(getFile(""bla.zip""));"
False,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,35,ry {
True,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,34,"try (FileInputStream is = new FileInputStream(getFile(""bla.zip""))) {"
False,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,41, finally {
False,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,42,s.close();
False,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,48,"inal FileInputStream is = new FileInputStream(getFile(""zip64support.tar.bz2""));"
False,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,49,ry {
True,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,45,"try (FileInputStream is = new FileInputStream(getFile(""zip64support.tar.bz2""))) {"
False,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,55, finally {
False,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,56,s.close();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,106,"inal SevenZFile archive = new SevenZFile(getFile(""7z-empty-mhc-off.7z""));"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,107,ry {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,106,"try (SevenZFile archive = new SevenZFile(getFile(""7z-empty-mhc-off.7z""))) {"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,109, finally {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,110,rchive.close();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,167,"inal SevenZFile sevenZFile = new SevenZFile(getFile(""COMPRESS-256.7z""));"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,168,ry {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,164,"try (SevenZFile sevenZFile = new SevenZFile(getFile(""COMPRESS-256.7z""))) {"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,174, finally {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,175,evenZFile.close();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,197,inal SevenZOutputFile outArchive = new SevenZOutputFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,198,ry {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,191,try (SevenZOutputFile outArchive = new SevenZOutputFile(output)) {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,205, finally {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,206,utArchive.close();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,209,inal SevenZFile archive = new SevenZFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,210,ry {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,200,try (SevenZFile archive = new SevenZFile(output)) {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,215, finally {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,216,rchive.close();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,223,inal SevenZOutputFile outArchive = new SevenZOutputFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,224,ry {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,211,try (SevenZOutputFile outArchive = new SevenZOutputFile(output)) {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,226,ew SevenZMethodConfiguration(SevenZMethod.LZMA2)));
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,213,new SevenZMethodConfiguration(SevenZMethod.LZMA2)));
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,232, finally {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,233,utArchive.close();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,236,inal SevenZFile archive = new SevenZFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,237,ry {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,221,try (SevenZFile archive = new SevenZFile(output)) {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,242, finally {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,243,rchive.close();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,249,"inal SevenZFile sevenZFile = new SevenZFile(getFile(""bla.7z""));"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,250,ry {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,231,"try (SevenZFile sevenZFile = new SevenZFile(getFile(""bla.7z""))) {"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,258, finally {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,259,evenZFile.close();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,268,"inal SevenZFile sevenZFile = new SevenZFile(getFile(""COMPRESS-348.7z""));"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,269,ry {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,247,"try (SevenZFile sevenZFile = new SevenZFile(getFile(""COMPRESS-348.7z""))) {"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,283, finally {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,284,evenZFile.close();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,289,"inal SevenZFile sevenZFile = new SevenZFile(f, password);"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,290,ry {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,265,"try (SevenZFile sevenZFile = new SevenZFile(f, password)) {"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,297,inal byte[] contents = new byte[(int)entry.getSize()];
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,272,final byte[] contents = new byte[(int) entry.getSize()];
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,301,ssert(bytesRead >= 0);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,276,assert (bytesRead >= 0);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,306, finally {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,307,evenZFile.close();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,312,inal SevenZFile sevenZFile = new SevenZFile(getFile(filename));
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,313,ry {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,285,try (SevenZFile sevenZFile = new SevenZFile(getFile(filename))) {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,316,inal byte[] contents = new byte[(int)entry.getSize()];
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,288,final byte[] contents = new byte[(int) entry.getSize()];
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,320,ssert(bytesRead >= 0);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,292,assert (bytesRead >= 0);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,325, finally {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,326,evenZFile.close();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,64,inal SevenZOutputFile outArchive = new SevenZOutputFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,65,ry {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,64,try (SevenZOutputFile outArchive = new SevenZOutputFile(output)) {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,99, finally {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,100,utArchive.close();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,103,inal SevenZFile archive = new SevenZFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,104,ry {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,100,try (SevenZFile archive = new SevenZFile(output)) {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,106,ssert(entry != null);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,102,assert (entry != null);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,112,ssert(entry != null);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,108,assert (entry != null);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,122,ssert(entry != null);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,118,assert (entry != null);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,130,ssert(entry != null);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,126,assert (entry != null);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,136,ssert(entry != null);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,132,assert (entry != null);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,145,ssert(archive.getNextEntry() == null);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,146, finally {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,147,rchive.close();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,141,assert (archive.getNextEntry() == null);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,155,inal SevenZOutputFile outArchive = new SevenZOutputFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,156,ry {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,149,try (SevenZOutputFile outArchive = new SevenZOutputFile(output)) {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,162, finally {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,163,utArchive.close();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,166,inal SevenZFile archive = new SevenZFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,167,ry {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,157,try (SevenZFile archive = new SevenZFile(output)) {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,169,ssert(entry != null);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,159,assert (entry != null);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,174,ssert(archive.getNextEntry() == null);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,175, finally {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,176,rchive.close();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,164,assert (archive.getNextEntry() == null);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,184,inal SevenZOutputFile outArchive = new SevenZOutputFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,185,ry {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,172,try (SevenZOutputFile outArchive = new SevenZOutputFile(output)) {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,191, finally {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,192,utArchive.close();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,353,inal SevenZOutputFile outArchive = new SevenZOutputFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,354,ry {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,338,try (SevenZOutputFile outArchive = new SevenZOutputFile(output)) {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,357, finally {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,358,utArchive.close();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,361,inal SevenZFile archive = new SevenZFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,362,ry {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,343,try (SevenZFile archive = new SevenZFile(output)) {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,364,"erifyFile(archive, 0, Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.LZMA2))));"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,345,"verifyFile(archive, 0, Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.LZMA2))));"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,366,"erifyFile(archive, 1, Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.BZIP2))));"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,367, finally {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,368,rchive.close();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,347,"verifyFile(archive, 1, Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.BZIP2))));"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,379,inal SevenZOutputFile archive = new SevenZOutputFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,380,ry {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,358,try (SevenZOutputFile archive = new SevenZOutputFile(output)) {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,386, finally {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,387,rchive.close();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,394,inal SevenZFile archive = new SevenZFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,397,ry {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,372,try (SevenZFile archive = new SevenZFile(output)) {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,406, finally {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,407,rchive.close();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,489,inal SevenZFile archive = new SevenZFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,490,ry {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,462,try (SevenZFile archive = new SevenZFile(output)) {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,492, finally {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,493,rchive.close();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,159,"inal TarArchiveInputStream tar = getTestStream(""/COMPRESS-197.tar"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,160,ry {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,159,"try (TarArchiveInputStream tar = getTestStream(""/COMPRESS-197.tar"")) {"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,167, finally {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,168,ar.close();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,217,inal InputStream is = TarArchiveInputStreamTest.class
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,218,"getResourceAsStream(""/COMPRESS-245.tar.gz"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,219,ry {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,214,try (InputStream is = TarArchiveInputStreamTest.class
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,215,".getResourceAsStream(""/COMPRESS-245.tar.gz"")) {"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,232, finally {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,233,s.close();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,288,"inal TarArchiveInputStream is = getTestStream(""/COMPRESS-324.tar"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,289,ry {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,282,"try (TarArchiveInputStream is = getTestStream(""/COMPRESS-324.tar"")) {"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,292," ""1234567890123456789012345678901234567890123456789012345678901234567890"""
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,293," ""1234567890123456789012345678901234567890123456789012345678901234567890"""
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,294," ""1234567890123456789012345678901234567890.txt"","
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,295,ntry.getName());
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,296, finally {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,297,s.close();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,285,"+ ""1234567890123456789012345678901234567890123456789012345678901234567890"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,286,"+ ""1234567890123456789012345678901234567890123456789012345678901234567890"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,287,"+ ""1234567890123456789012345678901234567890.txt"","
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,288,entry.getName());
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,306,"inal TarArchiveInputStream is = getTestStream(""/COMPRESS-355.tar"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,307,ry {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,297,"try (TarArchiveInputStream is = getTestStream(""/COMPRESS-355.tar"")) {"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,311, finally {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,312,s.close();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,321,"inal TarArchiveInputStream is = getTestStream(""/COMPRESS-356.tar"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,322,ry {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,309,"try (TarArchiveInputStream is = getTestStream(""/COMPRESS-356.tar"")) {"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,326, finally {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,327,s.close();
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,57,inal BufferedInputStream fs =
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,58,ew BufferedInputStream(new FileInputStream(f));
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,59,ry {
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,57,try (BufferedInputStream fs = new BufferedInputStream(new FileInputStream(f))) {
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,61,"ew ZipArchiveInputStream(fs, cl.encoding, true,"
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,62,l.allowStoredEntriesWithDataDescriptor);
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,59,"new ZipArchiveInputStream(fs, cl.encoding, true,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,60,cl.allowStoredEntriesWithDataDescriptor);
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,72, finally {
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,73,s.close();
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,76,"inal ZipFile zf = new ZipFile(f, cl.encoding);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,77,ry {
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,72,"try (ZipFile zf = new ZipFile(f, cl.encoding)) {"
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,83,inal InputStream is = zf.getInputStream(ze);
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,84,ry {
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,78,try (InputStream is = zf.getInputStream(ze)) {
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,86, finally {
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,87,s.close();
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,91, finally {
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,92,f.close();
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,214,"inal RandomAccessFile a = new RandomAccessFile(f, ""r"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,215,ry {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,214,"try (RandomAccessFile a = new RandomAccessFile(f, ""r"")) {"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,222, 22 /* length of EOCD without file comment */);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,221,- 22 /* length of EOCD without file comment */);
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,233,", eocd);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,232,"}, eocd);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,240, 20 /* z64 eocd locator.length */
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,241, 56 /* z64 eocd without extensible data sector */;
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,239,- 20 /* z64 eocd locator.length */
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,240,- 56 /* z64 eocd without extensible data sector */;
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,243,ipEightByteInteger.getBytes(expectedZ64EocdOffset);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,242,ZipEightByteInteger.getBytes(expectedZ64EocdOffset);
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,257,", z64EocdLoc);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,256,"}, z64EocdLoc);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,284,", z64EocdStart);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,283,"}, z64EocdStart);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,297,", sig);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,298, finally {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,299,.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,296,"}, sig);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,386,"inal RandomAccessFile a = new RandomAccessFile(f, ""r"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,387,ry {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,383,"try (RandomAccessFile a = new RandomAccessFile(f, ""r"")) {"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,393, 2 * (mode == Zip64Mode.Always ? 4 : 0)
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,389,+ 2 * (mode == Zip64Mode.Always ? 4 : 0)
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,413,", header);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,409,"}, header);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,437,", rest);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,433,"}, rest);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,445,", extra);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,441,"}, extra);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,456,", sig);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,457, finally {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,458,.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,452,"}, sig);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,545,inal InputStream i =
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,546,f.getInputStream(zae);
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,547,ry {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,539,try (InputStream i = zf.getInputStream(zae)) {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,550, finally {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,551,.close();
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,599,"inal RandomAccessFile a = new RandomAccessFile(f, ""r"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,600,ry {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,589,"try (RandomAccessFile a = new RandomAccessFile(f, ""r"")) {"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,619,", header);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,608,"}, header);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,646,", rest);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,635,"}, rest);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,661,", extra);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,650,"}, extra);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,676,", header);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,665,"}, header);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,694,", rest);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,683,"}, rest);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,708,", extra);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,709, finally {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,710,.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,697,"}, extra);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,839,inal RandomAccessFile a =
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,840,"ew RandomAccessFile(f, ""r"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,841,ry {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,826,"try (RandomAccessFile a = new RandomAccessFile(f, ""r"")) {"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,862,", header);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,847,"}, header);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,889,", rest);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,874,"}, rest);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,904,", extra);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,889,"}, extra);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,915,", dd);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,900,"}, dd);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,925,", dd);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,910,"}, dd);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,940,", header);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,925,"}, header);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,958,", rest);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,943,"}, rest);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,971,", extra);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,972, finally {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,973,.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,956,"}, extra);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1084,"inal RandomAccessFile a = new RandomAccessFile(f, ""r"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1085,ry {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1067,"try (RandomAccessFile a = new RandomAccessFile(f, ""r"")) {"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1105,", header);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1087,"}, header);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1132,", rest);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1114,"}, rest);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1147,", extra);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1129,"}, extra);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1162,", header);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1144,"}, header);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1180,", rest);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1162,"}, rest);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1194,", extra);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1195, finally {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1196,.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1176,"}, extra);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1343,"inal RandomAccessFile a = new RandomAccessFile(f, ""r"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1344,ry {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1323,"try (RandomAccessFile a = new RandomAccessFile(f, ""r"")) {"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1363,", header);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1342,"}, header);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1391,", rest);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1370,"}, rest);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1398,| (mode == Zip64Mode.AsNeeded && !knownSize);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1377,|| (mode == Zip64Mode.AsNeeded && !knownSize);
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1411,", header);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1390,"}, header);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1430,", rest);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1409,"}, rest);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1445,", extra);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1424,"}, extra);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1447, finally {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1448,.close();
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1520,"inal RandomAccessFile a = new RandomAccessFile(f, ""r"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1521,ry {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1497,"try (RandomAccessFile a = new RandomAccessFile(f, ""r"")) {"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1539,", header);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1515,"}, header);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1567,", rest);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1543,"}, rest);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1576,", extra);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1552,"}, extra);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1593,", header);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1569,"}, header);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1612,", rest);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1588,"}, rest);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1627,", extra);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1628, finally {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1629,.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1603,"}, extra);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1684,"inal RandomAccessFile a = new RandomAccessFile(f, ""r"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1685,ry {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1658,"try (RandomAccessFile a = new RandomAccessFile(f, ""r"")) {"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1705,", header);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1678,"}, header);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1713,", crc);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1686,"}, crc);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1737,", rest);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1710,"}, rest);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1748,", dd);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1721,"}, dd);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1756,", dd);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1729,"}, dd);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1771,", header);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1744,"}, header);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1789,", rest);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1790, finally {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1791,.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1762,"}, rest);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1855,"inal RandomAccessFile a = new RandomAccessFile(f, ""r"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1856,ry {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1826,"try (RandomAccessFile a = new RandomAccessFile(f, ""r"")) {"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1876,", header);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1846,"}, header);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1884,", crc);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1854,"}, crc);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1908,", rest);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1878,"}, rest);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1916,", extra);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1886,"}, extra);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1927,", dd);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1897,"}, dd);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1936,", dd);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1906,"}, dd);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1951,", header);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1921,"}, header);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1969,", rest);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1939,"}, rest);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1984,", extra);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1985, finally {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1986,.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1954,"}, extra);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2040,"inal RandomAccessFile a = new RandomAccessFile(f, ""r"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2041,ry {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2008,"try (RandomAccessFile a = new RandomAccessFile(f, ""r"")) {"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2060,", header);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2027,"}, header);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2068,", crc);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2035,"}, crc);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2091,", rest);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2058,"}, rest);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2106,", header);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2073,"}, header);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2114,", crc);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2081,"}, crc);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2120,inal boolean hasExtra =
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2121,ode == Zip64Mode.AsNeeded && !knownSize;
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2087,final boolean hasExtra =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2088,mode == Zip64Mode.AsNeeded && !knownSize;
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2132,", rest);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2099,"}, rest);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2148,", extra);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2115,"}, extra);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2150, finally {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2151,.close();
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2213,"inal RandomAccessFile a = new RandomAccessFile(f, ""r"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2214,ry {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2178,"try (RandomAccessFile a = new RandomAccessFile(f, ""r"")) {"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2233,", header);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2197,"}, header);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2240,", crc);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2204,"}, crc);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2263,", rest);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2227,"}, rest);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2271,", extra);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2235,"}, extra);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2286,", header);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2250,"}, header);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2294,", crc);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2258,"}, crc);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2309,", rest);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2273,"}, rest);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2325,", extra);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2326, finally {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2327,.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2289,"}, extra);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2482,inal InputStream zin = zf.getInputStream(zae);
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2483,ry {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2444,try (InputStream zin = zf.getInputStream(zae)) {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2493, finally {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2494,in.close();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,164,"inal ZipArchiveInputStream in = new ZipArchiveInputStream(new FileInputStream(getFile(""COMPRESS-264.zip"")));"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,166,ry {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,165,"try (ZipArchiveInputStream in = new ZipArchiveInputStream(new FileInputStream(getFile(""COMPRESS-264.zip"")))) {"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,169,"ssertArrayEquals(new byte[] {'d', 'a', 't', 'a', '\n'},"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,170,OUtils.toByteArray(in));
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,171, finally {
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,172,n.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,168,"assertArrayEquals(new byte[] { 'd', 'a', 't', 'a', '\n' },"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,169,IOUtils.toByteArray(in));
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,183,"inal ZipArchiveInputStream in = new ZipArchiveInputStream(new FileInputStream(getFile(""COMPRESS-351.zip"")));"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,184,ry {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,180,"try (ZipArchiveInputStream in = new ZipArchiveInputStream(new FileInputStream(getFile(""COMPRESS-351.zip"")))) {"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,193, finally {
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,194,n.close();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,200,"inal ZipArchiveInputStream in = new ZipArchiveInputStream(new FileInputStream(getFile(""bzip2-zip.zip"")));"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,202,ry {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,195,"try (ZipArchiveInputStream in = new ZipArchiveInputStream(new FileInputStream(getFile(""bzip2-zip.zip"")))) {"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,206,"rrays.fill(expected , (byte)'a');"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,199,"Arrays.fill(expected, (byte) 'a');"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,208, finally {
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,209,n.close();
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,80,inal InputStream is = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,81,ry {
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,82,inal CompressorInputStream in = new CompressorStreamFactory()
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,83,"createCompressorInputStream(""bzip2"", is);"
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,84,ry {
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,80,try (InputStream is = new FileInputStream(input)) {
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,81,try (CompressorInputStream in = new CompressorStreamFactory()
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,82,".createCompressorInputStream(""bzip2"", is)) {"
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,87, finally {
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,88,n.close();
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,90, finally {
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,91,s.close();
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,98,inal InputStream is = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,99,ry {
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,100,inal CompressorInputStream in =
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,101,"ew BZip2CompressorInputStream(is, true);"
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,102,ry {
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,92,try (InputStream is = new FileInputStream(input)) {
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,93,"try (CompressorInputStream in = new BZip2CompressorInputStream(is, true)) {"
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,107, finally {
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,108,n.close();
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,110, finally {
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,111,s.close();
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,118,inal InputStream is = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,119,ry {
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,120,inal CompressorInputStream in =
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,121,"ew BZip2CompressorInputStream(is, true);"
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,122,ry {
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,105,try (InputStream is = new FileInputStream(input)) {
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,106,"try (CompressorInputStream in = new BZip2CompressorInputStream(is, true)) {"
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,124,hile(in.read() != -1) {
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,108,while (in.read() != -1) {
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,128, finally {
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,129,n.close();
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,131, finally {
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,132,s.close();
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,45,inal OutputStream out = new FileOutputStream(output);
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,46,ry {
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,47,inal CompressorOutputStream cos = new CompressorStreamFactory()
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,48,"createCompressorOutputStream(""deflate"", out); // zlib header is used by default"
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,49,ry {
True,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,45,try (OutputStream out = new FileOutputStream(output)) {
True,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,46,try (CompressorOutputStream cos = new CompressorStreamFactory()
True,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,47,".createCompressorOutputStream(""deflate"", out)) {"
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,51, finally {
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,52,os.close();
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,54, finally {
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,55,ut.close();
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,68,inal OutputStream out = new FileOutputStream(output);
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,69,ry {
True,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,62,try (OutputStream out = new FileOutputStream(output)) {
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,72,"inal CompressorOutputStream cos = new DeflateCompressorOutputStream(out, params);"
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,73,ry {
True,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,65,"try (CompressorOutputStream cos = new DeflateCompressorOutputStream(out, params)) {"
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,75, finally {
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,76,os.close();
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,78, finally {
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,79,ut.close();
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,92,inal InputStream is = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,93,ry {
True,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,80,try (InputStream is = new FileInputStream(input)) {
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,95,"createCompressorInputStream(""deflate"", is); // zlib header is expected by default"
True,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,82,".createCompressorInputStream(""deflate"", is); // zlib header is expected by default"
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,106, finally {
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,107,s.close();
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,120,inal InputStream is = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,121,ry {
True,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,105,try (InputStream is = new FileInputStream(input)) {
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,135, finally {
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,136,s.close();
False,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,73,inal FileInputStream is = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,74,ry {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,73,try (FileInputStream is = new FileInputStream(input)) {
False,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,89, finally {
False,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,90,s.close();
False,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,93,inal FileInputStream written = new FileInputStream(output);
False,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,94,ry {
False,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,95,inal FileInputStream orig = new FileInputStream(original);
False,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,96,ry {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,90,try (FileInputStream written = new FileInputStream(output)) {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,91,try (FileInputStream orig = new FileInputStream(original)) {
False,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,98,OUtils.toByteArray(orig));
False,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,99, finally {
False,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,100,rig.close();
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,93,IOUtils.toByteArray(orig));
False,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,102, finally {
False,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,103,ritten.close();
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,48,inal OutputStream out = new FileOutputStream(output);
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,49,ry {
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,50,inal CompressorOutputStream cos = new CompressorStreamFactory()
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,51,"createCompressorOutputStream(""gz"", out);"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,52,ry {
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,48,try (OutputStream out = new FileOutputStream(output)) {
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,49,try (CompressorOutputStream cos = new CompressorStreamFactory()
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,50,".createCompressorOutputStream(""gz"", out)) {"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,54, finally {
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,55,os.close();
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,57, finally {
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,58,ut.close();
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,66,inal InputStream is = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,67,ry {
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,60,try (InputStream is = new FileInputStream(input)) {
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,69,"createCompressorInputStream(""gz"", is);"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,62,".createCompressorInputStream(""gz"", is);"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,80, finally {
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,81,s.close();
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,88,inal InputStream is = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,89,ry {
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,90,inal CompressorInputStream in = new CompressorStreamFactory()
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,91,"createCompressorInputStream(""gz"", is);"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,92,ry {
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,79,try (InputStream is = new FileInputStream(input)) {
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,80,try (CompressorInputStream in = new CompressorStreamFactory()
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,81,".createCompressorInputStream(""gz"", is)) {"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,95, finally {
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,96,n.close();
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,98, finally {
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,99,s.close();
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,106,inal InputStream is = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,107,ry {
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,108,inal CompressorInputStream in =
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,109,"ew GzipCompressorInputStream(is, true);"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,110,ry {
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,91,try (InputStream is = new FileInputStream(input)) {
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,92,"try (CompressorInputStream in = new GzipCompressorInputStream(is, true)) {"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,115, finally {
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,116,n.close();
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,118, finally {
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,119,s.close();
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,166,"inal FileInputStream fis = new FileInputStream(getFile(""test3.xml""));"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,168,ry {
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,145,"try (FileInputStream fis = new FileInputStream(getFile(""test3.xml""))) {"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,170, finally {
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,171,is.close();
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,195,"inal FileInputStream fis = new FileInputStream(getFile(""test3.xml""));"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,197,ry {
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,171,"try (FileInputStream fis = new FileInputStream(getFile(""test3.xml""))) {"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,199, finally {
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,200,is.close();
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,241,"inal FileInputStream fis = new FileInputStream(getFile(""test3.xml""));"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,243,ry {
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,214,"try (FileInputStream fis = new FileInputStream(getFile(""test3.xml""))) {"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,245, finally {
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,246,is.close();
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,298,"inal GzipCompressorOutputStream out = new GzipCompressorOutputStream(bout, parameters);"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,299,"inal FileInputStream fis = new FileInputStream(getFile(""test3.xml""));"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,300,ry {
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,267,"try (GzipCompressorOutputStream out = new GzipCompressorOutputStream(bout, parameters); FileInputStream fis = new FileInputStream(getFile(""test3"" +"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,268,""".xml""))) {"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,302, finally {
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,303,is.close();
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,304,ut.close();
False,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,39,inal InputStream is = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,40,ry {
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,39,try (InputStream is = new FileInputStream(input)) {
False,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,43, finally {
False,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,44,s.close();
False,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,52,inal InputStream is = new BufferedInputStream(new FileInputStream(input));
False,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,53,ry {
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,49,try (InputStream is = new BufferedInputStream(new FileInputStream(input))) {
False,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,55,createCompressorInputStream(is);
True,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,51,.createCompressorInputStream(is);
False,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,57, finally {
False,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java,58,s.close();
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,70,inal InputStream is = useFile
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,71," new Pack200CompressorInputStream(input, mode)"
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,72," new Pack200CompressorInputStream(new FileInputStream(input),"
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,73,ode);
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,74,ry {
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,70,try (InputStream is = useFile
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,71,"? new Pack200CompressorInputStream(input, mode)"
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,72,": new Pack200CompressorInputStream(new FileInputStream(input),"
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,73,mode)) {
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,76,"createArchiveInputStream(""jar"", is);"
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,75,".createArchiveInputStream(""jar"", is);"
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,94, finally {
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,95,s.close();
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,115,inal OutputStream out =
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,116,"ew Pack200CompressorOutputStream(new FileOutputStream(output),"
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,117,ode);
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,118,ry {
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,112,"try (OutputStream out = new Pack200CompressorOutputStream(new FileOutputStream(output),"
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,113,mode)) {
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,120,"createArchiveOutputStream(""jar"", out);"
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,115,".createArchiveOutputStream(""jar"", out);"
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,131, finally {
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,132,ut.close();
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,135,inal InputStream is = new Pack200CompressorInputStream(output);
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,136,ry {
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,128,try (InputStream is = new Pack200CompressorInputStream(output)) {
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,138,"createArchiveInputStream(""jar"", is);"
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,130,".createArchiveInputStream(""jar"", is);"
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,144, finally {
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,145,s.close();
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,151,"inal InputStream is = new FileInputStream(getFile(""bla.pack""));"
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,152,ry {
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,141,"try (InputStream is = new FileInputStream(getFile(""bla.pack""))) {"
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,156, finally {
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,157,s.close();
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,163,"inal InputStream is = new FileInputStream(getFile(""bla.jar""));"
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,164,ry {
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,150,"try (InputStream is = new FileInputStream(getFile(""bla.jar""))) {"
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,168, finally {
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,169,s.close();
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,175,"inal InputStream is = new FileInputStream(getFile(""bla.pack""));"
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,176,ry {
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,159,"try (InputStream is = new FileInputStream(getFile(""bla.pack""))) {"
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,180, finally {
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,181,s.close();
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,189,inal InputStream is =
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,190,"ew Pack200CompressorInputStream(new FileInputStream(getFile(""bla.jar"")),"
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,191,);
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,192,ry {
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,170,"try (InputStream is = new Pack200CompressorInputStream(new FileInputStream(getFile(""bla.jar"")),"
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,171,m)) {
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,207, finally {
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,208,s.close();
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,217,inal OutputStream out = new FileOutputStream(output);
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,218,ry {
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,194,try (OutputStream out = new FileOutputStream(output)) {
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,223, finally {
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,224,ut.close();
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,43,inal OutputStream out = new FileOutputStream(output);
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,44,ry {
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,45,inal CompressorOutputStream cos = new CompressorStreamFactory()
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,46,"createCompressorOutputStream(""xz"", out);"
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,47,ry {
True,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,43,try (OutputStream out = new FileOutputStream(output)) {
True,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,44,try (CompressorOutputStream cos = new CompressorStreamFactory()
True,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,45,".createCompressorOutputStream(""xz"", out)) {"
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,49, finally {
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,50,os.close();
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,52, finally {
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,53,ut.close();
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,61,inal InputStream is = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,62,ry {
True,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,55,try (InputStream is = new FileInputStream(input)) {
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,64,"createCompressorInputStream(""xz"", is);"
True,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,57,".createCompressorInputStream(""xz"", is);"
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,75, finally {
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,76,s.close();
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,83,inal InputStream is = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,84,ry {
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,85,inal CompressorInputStream in = new CompressorStreamFactory()
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,86,"createCompressorInputStream(""xz"", is);"
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,87,ry {
True,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,74,try (InputStream is = new FileInputStream(input)) {
True,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,75,try (CompressorInputStream in = new CompressorStreamFactory()
True,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,76,".createCompressorInputStream(""xz"", is)) {"
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,90, finally {
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,91,n.close();
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,93, finally {
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,94,s.close();
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,101,inal InputStream is = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,102,ry {
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,103,inal CompressorInputStream in =
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,104,"ew XZCompressorInputStream(is, true);"
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,105,ry {
True,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,86,try (InputStream is = new FileInputStream(input)) {
True,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,87,"try (CompressorInputStream in = new XZCompressorInputStream(is, true)) {"
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,110, finally {
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,111,n.close();
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,113, finally {
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,114,s.close();
False,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,84,inal InputStream is = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,85,ry {
True,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,84,try (InputStream is = new FileInputStream(input)) {
False,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,97, finally {
False,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,98,s.close();
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,34,"inal FileInputStream in = new FileInputStream(getFile(""bla.zip""));"
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,35,ry {
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,34,"try (FileInputStream in = new FileInputStream(getFile(""bla.zip""))) {"
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,37, finally {
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,38,n.close();
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,36,inal InputStream is = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,37,ry {
True,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,36,try (InputStream is = new FileInputStream(input)) {
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,39,ew DeflateCompressorInputStream(is);
True,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,38,new DeflateCompressorInputStream(is);
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,42, finally {
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,43,s.close();
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,50,inal InputStream is = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,51,ry {
True,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,47,try (InputStream is = new FileInputStream(input)) {
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,53,ew DeflateCompressorInputStream(is);
True,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,49,new DeflateCompressorInputStream(is);
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,56, finally {
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,57,s.close();
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,64,inal InputStream is = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,65,ry {
True,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,58,try (InputStream is = new FileInputStream(input)) {
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,67,ew DeflateCompressorInputStream(is);
True,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,60,new DeflateCompressorInputStream(is);
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,71, finally {
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,72,s.close();
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,79,inal InputStream is = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,80,ry {
True,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,70,try (InputStream is = new FileInputStream(input)) {
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,82,ew DeflateCompressorInputStream(is);
True,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,72,new DeflateCompressorInputStream(is);
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,86, finally {
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,87,s.close();
False,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,43,inal FileInputStream is = new FileInputStream(output[1]);
False,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,44,ry {
True,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,43,try (FileInputStream is = new FileInputStream(output[1])) {
False,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,46,"createArchiveInputStream(""jar"", is);"
True,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,45,".createArchiveInputStream(""jar"", is);"
False,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,64, finally {
False,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,65,s.close();
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,44,inal FileInputStream in = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,45,ry {
True,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,44,try (FileInputStream in = new FileInputStream(input)) {
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,47, finally {
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,48,n.close();
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,60,"inal FileInputStream isSz = new FileInputStream(getFile(""lorem-ipsum.txt.sz""));"
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,63,ry {
True,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,59,"try (FileInputStream isSz = new FileInputStream(getFile(""lorem-ipsum.txt.sz""))) {"
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,75,"inal FileInputStream isGz = new FileInputStream(getFile(""lorem-ipsum.txt.gz""));"
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,76,ry {
True,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,71,"try (FileInputStream isGz = new FileInputStream(getFile(""lorem-ipsum.txt.gz""))) {"
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,87, finally {
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,88,sGz.close();
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,90, finally {
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,91,sSz.close();
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,94,inal FileInputStream sz = new FileInputStream(outputSz);
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,95,ry {
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,96,inal FileInputStream gz = new FileInputStream(outputGz);
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,97,ry {
True,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,85,try (FileInputStream sz = new FileInputStream(outputSz)) {
True,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,86,try (FileInputStream gz = new FileInputStream(outputGz)) {
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,99,OUtils.toByteArray(gz));
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,100, finally {
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,101,z.close();
True,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,88,IOUtils.toByteArray(gz));
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,103, finally {
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,104,z.close();
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,110,"inal FileInputStream isSz = new FileInputStream(getFile(""mixed.txt.sz""));"
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,112,ry {
True,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,96,"try (FileInputStream isSz = new FileInputStream(getFile(""mixed.txt.sz""))) {"
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,116, finally {
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,117,sSz.close();
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,133,"inal FileInputStream isSz = new FileInputStream(getFile(""mixed.txt.sz""));"
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,134,ry {
True,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,115,"try (FileInputStream isSz = new FileInputStream(getFile(""mixed.txt.sz""))) {"
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,146, finally {
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,147,sSz.close();
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,176,"inal ZipFile zip = new ZipFile(getFile(""testNumbersNew.numbers""));"
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,177,ry {
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,178,"inal InputStream is = zip.getInputStream(zip.getEntry(""Index/Document.iwa""));"
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,179,ry {
True,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,155,"try (ZipFile zip = new ZipFile(getFile(""testNumbersNew.numbers""))) {"
True,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,156,"try (InputStream is = zip.getInputStream(zip.getEntry(""Index/Document.iwa""))) {"
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,181,"ew FramedSnappyCompressorInputStream(is, FramedSnappyDialect.IWORK_ARCHIVE);"
True,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,158,"new FramedSnappyCompressorInputStream(is, FramedSnappyDialect.IWORK_ARCHIVE);"
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,192, finally {
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,193,s.close();
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,195, finally {
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,196,ip.close();

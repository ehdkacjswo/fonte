is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,19,package org.apache.commons.compress.compressors.lz4;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,23,import java.io.PushbackInputStream;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,24,import java.util.Arrays;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,26,import org.apache.commons.compress.compressors.CompressorInputStream;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,27,import org.apache.commons.compress.utils.BoundedInputStream;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,28,import org.apache.commons.compress.utils.ByteUtils;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,29,import org.apache.commons.compress.utils.IOUtils;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,32,* CompressorInputStream for the LZ4 frame format.
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,34,"* <p>Based on the ""spec"" in the version ""1.5.1 (31/03/2015)""</p>"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,36,"* @see <a href=""http://lz4.github.io/lz4/lz4_Frame_format.html"">LZ4 Frame Format Description</a>"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,37,* @since 1.14
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,39,public class FramedLZ4CompressorInputStream extends CompressorInputStream {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,41,* TODO before releasing 1.14:
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,43,* + xxhash32 checksum validation
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,44,* + decompressConcatenated
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,45,* + block dependence
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,48,// used by FramedLZ4CompressorOutputStream as well
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,49,static final byte[] LZ4_SIGNATURE = new byte[] { //NOSONAR
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,50,"4, 0x22, 0x4d, 0x18"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,53,static final int VERSION_MASK = 0xC0;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,54,static final int SUPPORTED_VERSION = 0x40;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,55,static final int BLOCK_INDEPENDENCE_MASK = 0x20;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,56,static final int BLOCK_CHECKSUM_MASK = 0x10;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,57,static final int CONTENT_SIZE_MASK = 0x08;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,58,static final int CONTENT_CHECKSUM_MASK = 0x04;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,59,static final int BLOCK_MAX_SIZE_MASK = 0x70;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,60,static final int UNCOMPRESSED_FLAG_MASK = 0x80000000;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,62,// used in no-arg read method
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,63,private final byte[] oneByte = new byte[1];
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,65,private final ByteUtils.ByteSupplier supplier = new ByteUtils.ByteSupplier() {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,66,@Override
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,67,public int getAsByte() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,68,return readOneByte();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,72,private final InputStream in;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,74,private boolean expectBlockChecksum;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,75,private boolean expectContentSize;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,76,private boolean expectContentChecksum;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,78,private InputStream currentBlock;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,79,"private boolean endReached, inUncompressed;"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,82,* Creates a new input stream that decompresses streams compressed
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,83,* using the LZ4 frame format.
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,84,* @param in  the InputStream from which to read the compressed data
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,85,* @throws IOException if reading fails
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,87,public FramedLZ4CompressorInputStream(InputStream in) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,88,this.in = in;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,89,readSignature();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,90,readFrameDescriptor();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,91,nextBlock();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,94,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,95,@Override
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,96,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,97,"return read(oneByte, 0, 1) == -1 ? -1 : oneByte[0] & 0xFF;"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,100,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,101,@Override
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,102,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,103,if (currentBlock != null) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,104,currentBlock.close();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,105,currentBlock = null;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,107,in.close();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,110,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,111,@Override
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,112,"public int read(final byte[] b, final int off, final int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,113,if (endReached) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,114,return -1;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,116,"int r = readOnce(b, off, len);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,117,if (r == -1) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,118,nextBlock();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,119,if (!endReached) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,120,"r = readOnce(b, off, len);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,123,return r;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,126,private void readSignature() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,127,final byte[] b = new byte[4];
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,128,"final int read = IOUtils.readFully(in, b);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,129,count(read);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,130,"if (4 != read || !matches(b, 4)) {"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,131,"throw new IOException(""Not a LZ4 frame stream"");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,135,private void readFrameDescriptor() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,136,int flags = readOneByte();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,137,if (flags == -1) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,138,"throw new IOException(""Premature end of stream while reading frame flags"");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,140,if ((flags & VERSION_MASK) != SUPPORTED_VERSION) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,141,"throw new IOException(""Unsupported version "" + (flags >> 6));"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,143,if ((flags & BLOCK_INDEPENDENCE_MASK) == 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,144,"throw new IOException(""Block dependence is not supported"");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,146,expectBlockChecksum = (flags & BLOCK_CHECKSUM_MASK) != 0;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,147,expectContentSize = (flags & CONTENT_SIZE_MASK) != 0;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,148,expectContentChecksum = (flags & CONTENT_CHECKSUM_MASK) != 0;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,149,if (readOneByte() == -1) { // max size is irrelevant for this implementation
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,150,"throw new IOException(""Premature end of stream while reading frame BD byte"");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,152,"if (expectContentSize) { // for now we don't care, contains the uncompressed size"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,153,"int skipped = (int) IOUtils.skip(in, 8);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,154,count(skipped);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,155,if (8 != skipped) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,156,"throw new IOException(""Premature end of stream while reading content size"");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,159,"if (readOneByte() == -1) { // partial hash of header. not supported, yet"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,160,"throw new IOException(""Premature end of stream while reading frame header checksum"");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,164,private void nextBlock() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,165,maybeFinishCurrentBlock();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,166,"long len = ByteUtils.fromLittleEndian(supplier, 4);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,167,boolean uncompressed = (len & UNCOMPRESSED_FLAG_MASK) != 0;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,168,int realLen = (int) (len & (~UNCOMPRESSED_FLAG_MASK));
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,169,if (realLen == 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,170,endReached = true;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,171,return;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,173,"InputStream capped = new BoundedInputStream(in, realLen);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,174,if (uncompressed) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,175,inUncompressed = true;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,176,currentBlock = capped;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,177,} else {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,178,inUncompressed = true;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,179,currentBlock = new BlockLZ4CompressorInputStream(capped);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,183,private void maybeFinishCurrentBlock() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,184,if (currentBlock != null) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,185,currentBlock.close();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,186,currentBlock = null;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,187,if (expectBlockChecksum) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,188,"int skipped = (int) IOUtils.skip(in, 4);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,189,count(skipped);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,190,if (4 != skipped) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,191,"throw new IOException(""Premature end of stream while reading block checksum"");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,197,private int readOneByte() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,198,final int b = in.read();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,199,if (b != -1) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,200,count(1);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,201,return b & 0xFF;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,203,return -1;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,206,"private int readOnce(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,207,if (inUncompressed) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,208,"int cnt = currentBlock.read(b, off, len);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,209,count(cnt);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,210,return cnt;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,211,} else {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,212,BlockLZ4CompressorInputStream l = (BlockLZ4CompressorInputStream) currentBlock;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,213,long before = l.getBytesRead();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,214,"int cnt = currentBlock.read(b, off, len);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,215,count(l.getBytesRead() - before);
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,216,return cnt;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,221,* Checks if the signature matches what is expected for a .lz4 file.
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,223,* <p>.lz4 files start with a four byte signature.</p>
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,225,* @param signature the bytes to check
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,226,* @param length    the number of bytes to check
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,227,"* @return          true if this is a .sz stream, false otherwise"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,229,"public static boolean matches(final byte[] signature, final int length) {"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,231,if (length < LZ4_SIGNATURE.length) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,232,return false;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,235,byte[] shortenedSig = signature;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,236,if (signature.length > LZ4_SIGNATURE.length) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,237,shortenedSig = new byte[LZ4_SIGNATURE.length];
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,238,"System.arraycopy(signature, 0, shortenedSig, 0, LZ4_SIGNATURE.length);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,241,"return Arrays.equals(shortenedSig, LZ4_SIGNATURE);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,19,package org.apache.commons.compress.compressors.lz4;
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,21,import static org.junit.Assert.*;
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,23,import java.io.File;
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,24,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,25,import java.io.InputStream;
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,26,import java.io.IOException;
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,28,import org.apache.commons.compress.AbstractTestCase;
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,29,import org.apache.commons.compress.utils.IOUtils;
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,30,import org.junit.Test;
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,32,public final class FramedLZ4CompressorInputStreamTest
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,33,extends AbstractTestCase {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,35,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,36,public void testMatches() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,37,"assertFalse(FramedLZ4CompressorInputStream.matches(new byte[10], 4));"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,38,final byte[] b = new byte[12];
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,39,"final File input = getFile(""bla.tar.lz4"");"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,40,try (FileInputStream in = new FileInputStream(input)) {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,41,"IOUtils.readFully(in, b);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,43,"assertFalse(FramedLZ4CompressorInputStream.matches(b, 3));"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,44,"assertTrue(FramedLZ4CompressorInputStream.matches(b, 4));"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,45,"assertTrue(FramedLZ4CompressorInputStream.matches(b, 5));"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,48,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,49,public void readBlaLz4() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,50,try {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,51,"try (InputStream a = new FramedLZ4CompressorInputStream(new FileInputStream(getFile(""bla.tar.lz4"")));"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,52,"FileInputStream e = new FileInputStream(getFile(""bla.tar""))) {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,53,byte[] expected = IOUtils.toByteArray(e);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,54,byte[] actual = IOUtils.toByteArray(a);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,55,"assertArrayEquals(expected, actual);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,57,} catch (Exception ex) {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,58,ex.printStackTrace();

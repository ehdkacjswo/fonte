is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,41,import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,514,"            {@value #XZ}, {@value #PACK200}, {@value SNAPPY_FRAMED}"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,515,"*            {@value #XZ}, {@value #PACK200}, {@value SNAPPY_FRAMED},"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,516,*            {@value LZ4_BLOCK}
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,563,if (LZ4_BLOCK.equalsIgnoreCase(name)) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,564,return new BlockLZ4CompressorOutputStream(out);
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,598,"eturn Sets.newHashSet(GZIP, BZIP2, XZ, LZMA, PACK200, SNAPPY_RAW, SNAPPY_FRAMED, Z, DEFLATE);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,604,"return Sets.newHashSet(GZIP, BZIP2, XZ, LZMA, PACK200, SNAPPY_RAW, SNAPPY_FRAMED, Z, DEFLATE, LZ4_BLOCK);"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,603,"eturn Sets.newHashSet(GZIP, BZIP2, XZ, LZMA, PACK200, DEFLATE, SNAPPY_FRAMED);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,609,"return Sets.newHashSet(GZIP, BZIP2, XZ, LZMA, PACK200, DEFLATE, SNAPPY_FRAMED, LZ4_BLOCK);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,88,// keeps track of the last window-size bytes (64k) in order to be
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,89,// able to expand back-references when needed
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,90,private Deque<byte[]> expandedBlocks = new LinkedList<>();
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,147,ast.addLiteral(block);
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,150,recordLiteral(last.addLiteral(block));
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,151,clearUnusedBlocksAndPairs();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,157,recordBackReference(block);
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,158,clearUnusedBlocksAndPairs();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,171,private void recordLiteral(byte[] b) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,172,expandedBlocks.addFirst(b);
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,175,private void clearUnusedBlocksAndPairs() {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,176,clearUnusedBlocks();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,177,clearUnusedPairs();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,180,private void clearUnusedBlocks() {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,181,int blockLengths = 0;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,182,int blocksToKeep = 0;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,183,for (byte[] b : expandedBlocks) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,184,blocksToKeep++;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,185,blockLengths += b.length;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,186,if (blockLengths >= BlockLZ4CompressorInputStream.WINDOW_SIZE) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,187,break;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,190,final int size = expandedBlocks.size();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,191,for (int i = blocksToKeep; i < size; i++) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,192,expandedBlocks.removeLast();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,196,private void recordBackReference(LZ77Compressor.BackReference block) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,197,"expandedBlocks.addFirst(expand(block.getOffset(), block.getLength()));"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,200,"private byte[] expand(final int offset, final int length) {"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,201,byte[] expanded = new byte[length];
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,202,if (offset == 1) { // surprisingly common special case
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,203,byte[] block = expandedBlocks.peekFirst();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,204,byte b = block[block.length - 1];
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,205,for (int i = 0; i < expanded.length; i++) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,206,expanded[i] = b;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,208,} else {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,209,"expandFromList(expanded, offset, length);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,211,return expanded;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,214,"private void expandFromList(final byte[] expanded, int offset, int length) {"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,215,int offsetRemaining = offset;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,216,int lengthRemaining = length;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,217,int writeOffset = 0;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,218,while (lengthRemaining > 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,219,// find block that contains offsetRemaining
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,220,byte[] block = null;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,221,"int copyLen, copyOffset;"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,222,if (offsetRemaining > 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,223,int blockOffset = 0;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,224,for (byte[] b : expandedBlocks) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,225,if (b.length + blockOffset >= offsetRemaining) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,226,block = b;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,227,break;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,229,blockOffset += b.length;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,231,copyOffset = blockOffset + block.length - offsetRemaining;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,232,"copyLen = Math.min(lengthRemaining, block.length - copyOffset);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,233,} else {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,234,// offsetRemaining is negative and points into the expanded bytes
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,235,block = expanded;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,236,copyOffset = writeOffset  + offsetRemaining;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,237,"copyLen = Math.min(lengthRemaining, writeOffset + offsetRemaining);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,239,if (copyLen < 1) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,240,"throw new IllegalStateException(""zero copy"");"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,242,"System.arraycopy(block, copyOffset, expanded, writeOffset, copyLen);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,243,offsetRemaining -= copyLen;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,244,lengthRemaining -= copyLen;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,245,writeOffset += copyLen;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,249,private void clearUnusedPairs() {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,250,int pairLengths = 0;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,251,int pairsToKeep = 0;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,252,for (Iterator<Pair> it = pairs.descendingIterator(); it.hasNext(); ) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,253,Pair p = it.next();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,254,pairsToKeep++;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,255,pairLengths += p.length();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,256,if (pairLengths >= BlockLZ4CompressorInputStream.WINDOW_SIZE) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,257,break;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,260,final int size = pairs.size();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,261,for (int i = pairsToKeep; i < size; i++) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,262,Pair p = pairs.peekFirst();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,263,if (p.hasBeenWritten()) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,264,pairs.removeFirst();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,265,} else {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,266,break;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,304,LinkedList<Pair> lastPairs = new LinkedList<>();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,305,LinkedList<Integer> pairLength = new LinkedList<>();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,306,int offset = 0;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,307,for (Iterator<Pair> it = pairs.descendingIterator(); it.hasNext(); ) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,308,Pair p = it.next();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,309,if (p.hasBeenWritten()) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,310,break;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,312,int len = p.length();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,313,pairLength.addFirst(len);
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,314,lastPairs.addFirst(p);
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,315,offset += len;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,316,if (offset >= MIN_OFFSET_OF_LAST_BACK_REFERENCE) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,317,break;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,320,for (Pair p : lastPairs) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,321,pairs.remove(p);
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,323,// lastPairs may contain between one and four Pairs:
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,324,// * the last pair may be a one byte literal
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,325,// * all other Pairs contain a back-reference which must be four bytes long at minimum
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,326,// we could merge them all into a single literal block but
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,327,// this may harm compression. For example compressing
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,328,"// ""bla.tar"" from our tests yields a last block containing a"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,329,// back-reference of length > 2k and we'd end up with a last
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,330,// literal of that size rather than a 2k back-reference and a
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,331,// 12 byte literal at the end.
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,333,// Instead we merge all but the first of lastPairs into a new
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,334,"// literal-only Pair ""replacement"" and look at the"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,335,// back-reference in the first of lastPairs and see if we can
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,336,// split it. We can split it if it is longer than 16 -
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,337,// replacement.length (i.e. the minimal length of four is kept
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,338,// while making sure the last literal is at least twelve bytes
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,339,"// long). If we can't split it, we expand the first of the pairs"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,340,// as well.
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,342,"// this is not optimal, we could get better compression"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,343,// results with more complex approaches as the last literal
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,344,// only needs to be five bytes long if the previous
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,345,// back-reference has an offset big enough
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,347,final int allButFirstOfLastPairs = lastPairs.size() - 1;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,348,int toExpand = 0;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,349,for (int i = 1; i < allButFirstOfLastPairs; i++) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,350,toExpand += pairLength.get(i);
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,352,Pair replacement = new Pair();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,353,if (toExpand > 0) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,354,"replacement.prependLiteral(expand(toExpand, toExpand));"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,356,Pair splitCandidate = lastPairs.get(0);
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,357,int splitLen = splitCandidate.length();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,358,int stillNeeded = MIN_OFFSET_OF_LAST_BACK_REFERENCE - toExpand;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,359,if (splitCandidate.hasBackReference()
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,360,&& splitCandidate.backReferenceLength() > MIN_BACK_REFERENCE_LENGTH + stillNeeded) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,361,"replacement.prependLiteral(expand(toExpand + stillNeeded, stillNeeded));"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,362,pairs.add(splitCandidate.splitWithNewBackReferenceLengthOf(splitCandidate.backReferenceLength()
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,363,- stillNeeded));
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,364,} else {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,365,"replacement.prependLiteral(expand(toExpand + splitLen, splitLen));"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,367,pairs.add(replacement);
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,201,rivate final List<byte[]> literals = new LinkedList<>();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,371,private final Deque<byte[]> literals = new LinkedList<>();
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,205,oid addLiteral(LZ77Compressor.LiteralBlock block) {
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,206,"iterals.add(Arrays.copyOfRange(block.getData(), block.getOffset(),"
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,207,lock.getOffset() + block.getLength()));
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,375,private void prependLiteral(byte[] data) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,376,literals.addFirst(data);
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,378,byte[] addLiteral(LZ77Compressor.LiteralBlock block) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,379,"byte[] copy = Arrays.copyOfRange(block.getData(), block.getOffset(),"
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,380,block.getOffset() + block.getLength());
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,381,literals.add(copy);
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,382,return copy;
False,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,227,oolean hasBeenWritten() {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,402,private boolean hasBeenWritten() {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,442,private int backReferenceLength() {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,443,return brLength;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,445,Pair splitWithNewBackReferenceLengthOf(int newBackReferenceLength) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,446,Pair p = new Pair();
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,447,p.literals.addAll(literals);
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,448,p.brOffset = brOffset;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,449,p.brLength = newBackReferenceLength;
True,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java,450,return p;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,4,* distributed with this work for additional information
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,7,"* ""License""); you may not use this file except in compliance"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,8,* with the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,13,* software distributed under the License is distributed on an
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,15,"* KIND, either express or implied.  See the License for the"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,16,* specific language governing permissions and limitations
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,17,* under the License.
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,19,package org.apache.commons.compress.compressors.lz4;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,21,import java.io.File;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,22,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,23,import java.io.FileOutputStream;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,24,import java.io.IOException;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,25,import java.util.Random;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,26,import org.apache.commons.compress.AbstractTestCase;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,27,import org.apache.commons.compress.compressors.lz77support.Parameters;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,28,import org.apache.commons.compress.utils.IOUtils;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,29,import org.junit.Assert;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,30,import org.junit.Test;
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,32,public final class BlockLZ4CompressorRoundtripTest extends AbstractTestCase {
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,34,private void roundTripTest(String testFile) throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,35,File input = getFile(testFile);
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,36,long start = System.currentTimeMillis();
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,37,"final File outputSz = new File(dir, input.getName() + "".block.lz4"");"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,38,try (FileInputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,39,FileOutputStream os = new FileOutputStream(outputSz);
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,40,BlockLZ4CompressorOutputStream los = new BlockLZ4CompressorOutputStream(os)) {
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,41,"IOUtils.copy(is, los);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,43,"System.err.println(input.getName() + "" written, uncompressed bytes: "" + input.length()"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,44,"+ "", compressed bytes: "" + outputSz.length() + "" after "" + (System.currentTimeMillis() - start) + ""ms"");"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,45,start = System.currentTimeMillis();
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,46,try (FileInputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,47,BlockLZ4CompressorInputStream sis = new BlockLZ4CompressorInputStream(new FileInputStream(outputSz))) {
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,48,byte[] expected = IOUtils.toByteArray(is);
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,49,byte[] actual = IOUtils.toByteArray(sis);
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,50,"Assert.assertArrayEquals(expected, actual);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,52,"System.err.println(outputSz.getName() + "" read after "" + (System.currentTimeMillis() - start) + ""ms"");"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,55,// should yield decent compression
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,56,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,57,public void blaTarRoundtrip() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,58,"roundTripTest(""bla.tar"");"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,61,// yields no compression at all
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,62,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,63,public void gzippedLoremIpsumRoundtrip() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,64,"roundTripTest(""lorem-ipsum.txt.gz"");"
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,67,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,68,public void biggerFileRoundtrip() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java,69,"roundTripTest(""COMPRESS-256.7z"");"

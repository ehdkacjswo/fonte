is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,22,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,24,import org.apache.commons.compress.compressors.CompressorInputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,27,"* Input stream that decompresses ZIP method 1 (unshrinking). A variation of the LZW algorithm, with some twists."
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,28,* @NotThreadSafe
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,29,* @since 1.7
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,31,public class UnshrinkingInputStream extends CompressorInputStream {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,32,private final InputStream in;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,33,private final int clearCode;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,34,private final int MAX_CODE_SIZE = 13;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,35,private int codeSize = 9;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,36,private int bitsCached = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,37,private int bitsCachedSize = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,38,private int previousCode = -1;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,39,private int tableSize = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,40,private final int[] prefixes;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,41,private final byte[] characters;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,42,private final boolean[] isUsed;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,43,private final byte[] outputStack;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,44,private int outputStackLocation;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,46,public UnshrinkingInputStream(InputStream inputStream) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,47,this.in = inputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,48,clearCode = (1 << (codeSize - 1));
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,49,final int maxTableSize = 1 << MAX_CODE_SIZE;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,50,prefixes = new int[maxTableSize];
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,51,characters = new byte[maxTableSize];
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,52,isUsed = new boolean[maxTableSize];
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,53,outputStack = new byte[maxTableSize];
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,54,outputStackLocation = maxTableSize;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,55,for (int i = 0; i < (1 << 8); i++) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,56,prefixes[i] = -1;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,57,characters[i] = (byte)i;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,58,isUsed[i] = true;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,60,tableSize = clearCode + 1;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,63,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,64,in.close();
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,67,private int readNextCode() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,68,while (bitsCachedSize < codeSize) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,69,final int nextByte = in.read();
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,70,if (nextByte < 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,71,return nextByte;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,73,bitsCached |= (nextByte << bitsCachedSize);
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,74,bitsCachedSize += 8;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,76,final int mask = (1 << codeSize) - 1;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,77,final int code = (bitsCached & mask);
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,78,bitsCached >>>= codeSize;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,79,bitsCachedSize -= codeSize;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,80,return code;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,83,"private int addEntry(int previousCode, byte character) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,84,final int maxTableSize = 1 << MAX_CODE_SIZE;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,85,while ((tableSize < maxTableSize) && isUsed[tableSize]) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,86,tableSize++;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,88,if (tableSize < maxTableSize) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,89,final int index = tableSize;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,90,prefixes[tableSize] = previousCode;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,91,characters[tableSize] = character;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,92,isUsed[tableSize] = true;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,93,tableSize++;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,94,return index;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,95,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,96,return -1;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,100,private void partialClear() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,101,final boolean[] isParent = new boolean[1 << MAX_CODE_SIZE];
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,102,for (int i = 0; i < isUsed.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,103,if (isUsed[i] && prefixes[i] != -1) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,104,isParent[prefixes[i]] = true;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,107,for (int i = clearCode + 1; i < isParent.length; i++) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,108,if (!isParent[i]) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,109,isUsed[i] = false;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,110,prefixes[i] = -1;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,115,private int decompressNextSymbol() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,117,//                   table entry    table entry
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,119,//    table entry  /             \ /     \
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,126,//     symbol        symbol      symbol  symbol
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,128,final int code = readNextCode();
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,129,if (code < 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,130,return -1;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,131,} else if (code == clearCode) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,132,final int subCode = readNextCode();
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,133,if (subCode < 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,134,"throw new IOException(""Unexpected EOF;"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,135,} else if (subCode == 1) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,136,if (codeSize < MAX_CODE_SIZE) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,137,codeSize++;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,138,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,139,"throw new IOException(""Attempt to increase code size beyond maximum"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,141,} else if (subCode == 2) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,142,partialClear();
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,143,tableSize = clearCode + 1;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,144,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,145,"throw new IOException(""Invalid clear code subcode "" + subCode);"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,147,return 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,148,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,149,boolean addedUnfinishedEntry = false;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,150,final int effectiveCode;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,151,if (isUsed[code]) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,152,effectiveCode = code;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,153,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,154,// must be a repeat of the previous entry we haven't added yet
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,155,if (previousCode == -1) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,156,// ... which isn't possible for the very first code
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,157,"throw new IOException(""The first code can't be a reference to its preceding code"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,159,byte firstCharacter = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,160,for (int last = previousCode; last >= 0; last = prefixes[last]) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,161,firstCharacter = characters[last];
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,163,"effectiveCode = addEntry(previousCode, firstCharacter);"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,164,addedUnfinishedEntry = true;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,166,for (int entry = effectiveCode; entry >= 0; entry = prefixes[entry]) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,167,outputStack[--outputStackLocation] = characters[entry];
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,169,if (previousCode != -1 && !addedUnfinishedEntry) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,170,"addEntry(previousCode, outputStack[outputStackLocation]);"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,172,previousCode = code;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,173,return outputStackLocation;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,177,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,178,byte[] b = new byte[1];
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,179,int ret;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,180,while ((ret = read(b)) == 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,182,if (ret < 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,183,return ret;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,185,return 0xff & b[0];
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,188,"public int read(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,189,int bytesRead = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,190,int remainingInStack = outputStack.length - outputStackLocation;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,191,if (remainingInStack > 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,192,"int maxLength = Math.min(remainingInStack, len);"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,193,"System.arraycopy(outputStack, outputStackLocation, b, off, maxLength);"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,194,outputStackLocation += maxLength;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,195,off += maxLength;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,196,len -= maxLength;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,197,bytesRead += maxLength;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,199,while (len > 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,200,int result = decompressNextSymbol();
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,201,if (result < 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,202,if (bytesRead > 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,203,count(bytesRead);
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,204,return bytesRead;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,205,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,206,return result;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,209,remainingInStack = outputStack.length - outputStackLocation;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,210,if (remainingInStack > 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,211,"int maxLength = Math.min(remainingInStack, len);"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,212,"System.arraycopy(outputStack, outputStackLocation, b, off, maxLength);"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,213,outputStackLocation += maxLength;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,214,off += maxLength;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,215,len -= maxLength;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,216,bytesRead += maxLength;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,219,count(bytesRead);
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,220,return bytesRead;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,377,witch (ze.getMethod()) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,378,ase ZipEntry.STORED:
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,377,switch (ZipMethod.getMethodByCode(ze.getMethod())) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,378,case STORED:
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,380,ase ZipEntry.DEFLATED:
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,380,case UNSHRINKING:
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,381,return new UnshrinkingInputStream(bis);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,382,case DEFLATED:
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,305,|| entry.getMethod() == ZipMethod.UNSHRINKING.getCode()
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,165,"hrow new IOException(""The first code can't be a reference to code before itself"");"
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,165,"throw new IOException(""The first code can't be a reference to its preceding code"");"

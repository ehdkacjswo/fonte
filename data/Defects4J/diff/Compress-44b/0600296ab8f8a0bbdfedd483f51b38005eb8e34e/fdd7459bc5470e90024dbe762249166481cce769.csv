is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,37,*  CompressCommons
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,54," <p>Which results in a new text ""s romooCCmmpnse"", in adition the"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,55,"* <p>Which results in a new text ""ss romooCCmmpnse"", in adition the"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,56, in this case it is 0.  The idea is that in a long English text all
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,57,* in this case it is 1.  The idea is that in a long English text all
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,104, I've added the fallbackSort function of 1.0.6.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,105,* I've added the fallbackSort function of 1.0.6 and tried to
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,106,* integrate it with the existing code without touching too much.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,160,if (last + 1 < 10000) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,161,"fallbackSort(data, last);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,162,} else {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,160,"andomiseBlock(data, last);"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,161,his.workLimit = this.workDone = 0;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,162,his.firstAttempt = false;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,163,"ainSort(data, last);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,167,"fallbackSort(data, last);"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,176,eturn blockRandomised;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,181,return false;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,185,* Adapt fallbackSort to the expected interface of the rest of the
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,186,"* code, in particular deal with the fact that block starts at"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,187,* offset 1 (in libbzip2 1.0.6 it starts at 0).
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,189,"final void fallbackSort(final BZip2CompressorOutputStream.Data data,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,190,final int last) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,191,data.block[0] = data.block[last + 1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,192,"fallbackSort(data.fmap, data.block, last + 1);"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,193,for (int i = 0; i < last + 1; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,194,--data.fmap[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,196,for (int i = 0; i < last + 1; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,197,if (data.fmap[i] == -1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,198,data.fmap[i] = last;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,199,break;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,418, The C code uses an array of ints to represents the bucket-start
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,419, flags (bhtab).  It also contains optimizations to skip over 32
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,420, consecutively set or consecutively unset bits on word
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,421, boundaries at once.  For now I've chosen to use the simpler but
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,422, potentially slower code using BitSet - also in the hope that
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,423, using the BitSet#nextXXX methods may be fast enough.
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,443,* The C code uses an array of ints (each int holding 32 flags) to
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,444,* represents the bucket-start flags (bhtab).  It also contains
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,445,* optimizations to skip over 32 consecutively set or
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,446,* consecutively unset bits on word boundaries at once.  For now
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,447,* I've chosen to use the simpler but potentially slower code
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,448,* using BitSet - also in the hope that using the BitSet#nextXXX
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,449,* methods may be fast enough.
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,435,nt[] ftab = new int[257];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,461,final int[] ftab = new int[257];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,465,final int[] eclass = getEclass();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,467,for (i = 0; i < nblock; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,468,eclass[i] = 0;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,444,or (i = 0; i < nblock; i++) ftab[block[i] & 0xff]++;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,474,for (i = 0; i < nblock; i++) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,475,ftab[block[i] & 0xff]++;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,470,class = getEclass();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,494, = bhtab.nextSetBit(k);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,524,k = bhtab.nextClearBit(k);
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,497, = bhtab.nextClearBit(k);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,527,k = bhtab.nextSetBit(k + 1);
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,865,"rivate void mainSort(final BZip2CompressorOutputStream.Data dataShadow,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,866,inal int lastShadow) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,895,"final void mainSort(final BZip2CompressorOutputStream.Data dataShadow,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,896,final int lastShadow) {
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,73,private static final byte[] FIXTURE2 = {
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,74,"'C', 'o', 'm', 'm', 'o', 'n', 's', ' ', 'C', 'o', 'm', 'p', 'r', 'e', 's', 's',"
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,77,private static final byte[] FIXTURE2_BWT = {
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,78,"'s', 's', ' ', 'r', 'o', 'm', 'o', 'o', 'C', 'C', 'm', 'm', 'p', 'n', 's', 'e',"
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,75,Zip2CompressorOutputStream.Data data = new BZip2CompressorOutputStream.Data(1);
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,76,"ystem.arraycopy(FIXTURE, 0, data.block, 1, FIXTURE.length);"
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,77,lockSort s = new BlockSort(data);
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,78,"ssertFalse(s.blockSort(data, FIXTURE.length - 1));"
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,79,"ssertEquals(FIXTURE[FIXTURE.length - 1], data.block[0]);"
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,80,or (int i = 0; i < FIXTURE.length; i++) {
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,81,"ssertEquals(FIXTURE_BWT[i], data.block[data.fmap[i]]);"
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,83,"ssertEquals(0, data.origPtr);"
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,83,DS ds = setUpFixture();
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,84,"assertFalse(ds.s.blockSort(ds.data, FIXTURE.length - 1));"
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,85,assertFixtureSorted(ds.data);
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,86,"assertEquals(0, ds.data.origPtr);"
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,89,@Test
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,90,public void testSortFixtureMainSort() {
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,91,DS ds = setUpFixture();
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,92,"ds.s.mainSort(ds.data, FIXTURE.length - 1);"
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,93,assertFixtureSorted(ds.data);
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,96,@Test
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,97,public void testSortFixtureFallbackSort() {
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,98,DS ds = setUpFixture();
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,99,"ds.s.fallbackSort(ds.data, FIXTURE.length - 1);"
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,100,assertFixtureSorted(ds.data);
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,103,@Test
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,104,public void testSortFixture2() {
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,105,DS ds = setUpFixture2();
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,106,"assertFalse(ds.s.blockSort(ds.data, FIXTURE2.length - 1));"
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,107,assertFixture2Sorted(ds.data);
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,108,"assertEquals(1, ds.data.origPtr);"
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,111,@Test
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,112,public void testSortFixture2MainSort() {
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,113,DS ds = setUpFixture2();
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,114,"ds.s.mainSort(ds.data, FIXTURE2.length - 1);"
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,115,assertFixture2Sorted(ds.data);
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,118,@Test
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,119,public void testSortFixture2FallbackSort() {
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,120,DS ds = setUpFixture2();
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,121,"ds.s.fallbackSort(ds.data, FIXTURE2.length - 1);"
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,122,assertFixture2Sorted(ds.data);
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,134,private DS setUpFixture() {
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,135,return setUpFixture(FIXTURE);
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,138,private void assertFixtureSorted(BZip2CompressorOutputStream.Data data) {
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,139,"assertFixtureSorted(data, FIXTURE, FIXTURE_BWT);"
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,142,private DS setUpFixture2() {
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,143,return setUpFixture(FIXTURE2);
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,146,private void assertFixture2Sorted(BZip2CompressorOutputStream.Data data) {
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,147,"assertFixtureSorted(data, FIXTURE2, FIXTURE2_BWT);"
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,150,private DS setUpFixture(byte[] fixture) {
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,151,BZip2CompressorOutputStream.Data data = new BZip2CompressorOutputStream.Data(1);
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,152,"System.arraycopy(fixture, 0, data.block, 1, fixture.length);"
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,153,"return new DS(data, new BlockSort(data));"
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,156,"private void assertFixtureSorted(BZip2CompressorOutputStream.Data data,"
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,157,"byte[] fixture, byte[] fixtureBwt) {"
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,158,"assertEquals(fixture[fixture.length - 1], data.block[0]);"
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,159,for (int i = 0; i < fixture.length; i++) {
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,160,"assertEquals(fixtureBwt[i], data.block[data.fmap[i]]);"
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,164,private static class DS {
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,165,private final BZip2CompressorOutputStream.Data data;
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,166,private final BlockSort s;
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,167,"DS(BZip2CompressorOutputStream.Data data, BlockSort s) {"
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,168,this.data = data;
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,169,this.s = s;

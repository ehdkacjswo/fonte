is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,47,inal InputStream fis = new BufferedInputStream(new FileInputStream(f));
False,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,48,rchiveInputStream ais;
True,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,47,try (final InputStream fis = new BufferedInputStream(new FileInputStream(f));
True,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,48,"final ArchiveInputStream ais = createArchiveInputStream(args, fis)) {"
True,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,49,"System.out.println(""Created "" + ais.toString());"
True,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,50,ArchiveEntry ae;
True,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,51,while ((ae = ais.getNextEntry()) != null) {
True,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,52,System.out.println(ae.getName());
True,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,57,"private static ArchiveInputStream createArchiveInputStream(final String[] args, final InputStream fis)"
True,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,58,throws ArchiveException {
False,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,50,"is = factory.createArchiveInputStream(args[1], fis);"
True,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,60,"return factory.createArchiveInputStream(args[1], fis);"
False,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,52,is = factory.createArchiveInputStream(fis);
False,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,54,"ystem.out.println(""Created "" + ais.toString());"
False,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,55,rchiveEntry ae;
False,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,56,hile ((ae = ais.getNextEntry()) != null) {
False,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,57,ystem.out.println(ae.getName());
True,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,62,return factory.createArchiveInputStream(fis);
False,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,59,is.close();
False,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,60,is.close();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,85,inal FileOutputStream fos = new FileOutputStream(outFile);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,86,ry {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,85,try (final FileOutputStream fos = new FileOutputStream(outFile)) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,102, finally {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,103,os.close();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,130,inal SevenZFile archive = new SevenZFile(f);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,131,ry {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,127,try (final SevenZFile archive = new SevenZFile(f)) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,136, finally {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,137,rchive.close();
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,113,inal InputStream data = backingStore.getInputStream();
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,114,or (final CompressedEntry compressedEntry : items) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,115,"inal BoundedInputStream rawStream = new BoundedInputStream(data, compressedEntry.compressedSize);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,116,"arget.addRawArchiveEntry(compressedEntry.transferToArchiveEntry(), rawStream);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,117,awStream.close();
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,113,try (final InputStream data = backingStore.getInputStream()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,114,for (final CompressedEntry compressedEntry : items) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,115,"try (final BoundedInputStream rawStream = new BoundedInputStream(data,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,116,compressedEntry.compressedSize)) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,117,"target.addRawArchiveEntry(compressedEntry.transferToArchiveEntry(), rawStream);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,119,ata.close();

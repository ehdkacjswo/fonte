is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,219,inal DataInputStream basicHeader = new DataInputStream(
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,220,ew ByteArrayInputStream(basicHeaderBytes));
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,222,inal int firstHeaderSize = basicHeader.readUnsignedByte();
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,223,inal byte[] firstHeaderBytes = new byte[firstHeaderSize - 1];
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,224,asicHeader.readFully(firstHeaderBytes);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,225,inal DataInputStream firstHeader = new DataInputStream(
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,226,ew ByteArrayInputStream(firstHeaderBytes));
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,219,try (final DataInputStream basicHeader = new DataInputStream(new ByteArrayInputStream(basicHeaderBytes))) {
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,228,inal LocalFileHeader localFileHeader = new LocalFileHeader();
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,229,ocalFileHeader.archiverVersionNumber = firstHeader.readUnsignedByte();
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,230,ocalFileHeader.minVersionToExtract = firstHeader.readUnsignedByte();
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,231,ocalFileHeader.hostOS = firstHeader.readUnsignedByte();
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,232,ocalFileHeader.arjFlags = firstHeader.readUnsignedByte();
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,233,ocalFileHeader.method = firstHeader.readUnsignedByte();
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,234,ocalFileHeader.fileType = firstHeader.readUnsignedByte();
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,235,ocalFileHeader.reserved = firstHeader.readUnsignedByte();
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,236,ocalFileHeader.dateTimeModified = read32(firstHeader);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,237,ocalFileHeader.compressedSize = 0xffffFFFFL & read32(firstHeader);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,238,ocalFileHeader.originalSize = 0xffffFFFFL & read32(firstHeader);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,239,ocalFileHeader.originalCrc32 = 0xffffFFFFL & read32(firstHeader);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,240,ocalFileHeader.fileSpecPosition = read16(firstHeader);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,241,ocalFileHeader.fileAccessMode = read16(firstHeader);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,242,ushedBackBytes(20);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,243,ocalFileHeader.firstChapter = firstHeader.readUnsignedByte();
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,244,ocalFileHeader.lastChapter = firstHeader.readUnsignedByte();
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,246,"eadExtraData(firstHeaderSize, firstHeader, localFileHeader);"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,221,final int firstHeaderSize = basicHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,222,final byte[] firstHeaderBytes = new byte[firstHeaderSize - 1];
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,223,basicHeader.readFully(firstHeaderBytes);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,224,try (final DataInputStream firstHeader = new DataInputStream(new ByteArrayInputStream(firstHeaderBytes))) {
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,248,ocalFileHeader.name = readString(basicHeader);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,249,ocalFileHeader.comment = readString(basicHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,226,final LocalFileHeader localFileHeader = new LocalFileHeader();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,227,localFileHeader.archiverVersionNumber = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,228,localFileHeader.minVersionToExtract = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,229,localFileHeader.hostOS = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,230,localFileHeader.arjFlags = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,231,localFileHeader.method = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,232,localFileHeader.fileType = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,233,localFileHeader.reserved = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,234,localFileHeader.dateTimeModified = read32(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,235,localFileHeader.compressedSize = 0xffffFFFFL & read32(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,236,localFileHeader.originalSize = 0xffffFFFFL & read32(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,237,localFileHeader.originalCrc32 = 0xffffFFFFL & read32(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,238,localFileHeader.fileSpecPosition = read16(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,239,localFileHeader.fileAccessMode = read16(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,240,pushedBackBytes(20);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,241,localFileHeader.firstChapter = firstHeader.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,242,localFileHeader.lastChapter = firstHeader.readUnsignedByte();
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,251,inal ArrayList<byte[]> extendedHeaders = new ArrayList<>();
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,252,nt extendedHeaderSize;
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,253,hile ((extendedHeaderSize = read16(in)) > 0) {
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,254,inal byte[] extendedHeaderBytes = new byte[extendedHeaderSize];
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,255,"eadFully(in, extendedHeaderBytes);"
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,256,inal long extendedHeaderCrc32 = 0xffffFFFFL & read32(in);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,257,inal CRC32 crc32 = new CRC32();
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,258,rc32.update(extendedHeaderBytes);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,259,f (extendedHeaderCrc32 != crc32.getValue()) {
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,260,"hrow new IOException(""Extended header CRC32 verification failure"");"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,244,"readExtraData(firstHeaderSize, firstHeader, localFileHeader);"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,246,localFileHeader.name = readString(basicHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,247,localFileHeader.comment = readString(basicHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,249,final ArrayList<byte[]> extendedHeaders = new ArrayList<>();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,250,int extendedHeaderSize;
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,251,while ((extendedHeaderSize = read16(in)) > 0) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,252,final byte[] extendedHeaderBytes = new byte[extendedHeaderSize];
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,253,"readFully(in, extendedHeaderBytes);"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,254,final long extendedHeaderCrc32 = 0xffffFFFFL & read32(in);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,255,final CRC32 crc32 = new CRC32();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,256,crc32.update(extendedHeaderBytes);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,257,if (extendedHeaderCrc32 != crc32.getValue()) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,258,"throw new IOException(""Extended header CRC32 verification failure"");"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,260,extendedHeaders.add(extendedHeaderBytes);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,262,localFileHeader.extendedHeaders = extendedHeaders.toArray(new byte[extendedHeaders.size()][]);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,264,return localFileHeader;
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,262,xtendedHeaders.add(extendedHeaderBytes);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,264,ocalFileHeader.extendedHeaders = extendedHeaders.toArray(new byte[extendedHeaders.size()][]);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,266,eturn localFileHeader;

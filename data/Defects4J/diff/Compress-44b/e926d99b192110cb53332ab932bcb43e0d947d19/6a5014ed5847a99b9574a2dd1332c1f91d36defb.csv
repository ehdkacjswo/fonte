is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,9,*   http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,19,package org.apache.commons.compress.utils;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,22,import java.nio.ByteBuffer;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,23,import java.nio.channels.ClosedChannelException;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,24,import java.nio.channels.NonWritableChannelException;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,25,import java.nio.channels.SeekableByteChannel;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,28,* A {@link SeekableByteChannel} implementation that wraps a byte[].
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,30,public class SeekableInMemoryByteChannel implements SeekableByteChannel {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,32,private final byte[] data;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,33,private volatile boolean closed;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,34,"private volatile long position, size;"
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,36,public SeekableInMemoryByteChannel(byte[] data) {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,37,this.data = data;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,38,size = data.length;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,41,@Override
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,42,public long position() {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,43,return position;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,46,@Override
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,47,public SeekableByteChannel position(long newPosition) {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,48,position = newPosition;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,49,return this;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,52,@Override
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,53,public long size() {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,54,return size;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,57,@Override
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,58,public SeekableByteChannel truncate(long newSize) {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,59,size = newSize;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,60,return this;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,63,@Override
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,64,public int read(ByteBuffer buf) throws IOException {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,65,if (!isOpen()) {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,66,throw new ClosedChannelException();
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,68,long pos = position;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,69,long sz = size;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,70,int wanted = buf.remaining();
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,71,long possible = sz - pos;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,72,if (wanted > possible) {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,73,wanted = (int) possible;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,75,"buf.put(data, (int) pos, wanted);"
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,76,position = pos + wanted;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,77,return wanted;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,80,@Override
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,81,public void close() {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,82,closed = true;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,85,@Override
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,86,public boolean isOpen() {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,87,return !closed;
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,90,// TODO implement writing
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,91,@Override
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,92,public int write(ByteBuffer b) throws IOException {
True,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java,93,throw new NonWritableChannelException();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,24,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,37,import org.apache.commons.compress.utils.IOUtils;
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,38,import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,245,@Test
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,246,public void getEntriesOfUnarchiveInMemoryTest() throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,247,byte[] data = null;
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,248,"try (FileInputStream fis = new FileInputStream(getFile(""bla.7z""))) {"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,249,data = IOUtils.toByteArray(fis);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,251,"try (SevenZFile sevenZFile = new SevenZFile(new SeekableInMemoryByteChannel(data),"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,252,"""in memory"", null)) {"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,253,final Iterable<SevenZArchiveEntry> entries = sevenZFile.getEntries();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,254,final Iterator<SevenZArchiveEntry> iter = entries.iterator();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,255,SevenZArchiveEntry entry = iter.next();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,256,"assertEquals(""test1.xml"", entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,257,entry = iter.next();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,258,"assertEquals(""test2.xml"", entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,259,assertFalse(iter.hasNext());
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,37,import org.apache.commons.compress.utils.SeekableInMemoryByteChannel;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,78,@Test
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,79,public void testCDOrderInMemory() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,80,byte[] data = null;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,81,"try (FileInputStream fis = new FileInputStream(getFile(""ordertest.zip""))) {"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,82,data = IOUtils.toByteArray(fis);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,85,"zf = new ZipFile(new SeekableInMemoryByteChannel(data), ""in memory"","
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,86,"ZipEncodingHelper.UTF8, true);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,87,final ArrayList<ZipArchiveEntry> l = Collections.list(zf.getEntries());
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,88,"assertEntryName(l, 0, ""AbstractUnicodeExtraField"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,89,"assertEntryName(l, 1, ""AsiExtraField"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,90,"assertEntryName(l, 2, ""ExtraFieldUtils"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,91,"assertEntryName(l, 3, ""FallbackZipEncoding"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,92,"assertEntryName(l, 4, ""GeneralPurposeBit"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,93,"assertEntryName(l, 5, ""JarMarker"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,94,"assertEntryName(l, 6, ""NioZipEncoding"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,95,"assertEntryName(l, 7, ""Simple8BitZipEncoding"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,96,"assertEntryName(l, 8, ""UnicodeCommentExtraField"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,97,"assertEntryName(l, 9, ""UnicodePathExtraField"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,98,"assertEntryName(l, 10, ""UnixStat"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,99,"assertEntryName(l, 11, ""UnparseableExtraFieldData"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,100,"assertEntryName(l, 12, ""UnrecognizedExtraField"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,101,"assertEntryName(l, 13, ""ZipArchiveEntry"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,102,"assertEntryName(l, 14, ""ZipArchiveInputStream"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,103,"assertEntryName(l, 15, ""ZipArchiveOutputStream"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,104,"assertEntryName(l, 16, ""ZipEncoding"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,105,"assertEntryName(l, 17, ""ZipEncodingHelper"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,106,"assertEntryName(l, 18, ""ZipExtraField"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,107,"assertEntryName(l, 19, ""ZipUtil"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,108,"assertEntryName(l, 20, ""ZipLong"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,109,"assertEntryName(l, 21, ""ZipShort"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,110,"assertEntryName(l, 22, ""ZipFile"");"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,361,"older.getUnpackSizeForCoder(coder), coder, password);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,361,"folder.getUnpackSizeForCoder(coder), coder, password); //NOSONAR"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,182,f (fileBytesWritten > 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,182,if (fileBytesWritten > 0) { // this implies currentOutputStream != null
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,185,ntry.setSize(currentOutputStream.getBytesWritten());
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,185,entry.setSize(currentOutputStream.getBytesWritten()); //NOSONAR
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,623,kip(Long.MAX_VALUE);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,623,// this is guaranteed to exhaust the stream
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,624,skip(Long.MAX_VALUE); //NOSONAR
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,486,"// doesn't get closed if the method is not supported, but doesn't hold any resources either"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,487,"ew BoundedInputStream(start, ze.getCompressedSize());"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,488,"new BoundedInputStream(start, ze.getCompressedSize()); //NOSONAR"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,648,f ((j -= h) <= mj) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,648,if ((j -= h) <= mj) { //NOSONAR
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,666,f (block[(i1 += 6)] == block[(i2 += 6)]) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,666,if (block[(i1 += 6)] == block[(i2 += 6)]) { //NOSONAR
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,679,f ((i1 += 4) >= lastPlus1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,679,if ((i1 += 4) >= lastPlus1) { //NOSONAR
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,682,f ((i2 += 4) >= lastPlus1) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,682,if ((i2 += 4) >= lastPlus1) { //NOSONAR
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,976,or (int h = 364; h != 1;) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,976,"// h = 364, 121, 40, 13, 4, 1"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,977,for (int h = 364; h != 1;) { //NOSONAR
False,src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java,src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java,63,inal int c1 =(b[off+1] ^ (localCrc >>>= 8)) & 0xff;
False,src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java,src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java,64,inal int c2 =(b[off+2] ^ (localCrc >>>= 8)) & 0xff;
False,src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java,src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java,65,inal int c3 =(b[off+3] ^ (localCrc >>>= 8)) & 0xff;
True,src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java,src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java,63,final int c1 =(b[off+1] ^ (localCrc >>>= 8)) & 0xff; //NOSONAR
True,src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java,src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java,64,final int c2 =(b[off+2] ^ (localCrc >>>= 8)) & 0xff; //NOSONAR
True,src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java,src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java,65,final int c3 =(b[off+3] ^ (localCrc >>>= 8)) & 0xff; //NOSONAR

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,225, catch (Exception e) { // can generate IllegalArgumentException as well as IOException
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,225,} catch (Exception e) { // NOPMD
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,226,// can generate IllegalArgumentException as well as IOException
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,227,"// autodetection, simply not a TAR"
False,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,26,mport org.apache.commons.compress.archivers.ArchiveEntry;
False,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,27,mport org.apache.commons.compress.archivers.ArchiveInputStream;
False,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,28,mport org.apache.commons.compress.archivers.ArchiveStreamFactory;
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,101,f (offset % 2 != 0) {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,102,f (read() < 0) {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,103,/ hit eof
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,104,eturn null;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,101,if (offset % 2 != 0 && read() < 0) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,102,// hit eof
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,103,return null;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,133,"hile (read(this.tmpbuf, 0, this.tmpbuf.length) != -1) {"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,133,"while (read(this.tmpbuf, 0, this.tmpbuf.length) != -1) { // NOPMD"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,240,f (this.entry.getFormat() == FORMAT_NEW_CRC) {
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,241,f (this.crc != this.entry.getChksum()) {
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,242,"hrow new IOException(""CRC Error. Occured at byte: "" + getBytesRead());"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,240,if (this.entry.getFormat() == FORMAT_NEW_CRC
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,241,&& this.crc != this.entry.getChksum()) {
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,242,"throw new IOException(""CRC Error. Occured at byte: """
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,243,+ getBytesRead());
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,337,f (this.entry.getFormat() == FORMAT_NEW_CRC) {
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,338,f (this.crc != this.entry.getChksum()) {
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,339,"hrow new IOException(""CRC Error"");"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,337,if (this.entry.getFormat() == FORMAT_NEW_CRC
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,338,&& this.crc != this.entry.getChksum()) {
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,339,"throw new IOException(""CRC Error"");"
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,69,* (non-Javadoc)
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,70, @see org.apache.commons.compress.archivers.zip.ZipArchiveEntry#equals(java.lang.Object)
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,72,ublic boolean equals(Object obj) {
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,73,eturn super.equals(obj);
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,76,* (non-Javadoc)
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,77, @see org.apache.commons.compress.archivers.zip.ZipArchiveEntry#hashCode()
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,79,ublic int hashCode() {
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,80,eturn super.hashCode();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,176,f (currRecIdx >= recsPerBlock) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,177,f (!readBlock()) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,178,eturn;    // UNDONE
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,176,if (currRecIdx >= recsPerBlock && !readBlock()) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,177,return;    // UNDONE
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,199,f (currRecIdx >= recsPerBlock) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,200,f (!readBlock()) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,201,eturn null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,197,if (currRecIdx >= recsPerBlock && !readBlock()) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,198,return null;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,411,nStream = null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,407,inStream = null;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,531,f (length > 0) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,532,f (!def.finished()) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,533,f (length <= DEFLATER_BLOCK_SIZE) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,534,"ef.setInput(b, offset, length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,531,if (length > 0 && !def.finished()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,532,if (length <= DEFLATER_BLOCK_SIZE) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,533,"def.setInput(b, offset, length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,534,deflateUntilInputIsNeeded();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,535,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,536,final int fullblocks = length / DEFLATER_BLOCK_SIZE;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,537,for (int i = 0; i < fullblocks; i++) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,538,"def.setInput(b, offset + i * DEFLATER_BLOCK_SIZE,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,539,DEFLATER_BLOCK_SIZE);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,540,deflateUntilInputIsNeeded();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,542,final int done = fullblocks * DEFLATER_BLOCK_SIZE;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,543,if (done < length) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,544,"def.setInput(b, offset + done, length - done);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,536, else {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,537,inal int fullblocks = length / DEFLATER_BLOCK_SIZE;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,538,or (int i = 0; i < fullblocks; i++) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,539,"ef.setInput(b, offset + i * DEFLATER_BLOCK_SIZE,"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,540,EFLATER_BLOCK_SIZE);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,541,eflateUntilInputIsNeeded();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,543,inal int done = fullblocks * DEFLATER_BLOCK_SIZE;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,544,f (done < length) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,545,"ef.setInput(b, offset + done, length - done);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,546,eflateUntilInputIsNeeded();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,203, catch (IOException e2) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,203,} catch (IOException e2) { // NOPMD
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,241, catch (IOException e) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,242,/ignore
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,241,} catch (IOException e) { // NOPMD
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,242,"//ignore, that's why the method is called ""quietly"""
False,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,99, else if(type == Change.TYPE_DELETE_DIR && name != null) {
False,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,100,"f (name.startsWith(change.targetFile() + ""/"")) {"
True,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,99,} else if (type == Change.TYPE_DELETE_DIR && name != null) {
True,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,100,// don't combine ifs to make future extensions more easy
True,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,101,"if (name.startsWith(change.targetFile() + ""/"")) { // NOPMD"
False,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,108,f (copy) {
False,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,109,"f (!isDeletedLater(workingSet, entry) && !results.hasBeenAdded(entry.getName())) {"
False,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,110,"opyStream(in, out, entry);"
False,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,111,esults.addedFromStream(entry.getName());
True,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,109,if (copy
True,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,110,"&& !isDeletedLater(workingSet, entry)"
True,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,111,&& !results.hasBeenAdded(entry.getName())) {
True,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,112,"copyStream(in, out, entry);"
True,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,113,results.addedFromStream(entry.getName());
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,945,inal int[] initTT(int length) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,945,int[] initTT(int length) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,775,endMTFValues7(nSelectors);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,775,sendMTFValues7();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1128,rivate void sendMTFValues7(final int nSelectors) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1128,private void sendMTFValues7() throws IOException {

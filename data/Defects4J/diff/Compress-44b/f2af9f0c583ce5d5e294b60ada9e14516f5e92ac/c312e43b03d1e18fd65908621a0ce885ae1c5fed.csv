is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,55,egister(PaddingExtraField.class);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,55,register(ResourceAlignmentExtraField.class);
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,3, or more contributor license agreements.  See the NOTICE file
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,4, distributed with this work for additional information
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,6," to you under the Apache License, Version 2.0 (the"
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,7," ""License""); you may not use this file except in compliance"
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,8, with the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,12," Unless required by applicable law or agreed to in writing,"
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,13, software distributed under the License is distributed on an
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,15," KIND, either express or implied.  See the License for the"
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,16, specific language governing permissions and limitations
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,17, under the License.
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,19,ackage org.apache.commons.compress.archivers.zip;
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,21,mport java.util.zip.ZipException;
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,24, An extra field who's sole purpose is to pad the local file header
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,25, so that the entry's data starts at a certain position.
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,27, <p>The actual content of the padding is ignored and not retained
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,28, when reading a padding field.</p>
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,30," <p>This enables Commons Compress to create ""aligned"" archives"
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,31, similar to Android's zipalign command line tool.</p>
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,33, @since 1.14
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,34," @see ""https://developer.android.com/studio/command-line/zipalign.html"""
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,35, @see ZipArchiveEntry#setAlignment
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,37,ublic class PaddingExtraField implements ZipExtraField {
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,40," Extra field id used for padding (there is no special value documented,"
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,41, therefore USHORT_MAX seems to be good choice).
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,43,ublic static final ZipShort ID = new ZipShort(0xffff);
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,45,rivate int len = 0;
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,47,ublic PaddingExtraField() {
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,50,ublic PaddingExtraField(int len) {
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,51,his.len = len;
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,54,Override
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,55,ublic ZipShort getHeaderId() {
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,56,eturn ID;
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,59,Override
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,60,ublic ZipShort getLocalFileDataLength() {
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,61,eturn new ZipShort(len);
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,64,Override
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,65,ublic ZipShort getCentralDirectoryLength() {
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,66,eturn ZipShort.ZERO;
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,69,Override
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,70,ublic byte[] getLocalFileDataData() {
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,71,eturn new byte[len];
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,74,Override
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,75,ublic byte[] getCentralDirectoryData() {
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,76,eturn new byte[0];
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,79,Override
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,80,"ublic void parseFromLocalFileData(byte[] buffer, int offset, int length) {"
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,81,en = length;
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,84,Override
False,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java,85,"ublic void parseFromCentralDirectoryData(byte[] buffer, int offset, int length) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,19,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,22,import java.util.zip.ZipException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,25,* An extra field who's sole purpose is to align and pad the local file header
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,26,* so that the entry's data starts at a certain position.
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,28,* <p>The padding content of the padding is ignored and not retained
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,29,* when reading a padding field.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,31,"* <p>This enables Commons Compress to create ""aligned"" archives"
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,32,* similar to Android's zipalign command line tool.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,34,* @since 1.14
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,35,"* @see ""https://developer.android.com/studio/command-line/zipalign.html"""
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,36,* @see ZipArchiveEntry#setAlignment
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,38,public class ResourceAlignmentExtraField implements ZipExtraField {
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,41,* Extra field id used for storing alignment and padding.
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,43,public static final ZipShort ID = new ZipShort(0xa11e);
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,45,public static final int BASE_SIZE = 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,47,private short alignment;
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,49,private boolean allowMethodChange;
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,51,private int padding = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,53,public ResourceAlignmentExtraField() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,56,public ResourceAlignmentExtraField(int alignment) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,57,"this(alignment, false);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,60,"public ResourceAlignmentExtraField(int alignment, boolean allowMethodChange) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,61,"this(alignment, allowMethodChange, 0);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,64,"public ResourceAlignmentExtraField(int alignment, boolean allowMethodChange, int padding) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,65,if (alignment < 0 || alignment > 0x7fff)
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,66,"throw new IllegalArgumentException(""Alignment must be between 0 and 0x7fff, was: "" + alignment);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,67,this.alignment = (short) alignment;
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,68,this.allowMethodChange = allowMethodChange;
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,69,this.padding = padding;
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,73,* Gets requested alignment.
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,75,* @return
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,76,*      requested alignment.
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,78,public short getAlignment() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,79,return alignment;
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,83,* Indicates whether method change is allowed when re-compressing the zip file.
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,85,* @return
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,86,"*      true if method change is allowed, false otherwise."
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,88,public boolean allowMethodChange() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,89,return allowMethodChange;
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,92,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,93,public ZipShort getHeaderId() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,94,return ID;
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,97,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,98,public ZipShort getLocalFileDataLength() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,99,return new ZipShort(BASE_SIZE + padding);
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,102,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,103,public ZipShort getCentralDirectoryLength() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,104,return new ZipShort(BASE_SIZE);
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,107,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,108,public byte[] getLocalFileDataData() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,109,byte[] content = new byte[2+padding];
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,110,"ZipShort.putShort(alignment | (allowMethodChange ? 0x8000 : 0), content, 0);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,111,return content;
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,114,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,115,public byte[] getCentralDirectoryData() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,116,return ZipShort.getBytes(alignment | (allowMethodChange ? 0x8000 : 0));
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,119,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,120,"public void parseFromLocalFileData(byte[] buffer, int offset, int length) throws ZipException {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,121,"parseFromCentralDirectoryData(buffer, offset, length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,122,this.padding = length - BASE_SIZE;
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,125,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,126,"public void parseFromCentralDirectoryData(byte[] buffer, int offset, int length) throws ZipException {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,127,if (length < 2)
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,128,"throw new ZipException(""Too short content for ResourceAlignmentExtraField (0xa11e): "" + length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,129,"int alignmentValue = ZipShort.getValue(buffer, offset);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,130,this.alignment = (short) (alignmentValue&0x7fff);
True,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java,131,this.allowMethodChange = (alignmentValue&0x8000) != 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1045,ResourceAlignmentExtraField oldAlignmentEx =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1046,(ResourceAlignmentExtraField) ze.getExtraField(ResourceAlignmentExtraField.ID);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1047,if (oldAlignmentEx != null)
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1048,ze.removeExtraField(ResourceAlignmentExtraField.ID);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1050,int alignment = ze.getAlignment();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1051,if (alignment <= 0 && oldAlignmentEx != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1052,alignment = oldAlignmentEx.getAlignment();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1055,if (alignment > 1 || (oldAlignmentEx != null && !oldAlignmentEx.allowMethodChange())) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1056,int oldLength = LFH_FILENAME_OFFSET +
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1057,name.limit() - name.position() +
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1058,ze.getLocalFileDataExtra().length;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1060,int padding = (int) ((-archiveOffset - oldLength - EXTRAFIELD_HEADER_SIZE
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1061,- ResourceAlignmentExtraField.BASE_SIZE) &
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1062,(alignment - 1));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1063,"ze.addExtraField(new ResourceAlignmentExtraField(alignment,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1064,"oldAlignmentEx != null ? oldAlignmentEx.allowMethodChange() : false, padding));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1048,nt alignment = ze.getAlignment();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1049,f (alignment > 1 && ((archiveOffset + len) & (alignment - 1)) != 0) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1050,nt padding = (int) ((-archiveOffset - len - EXTRAFIELD_HEADER_SIZE) & (alignment - 1));
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1051,ipExtraField pex = (PaddingExtraField) ze.getExtraField(PaddingExtraField.ID);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1052,f (pex != null) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1053,adding += pex.getLocalFileDataLength().getValue() + EXTRAFIELD_HEADER_SIZE;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1055,/ will overwrite an existing PaddingExtraField
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1056,e.addExtraField(new PaddingExtraField(padding));
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1057,xtra = ze.getLocalFileDataExtra();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1058,en = LFH_FILENAME_OFFSET + nameLen + extra.length;
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,488,toredEntry2.addExtraField(new PaddingExtraField(123));
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,488,storedEntry2.addExtraField(new ResourceAlignmentExtraField(1));
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,490,"ipOutput.write(""Hello pre-aligned Stored\n"".getBytes(Charset.forName(""UTF-8"")));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,490,"zipOutput.write(""Hello overload-alignment Stored\n"".getBytes(Charset.forName(""UTF-8"")));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,491,zipOutput.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,493,"ZipArchiveEntry storedEntry3 = new ZipArchiveEntry(""stored3.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,494,storedEntry3.setMethod(ZipEntry.STORED);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,495,storedEntry3.addExtraField(new ResourceAlignmentExtraField(1024));
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,496,zipOutput.putArchiveEntry(storedEntry3);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,497,"zipOutput.write(""Hello copy-alignment Stored\n"".getBytes(Charset.forName(""UTF-8"")));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,506,ResourceAlignmentExtraField inflatedAlignmentEx =
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,507,(ResourceAlignmentExtraField)inflatedEntry.getExtraField(ResourceAlignmentExtraField.ID);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,511,assertNotNull(inflatedAlignmentEx);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,512,"assertEquals(1024, inflatedAlignmentEx.getAlignment());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,513,assertFalse(inflatedAlignmentEx.allowMethodChange());
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,519,ResourceAlignmentExtraField storedAlignmentEx =
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,520,(ResourceAlignmentExtraField)storedEntry.getExtraField(ResourceAlignmentExtraField.ID);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,524,assertNotNull(storedAlignmentEx);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,525,"assertEquals(1024, storedAlignmentEx.getAlignment());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,526,assertFalse(storedAlignmentEx.allowMethodChange());
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,533,ResourceAlignmentExtraField stored2AlignmentEx =
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,534,(ResourceAlignmentExtraField)storedEntry2.getExtraField(ResourceAlignmentExtraField.ID);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,538,assertNotNull(stored2AlignmentEx);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,539,"assertEquals(1024, stored2AlignmentEx.getAlignment());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,540,assertFalse(stored2AlignmentEx.allowMethodChange());
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,520,"ssert.assertEquals(""Hello pre-aligned Stored\n"","
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,542,"Assert.assertEquals(""Hello overload-alignment Stored\n"","
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,543,"new String(IOUtils.toByteArray(stream), Charset.forName(""UTF-8"")));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,546,"ZipArchiveEntry storedEntry3 = zf.getEntry(""stored3.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,547,ResourceAlignmentExtraField stored3AlignmentEx =
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,548,(ResourceAlignmentExtraField)storedEntry3.getExtraField(ResourceAlignmentExtraField.ID);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,549,"assertNotEquals(-1L, storedEntry3.getCompressedSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,550,"assertNotEquals(-1L, storedEntry3.getSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,551,"assertEquals(0L, storedEntry3.getDataOffset()%1024);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,552,assertNotNull(stored3AlignmentEx);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,553,"assertEquals(1024, stored3AlignmentEx.getAlignment());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,554,assertFalse(stored3AlignmentEx.allowMethodChange());
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,555,try (InputStream stream = zf.getInputStream(storedEntry3)) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,556,"Assert.assertEquals(""Hello copy-alignment Stored\n"","

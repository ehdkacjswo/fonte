is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,521,eturn new FramedLZ4CompressorInputStream(in);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,521,"return new FramedLZ4CompressorInputStream(in, actualDecompressConcatenated);"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,43, + xxhash32 checksum validation
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,45, + decompressConcatenated
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,72,private final boolean decompressConcatenated;
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,87, using the LZ4 frame format.
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,86,* using the LZ4 frame format and stops after decompressing the
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,87,* first frame.
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,92,"this(in, false);"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,96,* Creates a new input stream that decompresses streams compressed
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,97,* using the LZ4 frame format.
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,98,* @param in  the InputStream from which to read the compressed data
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,99,"* @param decompressConcatenated if true, decompress until the end"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,100,"*          of the input; if false, stop after the first LZ4 frame"
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,101,*          and leave the input position to point to the next byte
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,102,*          after the frame stream
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,103,* @throws IOException if reading fails
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,105,"public FramedLZ4CompressorInputStream(InputStream in, boolean decompressConcatenated) throws IOException {"
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,93,eadSignature();
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,94,eadFrameDescriptor();
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,95,extBlock();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,107,this.decompressConcatenated = decompressConcatenated;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,108,init(true);
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,133,rivate void readSignature() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,146,private void init(boolean firstFrame) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,147,if (readSignature(firstFrame)) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,148,readFrameDescriptor();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,149,nextBlock();
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,153,private boolean readSignature(boolean firstFrame) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,157,if (4 != read && !firstFrame) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,158,endReached = true;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,159,return false;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,164,return true;
False,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,188,ndReached = true;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,214,if (!decompressConcatenated) {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,215,endReached = true;
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,216,} else {
True,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java,217,init(false);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,30,import java.util.Arrays;
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,86,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,87,public void readBlaLz4WithDecompressConcatenated() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,88,"try (InputStream a = new FramedLZ4CompressorInputStream(new FileInputStream(getFile(""bla.tar.lz4"")), true);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,89,"FileInputStream e = new FileInputStream(getFile(""bla.tar""))) {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,90,byte[] expected = IOUtils.toByteArray(e);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,91,byte[] actual = IOUtils.toByteArray(a);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,92,"assertArrayEquals(expected, actual);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,96,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,97,public void readDoubledBlaLz4WithDecompressConcatenatedTrue() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,98,readDoubledBlaLz4(new StreamWrapper() {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,99,public InputStream wrap(InputStream in) throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,100,"return new FramedLZ4CompressorInputStream(in, true);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,102,"}, true);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,105,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,106,public void readDoubledBlaLz4WithDecompressConcatenatedFalse() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,107,readDoubledBlaLz4(new StreamWrapper() {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,108,public InputStream wrap(InputStream in) throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,109,"return new FramedLZ4CompressorInputStream(in, false);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,111,"}, false);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,114,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,115,public void readDoubledBlaLz4WithoutExplicitDecompressConcatenated() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,116,readDoubledBlaLz4(new StreamWrapper() {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,117,public InputStream wrap(InputStream in) throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,118,return new FramedLZ4CompressorInputStream(in);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,120,"}, false);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,123,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,124,public void readBlaLz4ViaFactoryWithDecompressConcatenated() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,125,try (InputStream a = new CompressorStreamFactory()
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,126,".createCompressorInputStream(CompressorStreamFactory.getLZ4Framed(),"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,127,"new FileInputStream(getFile(""bla.tar.lz4"")),"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,128,true);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,129,"FileInputStream e = new FileInputStream(getFile(""bla.tar""))) {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,130,byte[] expected = IOUtils.toByteArray(e);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,131,byte[] actual = IOUtils.toByteArray(a);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,132,"assertArrayEquals(expected, actual);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,136,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,137,public void readDoubledBlaLz4ViaFactoryWithDecompressConcatenatedTrue() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,138,readDoubledBlaLz4(new StreamWrapper() {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,139,public InputStream wrap(InputStream in) throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,140,return new CompressorStreamFactory()
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,141,".createCompressorInputStream(CompressorStreamFactory.getLZ4Framed(), in, true);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,143,"}, true);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,146,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,147,public void readDoubledBlaLz4ViaFactoryWithDecompressConcatenatedFalse() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,148,readDoubledBlaLz4(new StreamWrapper() {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,149,public InputStream wrap(InputStream in) throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,150,return new CompressorStreamFactory()
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,151,".createCompressorInputStream(CompressorStreamFactory.getLZ4Framed(), in, false);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,153,"}, false);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,156,@Test
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,157,public void readDoubledBlaLz4ViaFactoryWithoutExplicitDecompressConcatenated() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,158,readDoubledBlaLz4(new StreamWrapper() {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,159,public InputStream wrap(InputStream in) throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,160,return new CompressorStreamFactory()
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,161,".createCompressorInputStream(CompressorStreamFactory.getLZ4Framed(), in);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,163,"}, false);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,365,interface StreamWrapper {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,366,InputStream wrap(InputStream in) throws Exception;
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,369,"private void readDoubledBlaLz4(StreamWrapper wrapper, boolean expectDuplicateOutput) throws Exception {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,370,byte[] singleInput;
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,371,"try (InputStream i = new FileInputStream(getFile(""bla.tar.lz4""))) {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,372,singleInput = IOUtils.toByteArray(i);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,374,byte[] input = duplicate(singleInput);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,375,try (InputStream a = wrapper.wrap(new ByteArrayInputStream(input));
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,376,"FileInputStream e = new FileInputStream(getFile(""bla.tar""))) {"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,377,byte[] expected = IOUtils.toByteArray(e);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,378,byte[] actual = IOUtils.toByteArray(a);
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,379,"assertArrayEquals(expectDuplicateOutput ? duplicate(expected) : expected, actual);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,383,private static byte[] duplicate(byte[] from) {
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,384,"byte[] to = Arrays.copyOf(from, 2 * from.length);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,385,"System.arraycopy(from, 0, to, from.length, from.length);"
True,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java,386,return to;

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,23,import static org.apache.commons.compress.archivers.zip.ZipConstants.DWORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,24,import static org.apache.commons.compress.archivers.zip.ZipConstants.WORD;
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,74,/ TODO: the LFH should probably not contain relativeHeaderOffset
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,75,/ and diskStart but then ZipArchivePOutputStream won't write it to
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,76,/ the CD either - need to test interop with other implementations
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,77,/ to see whether they do have a problem with the extraneous
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,78,/ information inside the LFH
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,82,"rivate static final int WORD = 4, DWORD = 8;"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,80,private static final String LFH_MUST_HAVE_BOTH_SIZES_MSG =
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,81,"""Zip64 extended information must contain"""
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,82,"+ "" both size values in the local file header."";"
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,118,f (size == null) {
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,119,"hrow new IllegalArgumentException(""size must not be null"");"
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,121,f (compressedSize == null) {
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,122,"hrow new IllegalArgumentException(""compressedSize must not be null"");"
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,137,eturn getCentralDirectoryLength();
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,131,return new ZipShort(size != null ? 2 * DWORD : 0);
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,142,eturn new ZipShort(2 * DWORD  // both size fields
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,136,return new ZipShort((size != null ? DWORD : 0)
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,137,+ (compressedSize != null ? DWORD : 0)
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,149,eturn getCentralDirectoryData();
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,144,if (size != null || compressedSize != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,145,if (size == null || compressedSize == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,146,throw new IllegalArgumentException(LFH_MUST_HAVE_BOTH_SIZES_MSG);
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,148,byte[] data = new byte[2 * DWORD];
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,149,addSizes(data);
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,150,return data;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,152,return new byte[0];
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,155,ddSizes(data);
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,156,nt off = 2 * DWORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,158,int off = addSizes(data);
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,172,"hrow new ZipException(""Zip64 extended information must contain"""
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,173," "" both size values in the local file"""
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,174," "" header."");"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,174,throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,217,* The uncompressed size stored in this extra field.
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,219,public void setSize(ZipEightByteInteger size) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,220,this.size = size;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,231,* The uncompressed size stored in this extra field.
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,233,public void setCompressedSize(ZipEightByteInteger compressedSize) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,234,this.compressedSize = compressedSize;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,245,* The relative header offset stored in this extra field.
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,247,public void setRelativeHeaderOffset(ZipEightByteInteger rho) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,248,relativeHeaderOffset = rho;
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,237,rivate void addSizes(byte[] data) {
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,238,"ystem.arraycopy(size.getBytes(), 0, data, 0, DWORD);"
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,239,"ystem.arraycopy(compressedSize.getBytes(), 0, data, DWORD, DWORD);"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,259,* The disk start number stored in this extra field.
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,261,public void setDiskStartNumber(ZipLong ds) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,262,diskStart = ds;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,265,private int addSizes(byte[] data) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,266,int off = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,267,if (size != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,268,"System.arraycopy(size.getBytes(), 0, data, 0, DWORD);"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,269,off += DWORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,271,if (compressedSize != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,272,"System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD);"
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,273,off += DWORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,275,return off;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,705,& fallbackToUTF8);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,705,"&& fallbackToUTF8,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,706,false);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,791,final long lfhOffset = offsets.get(ze).longValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,792,final boolean needsZip64Extra = ze.getCompressedSize() >= ZIP64_MAGIC
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,793,|| ze.getSize() >= ZIP64_MAGIC
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,794,|| lfhOffset >= ZIP64_MAGIC;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,796,if (needsZip64Extra) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,797,hasUsedZip64 = true;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,798,Zip64ExtendedInformationExtraField z64 =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,799,(Zip64ExtendedInformationExtraField)
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,800,ze.getExtraField(Zip64ExtendedInformationExtraField
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,801,.HEADER_ID);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,802,if (z64 == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,803,z64 = new Zip64ExtendedInformationExtraField();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,804,ze.addExtraField(z64);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,806,if (ze.getCompressedSize() >= ZIP64_MAGIC) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,807,z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,809,if (ze.getSize() >= ZIP64_MAGIC) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,810,z64.setSize(new ZipEightByteInteger(ze.getSize()));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,812,if (lfhOffset >= ZIP64_MAGIC) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,813,z64.setRelativeHeaderOffset(new ZipEightByteInteger(lfhOffset));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,815,ze.setExtra();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,791,& fallbackToUTF8);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,820,"&& fallbackToUTF8,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,821,needsZip64Extra);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,806,riteOut(ZipLong.getBytes(ze.getCompressedSize()));
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,807,riteOut(ZipLong.getBytes(ze.getSize()));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,836,"writeOut(ZipLong.getBytes(Math.min(ze.getCompressedSize(), ZIP64_MAGIC)));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,837,"writeOut(ZipLong.getBytes(Math.min(ze.getSize(), ZIP64_MAGIC)));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,855,riteOut(ZipLong.getBytes(offsets.get(ze).longValue()));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,885,"writeOut(ZipLong.getBytes(Math.min(lfhOffset, ZIP64_MAGIC)));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,999,tfFallback)
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1029,"utfFallback,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1030,final boolean
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1031,zip64)
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1009,ersionNeededToExtract =  20;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1041,versionNeededToExtract = DEFLATE_MIN_VERSION;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1044,if (zip64) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1045,versionNeededToExtract = ZIP64_MIN_VERSION;

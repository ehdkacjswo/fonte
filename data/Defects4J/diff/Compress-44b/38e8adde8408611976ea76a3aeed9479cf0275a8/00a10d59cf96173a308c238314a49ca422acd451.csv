is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,335, catch (IOException ignored) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,335,} catch (IOException ignored) { // NOPMD
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,23,mport java.io.EOFException;
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,88,ublic void close() {
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,89,ry {
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,90,n.close();
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,91, catch (IOException ignored) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,87,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,88,in.close();
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,197,ry {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,193,if (firstHeaderSize >= 33) {
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,202, catch (EOFException eof) {
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,259,ry {
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,260,ocalFileHeader.extendedFilePosition = read32(firstHeader);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,261,ocalFileHeader.dateTimeAccessed = read32(firstHeader);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,262,ocalFileHeader.dateTimeCreated = read32(firstHeader);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,263,ocalFileHeader.originalSizeEvenForVolumes = read32(firstHeader);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,264,ushedBackBytes(16);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,265, catch (EOFException eof) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,254,"readExtraData(firstHeaderSize, firstHeader, localFileHeader);"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,281,"private void readExtraData(int firstHeaderSize, DataInputStream firstHeader,"
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,282,LocalFileHeader localFileHeader) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,283,if (firstHeaderSize >= 33) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,284,localFileHeader.extendedFilePosition = read32(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,285,if (firstHeaderSize >= 45) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,286,localFileHeader.dateTimeAccessed = read32(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,287,localFileHeader.dateTimeCreated = read32(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,288,localFileHeader.originalSizeEvenForVolumes = read32(firstHeader);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,289,pushedBackBytes(12);
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,291,pushedBackBytes(4);
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,325,hile (currentInputStream.read() >= 0) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,327,while (currentInputStream.read() >= 0) { // NOPMD
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,328,// drain current input
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,213,hile (inData.readUnsignedByte() != 0x00) {}
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,213,while (inData.readUnsignedByte() != 0x00) { // NOPMD

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,60, Provides extra functionality for java Number classes.
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,60,* Provides extra functionality for Java Number classes.
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,65," @version $Id: NumberUtils.java,v 1.1 2002/07/19 03:35:54 bayard Exp $"
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,65,"* @author <a href=""mailto:steve.downey@netfolio.com"">Steve Downey</a>"
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,66,"* @version $Id: NumberUtils.java,v 1.2 2002/09/15 10:26:42 scolebourne Exp $"
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,71,* NumberUtils instances should NOT be constructed in standard programming.
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,72,"* Instead, the class should be used as <code>NumberUtils.stringToInt(""6"");</code>."
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,73,* This constructor is public to permit tools that require a JavaBean instance
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,74,* to operate.
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,76,public NumberUtils() {
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,404,* Gets the minimum of three long values.
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,406,* @param a  value 1
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,407,* @param b  value 2
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,408,* @param c  value 3
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,409,* @return  the largest of the values
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,411,"public static long minimum(long a, long b, long c) {"
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,412,if (b < a) {
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,413,a = b;
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,415,if (c < a) {
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,416,a = c;
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,418,return a;
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,386, Get the minimum of three values.
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,422,* Gets the minimum of three int values.
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,424,* @param a  value 1
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,425,* @param b  value 2
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,426,* @param c  value 3
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,427,* @return  the largest of the values
False,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,399, Get the maximum of three values.
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,440,* Gets the maximum of three long values.
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,442,* @param a  value 1
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,443,* @param b  value 2
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,444,* @param c  value 3
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,445,* @return  the largest of the values
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,447,"public static long maximum(long a, long b, long c) {"
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,448,if (b > a) {
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,449,a = b;
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,451,if (c > a) {
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,452,a = c;
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,454,return a;
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,458,* Gets the maximum of three int values.
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,460,* @param a  value 1
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,461,* @param b  value 2
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,462,* @param c  value 3
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,463,* @return  the largest of the values
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,478,* Compares two doubles for order.
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,479,* <p>
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,480,"* This method is more comprhensive than the standard Java greater than,"
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,481,* less than and equals operators.
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,482,* It returns -1 if the first value is less than the second.
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,483,* It returns +1 if the first value is greater than the second.
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,484,* It returns 0 if the values are equal.
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,485,* <p>
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,486,"* The ordering is as follows, largest to smallest:"
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,487,* <ul>
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,488,* <li>NaN
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,489,* <li>Positive infinity
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,490,* <li>Maximum double
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,491,* <li>Normal positve numbers
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,492,* <li>+0.0
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,493,* <li>-0.0
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,494,* <li>Minimum double (-Double.MAX_VALUE)
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,495,* <li>Normal negative numbers
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,496,* <li>Negative infinity
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,497,* </ul>
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,498,* Comparing NaN with NaN will return 0.
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,500,* @param lhs  the first double
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,501,* @param rhs  the second double
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,502,"* @return -1 if lhs is less, +1 if greater, 0 if equal to rhs"
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,504,"public static int compare(double lhs, double rhs) {"
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,505,if (lhs < rhs) {
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,506,return -1;
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,508,if (lhs > rhs) {
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,509,return +1;
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,511,// Need to compare bits to handle 0.0 == -0.0 being true
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,512,// compare should put -0.0 < +0.0
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,513,// Two NaNs are also == for compare purposes
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,514,// where NaN == NaN is false
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,515,long lhsBits = Double.doubleToLongBits(lhs);
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,516,long rhsBits = Double.doubleToLongBits(rhs);
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,517,if (lhsBits == rhsBits) {
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,518,return 0;
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,520,// Something exotic! A comparison to NaN or 0.0 vs -0.0
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,521,// Fortunately NaN's long is > than everything else
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,522,// Also negzeros bits < poszero
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,523,// NAN: 9221120237041090560
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,524,// MAX: 9218868437227405311
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,525,// NEGZERO: -9223372036854775808
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,526,if (lhsBits < rhsBits) {
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,527,return -1;
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,528,} else {
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,529,return +1;
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,534,* Compares two floats for order.
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,535,* <p>
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,536,"* This method is more comprhensive than the standard Java greater than,"
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,537,* less than and equals operators.
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,538,* It returns -1 if the first value is less than the second.
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,539,* It returns +1 if the first value is greater than the second.
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,540,* It returns 0 if the values are equal.
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,541,* <p>
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,542,"* The ordering is as follows, largest to smallest:"
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,543,* <ul>
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,544,* <li>NaN
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,545,* <li>Positive infinity
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,546,* <li>Maximum float
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,547,* <li>Normal positve numbers
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,548,* <li>+0.0
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,549,* <li>-0.0
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,550,* <li>Normal negative numbers
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,551,* <li>Minimum float (-Float.MAX_VALUE)
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,552,* <li>Negative infinity
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,553,* </ul>
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,554,* Comparing NaN with NaN will return 0.
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,556,* @param lhs  the first float
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,557,* @param rhs  the second float
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,558,"* @return -1 if lhs is less, +1 if greater, 0 if equal to rhs"
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,560,"public static int compare(float lhs, float rhs) {"
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,561,if (lhs < rhs) {
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,562,return -1;
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,564,if (lhs > rhs) {
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,565,return +1;
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,567,//Need to compare bits to handle 0.0 == -0.0 being true
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,568,// compare should put -0.0 < +0.0
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,569,// Two NaNs are also == for compare purposes
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,570,// where NaN == NaN is false
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,571,int lhsBits = Float.floatToIntBits(lhs);
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,572,int rhsBits = Float.floatToIntBits(rhs);
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,573,if (lhsBits == rhsBits) {
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,574,return 0;
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,576,//Something exotic! A comparison to NaN or 0.0 vs -0.0
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,577,//Fortunately NaN's int is > than everything else
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,578,//Also negzeros bits < poszero
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,579,//NAN: 2143289344
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,580,//MAX: 2139095039
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,581,//NEGZERO: -2147483648
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,582,if (lhsBits < rhsBits) {
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,583,return -1;
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,584,} else {
True,src/java/org/apache/commons/lang/NumberUtils.java,src/java/org/apache/commons/lang/NumberUtils.java,585,return +1;

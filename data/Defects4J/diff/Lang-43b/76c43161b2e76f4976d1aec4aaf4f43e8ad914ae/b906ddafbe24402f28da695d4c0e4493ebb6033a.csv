is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,21,import java.util.Arrays;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,22,import java.util.Collections;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,24,import java.util.List;
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,137,"eturn reflectionCompare(lhs, rhs, false, null);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,140,"return reflectionCompare(lhs, rhs, false, null, null);"
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,169,"eturn reflectionCompare(lhs, rhs, compareTransients, null);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,172,"return reflectionCompare(lhs, rhs, compareTransients, null, null);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,176,* <p>Compares two <code>Object</code>s via reflection.</p>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,178,"* <p>Fields can be private, thus <code>AccessibleObject.setAccessible</code>"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,179,* is used to bypass normal access control checks. This will fail under a
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,180,* security manager unless the appropriate permissions are set.</p>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,182,* <ul>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,183,* <li>Static fields will not be compared</li>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,184,"* <li>If <code>compareTransients</code> is <code>true</code>,"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,185,"*     compares transient members.  Otherwise ignores them, as they"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,186,*     are likely derived fields.</li>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,187,* <li>Superclass fields will be compared</li>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,188,* </ul>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,190,"* <p>If both <code>lhs</code> and <code>rhs</code> are <code>null</code>,"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,191,* they are considered equal.</p>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,193,* @param lhs  left-hand object
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,194,* @param rhs  right-hand object
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,195,* @param excludeFields  fields to exclude
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,196,"* @return a negative integer, zero, or a positive integer as <code>lhs</code>"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,197,"*  is less than, equal to, or greater than <code>rhs</code>"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,198,* @throws NullPointerException  if either <code>lhs</code> or <code>rhs</code>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,199,*  (but not both) is <code>null</code>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,200,* @throws ClassCastException  if <code>rhs</code> is not assignment-compatible
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,201,*  with <code>lhs</code>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,203,"public static int reflectionCompare(Object lhs, Object rhs, String[] excludeFields) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,204,"return reflectionCompare(lhs, rhs, false, null, excludeFields);"
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,203,"ublic static int reflectionCompare(Object lhs, Object rhs, boolean compareTransients, Class reflectUpToClass) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,238,"public static int reflectionCompare(Object lhs, Object rhs, boolean compareTransients, Class reflectUpToClass, String[] excludeFields) {"
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,215,"eflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,250,"reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);"
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,218,"eflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,253,"reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,267,* @param excludeFields  fields to exclude
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,238,oolean useTransients) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,274,"boolean useTransients,"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,275,String[] excludeFields) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,278,List excludedFieldList = excludeFields != null ? Arrays.asList(excludeFields) : Collections.EMPTY_LIST;
False,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,244,f ((f.getName().indexOf('$') == -1)
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,282,if (!excludedFieldList.contains(f.getName())
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,283,&& (f.getName().indexOf('$') == -1)
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,145,estReflectionHierarchyCompare(false);
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,145,"testReflectionHierarchyCompare(false, null);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,148,public void testReflectionHierarchyCompareExcludeFields() {
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,149,"String[] excludeFields = new String[] { ""b"" };"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,150,"testReflectionHierarchyCompare(true, excludeFields);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,152,TestSubObject x;
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,153,TestSubObject y;
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,154,TestSubObject z;
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,156,"x = new TestSubObject(1, 1);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,157,"y = new TestSubObject(2, 1);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,158,"z = new TestSubObject(3, 1);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,159,"assertXYZCompareOrder(x, y, z, true, excludeFields);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,161,"x = new TestSubObject(1, 3);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,162,"y = new TestSubObject(2, 2);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,163,"z = new TestSubObject(3, 1);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,164,"assertXYZCompareOrder(x, y, z, true, excludeFields);"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,149,estReflectionHierarchyCompare(true);
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,168,"testReflectionHierarchyCompare(true, null);"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,158,"ssertXYZCompareOrder(x, y, z, true);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,177,"assertXYZCompareOrder(x, y, z, true, null);"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,163,"ssertXYZCompareOrder(x, y, z, true);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,182,"assertXYZCompareOrder(x, y, z, true, null);"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,166,"rivate void assertXYZCompareOrder(Object x, Object y, Object z, boolean testTransients) {"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,167,"ssertTrue(0 == CompareToBuilder.reflectionCompare(x, x, testTransients));"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,168,"ssertTrue(0 == CompareToBuilder.reflectionCompare(y, y, testTransients));"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,169,"ssertTrue(0 == CompareToBuilder.reflectionCompare(z, z, testTransients));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,185,"private void assertXYZCompareOrder(Object x, Object y, Object z, boolean testTransients, String[] excludeFields) {"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,186,"assertTrue(0 == CompareToBuilder.reflectionCompare(x, x, testTransients, null, excludeFields));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,187,"assertTrue(0 == CompareToBuilder.reflectionCompare(y, y, testTransients, null, excludeFields));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,188,"assertTrue(0 == CompareToBuilder.reflectionCompare(z, z, testTransients, null, excludeFields));"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,171,"ssertTrue(0 > CompareToBuilder.reflectionCompare(x, y, testTransients));"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,172,"ssertTrue(0 > CompareToBuilder.reflectionCompare(x, z, testTransients));"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,173,"ssertTrue(0 > CompareToBuilder.reflectionCompare(y, z, testTransients));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,190,"assertTrue(0 > CompareToBuilder.reflectionCompare(x, y, testTransients, null, excludeFields));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,191,"assertTrue(0 > CompareToBuilder.reflectionCompare(x, z, testTransients, null, excludeFields));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,192,"assertTrue(0 > CompareToBuilder.reflectionCompare(y, z, testTransients, null, excludeFields));"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,175,"ssertTrue(0 < CompareToBuilder.reflectionCompare(y, x, testTransients));"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,176,"ssertTrue(0 < CompareToBuilder.reflectionCompare(z, x, testTransients));"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,177,"ssertTrue(0 < CompareToBuilder.reflectionCompare(z, y, testTransients));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,194,"assertTrue(0 < CompareToBuilder.reflectionCompare(y, x, testTransients, null, excludeFields));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,195,"assertTrue(0 < CompareToBuilder.reflectionCompare(z, x, testTransients, null, excludeFields));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,196,"assertTrue(0 < CompareToBuilder.reflectionCompare(z, y, testTransients, null, excludeFields));"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,180,ublic void testReflectionHierarchyCompare(boolean testTransients) {
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,199,"public void testReflectionHierarchyCompare(boolean testTransients, String[] excludeFields) {"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,188,"ssertReflectionCompareContract(to1, to1, to1, false);"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,189,"ssertReflectionCompareContract(to1, to2, to3, false);"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,190,"ssertReflectionCompareContract(tso1, tso1, tso1, false);"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,191,"ssertReflectionCompareContract(tso1, tso2, tso3, false);"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,192,"ssertReflectionCompareContract(""1"", ""2"", ""3"", false);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,207,"assertReflectionCompareContract(to1, to1, to1, false, excludeFields);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,208,"assertReflectionCompareContract(to1, to2, to3, false, excludeFields);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,209,"assertReflectionCompareContract(tso1, tso1, tso1, false, excludeFields);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,210,"assertReflectionCompareContract(tso1, tso2, tso3, false, excludeFields);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,211,"assertReflectionCompareContract(""1"", ""2"", ""3"", false, excludeFields);"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,198,"ssertXYZCompareOrder(to1, to2, to3, true);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,217,"assertXYZCompareOrder(to1, to2, to3, true, null);"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,200,"ssertXYZCompareOrder(tso1, tso2, tso3, true);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,219,"assertXYZCompareOrder(tso1, tso2, tso3, true, null);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,229,* @param excludeFields fields to exclude
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,211,"ublic void assertReflectionCompareContract(Object x, Object y, Object z, boolean testTransients) {"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,231,"public void assertReflectionCompareContract(Object x, Object y, Object z, boolean testTransients, String[] excludeFields) {"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,214,"ssertTrue(reflectionCompareSignum(x, y, testTransients) == -reflectionCompareSignum(y, x, testTransients));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,234,"assertTrue(reflectionCompareSignum(x, y, testTransients, excludeFields) == -reflectionCompareSignum(y, x, testTransients, excludeFields));"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,217,"f (CompareToBuilder.reflectionCompare(x, y, testTransients) > 0 && CompareToBuilder.reflectionCompare(y, z, testTransients) > 0){"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,218,"ssertTrue(CompareToBuilder.reflectionCompare(x, z, testTransients) > 0);"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,237,"if (CompareToBuilder.reflectionCompare(x, y, testTransients, null, excludeFields) > 0"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,238,"&& CompareToBuilder.reflectionCompare(y, z, testTransients, null, excludeFields) > 0){"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,239,"assertTrue(CompareToBuilder.reflectionCompare(x, z, testTransients, null, excludeFields) > 0);"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,222,"f (CompareToBuilder.reflectionCompare(x, y, testTransients) == 0) {"
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,223,"ssertTrue(reflectionCompareSignum(x, z, testTransients) == -reflectionCompareSignum(y, z, testTransients));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,243,"if (CompareToBuilder.reflectionCompare(x, y, testTransients, null, excludeFields) == 0) {"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,244,"assertTrue(reflectionCompareSignum(x, z, testTransients, excludeFields) == -reflectionCompareSignum(y, z, testTransients, excludeFields));"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,258,* @param excludeFields fields to exclude
False,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,239,"rivate int reflectionCompareSignum(Object lhs, Object rhs, boolean testTransients) {"
True,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java,261,"private int reflectionCompareSignum(Object lhs, Object rhs, boolean testTransients, String[] excludeFields) {"

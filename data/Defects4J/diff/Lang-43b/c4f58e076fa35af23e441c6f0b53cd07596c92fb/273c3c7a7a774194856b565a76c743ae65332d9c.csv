is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,2, Copyright 2005 The Apache Software Foundation.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,5, you may not use this file except in compliance with the License.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,6, You may obtain a copy of the License at
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,13, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,14, limitations under the License.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,17,ackage org.apache.commons.lang.text;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,19,mport java.text.FieldPosition;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,20,mport java.util.ArrayList;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,21,mport java.util.Iterator;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,22,mport java.util.LinkedList;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,23,mport java.util.List;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,24,mport java.util.Map;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,27, <p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,28, Replaces variables in text with other text.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,29, </p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,30, <p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,31, This class can be given a text which can contain an arbitrary number of variables. The default notation for a
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,32, variable in text is <code>${variableName}</code>. However by calling the <code>setVariablePrefix()</code> and
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,33, <code>setVariableSuffix()</code> methods it is possible to use a different prefix or suffix. Variable values are
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,34, resolved from a map.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,35, </p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,36, <p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,37, The simplest example is to use this class to replace Java System properties. For example:
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,39, <pre>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,40, VariableFormatter.replaceSystemProperties(
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,41,"      ""You are running with java.version = ${java.version} and os.name = ${os.name}."");"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,42, </pre>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,44, </p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,45, <p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,46, Typical usage of this class follows the following pattern: First an instance is created and initialized with the map
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,47, that contains the values for the available variables. If a prefix and/or suffix for variables should be used other
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,48," than the default ones, the appropriate settings can be performed. After that the <code>replace()</code> method can"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,49, be called passing in the source text for interpolation. In the returned text all variable references (as long as
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,50, their values are known) will be resolved. The following example demonstrates this:
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,51, </p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,52, <p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,54, <pre>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,55, Map valuesMap = HashMap();
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,56," valuesMap.put(&quot;animal&quot;, &quot;quick brown fox&quot;);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,57," valuesMap.put(&quot;target&quot;, &quot;lazy dog&quot;);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,58, String templateString = &quot;The ${animal} jumped over the ${target}.&quot;;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,59, VariableFormatter vf = new VariableFormatter(valuesMap);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,60, String resolvedString = cf.replace(templateString);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,61, </pre>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,63, yielding:
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,65, <pre>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,66,      The quick brown fox jumped over the lazy dog.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,67, </pre>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,69, </p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,70, <p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,71, In addition to this usage pattern there are some static convenience methods that cover the most common use cases.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,72, These methods can be used without the need of creating an instance. However if multiple replace operations are to be
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,73," performed, creating and reusing an instance of this class will be more efficient."
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,74, </p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,75, <p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,76," Variable replacement works in a recursive way, i.e. it is possible that a variable's value is a text which again"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,77," contains variable references. These new variables will be replaced, too. Cyclic replacements are detected and will"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,78, cause an exception to be thrown.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,79, </p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,80, <p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,81, Sometimes the interpolation's result must contain a variable prefix. As an example take the following source text:
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,82, </p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,83, <p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,84, <code>The variable ${${name}} must be used.</code>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,85, </p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,86, <p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,87, Here only the variable's name refered to in the text should be replaced resulting in the text (assuming that the
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,88, value of the <code>name</code> variable is <code>x</code>):
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,89, </p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,90, <p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,91, <code>The variable ${x} must be used.</code>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,92, </p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,93, <p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,94, To achieve this effect there are two possibilities: Either set a different prefix and suffix for variables which do
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,95, not conflict with the result text you want to produce. The other possibility is to use the escape character that can
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,96, be set through the <code>setEscapeCharacter()</code> method. If this character is placed before a variable
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,97," reference, this reference is ignored and won't be replaced. Per default the escape character is set to the"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,98," <code>$</code> character, so that in the example above the text could have run:"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,99, </p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,100, <p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,101, <code>The variable $${${name}} must be used.</code>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,102, </p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,105, @author Oliver Heger
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,106, @version $Id$
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,107, @since 2.2
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,109,ublic class VariableFormatter {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,112, A VariableResolver backed by a {@link Map}.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,114," @author <a href=""mailto:ggregory@seagullsw.com"">Gary Gregory</a>"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,115, @version $Id$
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,117,ublic static class MapVariableResolver implements VariableResolver {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,119, Map keys are variable names and value
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,121,rivate Map map;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,124, Creates a new VariableResolver backed by a Map.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,126, @param map
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,127,            The variable names and values.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,129,ublic MapVariableResolver(Map map) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,130,his.setMap(map);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,134, Gets the variable names and values.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,136, @return the variable names and values.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,138,ublic Map getMap() {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,139,eturn this.map;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,143, Resolves the given variable name with the backing Map.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,145, @param varName
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,146,            a variable name
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,147, @return a value or <code>null</code> if the variable name is not in Map
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,149,ublic Object resolveVariable(String varName) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,150,f (this.getMap() == null) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,151,eturn null;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,153,eturn this.getMap().get(varName);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,157, Gets the variable names and values.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,159, @param map
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,160,            the variable names and values.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,162,ublic void setMap(Map map) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,163,his.map = map;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,168, A helper class for detecting variables in the source text.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,169, This class provides simple tokenizer functionality. It splits input
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,170," text into tokens for text, variables, and escaped variable start tokens."
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,172,rotected static class VariableParser {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,173,** Constant for the token type ESCAPED_VAR. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,174,tatic final short ESCAPED_VAR_TOKEN = 3;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,176,** Constant for the token type TEXT. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,177,tatic final short TEXT_TOKEN = 1;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,179,** Constant for the token type VARIABLE. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,180,tatic final short VARIABLE_TOKEN = 2;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,183, Creates a new variable token.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,185, @param aStartIndex
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,186,            The token starting index
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,187, @param aLength
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,188,            The token length
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,189, @return a new token
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,191,"rotected static FieldPosition newEscapedVariableToken(int aStartIndex, int aLength) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,192,"eturn newToken(VariableParser.ESCAPED_VAR_TOKEN, aStartIndex, aLength);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,196, Creates a new variable token.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,198, @param aStartIndex
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,199,            The token starting index
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,200, @param aLength
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,201,            The token length
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,202, @return a new token
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,204,"rotected static FieldPosition newTextToken(int aStartIndex, int aLength) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,205,"eturn newToken(VariableParser.TEXT_TOKEN, aStartIndex, aLength);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,209, Creates a new token of the specified type.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,211, @param type
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,212,            The token type
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,213, @param beginIndex
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,214,            The token starting index
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,215, @param length
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,216,            The token length
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,217, @return a new token
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,219,"rivate static FieldPosition newToken(int type, int beginIndex, int length) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,220,ieldPosition fp = new FieldPosition(type);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,221,p.setBeginIndex(beginIndex);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,222,p.setEndIndex(beginIndex + length);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,223,eturn fp;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,227, Creates a new variable token.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,229, @param aStartIndex
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,230,            The token starting index
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,231, @param aLength
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,232,            The token length
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,233, @return a new token
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,235,"rotected static FieldPosition newVariableToken(int aStartIndex, int aLength) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,236,"eturn newToken(VariableParser.VARIABLE_TOKEN, aStartIndex, aLength);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,239,** Stores the end index. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,240,rivate int endIndex;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,242,** Stores the matcher for escaped variable start tokens. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,243,rivate StrMatcher escVarMatcher;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,245,** Stores the length of the data. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,246,rivate int length;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,248,** Stores the current position. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,249,rivate int pos;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,251,** Stores a list with the pending tokens. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,252,rivate LinkedList tokenList;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,254,** Stores the matcher for variable end tokens. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,255,rivate StrMatcher varEndMatcher;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,257,** Stores the matcher for variable start tokens. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,258,rivate StrMatcher varStartMatcher;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,261, Creates a new instance of <code>VariableParser</code> and initializes it.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,263, @param startMatcher
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,264,            the variable start matcher
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,265, @param endMatcher
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,266,            the variable end matcher
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,267, @param escMatcher
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,268,            the escaped variable start matcher
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,269, @param startPos
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,270,            the start index in the source data
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,271, @param length
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,272,            the length of the source data
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,274,"rotected VariableParser(StrMatcher startMatcher, StrMatcher endMatcher,"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,275,"trMatcher escMatcher, int startPos, int length) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,276,his.setVarStartMatcher(startMatcher);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,277,his.setVarEndMatcher(endMatcher);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,278,his.setEscVarMatcher(escMatcher);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,279,his.setPos(startPos);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,280,his.setLength(length);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,281,his.setEndIndex(startPos + length);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,282,his.setTokenList(new LinkedList());
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,286, Checks if there is a text token before the current position.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,288, @param startPos
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,289,            the start pos for the current <code>nextToken()</code> invocation
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,291,rivate void checkTextToken(int startPos) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,292,f (startPos < getPos()) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,293,"etTokenList().addLast(VariableParser.newTextToken(startPos, getPos() - startPos));"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,298, @return Returns the endIndex.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,300,rivate int getEndIndex() {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,301,eturn this.endIndex;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,305, @return Returns the escVarMatcher.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,307,rivate StrMatcher getEscVarMatcher() {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,308,eturn this.escVarMatcher;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,312, @return Returns the length.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,314,rivate int getLength() {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,315,eturn this.length;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,319, @return Returns the pos.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,321,rivate int getPos() {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,322,eturn this.pos;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,326, @return Returns the tokenList.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,328,rivate LinkedList getTokenList() {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,329,eturn this.tokenList;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,333, @return Returns the varEndMatcher.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,335,rivate StrMatcher getVarEndMatcher() {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,336,eturn this.varEndMatcher;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,340, @return Returns the varStartMatcher.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,342,rivate StrMatcher getVarStartMatcher() {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,343,eturn this.varStartMatcher;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,347, Returns whether there is more to parse.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,349, @return a flag whether there is more to parse.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,351,/ Named method like java.util.Iterator#hasNext()
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,352,rivate boolean hasNext() {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,353,eturn getPos() < getEndIndex();
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,357, Returns the next token in the given data.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,359, @param data
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,360,            the array with the source data
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,361, @return the next token or <b>null</b> if the end is reached
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,363,rotected FieldPosition nextToken(char[] data) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,364,f (getTokenList().isEmpty()) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,365,f (!hasNext()) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,366,/ end of data is reached
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,367,eturn null;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,369,nt startPos = getPos();
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,370,nt tokenLen;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,371,hile (hasNext() && getTokenList().isEmpty()) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,372,"f ((tokenLen = getEscVarMatcher().isMatch(data, getPos(), 0, getLength())) > 0) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,373,heckTextToken(startPos);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,374,"etTokenList().addLast(VariableParser.newEscapedVariableToken(getPos(), tokenLen));"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,375,etPos(getPos() + tokenLen);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,376," else if ((tokenLen = getVarStartMatcher().isMatch(data, getPos(), 0, getLength())) > 0) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,377,heckTextToken(startPos);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,378,etPos(getPos() + tokenLen);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,379,"nt varStart = getPos(), endLen = 0;"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,380,hile ( hasNext() &&
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,381,"endLen = getVarEndMatcher().isMatch(data, getPos(), 0, getLength())) <= 0"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,384,etPos(getPos() + 1);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,386,f (endLen <= 0) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,387,heckTextToken(varStart - tokenLen);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,388, else {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,389,"etTokenList().addLast(VariableParser.newVariableToken(varStart, getPos() - varStart));"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,390,etPos(getPos() + endLen);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,392, else {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,393,etPos(getPos() + 1);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,396,f (getTokenList().isEmpty()) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,397,heckTextToken(startPos);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,400,eturn (FieldPosition) getTokenList().removeFirst();
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,404, @param endIndex
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,405,            The endIndex to set.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,407,rivate void setEndIndex(int endIndex) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,408,his.endIndex = endIndex;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,412, @param escVarMatcher
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,413,            The escVarMatcher to set.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,415,rivate void setEscVarMatcher(StrMatcher escVarMatcher) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,416,his.escVarMatcher = escVarMatcher;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,420, @param length
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,421,            The length to set.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,423,rivate void setLength(int length) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,424,his.length = length;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,428, @param pos
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,429,            The pos to set.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,431,rivate void setPos(int pos) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,432,his.pos = pos;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,436, @param tokenList
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,437,            The tokenList to set.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,439,rivate void setTokenList(LinkedList tokenList) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,440,his.tokenList = tokenList;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,444, @param varEndMatcher
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,445,            The varEndMatcher to set.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,447,rivate void setVarEndMatcher(StrMatcher varEndMatcher) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,448,his.varEndMatcher = varEndMatcher;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,452, @param varStartMatcher
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,453,            The varStartMatcher to set.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,455,rivate void setVarStartMatcher(StrMatcher varStartMatcher) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,456,his.varStartMatcher = varStartMatcher;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,461, <p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,462, Definition of an interface for obtaining values for variables.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,463, </p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,464, <p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,465, Objects implementing this interface can be passed to <code>VariableFormatter</code>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,466, as source for the values of the variables. The interface is quite simple and defines
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,467, only a single method for retrieving the value of a specified value.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,468, </p>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,470,ublic static interface VariableResolver {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,472, Returns the value of the specified variable. The variable's value
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,473," can be an arbitrary object. If no variable with the given name is known,"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,474, an implementation should return <code>null</code>.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,476, @param varName
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,477,            the name of the searched variable
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,478, @return the variable's value
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,480,bject resolveVariable(String varName);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,483,** Constant for the default escape character. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,484,ublic static final char DEFAULT_ESCAPE = '$';
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,486,** Constant for the default variable prefix. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,487,"ublic static final String DEFAULT_PREFIX = ""${"";"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,489,** Constant for the default variable suffix. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,490,"ublic static final String DEFAULT_SUFFIX = ""}"";"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,493, Replaces the occurrences of all variables in the given source data by
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,494, their current values obtained from the passed in map.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,496, @param valueMap
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,497,            the map with the values
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,498, @param source
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,499,            the source text
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,500, @return the result of the replace operation
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,502,"ublic static String replace(Map valueMap, Object source) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,503,eturn new VariableFormatter(valueMap).replace(source);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,507, Replaces the occurrences of all variables in the given source data by
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,508, their current values obtained from the passed in map. This method allows
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,509, to specifiy a custom variable prefix and suffix
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,511, @param valueMap
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,512,            the map with the values
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,513, @param prefix
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,514,            the prefix of variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,515, @param suffix
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,516,            the suffix of variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,517, @param source
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,518,            the source text
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,519, @return the result of the replace operation
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,521,"ublic static String replace(Map valueMap, String prefix, String suffix, Object source) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,522,"eturn new VariableFormatter(valueMap, prefix, suffix).replace(source);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,526, Replaces all variables in the given source data with values obtained
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,527, from system properties.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,529, @param source
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,530,            the source text
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,531, @return the result of the replace operation
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,533,ublic static String replaceSystemProperties(Object source) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,534,eturn new VariableFormatter(System.getProperties()).replace(source);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,537,** Stores the escape character. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,538,rivate char escapeCharacter;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,540,** Stores the variable prefix. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,541,rivate String variablePrefix;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,544, Variable resolution is delegated to an implementor of VariableResolver.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,546,rivate VariableResolver variableResolver;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,548,** Stores the variable suffix. */
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,549,rivate String variableSuffix;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,552, Creates a new instance with defaults for variable prefix and suffix
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,553, and the escaping character.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,555,ublic VariableFormatter() {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,556,"his((VariableResolver) null, DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,560, Creates a new instance and initializes it. Uses defaults for variable
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,561, prefix and suffix and the escaping character.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,563, @param valueMap
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,564,            the map with the variables' values
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,566,ublic VariableFormatter(Map valueMap) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,567,"his(valueMap, DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,571, Creates a new instance and initializes it. Uses a default escaping character.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,573, @param valueMap
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,574,            the map with the variables' values
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,575, @param prefix
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,576,            the prefix for variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,577, @param suffix
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,578,            the suffix for variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,580,"ublic VariableFormatter(Map valueMap, String prefix, String suffix) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,581,"his(valueMap, prefix, suffix, DEFAULT_ESCAPE);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,585, Creates a new instance and initializes it.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,587, @param valueMap
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,588,            the map with the variables' values
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,589, @param prefix
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,590,            the prefix for variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,591, @param suffix
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,592,            the suffix for variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,593, @param escape
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,594,            the escape character
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,596,"ublic VariableFormatter(Map valueMap, String prefix, String suffix, char escape) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,597,"his(new MapVariableResolver(valueMap), prefix, suffix, escape);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,601, Creates a new instance and initializes it.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,603, @param variableResolver
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,604,            the variable resolver
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,605, @param prefix
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,606,            the prefix for variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,607, @param suffix
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,608,            the suffix for variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,609, @param escape
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,610,            the escape character
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,612,"ublic VariableFormatter(VariableResolver variableResolver, String prefix, String suffix, char escape) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,613,his.setVariableResolver(variableResolver);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,614,his.setVariablePrefix(prefix);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,615,his.setVariableSuffix(suffix);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,616,his.setEscapeCharacter(escape);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,621, Replaces the occurrences of all variables in the given source array by
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,622, their current values.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,624, @param data
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,625,            a character array with the source data
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,626, @return the result of the replace operation
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,628,ublic String replace(char[] data) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,629,"eturn replace(data, 0, data == null ? 0 : data.length);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,633, Replaces the occurrences of all variables in the given source array by their
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,634, current values. Only the specified portion of the array will be processed.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,636, @param data
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,637,            a character array with the source data
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,638, @param offset
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,639,            the start offset; processing will start at this position
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,640, @param length
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,641,            the length of the portion to be processed
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,642, @return the result of the replace operation
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,644,"ublic String replace(char[] data, int offset, int length) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,645,"bject result = doReplace(data, offset, length, null, null);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,646,eturn result == null ? null : result.toString();
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,650, Replaces the occurrences of all variables in the given source data by
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,651, their current values.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,653, @param source
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,654,            the text to be interpolated; this can be an arbitrary object
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,655,            whose <code>toString()</code> method will be called
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,656, @return the result of the replace operation
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,658,ublic String replace(Object source) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,659,bject result = replaceObject(source);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,660,eturn result == null ? null : result.toString();
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,664, Replaces the occurrences of all variables in the given source data by
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,665, their current values. If the source consists only of a single variable
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,666," reference, this method directly returns the value of this variable"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,667, (which can be an arbitrary object). If the source contains multiple
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,668," variable references or static text, the return value will always be a"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,669, String with the concatenation of all these elements.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,671, @param source
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,672,            the text to be interpolated; this can be an arbitrary object
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,673,            whose <code>toString()</code> method will be called
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,674, @return the result of the replace operation
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,676,ublic Object replaceObject(Object source) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,677,"eturn doReplace(source, null);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,682, Recursive handler for multiple levels of interpolation. This is the main
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,683, interpolation method for interpolating objects. It is called for recursively
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,684, processing the values of resolved variables.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,686, @param obj
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,687,            the data to be interpolated (as object)
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,688, @param priorVariables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,689,            keeps track of the replaced variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,690, @return the result of the interpolation process
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,692,"rivate Object doReplace(Object obj, List priorVariables) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,693,f (obj == null) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,694,eturn null;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,696,har[] data = obj.toString().toCharArray();
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,697,"eturn doReplace(data, 0, data.length, obj, priorVariables);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,701, Recursive handler for multiple levels of interpolation. This is the main
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,702," interpolation method, which resolves the values of all variable references"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,703, contained in the passed in text.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,705, @param data
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,706,            the text to be interpolated (as character array)
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,707, @param offset
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,708,            the start offset in the text array
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,709, @param length
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,710,            the length of the data to be processed
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,711, @param ref
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,712,            a reference object which will be returned if no interpolation was performed
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,713, @param priorVariables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,714,            keeps track of the replaced variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,715, @return the result of the interpolation process
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,717,"rivate Object doReplace(char[] data, int offset, int length, Object ref, List priorVariables) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,718,f (data == null) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,719,eturn null;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,722,bject resultObj = ref;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,723,nt tokenCnt = 0;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,724,trBuilder buf = new StrBuilder(length);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,726,/ on the first call initialize priorVariables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,727,f (priorVariables == null) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,728,riorVariables = new ArrayList();
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,729,"riorVariables.add(new String(data, offset, length));"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,732,"ariableParser parser = createParser(data, offset, length);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,733,ieldPosition tok;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,734,hile ((tok = parser.nextToken(data)) != null) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,735,witch (tok.getField()) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,736,ase VariableParser.TEXT_TOKEN :
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,737,"uf.append(data, tok.getBeginIndex(), getLength(tok));"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,738,reak;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,740,ase VariableParser.ESCAPED_VAR_TOKEN :
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,741,uf.append(getVariablePrefix());
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,742,okenCnt++;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,743,reak;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,745,ase VariableParser.VARIABLE_TOKEN :
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,746,"tring variable = new String(data, tok.getBeginIndex(), getLength(tok));"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,748,"/ if we've got a loop, create a useful exception message and"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,749,/ throw
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,750,f (priorVariables.contains(variable)) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,751,tring initialBase = priorVariables.remove(0).toString();
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,752,riorVariables.add(variable);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,753,trBuilder priorVariableSb = new StrBuilder();
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,755,/ create a nice trace of interpolated variables like so:
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,756,/ var1->var2->var3
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,757,or (Iterator it = priorVariables.iterator(); it.hasNext();) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,758,riorVariableSb.append(it.next());
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,759,f (it.hasNext()) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,760,"riorVariableSb.append(""->"");"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,763,"hrow new IllegalStateException(""Infinite loop in property interpolation of """
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,764, initialBase
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,766, priorVariableSb.toString());
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,768,"/ otherwise, add this variable to the interpolation list."
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,769,riorVariables.add(variable);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,771,esultObj = resolveVariable(variable);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,772,f (resultObj != null) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,773,"esultObj = doReplace(resultObj, priorVariables);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,774,uf.append(resultObj);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,775, else {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,776,/ variable not defined - so put it back in the value
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,777,uf.append(getVariablePrefix()).append(variable).append(getVariableSuffix());
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,780,/ pop the interpolated variable off the stack
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,781,/ this maintains priorVariables correctness for
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,782,"/ properties with multiple interpolations, e.g."
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,783,/ prop.name=${some.other.prop1}/blahblah/${some.other.prop2}
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,784,riorVariables.remove(priorVariables.size() - 1);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,785,reak;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,787,okenCnt++;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,790,f (resultObj != null && tokenCnt == 1) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,791,"/ if there was only one token, return the reference object"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,792,eturn resultObj;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,794,eturn buf.toString();
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,798, Gets the length from the parsed token.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,800, @param tok  the token
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,801, @return the length
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,803,rivate int getLength(FieldPosition tok) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,804,eturn tok.getEndIndex() - tok.getBeginIndex();
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,808, Creates a parser object for tokenizing the input data.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,810, @param data
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,811,            the input data
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,812, @param offset
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,813,            the offset in the source array
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,814, @param length
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,815,            the length of the data to be processed
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,816, @return the parser
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,818,"rotected VariableParser createParser(char[] data, int offset, int length) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,819,eturn new VariableParser(
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,820,"trMatcher.stringMatcher(getVariablePrefix()),"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,821,"trMatcher.stringMatcher(getVariableSuffix()),"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,822,"trMatcher.stringMatcher(String.valueOf(getEscapeCharacter()) + getVariablePrefix()), offset, length);"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,826, Resolves the specified variable. This method is called whenever a variable
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,827, reference is detected in the source text. It is passed the variable's name
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,828, and must return the corresponding value. This implementation accesses the
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,829, value map using the variable's name as key. Derived classes may override
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,830, this method to implement a different strategy for resolving variables.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,832, @param name
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,833,            the name of the variable
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,834, @return the variable's value or <b>null</b> if the variable is unknown
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,836,rotected Object resolveVariable(String name) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,837,f (this.getVariableResolver() == null) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,838,eturn null;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,840,eturn this.getVariableResolver().resolveVariable(name);
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,845, Returns the escape character.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,847, @return the character used for escaping variable references
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,849,ublic char getEscapeCharacter() {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,850,eturn this.escapeCharacter;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,854, Sets the escape character.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,855, If this character is placed before a variable reference in the source
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,856," text, this variable will be ignored."
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,858, @param escapeCharacter
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,859,            the escape character (0 for disabling escaping)
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,861,ublic void setEscapeCharacter(char escapeCharacter) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,862,his.escapeCharacter = escapeCharacter;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,866, Returns the prefix for variables.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,868, @return the prefix for variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,870,ublic String getVariablePrefix() {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,871,eturn this.variablePrefix;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,875, Sets the prefix for variables.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,877, @param variablePrefix
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,878,"            the prefix for variables, not null"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,879, @throws IllegalArgumentException
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,880,             if the prefix is <b>null</b>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,882,ublic void setVariablePrefix(String variablePrefix) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,883,f (variablePrefix == null) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,884,"hrow new IllegalArgumentException(""Variable prefix must not be null!"");"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,886,his.variablePrefix = variablePrefix;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,890, Returns the suffix for variables.
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,892, @return the suffix for variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,894,ublic String getVariableSuffix() {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,895,eturn this.variableSuffix;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,899, Sets the suffix for variables
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,901, @param variableSuffix
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,902,"            the suffix for variables, not null"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,903, @throws IllegalArgumentException
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,904,             if the prefix is <b>null</b>
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,906,ublic void setVariableSuffix(String variableSuffix) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,907,f (variableSuffix == null) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,908,"hrow new IllegalArgumentException(""Variable suffix must not be null!"");"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,910,his.variableSuffix = variableSuffix;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,914, Gets the VariableResolver
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,916, @return the VariableResolver
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,918,ublic VariableResolver getVariableResolver() {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,919,eturn this.variableResolver;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,923, Sets the VariableResolver
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,925, @param variableResolver
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,926,            the VariableResolver
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,928,ublic void setVariableResolver(VariableResolver variableResolver) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,929,his.variableResolver = variableResolver;
False,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,58,uite.addTestSuite(VariableFormatterTest.class);
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,2, Copyright 2005 The Apache Software Foundation.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,5, you may not use this file except in compliance with the License.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,6, You may obtain a copy of the License at
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,13, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,14, limitations under the License.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,17,ackage org.apache.commons.lang.text;
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,19,mport java.util.HashMap;
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,20,mport java.util.Map;
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,22,mport junit.framework.TestCase;
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,24,mport org.apache.commons.lang.text.VariableFormatter.MapVariableResolver;
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,27, Test class for VariableFormatter.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,29, @author Oliver Heger
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,30, @version $Id$
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,32,ublic class VariableFormatterTest extends TestCase {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,34,"rivate static final String KEY_ANIMAL = ""animal"";"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,36,"rivate static final String KEY_TARGET = ""target"";"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,38,"tatic final String REPLACE_TEMPLATE = ""The ${animal} jumps over the ${target}."";"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,40,"tatic final String REPLACE_TEMPLATE_EMPTY_KEYS = ""The ${} jumps over the ${}."";"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,42,"tatic final String REPLACE_TEMPLATE_NO_ESCAPE = ""The {animal} jumps over the {target}."";"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,44,"tatic final String REPLACE_TEMPLATE_NO_MARKERS = ""The animal jumps over the target."";"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,46,"tatic final String REPLACE_TEMPLATE_NO_PREFIX = ""The $animal} jumps over the $target}."";"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,48,"tatic final String REPLACE_TEMPLATE_NO_SUFFIX = ""The ${animal jumps over the ${target."";"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,50,rivate VariableFormatter format;
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,52,rivate Map values;
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,54,ariableFormatter getFormat() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,55,eturn this.format;
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,58,apVariableResolver getMapVariableResolver() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,59,eturn (MapVariableResolver) this.getFormat().getVariableResolver();
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,62,rivate Map getValueMap() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,63,eturn this.getMapVariableResolver().getMap();
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,66,ap getValues() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,67,eturn this.values;
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,70,oid setFormat(VariableFormatter format) {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,71,his.format = format;
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,74,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,75,uper.setUp();
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,76,ap map = new HashMap();
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,77,"ap.put(KEY_ANIMAL, ""quick brown fox"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,78,"ap.put(KEY_TARGET, ""lazy dog"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,79,etValues(map);
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,80,etFormat(new VariableFormatter(map));
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,83,rivate void setValueMap(Map valuesMap) {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,84,his.getMapVariableResolver().setMap(valuesMap);
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,87,oid setValues(Map values) {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,88,his.values = values;
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,92, Tests a cyclic replace operation. The cycle should be detected and cause an exception to be thrown.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,94,ublic void testCyclicReplacement() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,95,ap valuesMap = new HashMap();
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,96,"aluesMap.put(KEY_ANIMAL, ""${critter}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,97,"aluesMap.put(KEY_TARGET, ""${pet}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,98,"aluesMap.put(""pet"", ""${petCharacteristic} dog"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,99,"aluesMap.put(""petCharacteristic"", ""lazy"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,100,"aluesMap.put(""critter"", ""${critterSpeed} ${critterColor} ${critterType}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,101,"aluesMap.put(""critterSpeed"", ""quick"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,102,"aluesMap.put(""critterColor"", ""brown"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,103,"aluesMap.put(""critterType"", ""${animal}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,104,his.setValueMap(valuesMap);
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,105,ry {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,106,his.getFormat().replace(REPLACE_TEMPLATE);
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,107,"ail(""Cyclic replacement was not detected!"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,108, catch (IllegalStateException isx) {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,109,/ ok
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,114, Tests escaping variable references.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,116,ublic void testEscape() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,117,"ssertEquals(""${"", this.getFormat().replace(""$${""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,118,"ssertEquals(""${animal}"", this.getFormat().replace(""$${animal}""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,119,"his.getValueMap().put(""var_name"", ""x"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,120,"ssertEquals(""Many $$$$${target} $s"", this.getFormat().replace(""Many $$$$$${target} $s""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,121,"ssertEquals(""Variable ${x} must be used!"", this.getFormat().replace(""Variable $${${var_name}} must be used!""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,125, Tests creating new <code>VariableFormat</code> objects.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,127,ublic void testInitialize() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,128,ssertNotNull(this.getFormat().getVariableResolver());
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,129,"ssertEquals(VariableFormatter.DEFAULT_PREFIX, this.getFormat().getVariablePrefix());"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,130,"ssertEquals(VariableFormatter.DEFAULT_SUFFIX, this.getFormat().getVariableSuffix());"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,131,"ssertEquals(VariableFormatter.DEFAULT_ESCAPE, this.getFormat().getEscapeCharacter());"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,133,"ormat = new VariableFormatter(values, ""<<"", "">>"", '\\');"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,134,"ssertEquals(""<<"", this.getFormat().getVariablePrefix());"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,135,"ssertEquals("">>"", this.getFormat().getVariableSuffix());"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,136,"ssertEquals('\\', this.getFormat().getEscapeCharacter());"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,138,/ new VariableFormatter(null) should be OK IMO
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,139,/ Gary Gregory - July 14 2005
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,140,/ try {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,141,/ format = new VariableFormatter(null);
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,142,"/ fail(""Could create format object with null map!"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,143,/ } catch (IllegalArgumentException iex) {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,144,/ // ok
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,147,ry {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,148,"ormat = new VariableFormatter(values, ""${"", null);"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,149,"ail(""Could create format object with undefined suffix!"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,150, catch (IllegalArgumentException iex) {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,151,/ ok
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,154,ry {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,155,"ormat = new VariableFormatter(values, null, ""]"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,156,"ail(""Could create format object with undefined prefix!"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,157, catch (IllegalArgumentException iex) {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,158,/ ok
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,163, Tests chaning variable prefix and suffix and the escaping character.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,165,ublic void testNonDefaultTokens() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,166,"ormat = new VariableFormatter(values, ""<<"", "">>"", '\\');"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,167,"ssertEquals(""The quick brown fox jumps over the lazy dog."", format"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,168,"replace(""The <<animal>> jumps over the <<target>>.""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,169,"ssertEquals(""The quick brown fox jumps over the <<target>>."", format"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,170,"replace(""The <<animal>> jumps over the \\<<target>>.""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,174, Tests invoking the static convenience methods.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,176,ublic void testNonInstanceMethods() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,177,"ssertEquals(""The quick brown fox jumps over the lazy dog."", VariableFormatter"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,178,"replace(values, REPLACE_TEMPLATE));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,179,"alues.put(KEY_ANIMAL, ""cow"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,180,"alues.put(KEY_TARGET, ""moon"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,181,"ssertEquals(""The cow jumps over the moon."", VariableFormatter.replace(values, ""&"", "";"","
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,182,"The &animal; jumps over the &target;.""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,185,ublic void testNoResolver() throws Exception {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,186,his.testNoResolver(new VariableFormatter());
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,187,his.testNoResolver(new VariableFormatter(null));
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,190,oid testNoResolver(VariableFormatter formatter) throws Exception {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,191,ormatter.setVariableResolver(null);
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,192,his.validateNoReplace(formatter);
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,195,ublic void testNullMap() throws Exception {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,196,ariableFormatter formatter = new VariableFormatter(null);
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,197,alidateNoReplace(formatter);
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,201, Tests recursive replacements.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,203,ublic void testRecursiveReplacement() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,204,ap valuesMap = new HashMap();
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,205,"aluesMap.put(KEY_ANIMAL, ""${critter}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,206,"aluesMap.put(KEY_TARGET, ""${pet}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,207,"aluesMap.put(""pet"", ""${petCharacteristic} dog"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,208,"aluesMap.put(""petCharacteristic"", ""lazy"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,209,"aluesMap.put(""critter"", ""${critterSpeed} ${critterColor} ${critterType}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,210,"aluesMap.put(""critterSpeed"", ""quick"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,211,"aluesMap.put(""critterColor"", ""brown"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,212,"aluesMap.put(""critterType"", ""fox"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,213,his.setValueMap(valuesMap);
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,214,"ssertEquals(""The quick brown fox jumps over the lazy dog."", this.getFormat().replace(REPLACE_TEMPLATE));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,218, Tests typical replace operations.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,220,ublic void testReplace() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,221,"ssertEquals(""The quick brown fox jumps over the lazy dog."", this.getFormat().replaceObject(REPLACE_TEMPLATE));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,222,ap map = this.getValueMap();
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,223,"ap.put(KEY_ANIMAL, ""cow"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,224,"ap.put(KEY_TARGET, ""moon"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,225,"ssertEquals(""The cow jumps over the moon."", this.getFormat().replace(REPLACE_TEMPLATE));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,227,"ssertEquals(""Variable ${var} is unknown!"", this.getFormat().replace(""Variable ${var} is unknown!""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,231, Tests a replace template with missing empty marker strings.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,233,ublic void testReplaceEmptyKeys() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,234,estReplaceNoElement(REPLACE_TEMPLATE_EMPTY_KEYS);
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,237,oid testReplaceNoElement(String badReplaceTemplate) {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,238,"ssertEquals(badReplaceTemplate, this.getFormat().replaceObject(badReplaceTemplate));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,239,ap map = this.getValueMap();
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,240,"ap.put(KEY_ANIMAL, ""cow"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,241,"ap.put(KEY_TARGET, ""moon"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,242,"ssertEquals(""The cow jumps over the moon."", this.getFormat().replace(REPLACE_TEMPLATE));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,243,"ssertEquals(badReplaceTemplate, this.getFormat().replaceObject(badReplaceTemplate));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,247, Tests a replace template with missing escape strings.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,249,ublic void testReplaceNoEscape() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,250,estReplaceNoElement(REPLACE_TEMPLATE_NO_ESCAPE);
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,254, Tests a replace template with missing marker strings.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,256,ublic void testReplaceNoMarkers() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,257,estReplaceNoElement(REPLACE_TEMPLATE_NO_MARKERS);
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,261, Tests a replace template with missing prefix strings.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,263,ublic void testReplaceNoPrefix() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,264,estReplaceNoElement(REPLACE_TEMPLATE_NO_PREFIX);
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,268, Tests a replace template with missing postfix strings.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,270,ublic void testReplaceNoSuffix() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,271,estReplaceNoElement(REPLACE_TEMPLATE_NO_SUFFIX);
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,275, Tests source texts with nothing to replace.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,277,ublic void testReplaceNothing() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,278,ssertNull(this.getFormat().replace(null));
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,279,ssertNull(this.getFormat().replace((Object)null));
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,280,"ssertEquals(""Nothing to replace."", this.getFormat().replace(""Nothing to replace.""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,281,"ssertEquals(""42"", this.getFormat().replace(new Integer(42)));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,285, Tests operating on objects.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,287,ublic void testReplaceObject() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,288,"his.getValueMap().put(""value"", new Integer(42));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,289,"ssertEquals(new Integer(42), this.getFormat().replaceObject(""${value}""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,290,"ssertEquals(""The answer is 42."", this.getFormat().replaceObject(""The answer is ${value}.""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,294, Tests interpolation with system properties.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,296,ublic void testReplaceSystemProperties() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,297,tringBuffer buf = new StringBuffer();
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,298,"uf.append(""Hi "").append(System.getProperty(""user.name""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,299,"uf.append("", you are working with "");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,300,"uf.append(System.getProperty(""os.name""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,301,"uf.append("", your home directory is "");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,302,"uf.append(System.getProperty(""user.home"")).append('.');"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,303,"ssertEquals(buf.toString(), VariableFormatter.replaceSystemProperties(""Hi ${user.name}, you are """
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,304," ""working with ${os.name}, your home """
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,305," ""directory is ${user.home}.""));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,309, Tests interpolation with weird boundary patterns.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,311,ublic void testReplaceWeirdPattens() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,312,"estReplaceNoElement("""");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,313,"estReplaceNoElement(""${}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,314,"estReplaceNoElement(""${ }"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,315,"estReplaceNoElement(""${\t}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,316,"estReplaceNoElement(""${\n}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,317,"estReplaceNoElement(""${\b}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,318,"estReplaceNoElement(""${"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,319,"estReplaceNoElement(""$}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,320,"estReplaceNoElement(""}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,321,"estReplaceNoElement(""${}$"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,322,"estReplaceNoElement(""${${"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,323,"estReplaceNoElement(""${${}}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,324,"estReplaceNoElement(""${$${}}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,325,"estReplaceNoElement(""${$$${}}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,326,"estReplaceNoElement(""${$$${$}}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,327,"estReplaceNoElement(""${${}}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,328,"estReplaceNoElement(""${${ }}"");"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,332, Tests replace operations on char arrays.
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,334,ublic void testReplaceCharArray() {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,335,"ssertEquals(null, this.getFormat().replace((char[]) null));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,336,"ssertEquals("""", this.getFormat().replace(new char[0]));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,337,"ssertEquals(new String(new char[1]), this.getFormat().replace(new char[1]));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,338,har[] data = REPLACE_TEMPLATE.toCharArray();
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,339,"ssertEquals(""The quick brown fox jumps over the lazy dog."", this.getFormat().replace(data));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,340,"ssertEquals(""The quick brown fox"", this.getFormat().replace(data, 0, 13));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,341,"ssertEquals("""", this.getFormat().replace(data, 0, 0));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,342,har[] empty = new char[0];
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,343,"ssertEquals("""", this.getFormat().replace(empty));"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,346,oid validateNoReplace(VariableFormatter formatter) {
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,347,"tring srcString = ""Hello ${user.name}"";"
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,348,tring destString = formatter.replace(srcString);
False,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,src/test/org/apache/commons/lang/text/VariableFormatterTest.java,349,"ssertEquals(srcString, destString);"

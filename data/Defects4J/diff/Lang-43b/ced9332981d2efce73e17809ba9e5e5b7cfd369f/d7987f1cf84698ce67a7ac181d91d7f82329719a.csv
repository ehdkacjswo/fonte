is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,70,* @author Phil Steitz
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,71," @version $Id: CharSet.java,v 1.10 2003/08/02 18:18:33 scolebourne Exp $"
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,72,"* @version $Id: CharSet.java,v 1.11 2003/08/04 00:50:14 scolebourne Exp $"
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,130,* <p>The matching order is:</p>
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,131,* <ol
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,132,"*  <li>Negated multi character range, such as ""^a-e"""
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,133,"*  <li>Ordinary multi character range, such as ""a-e"""
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,134,"*  <li>Negated single character, such as ""^a"""
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,135,"*  <li>Ordinary single character, such as ""a"""
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,136,* </ol>
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,137,* <p>Matching works left to right. Once a match is found the
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,138,* search starts again from the next character.</p>
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,131," Thus, ""a-ca-c"" creates only one range of ""a-c""."
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,132," However, ""a-cabc"" creates two ranges as they are defined differently.</p>"
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,142,"* Thus, ""a-ca-c"" creates only one range of ""a-c"".</p>"
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,144,"* <p>If the start and end of a range are in the wrong order,"
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,145,"* they are reversed. Thus ""a-e"" is the same as ""e-a""."
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,146,"* As a result, ""a-ee-a"" would create only one range,"
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,147,"* as the ""a-e"" and ""e-a"" are the same.</p>"
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,149,* <p>The set of characters represented is the union of the specified ranges.</p>
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,183,witch (len) {
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,184,ase 0:
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,185,/ do nothing
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,186,reak;
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,188,ase 1:
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,189,et.add(new CharRange(str.charAt(0)));
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,190,reak;
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,192,efault:
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,193,nt start = -1;
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,194,oolean negated = false;
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,195,or (int i = 0; i < len; i++) {
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,196,har ch = str.charAt(i);
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,197,f (ch == '-') {
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,198,f (start == -1) {
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,199,/ dash found not as range separator
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,200,/ treat as ordinary start block char
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,201,tart = ch;
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,202, else if (i == len - 1) {
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,203,"/ dash is last character, store two single characters"
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,204,"et.add(new CharRange((char) start, (char) start, negated));"
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,205,et.add(DASH);
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,206,tart = -1;
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,207,egated = false;
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,208, else {
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,209,"/ range block found, store it"
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,210,"et.add(new CharRange((char) start, str.charAt(++i), negated));"
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,211,tart = -1;
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,212,egated = false;
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,214, else if (ch == '^') {
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,215,f (start == -1) {
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,216,f (negated) {
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,217,"/ double negate, treat second as ordinary start block char"
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,218,tart = ch;
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,219, else {
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,220,/ negate next block
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,221,egated = true;
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,223, else {
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,224,"/ previous block has ended, store it"
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,225,"et.add(new CharRange((char) start, (char) start, negated));"
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,226,tart = -1;
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,227,egated = true;
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,229, else {
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,230,f (start == -1) {
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,231,/ start of block
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,232,tart = ch;
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,233, else {
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,234,"/ previous block has ended, store it, and start next block"
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,235,"et.add(new CharRange((char) start, (char) start, negated));"
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,236,tart = ch;
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,237,egated = false;
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,241,/ handle leftovers
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,242,f (start != -1) {
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,243,"et.add(new CharRange((char) start, (char) start, negated));"
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,244, else if (negated) {
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,245,et.add(NEGATE);
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,200,int pos = 0;
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,201,while (pos < len) {
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,202,int remainder = (len - pos);
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,203,if (remainder >= 4 && str.charAt(pos) == '^' && str.charAt(pos + 2) == '-') {
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,204,// negated range
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,205,"set.add(new CharRange(str.charAt(pos + 1), str.charAt(pos + 3), true));"
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,206,pos += 4;
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,207,} else if (remainder >= 3 && str.charAt(pos + 1) == '-') {
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,208,// range
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,209,"set.add(new CharRange(str.charAt(pos), str.charAt(pos + 2)));"
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,210,pos += 3;
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,211,} else if (remainder >= 2 && str.charAt(pos) == '^') {
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,212,// negated char
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,213,"set.add(new CharRange(str.charAt(pos + 1), true));"
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,214,pos += 2;
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,215,} else {
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,216,// char
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,217,set.add(new CharRange(str.charAt(pos)));
True,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,218,pos += 1;
False,src/java/org/apache/commons/lang/CharSet.java,src/java/org/apache/commons/lang/CharSet.java,247,reak;
True,src/java/org/apache/commons/lang/CharSetUtils.java,src/java/org/apache/commons/lang/CharSetUtils.java,65,* @author Phil Steitz
False,src/java/org/apache/commons/lang/CharSetUtils.java,src/java/org/apache/commons/lang/CharSetUtils.java,66," @version $Id: CharSetUtils.java,v 1.20 2003/08/02 18:18:33 scolebourne Exp $"
True,src/java/org/apache/commons/lang/CharSetUtils.java,src/java/org/apache/commons/lang/CharSetUtils.java,67,"* @version $Id: CharSetUtils.java,v 1.21 2003/08/04 00:50:14 scolebourne Exp $"
False,src/java/org/apache/commons/lang/CharSetUtils.java,src/java/org/apache/commons/lang/CharSetUtils.java,83, <p>Creates a <code>CharSetUtils</code> object which allows a certain amount of
True,src/java/org/apache/commons/lang/CharSetUtils.java,src/java/org/apache/commons/lang/CharSetUtils.java,84,* <p>Creates a <code>CharSet</code> instance which allows a certain amount of
False,src/java/org/apache/commons/lang/CharSetUtils.java,src/java/org/apache/commons/lang/CharSetUtils.java,88,"  <li>&quot;^e&quot; implies not e. However it only negates, it's not"
False,src/java/org/apache/commons/lang/CharSetUtils.java,src/java/org/apache/commons/lang/CharSetUtils.java,89,   a set in itself due to the size of that set in unicode.</li>
True,src/java/org/apache/commons/lang/CharSetUtils.java,src/java/org/apache/commons/lang/CharSetUtils.java,89,*  <li>&quot;^e&quot; implies not e.</li>
True,src/java/org/apache/commons/lang/CharSetUtils.java,src/java/org/apache/commons/lang/CharSetUtils.java,97,"* CharSetUtils.evaluateSet(""abe-g"") = CharSet matching a,b,e,f,g"
False,src/java/org/apache/commons/lang/CharSetUtils.java,src/java/org/apache/commons/lang/CharSetUtils.java,112, <p>Creates a <code>CharSetUtils</code> object which allows a certain amount of
True,src/java/org/apache/commons/lang/CharSetUtils.java,src/java/org/apache/commons/lang/CharSetUtils.java,113,* <p>Creates a <code>CharSet</code> instance which allows a certain amount of
False,src/java/org/apache/commons/lang/CharSetUtils.java,src/java/org/apache/commons/lang/CharSetUtils.java,117,"  <li>&quot;^e&quot; implies not e. However it only negates, it's not"
False,src/java/org/apache/commons/lang/CharSetUtils.java,src/java/org/apache/commons/lang/CharSetUtils.java,118,   a set in itself due to the size of that set in unicode.</li>
True,src/java/org/apache/commons/lang/CharSetUtils.java,src/java/org/apache/commons/lang/CharSetUtils.java,118,*  <li>&quot;^e&quot; implies not e.</li>
False,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,67," @version $Id: CharSetTest.java,v 1.1 2003/08/02 18:18:33 scolebourne Exp $"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,67,* @author Phil Steitz
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,68,"* @version $Id: CharSetTest.java,v 1.2 2003/08/04 00:50:14 scolebourne Exp $"
False,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,281,"ssertEquals(true, ArrayUtils.contains(array, new CharRange('^')));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,282,"assertEquals(true, ArrayUtils.contains(array, new CharRange('^'))); // ""^"""
False,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,286,"ssertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true)));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,287,"assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // ""^^"""
False,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,291,"ssertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true)));"
False,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,292,"ssertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^')));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,292,"assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // ""^^"""
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,293,"assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^'))); // ""^"""
False,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,297,"ssertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true)));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,298,"assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // ""^^"" x2"
False,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,302,"ssertEquals(true, ArrayUtils.contains(array, new CharRange('a')));"
False,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,303,"ssertEquals(true, ArrayUtils.contains(array, new CharRange('^')));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,303,"assertEquals(true, ArrayUtils.contains(array, new CharRange('a'))); // ""a"""
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,304,"assertEquals(true, ArrayUtils.contains(array, new CharRange('^'))); // ""^"""
False,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,308,"ssertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));"
False,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,309,"ssertEquals(true, ArrayUtils.contains(array, new CharRange('-')));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,309,"assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true))); // ""^a"""
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,310,"assertEquals(true, ArrayUtils.contains(array, new CharRange('-'))); // ""-"""
False,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,314,"ssertEquals(true, ArrayUtils.contains(array, new CharRange('^', 'c', true)));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,315,"assertEquals(true, ArrayUtils.contains(array, new CharRange('^', 'c', true))); // ""^^-c"""
False,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,319,"ssertEquals(true, ArrayUtils.contains(array, new CharRange('c', '^', true)));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,320,"assertEquals(true, ArrayUtils.contains(array, new CharRange('c', '^', true))); // ""^c-^"""
False,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,324,"ssertEquals(true, ArrayUtils.contains(array, new CharRange('c', '^', true)));"
False,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,325,"ssertEquals(true, ArrayUtils.contains(array, new CharRange('d')));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,325,"assertEquals(true, ArrayUtils.contains(array, new CharRange('c', '^', true))); // ""^c-^"""
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,326,"assertEquals(true, ArrayUtils.contains(array, new CharRange('d'))); // ""d"""
False,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,330,"ssertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true)));"
False,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,331,"ssertEquals(true, ArrayUtils.contains(array, new CharRange('-')));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,331,"assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // ""^^"""
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,332,"assertEquals(true, ArrayUtils.contains(array, new CharRange('-'))); // ""-"""
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,335,public void testConstructor_String_oddCombinations() {
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,336,CharSet set;
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,337,CharRange[] array = null;
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,339,"set = CharSet.getInstance(""a-^c"");"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,340,array = set.getCharRanges();
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,341,"assertEquals(true, ArrayUtils.contains(array, new CharRange('a', '^'))); // ""a-^"""
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,342,"assertEquals(true, ArrayUtils.contains(array, new CharRange('c'))); // ""c"""
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,343,"assertEquals(false, set.contains('b'));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,344,"assertEquals(true, set.contains('^'));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,345,"assertEquals(true, set.contains('_')); // between ^ and a"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,346,"assertEquals(true, set.contains('c'));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,348,"set = CharSet.getInstance(""^a-^c"");"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,349,array = set.getCharRanges();
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,350,"assertEquals(true, ArrayUtils.contains(array, new CharRange('a', '^', true))); // ""^a-^"""
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,351,"assertEquals(true, ArrayUtils.contains(array, new CharRange('c'))); // ""c"""
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,352,"assertEquals(true, set.contains('b'));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,353,"assertEquals(false, set.contains('^'));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,354,"assertEquals(false, set.contains('_')); // between ^ and a"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,356,"set = CharSet.getInstance(""a- ^-- ""); //contains everything"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,357,array = set.getCharRanges();
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,358,"assertEquals(true, ArrayUtils.contains(array, new CharRange('a', ' '))); // ""a- """
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,359,"assertEquals(true, ArrayUtils.contains(array, new CharRange('-', ' ', true))); // ""^-- """
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,360,"assertEquals(true, set.contains('#'));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,361,"assertEquals(true, set.contains('^'));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,362,"assertEquals(true, set.contains('a'));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,363,"assertEquals(true, set.contains('*'));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,364,"assertEquals(true, set.contains('A'));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,366,"set = CharSet.getInstance(""^-b"");"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,367,array = set.getCharRanges();
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,368,"assertEquals(true, ArrayUtils.contains(array, new CharRange('^','b'))); // ""^-b"""
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,369,"assertEquals(true, set.contains('b'));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,370,"assertEquals(true, set.contains('_')); // between ^ and a"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,371,"assertEquals(false, set.contains('A'));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,372,"assertEquals(true, set.contains('^'));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,374,"set = CharSet.getInstance(""b-^"");"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,375,array = set.getCharRanges();
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,376,"assertEquals(true, ArrayUtils.contains(array, new CharRange('^','b'))); // ""b-^"""
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,377,"assertEquals(true, set.contains('b'));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,378,"assertEquals(true, set.contains('^'));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,379,"assertEquals(true, set.contains('a')); // between ^ and b"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,380,"assertEquals(false, set.contains('c'));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,429,"CharSet dtob = CharSet.getInstance(""d-b"");"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,458,"assertEquals(false, dtob.contains('a'));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,459,"assertEquals(true, dtob.contains('b'));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,460,"assertEquals(true, dtob.contains('c'));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,461,"assertEquals(true, dtob.contains('d'));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,462,"assertEquals(false, dtob.contains('e'));"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,464,CharRange[] array = dtob.getCharRanges();
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,465,"assertEquals(""[b-d]"", dtob.toString());"
True,src/test/org/apache/commons/lang/CharSetTest.java,src/test/org/apache/commons/lang/CharSetTest.java,466,"assertEquals(1, array.length);"

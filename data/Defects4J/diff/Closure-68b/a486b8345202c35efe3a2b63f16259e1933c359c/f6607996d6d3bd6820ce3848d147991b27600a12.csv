is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,39,mport java.util.ArrayList;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,223,/ Go through every single point of the program and look at each variable
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,224,"/ pairs. If they are both live at the same time, at an edge between them."
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,225,"or (DiGraphNode<Node, Branch> cfgNode : cfg.getDirectedGraphNodes()) {"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,226,lowState<LiveVariableLattice> state = cfgNode.getAnnotation();
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,227,f (cfg.isImplicitReturn(cfgNode)) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,228,ontinue;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,222,// Go through each variable and try to connect them.
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,223,for (Iterator<Var> i1 = scope.getVars(); i1.hasNext();) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,224,Var v1 = i1.next();
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,231,nt varsInScope = scope.getVarCount();
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,232,rrayList<CombinedLiveRangeChecker> rangesToCheck =
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,233,ew ArrayList<CombinedLiveRangeChecker>(
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,234,arsInScope * varsInScope);
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,236,or (Iterator<Var> i1 = scope.getVars(); i1.hasNext();) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,237,ar v1 = i1.next();
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,238,or (Iterator<Var> i2 = scope.getVars(); i2.hasNext();) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,239,ar v2 = i2.next();
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,241,f (v1 == v2 || !interferenceGraph.hasNode(v1) ||
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,242,interferenceGraph.hasNode(v2)) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,243,/ Skip nodes that were not added. They are globals and escaped
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,244,/ locals. Also avoid merging a variable with itself.
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,245,ontinue;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,226,NEXT_VAR_PAIR:
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,227,for (Iterator<Var> i2 = scope.getVars(); i2.hasNext();) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,228,Var v2 = i2.next();
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,248,oolean v1OutLive = state.getOut().isLive(v1);
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,249,oolean v2OutLive = state.getOut().isLive(v2);
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,250,"/ Finally, check the live states and add edge when possible."
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,251,f (v1.getParentNode().getType() == Token.LP &&
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,252,2.getParentNode().getType() == Token.LP) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,253,"nterferenceGraph.connectIfNotFound(v1, null, v2);"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,254, else if ((state.getIn().isLive(v1) && state.getIn().isLive(v2)) ||
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,255,v1OutLive && v2OutLive)) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,256,"nterferenceGraph.connectIfNotFound(v1, null, v2);"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,257, else {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,258,iveRangeChecker checker1 =
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,259,"ew LiveRangeChecker(v1, v2OutLive ? null : v2);"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,260,iveRangeChecker checker2 =
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,261,"ew LiveRangeChecker(v2, v1OutLive ? null : v1);"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,262,"angesToCheck.add(new CombinedLiveRangeChecker(checker1, checker2));"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,230,// Skip duplicate pairs.
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,231,if (v1.index >= v2.index) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,232,continue;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,267,/ Do the collected live range checks.
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,268,"heckRanges(rangesToCheck, cfgNode.getValue());"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,269,or (CombinedLiveRangeChecker range : rangesToCheck) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,270,ange.connectIfCrossed(interferenceGraph);
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,273,eturn interferenceGraph;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,235,if (!interferenceGraph.hasNode(v1) ||
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,236,!interferenceGraph.hasNode(v2)) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,237,// Skip nodes that were not added. They are globals and escaped
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,238,// locals. Also avoid merging a variable with itself.
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,239,continue NEXT_VAR_PAIR;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,277, Check if the live ranges of the given pairs of variables overlap within a
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,278, node represented by a CFG node. This only occurs when a variable {@code
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,279, def} is assigned within a node and a second variable {@code use} is live
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,280, after it. This function will traversing the subtree in a
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,281, left-to-right-post-order fashion in correspondent to how expressions are
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,282, evaluated.
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,284, @param root The current subtree represent by a control flow graph node.
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,286,rivate void checkRanges(
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,287,"rrayList<CombinedLiveRangeChecker> rangesToCheck, Node root) {"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,288,ombinedCfgNodeLiveRangeChecker callbacks =
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,289,ew CombinedCfgNodeLiveRangeChecker(rangesToCheck);
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,290,"odeTraversal.traverse(compiler, root, callbacks);"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,242,if (v1.getParentNode().getType() == Token.LP &&
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,243,v2.getParentNode().getType() == Token.LP) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,244,"interferenceGraph.connectIfNotFound(v1, null, v2);"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,245,continue NEXT_VAR_PAIR;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,294, A simple wrapper calls to call two AbstractCfgNodeTraversalCallback
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,295, callback during the same traversal.  All traversals callbacks have the same
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,296," ""shouldTraverse"" conditions."
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,298,rivate static class CombinedCfgNodeLiveRangeChecker
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,299,xtends AbstractCfgNodeTraversalCallback {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,248,// Go through every CFG node in the program and look at
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,249,// this variable pair. If they are both live at the same
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,250,"// time, add an edge between them and continue to the next pair."
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,251,NEXT_CROSS_CFG_NODE:
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,252,"for (DiGraphNode<Node, Branch> cfgNode : cfg.getDirectedGraphNodes()) {"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,253,if (cfg.isImplicitReturn(cfgNode)) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,254,continue NEXT_CROSS_CFG_NODE;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,301,rivate final ArrayList<CombinedLiveRangeChecker> callbacks;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,257,FlowState<LiveVariableLattice> state = cfgNode.getAnnotation();
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,258,// Check the live states and add edge when possible.
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,259,if ((state.getIn().isLive(v1) && state.getIn().isLive(v2)) ||
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,260,(state.getOut().isLive(v1) && state.getOut().isLive(v2))) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,261,"interferenceGraph.connectIfNotFound(v1, null, v2);"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,262,continue NEXT_VAR_PAIR;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,303,ombinedCfgNodeLiveRangeChecker(
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,304,rrayList<CombinedLiveRangeChecker> callbacks) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,305,his.callbacks = callbacks;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,266,// v1 and v2 might not have an edge between them! woohoo. there's
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,267,// one last sanity check that we have to do: we have to check
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,268,// if there's a collision *within* the cfg node.
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,269,NEXT_INTRA_CFG_NODE:
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,270,"for (DiGraphNode<Node, Branch> cfgNode : cfg.getDirectedGraphNodes()) {"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,271,if (cfg.isImplicitReturn(cfgNode)) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,272,continue NEXT_INTRA_CFG_NODE;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,308,Override
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,309,"ublic void visit(NodeTraversal t, Node n, Node parent) {"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,310,f (CombinedLiveRangeChecker.shouldVisit(n)) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,311,or (CombinedLiveRangeChecker callback : callbacks) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,312,"allback.visit(t, n, parent);"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,275,FlowState<LiveVariableLattice> state = cfgNode.getAnnotation();
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,276,boolean v1OutLive = state.getOut().isLive(v1);
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,277,boolean v2OutLive = state.getOut().isLive(v2);
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,278,CombinedLiveRangeChecker checker = new CombinedLiveRangeChecker(
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,279,"new LiveRangeChecker(v1, v2OutLive ? null : v2),"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,280,"new LiveRangeChecker(v2, v1OutLive ? null : v1));"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,281,NodeTraversal.traverse(
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,282,"compiler,"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,283,"cfgNode.getValue(),"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,284,checker);
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,285,if (checker.connectIfCrossed(interferenceGraph)) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,286,continue NEXT_VAR_PAIR;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,291,return interferenceGraph;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,337, @return Whether any CombinedLiveRangeChecker would be interested in the
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,338, node.
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,340,ublic static boolean shouldVisit(Node n) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,341,eturn LiveRangeChecker.shouldVisit(n);
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,346,"allback1.visit(t, n, parent);"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,347,"allback2.visit(t, n, parent);"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,314,if (LiveRangeChecker.shouldVisit(n)) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,315,"callback1.visit(t, n, parent);"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,316,"callback2.visit(t, n, parent);"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,350,"oid connectIfCrossed(UndiGraph<Var, Void> interferenceGraph) {"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,320,"boolean connectIfCrossed(UndiGraph<Var, Void> interferenceGraph) {"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,325,return true;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,327,return false;

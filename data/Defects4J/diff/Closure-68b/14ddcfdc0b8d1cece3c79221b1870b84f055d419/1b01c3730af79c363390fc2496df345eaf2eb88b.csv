is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,146,// TODO(johnlenz): The pass should maintain the constant annotations during
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,147,// the main pass.
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,148,"new Normalize.PropogateConstantAnnotations(compiler, false);"
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,425,f (n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)) {
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,426,"ef.putBooleanProp(Node.IS_CONSTANT_NAME, true);"
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,429,"NodeUtil.copyNameAnnotations(n.getLastChild(), ref);"
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,486,f (ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)) {
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,487,"ameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);"
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,488,"NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,669,"anityCheck.create(this).process(null, jsRoot);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,669,"sanityCheck.create(this).process(externsRoot, jsRoot);"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,316,asses.add(undoConstantRenaming);
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,318,asses.add(renameConstants.makeOneTimePass());
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,377,asses.addAll(getCodeRemovingPasses(true));
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,375,passes.addAll(getCodeRemovingPasses());
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,537,asses.addAll(getCodeRemovingPasses(false));
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,535,passes.addAll(getCodeRemovingPasses());
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,554,rivate List<PassFactory> getCodeRemovingPasses(
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,555,oolean beforeSmartNameRemoval) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,552,private List<PassFactory> getCodeRemovingPasses() {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,557,f ((options.inlineVariables || options.inlineLocalVariables)
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,558,& !beforeSmartNameRemoval) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,554,if (options.inlineVariables || options.inlineLocalVariables) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1097, Undo the renaming to $$CONSTANT that we're doing to preserve
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1098, annotations.
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1100,rivate final PassFactory undoConstantRenaming =
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1101,"ew PassFactory(""undoConstantNames"", true) {"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1102,Override
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1103,rotected CompilerPass createInternal(AbstractCompiler compiler) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1104,eturn new MakeDeclaredNamesUnique.UndoConstantRenaming(compiler);
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1109," Add $$CONSTANT to names of constant variables, to preserve the"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1110, {@code @const} annotation.
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1112,rivate final PassFactory renameConstants =
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1113,"ew PassFactory(""renameConstants"", false) {"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1114,Override
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1115,rotected CompilerPass createInternal(AbstractCompiler compiler) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1116,"eturn new Normalize(compiler, false).new RenameConstants();"
True,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,20,import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
True,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,114,static class StripConstantAnnotations
True,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,115,extends AbstractPostOrderCallback
True,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,116,implements CompilerPass {
True,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,117,private AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,119,StripConstantAnnotations(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,120,this.compiler = compiler;
True,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,123,@Override
True,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,124,"public void process(Node externs, Node js) {"
True,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,125,"NodeTraversal.traverse(compiler, externs, this);"
True,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,126,"NodeTraversal.traverse(compiler, js, this);"
True,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,129,@Override
True,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,130,"public void visit(NodeTraversal t, Node node, Node parent) {"
True,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,131,if (node.getType() == Token.NAME || node.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/Denormalize.java,src/com/google/javascript/jscomp/Denormalize.java,132,node.removeProp(Node.IS_CONSTANT_NAME);
False,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,105,"rgMap.put(fnArg.getString(), Node.newString(Token.NAME, ""undefined""));"
True,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,src/com/google/javascript/jscomp/FunctionArgumentInjector.java,105,"argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode());"
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,408,/ Remove const marker from the label name
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,409,tring fnNameClean = Normalize.removeConstantMarkerFromName(fnName);
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,412,"nNameClean, fnNode, callNode, resultName,"
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,409,"fnName, fnNode, callNode, resultName,"
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,126,"ame.addChildToBack(Node.newString(Token.NAME, ""undefined""));"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,126,name.addChildToBack(NodeUtil.newUndefinedNode());
False,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,145,"ompiler.getUniqueNameIdSupplier(),"
True,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,src/com/google/javascript/jscomp/FunctionToBlockMutator.java,145,"compiler.getUniqueNameIdSupplier(),"
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,140,Renamer renamer = nameStack.peek();
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,141,if (renamer.stripConstIfReplaced()) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,142,// TODO(johnlenz): Do we need to do anything about the javadoc?
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,143,n.removeProp(Node.IS_CONSTANT_NAME);
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,216,* @return Whether the constant-ness of a name should be removed.
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,218,boolean stripConstIfReplaced();
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,231,"ew UndoConstantRenaming(compiler).process(externs, js);"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,278,tatic class UndoConstantRenaming extends AbstractPostOrderCallback
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,279,mplements CompilerPass {
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,280,rivate AbstractCompiler compiler;
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,283, Keep a hash table mapping variable names with $$constant to the
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,284, equivalent name with $$constant removed.  This avoids running
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,285, String.replace on the same strings over and over.
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,287,"rivate Map<String, String> constantRenamingCache ="
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,288,aps.newHashMap();
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,290,ndoConstantRenaming(AbstractCompiler compiler) {
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,291,his.compiler = compiler;
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,294,Override
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,295,"ublic void process(Node externs, Node js) {"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,296,"odeTraversal.traverse(compiler, js, this);"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,299,Override
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,300,"ublic void visit(NodeTraversal t, Node node, Node parent) {"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,301,f (node.getType() == Token.NAME) {
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,302,tring name = node.getString();
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,303,f (name.contains(NodeUtil.CONSTANT_MARKER)) {
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,304,"/ Make sure there is not more than one constant marker, or something"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,305,/ has gone terribly wrong.
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,306,reconditions.checkState(name.indexOf(NodeUtil.CONSTANT_MARKER) ==
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,307,ame.lastIndexOf(NodeUtil.CONSTANT_MARKER));
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,309,tring constantFreeName = constantRenamingCache.get(name);
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,310,f (constantFreeName == null) {
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,311,"onstantFreeName = name.replace(NodeUtil.CONSTANT_MARKER, """");"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,312,"onstantRenamingCache.put(name, constantFreeName);"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,314,ode.setString(constantFreeName);
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,315,"ode.putBooleanProp(Node.IS_CONSTANT_NAME, true);"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,316,ompiler.reportCodeChange();
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,364,@Override
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,365,public boolean stripConstIfReplaced() {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,366,return false;
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,435,f (removeConstness) {
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,436,"/ When inlining call within loops, constants lose there"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,437,"/ const-ness, this supports that necessary change."
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,438,"ame = name.replace(NodeUtil.CONSTANT_MARKER, """");"
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,418,@Override
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,419,public boolean stripConstIfReplaced() {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,420,return removeConstness;
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,29,rivate CodeChangeHandler changeHandler;
True,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,29,private final boolean assertOnChange;
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,32,his(null);
True,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,32,this(false);
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,35,odeTypeNormalizer(CodeChangeHandler changeHandler) {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,36,his.changeHandler = changeHandler;
True,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,35,NodeTypeNormalizer(boolean forbidChanges) {
True,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,36,this.assertOnChange = forbidChanges;
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,40,f (changeHandler != null) {
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,41,hangeHandler.reportChange();
True,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,40,if (assertOnChange) {
True,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,41,"Preconditions.checkState(false, ""normalizeNodeType constraints violated"");"
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,98,.removeProp(Node.FUNCTION_PROP);
False,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,99,eportChange();
True,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,src/com/google/javascript/jscomp/NodeTypeNormalizer.java,98,Preconditions.checkState(n.getProp(Node.FUNCTION_PROP) == null);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1907,eturn node.getString().contains(CONSTANT_MARKER);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1907,return node.getBooleanProp(Node.IS_CONSTANT_NAME);
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,88,"ew RenameConstants().process(externs, root);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,95,"new PropogateConstantAnnotations(compiler, assertOnChange)"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,96,".process(externs, root);"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,106,lass RenameConstants extends AbstractPostOrderCallback
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,106,public static class PropogateConstantAnnotations
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,107,extends AbstractPostOrderCallback
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,109,private final AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,110,private final boolean assertOnChange;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,112,public PropogateConstantAnnotations(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,113,"AbstractCompiler compiler, boolean forbidChanges) {"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,114,this.compiler = compiler;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,115,this.assertOnChange = forbidChanges;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,110,"odeTraversal.traverse(compiler, root, this);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,120,"new NodeTraversal(compiler, this).traverseRoots(externs, root);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,125,// Note: Constant properties annotations are not propagated.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,116,"/ If the normalize pass has already been run, this will already have"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,117,/ been renamed.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,125,f (var == null) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,126,"/ We do not want to rename names defined in externs,"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,127,/ and this pass is not traversing the externs.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,128,".putBooleanProp(Node.IS_CONSTANT_NAME, false);"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,129,eturn;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,130, else {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,134,if (var != null) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,134,f (NodeUtil.isConstantName(n)) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,135,/ TODO(johnlenz): Enable this check generally when all the passes
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,136,/ are fixed.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,137,"/ Preconditions.checkState(n.getBooleanProp(Node.IS_CONSTANT_NAME),"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,138,"/    ""Constant missing constant annotation"");"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,139,eturn;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,142,f ((info != null && info.isConstant()) ||
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,143,.getBooleanProp(Node.IS_CONSTANT_NAME)) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,138,if ((info != null && info.isConstant()) &&
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,139,!n.getBooleanProp(Node.IS_CONSTANT_NAME)) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,145,.setString(addConstantMarkerToName(n.getString()));
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,146,"eportCodeChange(""rename constant var"");"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,141,if (assertOnChange) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,142,String name = n.getString();
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,143,throw new IllegalStateException(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,144,"""Unexpected const change.\n"" +"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,145,"""  name: ""+ name + ""\n"" +"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,146,"""  gramps:"" + n.getParent().getParent().toStringTree());"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,148,"// Even though the AST has changed (an annotation was added),"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,149,// the annotations are not compared so don't report the change.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,150,"// reportCodeChange(""constant annotation"");"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,152,tatic String addConstantMarkerToName(String name) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,153,eturn name + NodeUtil.CONSTANT_MARKER;
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,156,tatic String removeConstantMarkerFromName(String name) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,157,"eturn name.replace(NodeUtil.CONSTANT_MARKER, """");"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,188,f (n.getType() == Token.NAME || n.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,184,if (n.getType() == Token.NAME) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,197,f (NodeUtil.isConstantName(n)) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,193,if (NodeUtil.isConstantName(n)
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,194,|| compiler.getCodingConvention().isConstant(n.getString())) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,229,"The name "" + name + ""is not consistently annotated as "" +"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,226,"""The name "" + name + "" is not consistently annotated as "" +"
False,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,143,rivate void endPass(Node root) {
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,143,"private void endPass(Node externs, Node root) {"
False,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,150,aybeSanityCheck(root);
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,150,try {
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,151,"maybeSanityCheck(externs, root);"
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,152,} catch (Exception e) {
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,153,// TODO(johnlenz): Remove this once the normalization checks report
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,154,// errors instead of exceptions.
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,155,"throw new RuntimeException(""Sanity check failed for "" + passToCheck, e);"
False,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,156,oid maybeSanityCheck(Node root) {
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,162,"void maybeSanityCheck(Node externs, Node root) {"
False,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,158,"anityCheck.create(compiler).process(null, root);"
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,164,"sanityCheck.create(compiler).process(externs, root);"
False,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,199,ndPass(root);
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,205,"endPass(externs, root);"
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,21,import com.google.javascript.jscomp.Scope.Var;
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,65,rivate final Set<Scope.Var> warnedVars_ = Sets.newHashSet();
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,66,private final Set<Var> warnedVars_ = Sets.newHashSet();
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,69,* Keep track of variables that we've referenced.
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,71,private final Set<Var> referenced = Sets.newHashSet();
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,94,referenced.clear();
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,142,cope.Var var = scope.getVar(n.getString());
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,149,Var var = scope.getVar(n.getString());
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,189,cope.Var var = fnScope.getVar(lastArg.getString());
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,190,f (!var.referenced) {
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,196,Var var = fnScope.getVar(lastArg.getString());
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,197,if (!referenced.contains(var)) {
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,203,rivate void markReferencedVar(Scope.Var var) {
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,204,f (var.referenced) {
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,210,private void markReferencedVar(Var var) {
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,211,if (referenced.contains(var)) {
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,208,ar.referenced = true;
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,215,referenced.add(var);
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,227,or (Iterator<Scope.Var> it = scope.getVars(); it.hasNext(); ) {
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,228,cope.Var var = it.next();
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,234,for (Iterator<Var> it = scope.getVars(); it.hasNext(); ) {
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,235,Var var = it.next();
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,230,f (!var.referenced &&
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,237,if (!referenced.contains(var) &&
False,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,110,"ew NodeTypeNormalizer(handler).process(null, root);"
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,110,// TODO(johnlenz): Change these normalization checks Preconditions and
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,111,// Exceptions into Errors so that it is easier to find the root cause
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,112,// when there are cascading issues.
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,113,"new NodeTypeNormalizer(true).process(null, root);"
False,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,112,"normalizeNodeType constraints violated by last pass"");"
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,115,"""This should never fire, NodeTypeNormalizer should assert first."");"
False,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,117,"normalize constraints violated by last pass"");"
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,120,"""This should never fire, Normalize should assert first."");"
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,122,boolean checkUserDeclarations = true;
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,123,CompilerPass pass = new Normalize.VerifyConstants(
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,124,"compiler, checkUserDeclarations);"
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,125,"pass.process(externs, root);"
False,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,92,** Whether it's been referenced */
False,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,93,oolean referenced;
False,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,378,ar.referenced = false;
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,855,"var JSCompiler_inline_b_3=undefined;1}}"","
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,855,"""var JSCompiler_inline_b_3=void 0;1}}"","
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,863,"var JSCompiler_inline_b_3=undefined;1}}while(1)"","
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,863,"""var JSCompiler_inline_b_3=void 0;1}}while(1)"","
False,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1153,"  var CONSTANT_RESULT$$constant = JSCompiler_inline_result_0;"" +"
True,test/com/google/javascript/jscomp/FunctionInjectorTest.java,test/com/google/javascript/jscomp/FunctionInjectorTest.java,1153,"""  var CONSTANT_RESULT = JSCompiler_inline_result_0;"" +"
False,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,129,"{var JSCompiler_inline_b_3=undefined;1}"","
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,129,"""{var JSCompiler_inline_b_3=void 0;1}"","
False,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,150,"function foo(a){var b$$constant = bar(); a;}; foo(1);"","
False,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,151,"{var JSCompiler_inline_b$$constant_3=bar(); 1;}"","
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,150,"""function foo(a){var B = bar(); a;}; foo(1);"","
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,151,"""{var JSCompiler_inline_B_3=bar(); 1;}"","
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,154,// TODO(johnlenz): update this test to look for the const annotation.
False,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,156,"function foo(a){var b$$constant = bar(); a;}; foo(1);"","
False,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,157,"{var JSCompiler_inline_b_3 = bar(); 1;}"","
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,157,"""function foo(a){var B = bar(); a;}; foo(1);"","
True,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,158,"""{var JSCompiler_inline_B_3 = bar(); 1;}"","
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,427,"{var JSCompiler_inline_y_3=undefined;2?("" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,427,"""{var JSCompiler_inline_y_3=void 0;2?("" +"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,983,"undefined"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,983,"""void 0"");"
False,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,993,"1+undefined+undefined"");"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,993,"""1+void 0+void 0"");"
False,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,780,"var X$$constant=1; X$$constant; function f() {1;}"");"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,780,"""var X=1; X; function f() {1;}"");"
False,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,198,"est(""var CONST$$constant = 3; var b = CONST$$constant;"","
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,198,"test(""var CONST = 3; var b = CONST;"","
False,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,200,"est(""function() {var CONST$$constant = 3; var ACONST$$constant$$1 = 2;}"","
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,200,"test(""function() {var CONST = 3; var ACONST$$1 = 2;}"","
False,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,206,"est(""function() {var CONST$$constant = 3; var ACONST$$constant$$1 = 2;}"","
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,206,"test(""function() {var CONST = 3; var ACONST$$1 = 2;}"","
False,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,212,"est(""var CONST$$constant = 3; var b = CONST$$constant;"","
True,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,212,"test(""var CONST = 3; var b = CONST;"","
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,181,"estSame(""var window"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,181,"testSame(""/** @suppress {duplicate} */\nvar window;"");"
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,205,"var ACONST$$constant = 4; var b = ACONST$$constant;"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,205,"""var ACONST = 4; var b = ACONST;"");"
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,208,"var a; var ACONST$$constant = 4; var b = ACONST$$constant;"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,208,"""var a; var ACONST = 4; var b = ACONST;"");"
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,211,"var ACONST$$constant; ACONST$$constant = 4;"" +"
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,212,"var b = ACONST$$constant;"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,211,"""var ACONST; ACONST = 4;"" +"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,212,"""var b = ACONST;"");"
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,215,"var ACONST$$constant = new Foo(); var b = ACONST$$constant;"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,215,"""var ACONST = new Foo(); var b = ACONST;"");"
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,217,"est(""/** @const */var aa; aa=1;"", ""var aa$$constant;aa$$constant=1"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,217,"test(""/** @const */var aa; aa=1;"", ""var aa;aa=1"");"
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,233,rivate void testConstantProperties() {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,233,WithCollapse() {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,234,enableNormalize();
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,237,private void testConstantProperties() {
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,235,"var a$ACONST$$constant = 4; var b = a$ACONST$$constant;"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,239,"""var a$ACONST = 4; var b = a$ACONST;"");"
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,238,"var a$b$ACONST$$constant = 4;var b = a$b$ACONST$$constant;"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,242,"""var a$b$ACONST = 4;var b = a$b$ACONST;"");"
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,241,"var a$FOO$$constant = 1; var b = a$FOO$$constant;"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,245,"""var a$FOO = 1; var b = a$FOO;"");"
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,247,"var a$ACONST$$constant = 4; var b = a$ACONST$$constant;"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,251,"""var a$ACONST = 4; var b = a$ACONST;"");"
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,251,"var a$CONST$$constant;function foo(){var d = a$CONST$$constant;};"" +"
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,252,"(function(){a$CONST$$constant = 4})();"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,255,"""var a$CONST;function foo(){var d = a$CONST;};"" +"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,256,"""(function(){a$CONST = 4})();"");"
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,255,"var a$ACONST$$constant = new Foo(); var b = a$ACONST$$constant;"");"
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,258,Override
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,259,rotected int getNumRepetitions() {
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,260,/ The normalize pass is only run once.
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,261,eturn 1;
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,264,Override
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,265,ublic CompilerPass getProcessor(final Compiler compiler) {
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,266,eturn new CompilerPass() {
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,267,"ublic void process(Node externs, Node root) {"
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,268,"ew CollapseProperties(compiler, false, true).process(externs, root);"
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,269,"ew Normalize(compiler, false).new RenameConstants().process("
False,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,270,"xterns, root);"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,259,"""var a$ACONST = new Foo(); var b = a$ACONST;"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,262,@Override
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,263,protected int getNumRepetitions() {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,264,// The normalize pass is only run once.
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,265,return 1;
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,268,@Override
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,269,public CompilerPass getProcessor(final Compiler compiler) {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,270,return new CompilerPass() {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,271,"public void process(Node externs, Node root) {"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,272,"new CollapseProperties(compiler, false, true).process(externs, root);"
False,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,64,"ssertEquals(""normalizeNodeType constraints violated by last pass"","
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,64,"assertEquals(""normalizeNodeType constraints violated"","
False,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,68,ssert(exceptionCaught);
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,68,assertTrue(exceptionCaught);
False,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,86,ssert(exceptionCaught);
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,86,assertTrue(exceptionCaught);
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,89,public void testConstantAnnotationMismatch() throws Exception {
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,90,otherPass = new CompilerPass() {
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,91,"@Override public void process(Node externs, Node root) {"
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,92,getLastCompiler().reportCodeChange();
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,93,"Node name = Node.newString(Token.NAME, ""x"");"
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,94,"name.putBooleanProp(Node.IS_CONSTANT_NAME, true);"
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,95,"root.addChildToBack(new Node(Token.EXPR_RESULT, name));"
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,96,getLastCompiler().setNormalized();
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,100,boolean exceptionCaught = false;
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,101,try {
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,102,"test(""var x;"", ""var x; x;"");"
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,103,} catch (RuntimeException e) {
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,104,assertTrue(e.getMessage().contains(
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,105,"""The name x is not consistently annotated as constant.""));"
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,106,exceptionCaught = true;
True,test/com/google/javascript/jscomp/SanityCheckTest.java,test/com/google/javascript/jscomp/SanityCheckTest.java,108,assertTrue(exceptionCaught);

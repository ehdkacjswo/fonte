is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,616,asses.add(foldConstants);
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,858,** Local constant folding */
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,859,tatic final PassFactory foldConstants =
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,860,"ew PassFactory(""foldConstants"", false) {"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,861,Override
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,862,rotected CompilerPass createInternal(AbstractCompiler compiler) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,863,eturn new FoldConstants(compiler);
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,2, Copyright 2004 Google Inc.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,5, you may not use this file except in compliance with the License.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,6, You may obtain a copy of the License at
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,8,     http://www.apache.org/licenses/LICENSE-2.0
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,13, See the License for the specific language governing permissions and
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,14, limitations under the License.
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,17,ackage com.google.javascript.jscomp;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,19,mport com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,20,mport com.google.javascript.rhino.Node;
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,23," FoldConstants simplifies expressions which consist only of constants,"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,24, e.g (1 + 2).
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,29,lass FoldConstants extends AbstractPostOrderCallback
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,30,mplements CompilerPass {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,32,oldConstants(AbstractCompiler compiler) {
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,35,"ublic void process(Node externs, Node jsRoot) {"
False,src/com/google/javascript/jscomp/FoldConstants.java,src/com/google/javascript/jscomp/FoldConstants.java,39,"ublic void visit(NodeTraversal t, Node n, Node parent) {"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,723,oolean constructorHasArguments = constructorNameNode.getNext() != null;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,725,f (!constructorHasArguments) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,726,"f (""Array"".equals(className)) {"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,727,"/ ""Array()"" --> ""[]"""
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,723,boolean constructorHasArgs = constructorNameNode.getNext() != null;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,725,"if (""Object"".equals(className) && !constructorHasArgs) {"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,726,"// ""Object()"" --> ""{}"""
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,727,newLiteralNode = new Node(Token.OBJECTLIT);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,728,"} else if (""Array"".equals(className)) {"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,729,"// ""Array(arg0, arg1, ...)"" --> ""[arg0, arg1, ...]"""
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,730,Node arg0 = constructorNameNode.getNext();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,731,FoldArrayAction action = isSafeToFoldArrayConstructor(arg0);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,733,if (action == FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS ||
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,734,action == FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,729," else if (""Object"".equals(className)) {"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,730,"/ ""Object()"" --> ""{}"""
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,731,ewLiteralNode = new Node(Token.OBJECTLIT);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,736,n.removeChildren();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,737,if (action == FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,738,newLiteralNode.addChildrenToFront(arg0);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,753,private static enum FoldArrayAction {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,754,"NOT_SAFE_TO_FOLD, SAFE_TO_FOLD_WITH_ARGS, SAFE_TO_FOLD_WITHOUT_ARGS}"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,757,* Checks if it is safe to fold Array() constructor into []. It can be
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,758,"* obviously done, if the initial constructor has either no arguments or"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,759,* at least two. The remaining case may be unsafe since Array(number)
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,760,* actually reserves memory for an empty array which contains number elements.
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,762,private FoldArrayAction isSafeToFoldArrayConstructor(Node arg) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,763,FoldArrayAction action = FoldArrayAction.NOT_SAFE_TO_FOLD;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,765,if (arg == null) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,766,action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,767,} else if (arg.getNext() != null) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,768,action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,769,} else {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,770,switch (arg.getType()) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,771,case (Token.STRING):
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,772,"// ""Array('a')"" --> ""['a']"""
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,773,action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,774,break;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,775,case (Token.NUMBER):
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,776,"// ""Array(0)"" --> ""[]"""
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,777,if (arg.getDouble() == 0) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,778,action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,780,break;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,781,case (Token.ARRAYLIT):
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,782,"// ""Array([args])"" --> ""[[args]]"""
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,783,action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,784,break;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,785,default:
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,788,return action;
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,790,"ode node = new Node(transformTokenType(exprNode.getType()),"
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,791,ransform(exprNode.getOperand()));
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,792,f (exprNode.isPostfix()) {
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,793,"ode.putBooleanProp(Node.INCRDECR_PROP, true);"
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,790,int type = transformTokenType(exprNode.getType());
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,791,Node operand = transform(exprNode.getOperand());
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,792,if (type == Token.NEG && operand.getType() == Token.NUMBER) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,793,operand.setDouble(-operand.getDouble());
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,794,return operand;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,795,} else {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,796,"Node node = new Node(type, operand);"
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,797,if (exprNode.isPostfix()) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,798,"node.putBooleanProp(Node.INCRDECR_PROP, true);"
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,800,return node;
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,795,eturn node;
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,805, This test case is more involved since we need to run a constant folding
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,806," pass to get the -4 converted to a negative number, as opposed to a"
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,807, number node with a number 4 attached to the negation unary operator.
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,813,"odeTraversal.traverse(compiler, n, new FoldConstants(compiler));"
False,test/com/google/javascript/jscomp/CreateSyntheticBlocksTest.java,test/com/google/javascript/jscomp/CreateSyntheticBlocksTest.java,45,"odeTraversal.traverse(compiler, js, new FoldConstants(compiler));"
False,test/com/google/javascript/jscomp/CreateSyntheticBlocksTest.java,test/com/google/javascript/jscomp/CreateSyntheticBlocksTest.java,47,"odeTraversal.traverse(compiler, js, new FoldConstants(compiler));"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,27,/ Needed for testFoldLiteralConstructors() and testFoldRegExp...()
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,27,"// Needed for testFoldLiteralObjectConstructors(),"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,28,// testFoldLiteralArrayConstructors() and testFoldRegExp...()
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,328,ublic void testFoldLiteralConstructors() {
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,329,public void testFoldLiteralObjectConstructors() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,332,"old(""x = new Array"", ""x = []"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,333,"old(""x = new Array()"", ""x = []"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,334,"old(""x = Array()"", ""x = []"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,341,"oldSame(""x = new Array"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,342,"oldSame(""x = new Array()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,343,"oldSame(""x = Array()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,349,"/ Cannot fold, there are arguments"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,350,"old(""x = new Array(7)"", ""x = Array(7)"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,350,public void testFoldLiteralArrayConstructors() {
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,351,enableNormalize();
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,353,// No arguments - can fold when normalized
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,354,"fold(""x = new Array"", ""x = []"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,355,"fold(""x = new Array()"", ""x = []"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,356,"fold(""x = Array()"", ""x = []"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,358,// One argument - can be fold when normalized
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,359,"fold(""x = new Array(0)"", ""x = []"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,360,"fold(""x = Array(0)"", ""x = []"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,361,"fold(""x = new Array(\""a\"")"", ""x = [\""a\""]"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,362,"fold(""x = Array(\""a\"")"", ""x = [\""a\""]"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,364,// One argument - cannot be fold when normalized
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,365,"fold(""x = new Array(7)"", ""x = Array(7)"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,366,"fold(""x = Array(7)"", ""x = Array(7)"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,367,"fold(""x = new Array(y)"", ""x = Array(y)"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,368,"fold(""x = Array(y)"", ""x = Array(y)"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,369,"fold(""x = new Array(foo())"", ""x = Array(foo())"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,370,"fold(""x = Array(foo())"", ""x = Array(foo())"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,372,// More than one argument - can be fold when normalized
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,373,"fold(""x = new Array(1, 2, 3, 4)"", ""x = [1, 2, 3, 4]"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,374,"fold(""x = Array(1, 2, 3, 4)"", ""x = [1, 2, 3, 4]"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,375,"fold(""x = new Array('a', 1, 2, 'bc', 3, {}, 'abc')"","
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,376,"""x = ['a', 1, 2, 'bc', 3, {}, 'abc']"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,377,"fold(""x = Array('a', 1, 2, 'bc', 3, {}, 'abc')"","
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,378,"""x = ['a', 1, 2, 'bc', 3, {}, 'abc']"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,379,"fold(""x = new Array(Array(1, '2', 3, '4'))"", ""x = [[1, '2', 3, '4']]"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,380,"fold(""x = Array(Array(1, '2', 3, '4'))"", ""x = [[1, '2', 3, '4']]"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,381,"fold(""x = new Array(Object(), Array(\""abc\"", Object(), Array(Array())))"","
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,382,"""x = [{}, [\""abc\"", {}, [[]]]"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,383,"fold(""x = new Array(Object(), Array(\""abc\"", Object(), Array(Array())))"","
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,384,"""x = [{}, [\""abc\"", {}, [[]]]"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,386,disableNormalize();
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,387,// Cannot fold above when not normalized
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,388,"foldSame(""x = new Array"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,389,"foldSame(""x = new Array()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,390,"foldSame(""x = Array()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,392,"foldSame(""x = new Array(0)"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,393,"foldSame(""x = Array(0)"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,394,"foldSame(""x = new Array(\""a\"")"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,395,"foldSame(""x = Array(\""a\"")"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,396,"foldSame(""x = new Array(7)"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,397,"foldSame(""x = Array(7)"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,398,"foldSame(""x = new Array(foo())"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,399,"foldSame(""x = Array(foo())"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,401,"foldSame(""x = new Array(1, 2, 3, 4)"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,402,"foldSame(""x = Array(1, 2, 3, 4)"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,403,"foldSame(""x = new Array('a', 1, 2, 'bc', 3, {}, 'abc')"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,404,"foldSame(""x = Array('a', 1, 2, 'bc', 3, {}, 'abc')"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,405,"foldSame(""x = new Array(Array(1, '2', 3, '4'))"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,406,"foldSame(""x = Array(Array(1, '2', 3, '4'))"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,407,"foldSame(""x = new Array(Object(), Array(\""abc\"", Object(), Array(Array())))"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,408,"foldSame(""x = new Array(Object(), Array(\""abc\"", Object(), Array(Array())))"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,407,"old(""var x = new Array('20')"", ""var x = Array(\""20\"")"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,461,"fold(""var x = new Array(20)"", ""var x = Array(20)"");"
False,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,304,ublic void disable_testLabel() {
False,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,305,"arse(""foo: bar"");"
False,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,308,ublic void disable_testLabel2() {
False,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,309,"arse(""l: while (f()) { if (g()) { continue l; } }"");"
False,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,312,ublic void disable_testLabel3() {
False,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,313,"arse(""Foo:Bar:X:{ break Bar; }"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,304,public void testLabel() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,305,"testNewParser(""foo: bar"","
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,306,"""SCRIPT 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,307,"""    LABEL 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,308,"""        LABEL_NAME foo 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,309,"""        EXPR_RESULT 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,310,"""            NAME bar 0\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,313,public void testLabel2() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,314,"testNewParser(""l: while (f()) { if (g()) { continue l; } }"","
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,315,"""SCRIPT 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,316,"""    LABEL 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,317,"""        LABEL_NAME l 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,318,"""        WHILE 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,319,"""            CALL 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,320,"""                NAME f 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,321,"""            BLOCK 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,322,"""                IF 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,323,"""                    CALL 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,324,"""                        NAME g 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,325,"""                    BLOCK 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,326,"""                        CONTINUE 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,327,"""                            LABEL_NAME l 0\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,330,public void testLabel3() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,331,"testNewParser(""Foo:Bar:X:{ break Bar; }"","
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,332,"""SCRIPT 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,333,"""    LABEL 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,334,"""        LABEL_NAME Foo 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,335,"""        LABEL 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,336,"""            LABEL_NAME Bar 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,337,"""            LABEL 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,338,"""                LABEL_NAME X 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,339,"""                BLOCK 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,340,"""                    BREAK 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,341,"""                        LABEL_NAME Bar 0\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,344,public void testNegation1() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,345,"testNewParser(""-a"","
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,346,"""SCRIPT 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,347,"""    EXPR_RESULT 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,348,"""        NEG 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,349,"""            NAME a 0\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,352,public void testNegation2() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,353,"testNewParser(""-2"","
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,354,"""SCRIPT 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,355,"""    EXPR_RESULT 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,356,"""        NUMBER -2.0 0\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,359,public void testNegation3() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,360,"testNewParser(""1 - -2"","
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,361,"""SCRIPT 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,362,"""    EXPR_RESULT 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,363,"""        SUB 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,364,"""            NUMBER 1.0 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,365,"""            NUMBER -2.0 0\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,1027,"private void testNewParser(String code, String expected) {"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,1028,String actual = newParse(code).toStringTree();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,1029,"assertEquals(expected, actual);"

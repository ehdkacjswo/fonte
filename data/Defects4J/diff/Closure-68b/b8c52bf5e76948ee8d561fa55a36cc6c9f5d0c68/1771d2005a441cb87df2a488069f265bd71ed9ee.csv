is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,21,import com.google.javascript.jscomp.parsing.Config;
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,184,* Returns the parser configuration.
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,186,abstract Config getParserConfig();
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,21,mport com.google.common.base.StringUtil;
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,183,f (!StringUtil.isEmpty(unaliasableGlobals) &&
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,184,StringUtil.isEmpty(aliasableGlobals)) {
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,182,if (!Strings.isEmpty(unaliasableGlobals) &&
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,183,!Strings.isEmpty(aliasableGlobals)) {
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,190,f (!StringUtil.isEmpty(unaliasableGlobals)) {
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,189,if (!Strings.isEmpty(unaliasableGlobals)) {
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,195,f (!StringUtil.isEmpty(aliasableGlobals)) {
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,194,if (!Strings.isEmpty(aliasableGlobals)) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,28,import com.google.javascript.jscomp.parsing.Config;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,29,import com.google.javascript.jscomp.parsing.ParserRunner;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,124,private Config parserConfig = null;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1422,@Override
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1423,Config getParserConfig() {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1424,if (parserConfig == null) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1425,parserConfig = ParserRunner.createConfig(
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1426,"getTypeRegistry(), isIdeMode());"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1428,return parserConfig;
False,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,119,"ontext.getScriptNode().addChildAfter(expression,"
False,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,120,ontext.getContextNode());
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,120,// It's important that any class-building calls (goog.inherits)
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,121,"// come right after the class definition, so move the export after that."
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,122,Node insertionPoint = context.getContextNode().getNext();
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,123,CodingConvention convention = compiler.getCodingConvention();
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,124,while (insertionPoint != null &&
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,125,NodeUtil.isExprCall(insertionPoint) &&
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,126,convention.getClassesDefinedByCall(insertionPoint) == null) {
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,127,insertionPoint = insertionPoint.getNext();
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,130,if (insertionPoint == null) {
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,131,context.getScriptNode().addChildToBack(expression);
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,132,} else {
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,133,"context.getScriptNode().addChildBefore(expression, insertionPoint);"
False,src/com/google/javascript/jscomp/JsAst.java,src/com/google/javascript/jscomp/JsAst.java,89,"oot = ParserRunner.parse(sourceName, sourceStr, compiler.isIdeMode(),"
False,src/com/google/javascript/jscomp/JsAst.java,src/com/google/javascript/jscomp/JsAst.java,90,"ompiler.getTypeRegistry(),"
True,src/com/google/javascript/jscomp/JsAst.java,src/com/google/javascript/jscomp/JsAst.java,89,"root = ParserRunner.parse(sourceName, sourceStr,"
True,src/com/google/javascript/jscomp/JsAst.java,src/com/google/javascript/jscomp/JsAst.java,90,"compiler.getParserConfig(),"
False,src/com/google/javascript/jscomp/LightweightMessageFormatter.java,src/com/google/javascript/jscomp/LightweightMessageFormatter.java,20,mport com.google.common.base.StringUtil;
False,src/com/google/javascript/jscomp/LightweightMessageFormatter.java,src/com/google/javascript/jscomp/LightweightMessageFormatter.java,143,"uilder.append(StringUtil.repeat("" "", spaces));"
True,src/com/google/javascript/jscomp/LightweightMessageFormatter.java,src/com/google/javascript/jscomp/LightweightMessageFormatter.java,142,"builder.append(Strings.repeat("" "", spaces));"
False,src/com/google/javascript/jscomp/LocaleUtil.java,src/com/google/javascript/jscomp/LocaleUtil.java,19,mport com.google.common.base.StringUtil;
False,src/com/google/javascript/jscomp/LocaleUtil.java,src/com/google/javascript/jscomp/LocaleUtil.java,60,tring language = StringUtil.makeSafe(matcher.group(1));
False,src/com/google/javascript/jscomp/LocaleUtil.java,src/com/google/javascript/jscomp/LocaleUtil.java,61,tring country = StringUtil.makeSafe(matcher.group(2));
False,src/com/google/javascript/jscomp/LocaleUtil.java,src/com/google/javascript/jscomp/LocaleUtil.java,62,tring variant = StringUtil.makeSafe(matcher.group(3));
True,src/com/google/javascript/jscomp/LocaleUtil.java,src/com/google/javascript/jscomp/LocaleUtil.java,58,String language = Strings.makeSafe(matcher.group(1));
True,src/com/google/javascript/jscomp/LocaleUtil.java,src/com/google/javascript/jscomp/LocaleUtil.java,59,String country = Strings.makeSafe(matcher.group(2));
True,src/com/google/javascript/jscomp/LocaleUtil.java,src/com/google/javascript/jscomp/LocaleUtil.java,60,String variant = Strings.makeSafe(matcher.group(3));
False,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,20,mport com.google.common.base.StringUtil;
False,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,92,"tringUtil.truncateAtMaxLength(source, 100, true)));"
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,91,"Strings.truncateAtMaxLength(source, 100, true)));"
False,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,99,"tringUtil.truncateAtMaxLength(source, 100, true),"
False,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,100,"tringUtil.truncateAtMaxLength(source2, 100, true)));"
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,98,"Strings.truncateAtMaxLength(source, 100, true),"
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,99,"Strings.truncateAtMaxLength(source2, 100, true)));"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,2,* Copyright 2010 Google Inc.
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,19,import javax.annotation.Nullable;
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,22,* Guava code that will eventually be open-sourced properly. Package-private
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,23,* until they're able to do that. A lot of these methods are discouraged
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,24,* anyways.
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,28,class Strings {
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,29,private Strings() {} // All static
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,32,* Returns {@code true} if the given string is either null or the empty string
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,35,* @param string the string reference to check
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,36,* @return {@code true} if {@code string} is either null or the empty string
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,38,static boolean isEmpty(@Nullable String string) {
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,39,return string == null || string.isEmpty();
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,43,* Returns the given string if it is non-null; the empty string otherwise.
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,45,* @param string the string to test and possibly return
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,46,"* @return {@code string} itself if it is non-null; {@code """"} if it is null"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,48,static String makeSafe(@Nullable String string) {
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,49,"return (string == null) ? """" : string;"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,53,* Returns a string consisting of the input string concatenated a given number
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,54,"* of times. For example, {@code repeat(""hey"", 3)} returns the string {@code"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,55,"* ""heyheyhey""}."
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,57,* @param string any non-null string
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,58,* @param count the number of times to repeat it; a nonnegative integer
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,59,* @return a string containing {@code string} repeated {@code count} times
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,60,*     (the empty string if {@code count} is zero)
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,61,* @throws IllegalArgumentException if {@code count} is negative
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,63,"static String repeat(String string, int count) {"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,64,"// If this multiplication overflows, a NegativeArraySizeException or"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,65,// OutOfMemoryError is not far behind
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,66,StringBuilder builder = new StringBuilder(string.length() * count);
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,67,for (int i = 0; i < count; i++) {
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,68,builder.append(string);
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,70,return builder.toString();
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,73,"* If this given string is of length {@code maxLength} or less, it will"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,74,* be returned as-is.
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,75,"* Otherwise it will be trucated to {@code maxLength}, regardless of whether"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,76,* there are any space characters in the String. If an ellipsis is requested
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,77,"* to be appended to the truncated String, the String will be truncated so"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,78,* that the ellipsis will also fit within maxLength.
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,79,"* If no truncation was necessary, no ellipsis will be added."
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,80,* @param source the String to truncate if necessary
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,81,* @param maxLength the maximum number of characters to keep
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,82,"* @param addEllipsis if true, and if the String had to be truncated,"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,83,"*     add ""..."" to the end of the String before returning. Additionally,"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,84,*     the ellipsis will only be added if maxLength is greater than 3.
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,85,* @return the original string if it's length is less than or equal to
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,86,"*     maxLength, otherwise a truncated string as mentioned above"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,88,"static String truncateAtMaxLength(String source, int maxLength,"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,89,boolean addEllipsis) {
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,91,if (source.length() <= maxLength) {
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,92,return source;
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,94,if (addEllipsis && maxLength > 3) {
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,95,"return unicodePreservingSubstring(source, 0, maxLength - 3) + ""..."";"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,97,"return unicodePreservingSubstring(source, 0, maxLength);"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,101,* Normalizes {@code index} such that it respects Unicode character
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,102,* boundaries in {@code str}.
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,104,"* <p>If {@code index} is the low surrogate of a unicode character,"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,105,"* the method returns {@code index - 1}. Otherwise, {@code index} is"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,106,* returned.
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,108,* <p>In the case in which {@code index} falls in an invalid surrogate pair
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,109,"* (e.g. consecutive low surrogates, consecutive high surrogates), or if"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,110,"* if it is not a valid index into {@code str}, the original value of"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,111,* {@code index} is returned.
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,113,* @param str the String
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,114,* @param index the index to be normalized
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,115,* @return a normalized index that does not split a Unicode character
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,117,"private static int unicodePreservingIndex(String str, int index) {"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,118,if (index > 0 && index < str.length()) {
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,119,if (Character.isHighSurrogate(str.charAt(index - 1)) &&
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,120,Character.isLowSurrogate(str.charAt(index))) {
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,121,return index - 1;
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,124,return index;
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,128,* Returns a substring of {@code str} that respects Unicode character
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,129,* boundaries.
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,131,"* <p>The string will never be split between a [high, low] surrogate pair,"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,132,* as defined by {@link Character#isHighSurrogate} and
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,133,* {@link Character#isLowSurrogate}.
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,135,* <p>If {@code begin} or {@code end} are the low surrogate of a unicode
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,136,"* character, it will be offset by -1."
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,138,* <p>This behavior guarantees that
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,139,"* {@code str.equals(StringUtil.unicodePreservingSubstring(str, 0, n) +"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,140,"*     StringUtil.unicodePreservingSubstring(str, n, str.length())) } is"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,141,* true for all {@code n}.
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,142,* </pre>
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,144,"* <p>This means that unlike {@link String#substring(int, int)}, the length of"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,145,* the returned substring may not necessarily be equivalent to
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,146,* {@code end - begin}.
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,148,* @param str the original String
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,149,"* @param begin the beginning index, inclusive"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,150,"* @param end the ending index, exclusive"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,151,"* @return the specified substring, possibly adjusted in order to not"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,152,*   split unicode surrogate pairs
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,153,"* @throws IndexOutOfBoundsException if the {@code begin} is negative,"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,154,"*   or {@code end} is larger than the length of {@code str}, or"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,155,*   {@code begin} is larger than {@code end}
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,157,private static String unicodePreservingSubstring(
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,158,"String str, int begin, int end) {"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,159,"return str.substring(unicodePreservingIndex(str, begin),"
True,src/com/google/javascript/jscomp/Strings.java,src/com/google/javascript/jscomp/Strings.java,160,"unicodePreservingIndex(str, end));"
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,40,f (n.getParent().getType() == Token.BLOCK
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,41,| n.getParent().getType() == Token.SCRIPT) {
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,40,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,41,if (parent.getType() == Token.BLOCK || parent.getType() == Token.SCRIPT) {
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,90,ode paramNode = NodeUtil.getFnParameters(fnNode).getFirstChild();
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,92,/ Param types
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,93,or (Node n : funType.getParameters()) {
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,94,/ Skip any parameters for which we do not have a name.
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,95,f (paramNode == null) {
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,96,reak;
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,90,if (fnNode != null) {
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,91,Node paramNode = NodeUtil.getFnParameters(fnNode).getFirstChild();
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,93,// Param types
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,94,for (Node n : funType.getParameters()) {
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,95,// Bail out if the paramNode is not there.
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,96,if (paramNode == null) {
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,97,break;
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,99,"sb.append("" * @param {"" + n.getJSType() + ""} "");"
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,100,sb.append(paramNode.getString());
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,101,"sb.append(""\n"");"
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,102,paramNode = paramNode.getNext();
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,98,"b.append("" * @param {"" + n.getJSType() + ""} "");"
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,99,b.append(paramNode.getString());
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,100,"b.append(""\n"");"
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,101,aramNode = paramNode.getNext();
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,129,f (fnNode.getBooleanProp(Node.IS_DISPATCHER)) {
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,131,if (fnNode != null && fnNode.getBooleanProp(Node.IS_DISPATCHER)) {
False,src/com/google/javascript/jscomp/VerboseMessageFormatter.java,src/com/google/javascript/jscomp/VerboseMessageFormatter.java,18,mport com.google.common.base.StringUtil;
False,src/com/google/javascript/jscomp/VerboseMessageFormatter.java,src/com/google/javascript/jscomp/VerboseMessageFormatter.java,50,"StringUtil.isEmpty(sourceName) ? ""(unknown source)"" : sourceName),"
True,src/com/google/javascript/jscomp/VerboseMessageFormatter.java,src/com/google/javascript/jscomp/VerboseMessageFormatter.java,49,"(Strings.isEmpty(sourceName) ? ""(unknown source)"" : sourceName),"
False,src/com/google/javascript/jscomp/parsing/Config.java,src/com/google/javascript/jscomp/parsing/Config.java,31,lass Config {
True,src/com/google/javascript/jscomp/parsing/Config.java,src/com/google/javascript/jscomp/parsing/Config.java,31,public class Config {
True,src/com/google/javascript/jscomp/parsing/Config.java,src/com/google/javascript/jscomp/parsing/Config.java,44,* Whether we're in ide mode.
True,src/com/google/javascript/jscomp/parsing/Config.java,src/com/google/javascript/jscomp/parsing/Config.java,46,final boolean isIdeMode;
False,src/com/google/javascript/jscomp/parsing/Config.java,src/com/google/javascript/jscomp/parsing/Config.java,54,oolean parseJsDocDocumentation) {
True,src/com/google/javascript/jscomp/parsing/Config.java,src/com/google/javascript/jscomp/parsing/Config.java,59,boolean isIdeMode) {
False,src/com/google/javascript/jscomp/parsing/Config.java,src/com/google/javascript/jscomp/parsing/Config.java,57,his.parseJsDocDocumentation = parseJsDocDocumentation;
True,src/com/google/javascript/jscomp/parsing/Config.java,src/com/google/javascript/jscomp/parsing/Config.java,62,this.parseJsDocDocumentation = isIdeMode;
True,src/com/google/javascript/jscomp/parsing/Config.java,src/com/google/javascript/jscomp/parsing/Config.java,63,this.isIdeMode = isIdeMode;
True,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,45,public static Config createConfig(
True,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,46,"JSTypeRegistry typeRegistry, boolean isIdeMode) {"
True,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,47,return new Config(
True,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,48,"typeRegistry, getAnnotationNames(), isIdeMode);"
False,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,82,"oolean isIdeMode,"
False,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,83,"STypeRegistry typeRegistry,"
True,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,88,"Config config,"
False,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,86,nitAnnotationNames();
False,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,96,f (isIdeMode) {
True,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,99,if (config.isIdeMode) {
False,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,112,onfig config = new Config(
False,src/com/google/javascript/jscomp/parsing/ParserRunner.java,src/com/google/javascript/jscomp/parsing/ParserRunner.java,113,"ypeRegistry, annotationNames, isIdeMode);"
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,787, Gets the source node.
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,787,* Gets the source node or null if this is an unknown function.
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,506,public void testU2UFunctionTypeAnnotation() {
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,507,assertTypeAnnotations(
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,508,"""/** @type {!Function} */ var x = function() {}"","
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,509,"""/**\n * @constructor\n */\nvar x = function() {\n}"");"
True,test/com/google/javascript/jscomp/GenerateExportsTest.java,test/com/google/javascript/jscomp/GenerateExportsTest.java,107,public void testExportSubclass() {
True,test/com/google/javascript/jscomp/GenerateExportsTest.java,test/com/google/javascript/jscomp/GenerateExportsTest.java,108,"test(""var goog = {}; function F() {}"" +"
True,test/com/google/javascript/jscomp/GenerateExportsTest.java,test/com/google/javascript/jscomp/GenerateExportsTest.java,109,"""/** @export */ function G() {} goog.inherits(G, F);"","
True,test/com/google/javascript/jscomp/GenerateExportsTest.java,test/com/google/javascript/jscomp/GenerateExportsTest.java,110,"""var goog = {}; function F() {}"" +"
True,test/com/google/javascript/jscomp/GenerateExportsTest.java,test/com/google/javascript/jscomp/GenerateExportsTest.java,111,"""function G() {} goog.inherits(G, F); google_exportSymbol('G', G);"");"
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,698,"input"", string, true, registry,"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,698,"""input"", string, ParserRunner.createConfig(registry, true),"
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,714,"input"", string,  true, registry,"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,714,"""input"", string, ParserRunner.createConfig(registry, true),"

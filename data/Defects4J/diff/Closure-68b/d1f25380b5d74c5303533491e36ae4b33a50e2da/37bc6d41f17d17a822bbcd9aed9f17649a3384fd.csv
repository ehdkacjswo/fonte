is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,361,"ode.replaceChild(child, Node.newString(Token.NAME, name));"
True,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,361,"Node newName = Node.newString(Token.NAME, name);"
True,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,362,newName.setJSType(child.getJSType());
True,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,363,"node.replaceChild(child, newName);"
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,745,// Ignore the prototype itself at all times.
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,746,"if (""prototype"".equals(field)) {"
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,747,return null;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,604,f (var != null &&
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,605,var.isTypeInferred() &&
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,606,objectType.hasOwnProperty(propName) &&
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,607,!objectType.isInstanceType() ||
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,608,var.isExtern() && !objectType.isNativeObjectType()))) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,609,bjectType.defineDeclaredProperty(
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,610,"ropName, var.getType(), var.isExtern());"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,611,eturn true;
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,604,if (var != null && !var.isTypeInferred()) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,605,// Handle normal declarations that could not be addressed earlier.
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,606,"if (propName.equals(""prototype"") ||"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,607,// Handle prototype declarations that could not be addressed earlier.
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,608,(!objectType.hasOwnProperty(propName) &&
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,609,(!objectType.isInstanceType() ||
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,610,(var.isExtern() && !objectType.isNativeObjectType())))) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,611,return objectType.defineDeclaredProperty(
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,612,"propName, var.getType(), var.isExtern());"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,412,@Override
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,413,public boolean hasOwnProperty(String name) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,414,"return super.hasOwnProperty(name) || ""prototype"".equals(name);"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,476,if (objType.equals(prototype)) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,477,return true;
True,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,261,"* @return True if the property was registered successfully, false if this"
True,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,262,*        conflicts with a previous property type declaration.
True,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,108,"""NAME JSCompiler_StaticMethods_foo$self = null"","
True,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,110,"""NAME JSCompiler_StaticMethods_bar$self = null"","
True,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,120,"""NAME JSCompiler_StaticMethods_foo$self = a"","
True,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,122,"""NAME JSCompiler_StaticMethods_bar$self = a"","
False,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,546,eturn new FunctionTypeInformationGatherer(
True,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,550,return new TypeInformationGatherer(
False,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,551, Wrapper that gathers function and call type strings after the
False,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,552, pass under test runs.  For use to test passes that modify JSType
True,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,555,"* Wrapper that gathers function, call, and self variable type strings after"
True,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,556,* the pass under test runs.  For use to test passes that modify JSType
False,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,555,rivate static class FunctionTypeInformationGatherer
True,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,559,private static class TypeInformationGatherer
False,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,561,"unctionTypeInformationGatherer(Compiler compiler,"
True,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,565,"TypeInformationGatherer(Compiler compiler,"
True,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,607,if (NodeUtil.isGetProp(node)) {
True,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,608,Node child = node.getFirstChild();
True,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,609,"if (NodeUtil.isName(child) && child.getString().endsWith(""$self"")) {"
True,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,610,JSType type = child.getJSType();
True,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,611,typeInformation.add(
True,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,612,"Joiner.on("""").join("
True,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,613,"Token.name(child.getType()),"
True,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,615,"child.getString(),"
True,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,617,"(type != null) ? type.toString() : ""null""));"
False,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,907,"ssertEquals(fieldTypes, mapToString(lastPass.getRenamedTypesForTesting()));"
True,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,907,assertEquals(
True,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,908,"fieldTypes, mapToString(lastPass.getRenamedTypesForTesting()));"
False,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,922,"ssertEquals(fieldTypes, mapToString(lastPass.getRenamedTypesForTesting()));"
True,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,923,assertEquals(
True,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,924,"fieldTypes, mapToString(lastPass.getRenamedTypesForTesting()));"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2635,public void testGoodExtends9() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2636,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2637,"""/** @constructor */ function Super() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2638,"""Super.prototype.foo = function() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2639,"""/** @constructor \n * @extends {Super} */ function Sub() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2640,"""Sub.prototype = new Super();"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2641,"""/** @override */ Sub.prototype.foo = function() {};"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2644,public void testGoodExtends10() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2645,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2646,"""/** @constructor */ function Super() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2647,"""/** @constructor \n * @extends {Super} */ function Sub() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2648,"""Sub.prototype = new Super();"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2649,"""/** @return {Super} */ function foo() { return new Sub(); }"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2652,public void testGoodExtends11() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2653,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2654,"""/** @constructor */ function Super() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2655,"""/** @param {boolean} x */ Super.prototype.foo = function(x) {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2656,"""/** @constructor \n * @extends {Super} */ function Sub() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2657,"""Sub.prototype = new Super();"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2658,"""(new Sub()).foo(0);"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2659,"""actual parameter 1 of Super.prototype.foo "" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2660,"""does not match formal parameter\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2661,"""found   : number\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2662,"""required: boolean"");"

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,158,ddInvalidatingType(mis.first);
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,159,ddInvalidatingType(mis.second);
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,158,addInvalidatingType(mis.typeA);
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,159,addInvalidatingType(mis.typeB);
False,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,19,mport com.google.common.base.Pair;
False,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,41,"rivate final SortedSet<Pair<JSError, CheckLevel>> messages ="
False,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,42,ets.newTreeSet(new LeveledJSErrorComparator());
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,40,private final SortedSet<ErrorWithLevel> messages =
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,41,Sets.newTreeSet(new LeveledJSErrorComparator());
False,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,48,"f (messages.add(Pair.of(error, level))) {"
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,47,"if (messages.add(new ErrorWithLevel(error, level))) {"
False,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,58,"or (Pair<JSError, CheckLevel> message : messages) {"
False,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,59,"rintln(message.second, message.first);"
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,57,for (ErrorWithLevel message : messages) {
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,58,"println(message.level, message.error);"
False,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,101,"or (Pair<JSError, CheckLevel> p : messages) {"
False,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,102,f (p.second == level) {
False,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,103,rrors.add(p.first);
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,100,for (ErrorWithLevel p : messages) {
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,101,if (p.level == level) {
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,102,errors.add(p.error);
False,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,119,"mplements Comparator<Pair<JSError, CheckLevel>> {"
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,118,implements Comparator<ErrorWithLevel> {
False,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,123,"ublic int compare(Pair<JSError, CheckLevel> p1,"
False,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,124,"air<JSError, CheckLevel> p2) {"
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,122,"public int compare(ErrorWithLevel p1, ErrorWithLevel p2) {"
False,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,135,f (p1.second != p2.second) {
False,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,136,eturn p2.second.compareTo(p1.second);
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,133,if (p1.level != p2.level) {
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,134,return p2.level.compareTo(p1.level);
False,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,140,tring source1 = p1.first.sourceName;
False,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,141,tring source2 = p2.first.sourceName;
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,138,String source1 = p1.error.sourceName;
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,139,String source2 = p2.error.sourceName;
False,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,153,nt lineno1 = p1.first.lineNumber;
False,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,154,nt lineno2 = p2.first.lineNumber;
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,151,int lineno1 = p1.error.lineNumber;
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,152,int lineno2 = p2.error.lineNumber;
False,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,163,nt charno1 = p1.first.getCharno();
False,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,164,nt charno2 = p2.first.getCharno();
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,161,int charno1 = p1.error.getCharno();
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,162,int charno2 = p2.error.getCharno();
False,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,173,eturn p1.first.description.compareTo(p2.first.description);
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,171,return p1.error.description.compareTo(p2.error.description);
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,175,static class ErrorWithLevel {
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,176,final JSError error;
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,177,final CheckLevel level;
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,179,"ErrorWithLevel(JSError error, CheckLevel level) {"
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,180,this.error = error;
True,src/com/google/javascript/jscomp/BasicErrorManager.java,src/com/google/javascript/jscomp/BasicErrorManager.java,181,this.level = level;
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,28,mport com.google.common.base.Pair;
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,116,** Functions used to restrict types.
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,118,"rivate Map<String, Function<Pair<JSType, Boolean>, JSType>> restricters;"
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,115,/** Functions used to restrict types. */
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,116,"private Map<String, Function<TypeRestriction, JSType>> restricters;"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,127,"ew ImmutableMapBuilder<String, Function<Pair<JSType, Boolean>, JSType>>()"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,128,"put(""isDef"", new Function<Pair<JSType, Boolean>, JSType>() {"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,129,"ublic JSType apply(Pair<JSType, Boolean> p) {"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,130,f (p.second) {
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,131,eturn getRestrictedWithoutUndefined(p.first);
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,125,"new ImmutableMapBuilder<String, Function<TypeRestriction, JSType>>()"
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,126,".put(""isDef"", new Function<TypeRestriction, JSType>() {"
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,127,public JSType apply(TypeRestriction p) {
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,128,if (p.outcome) {
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,129,return getRestrictedWithoutUndefined(p.type);
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,137,"put(""isNull"", new Function<Pair<JSType, Boolean>, JSType>() {"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,138,"ublic JSType apply(Pair<JSType, Boolean> p) {"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,139,f (p.second) {
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,135,".put(""isNull"", new Function<TypeRestriction, JSType>() {"
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,136,public JSType apply(TypeRestriction p) {
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,137,if (p.outcome) {
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,142,eturn getRestrictedWithoutNull(p.first);
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,140,return getRestrictedWithoutNull(p.type);
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,146,"put(""isDefAndNotNull"", new Function<Pair<JSType, Boolean>, JSType>() {"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,147,"ublic JSType apply(Pair<JSType, Boolean> p) {"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,148,f (p.second) {
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,144,".put(""isDefAndNotNull"", new Function<TypeRestriction, JSType>() {"
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,145,public JSType apply(TypeRestriction p) {
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,146,if (p.outcome) {
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,150,etRestrictedWithoutNull(p.first));
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,148,getRestrictedWithoutNull(p.type));
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,156,"put(""isString"", new Function<Pair<JSType, Boolean>, JSType>() {"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,157,"ublic JSType apply(Pair<JSType, Boolean> p) {"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,158,"eturn getRestrictedByTypeOfResult(p.first, ""string"", p.second);"
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,154,".put(""isString"", new Function<TypeRestriction, JSType>() {"
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,155,public JSType apply(TypeRestriction p) {
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,156,"return getRestrictedByTypeOfResult(p.type, ""string"", p.outcome);"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,161,"put(""isBoolean"", new Function<Pair<JSType, Boolean>, JSType>() {"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,162,"ublic JSType apply(Pair<JSType, Boolean> p) {"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,163,"eturn getRestrictedByTypeOfResult(p.first, ""boolean"", p.second);"
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,159,".put(""isBoolean"", new Function<TypeRestriction, JSType>() {"
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,160,public JSType apply(TypeRestriction p) {
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,161,"return getRestrictedByTypeOfResult(p.type, ""boolean"", p.outcome);"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,166,"put(""isNumber"", new Function<Pair<JSType, Boolean>, JSType>() {"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,167,"ublic JSType apply(Pair<JSType, Boolean> p) {"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,168,"eturn getRestrictedByTypeOfResult(p.first, ""number"", p.second);"
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,164,".put(""isNumber"", new Function<TypeRestriction, JSType>() {"
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,165,public JSType apply(TypeRestriction p) {
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,166,"return getRestrictedByTypeOfResult(p.type, ""number"", p.outcome);"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,171,"put(""isFunction"", new Function<Pair<JSType, Boolean>, JSType>() {"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,172,"ublic JSType apply(Pair<JSType, Boolean> p) {"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,173,"eturn getRestrictedByTypeOfResult(p.first, ""function"", p.second);"
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,169,".put(""isFunction"", new Function<TypeRestriction, JSType>() {"
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,170,public JSType apply(TypeRestriction p) {
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,171,"return getRestrictedByTypeOfResult(p.type, ""function"", p.outcome);"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,176,"put(""isArray"", new Function<Pair<JSType, Boolean>, JSType>() {"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,177,"ublic JSType apply(Pair<JSType, Boolean> p) {"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,178,isitor<JSType> visitor = p.second ? restrictToArrayVisitor :
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,174,".put(""isArray"", new Function<TypeRestriction, JSType>() {"
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,175,public JSType apply(TypeRestriction p) {
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,176,Visitor<JSType> visitor = p.outcome ? restrictToArrayVisitor :
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,180,eturn p.first == null ? null : p.first.visit(visitor);
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,178,return p.type == null ? null : p.type.visit(visitor);
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,183,"put(""isObject"", new Function<Pair<JSType, Boolean>, JSType>() {"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,184,"ublic JSType apply(Pair<JSType, Boolean> p) {"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,185,isitor<JSType> visitor = p.second ? restrictToObjectVisitor :
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,181,".put(""isObject"", new Function<TypeRestriction, JSType>() {"
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,182,public JSType apply(TypeRestriction p) {
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,183,Visitor<JSType> visitor = p.outcome ? restrictToObjectVisitor :
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,187,eturn p.first == null ? null : p.first.visit(visitor);
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,185,return p.type == null ? null : p.type.visit(visitor);
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,205,"unction<Pair<JSType, Boolean>, JSType> restricter ="
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,203,"Function<TypeRestriction, JSType> restricter ="
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,220,"lowScope blindScope, Function<Pair<JSType, Boolean>, JSType> restriction,"
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,218,"FlowScope blindScope, Function<TypeRestriction, JSType> restriction,"
False,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,223,"ype = restriction.apply(Pair.of(type, outcome));"
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,221,"type = restriction.apply(new TypeRestriction(type, outcome));"
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,233,private static class TypeRestriction {
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,234,private final JSType type;
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,235,private final boolean outcome;
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,237,"private TypeRestriction(JSType type, boolean outcome) {"
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,238,this.type = type;
True,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java,239,this.outcome = outcome;
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,280,ddInvalidatingType(mis.first);
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,281,ddInvalidatingType(mis.second);
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,280,addInvalidatingType(mis.typeA);
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,281,addInvalidatingType(mis.typeB);
False,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,19,mport com.google.common.base.Pair;
False,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,58,"rivate final Multimap<String, Pair<Name, Reference>> unknownNameUse ="
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,57,"private final Multimap<String, NameUse> unknownNameUse ="
False,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,527,"ew Pair<Name, Reference>(getNamedContainingFunction(), ref));"
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,526,"new NameUse(getNamedContainingFunction(), ref));"
False,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,565,"ollection<Pair<Name, Reference>> uses = unknownNameUse.get(propName);"
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,564,Collection<NameUse> uses = unknownNameUse.get(propName);
False,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,567,"or (Pair<Name, Reference> use : uses) {"
False,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,568,"raph.connect(use.getFirst(), use.getSecond(), name);"
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,566,for (NameUse use : uses) {
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,567,"graph.connect(use.name, use.reference, name);"
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,626,private static class NameUse {
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,627,private final Name name;
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,628,private final Reference reference;
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,630,"private NameUse(Name name, Reference reference) {"
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,631,this.name = name;
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,632,this.reference = reference;
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,22,mport com.google.common.base.Pair;
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,24,import com.google.javascript.rhino.jstype.JSType.TypePair;
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,47,"rivate static final Function<Pair<JSType, JSType>, Pair<JSType, JSType>> EQ ="
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,48,"ew Function<Pair<JSType, JSType>, Pair<JSType, JSType>>() {"
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,49,"ublic Pair<JSType, JSType> apply(Pair<JSType, JSType> p) {"
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,50,f (p.first == null || p.second == null) {
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,47,"private static final Function<TypePair, TypePair> EQ ="
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,48,"new Function<TypePair, TypePair>() {"
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,49,public TypePair apply(TypePair p) {
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,50,if (p.typeA == null || p.typeB == null) {
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,53,eturn p.first.getTypesUnderEquality(p.second);
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,53,return p.typeA.getTypesUnderEquality(p.typeB);
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,60,"rivate static final Function<Pair<JSType, JSType>, Pair<JSType, JSType>> NE ="
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,61,"ew Function<Pair<JSType, JSType>, Pair<JSType, JSType>>() {"
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,62,"ublic Pair<JSType, JSType> apply(Pair<JSType, JSType> p) {"
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,63,f (p.first == null || p.second == null) {
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,60,"private static final Function<TypePair, TypePair> NE ="
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,61,"new Function<TypePair, TypePair>() {"
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,62,public TypePair apply(TypePair p) {
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,63,if (p.typeA == null || p.typeB == null) {
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,66,eturn p.first.getTypesUnderInequality(p.second);
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,66,return p.typeA.getTypesUnderInequality(p.typeB);
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,74,"unction<Pair<JSType, JSType>, Pair<JSType, JSType>> SHEQ ="
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,75,"ew Function<Pair<JSType, JSType>, Pair<JSType, JSType>>() {"
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,76,"ublic Pair<JSType, JSType> apply(Pair<JSType, JSType> p) {"
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,77,f (p.first == null || p.second == null) {
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,74,"Function<TypePair, TypePair> SHEQ ="
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,75,"new Function<TypePair, TypePair>() {"
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,76,public TypePair apply(TypePair p) {
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,77,if (p.typeA == null || p.typeB == null) {
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,80,eturn p.first.getTypesUnderShallowEquality(p.second);
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,80,return p.typeA.getTypesUnderShallowEquality(p.typeB);
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,88,"unction<Pair<JSType, JSType>, Pair<JSType, JSType>> SHNE ="
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,89,"ew Function<Pair<JSType, JSType>, Pair<JSType, JSType>>() {"
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,90,"ublic Pair<JSType, JSType> apply(Pair<JSType, JSType> p) {"
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,91,f (p.first == null || p.second == null) {
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,88,"Function<TypePair, TypePair> SHNE ="
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,89,"new Function<TypePair, TypePair>() {"
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,90,public TypePair apply(TypePair p) {
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,91,if (p.typeA == null || p.typeB == null) {
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,94,eturn p.first.getTypesUnderShallowInequality(p.second);
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,94,return p.typeA.getTypesUnderShallowInequality(p.typeB);
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,102,"unction<Pair<JSType, JSType>, Pair<JSType, JSType>> INEQ ="
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,103,"ew Function<Pair<JSType, JSType>, Pair<JSType, JSType>>() {"
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,104,"ublic Pair<JSType, JSType> apply(Pair<JSType, JSType> p) {"
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,105,"eturn new Pair<JSType, JSType>("
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,106,"etRestrictedWithoutUndefined(p.first),"
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,107,etRestrictedWithoutUndefined(p.second));
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,102,"Function<TypePair, TypePair> INEQ ="
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,103,"new Function<TypePair, TypePair>() {"
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,104,public TypePair apply(TypePair p) {
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,105,return new TypePair(
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,106,"getRestrictedWithoutUndefined(p.typeA),"
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,107,getRestrictedWithoutUndefined(p.typeB));
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,241,"unction<Pair<JSType, JSType>, Pair<JSType, JSType>> merging) {"
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,241,"Function<TypePair, TypePair> merging) {"
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,266,"air<JSType, JSType> merged = merging.apply(Pair.of(leftType, rightType));"
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,266,"TypePair merged = merging.apply(new TypePair(leftType, rightType));"
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,270,(leftIsRefineable && merged.first != null) ||
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,271,rightIsRefineable && merged.second != null))) {
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,270,((leftIsRefineable && merged.typeA != null) ||
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,271,(rightIsRefineable && merged.typeB != null))) {
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,273,f (leftIsRefineable && merged.first != null) {
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,274,"eclareNameInScope(informed, left, merged.first);"
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,273,if (leftIsRefineable && merged.typeA != null) {
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,274,"declareNameInScope(informed, left, merged.typeA);"
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,276,f (rightIsRefineable && merged.second != null) {
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,277,"eclareNameInScope(informed, right, merged.second);"
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,276,if (rightIsRefineable && merged.typeB != null) {
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,277,"declareNameInScope(informed, right, merged.typeB);"
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,30,mport com.google.common.base.Pair;
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,30,import com.google.common.base.Objects;
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,679,"tatic class TypeMismatch extends Pair<JSType, JSType> {"
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,680,rivate static final long serialVersionUID = 1;
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,678,static class TypeMismatch {
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,679,final JSType typeA;
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,680,final JSType typeB;
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,688,"uper(a, b);"
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,688,this.typeA = a;
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,689,this.typeB = b;
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,692,@Override public boolean equals(Object object) {
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,693,if (object instanceof TypeMismatch) {
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,694,TypeMismatch that = (TypeMismatch) object;
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,695,return (that.typeA.equals(this.typeA) && that.typeB.equals(this.typeB))
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,696,|| (that.typeB.equals(this.typeA) && that.typeA.equals(this.typeB));
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,698,return false;
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,701,@Override public int hashCode() {
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,702,"return Objects.hashCode(typeA, typeB);"
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,705,@Override public String toString() {
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,706,"return ""("" + typeA + "", "" + typeB + "")"";"
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,19,mport com.google.common.base.Pair;
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,61," Pseudo typedef for Pair<Annotatable, Annotation>. Record of an object's"
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,60,* Pseudo typedef for a pair of annotations. Record of an object's
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,64,rivate static final class AnnotationState extends
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,65,"air<Annotatable, Annotation> {"
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,66,rivate static final long serialVersionUID = 1L;
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,63,private static final class AnnotationState {
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,64,private final Annotatable first;
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,65,private final Annotation second;
False,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,69,"uper(annotatable, annotation);"
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,68,this.first = annotatable;
True,src/com/google/javascript/jscomp/graph/Graph.java,src/com/google/javascript/jscomp/graph/Graph.java,69,this.second = annotation;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,43,mport com.google.common.base.Pair;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,43,import com.google.common.base.Objects;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1325,"air<Node, Node> diff = checkTreeEqualsImpl(node2);"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1325,NodeMismatch diff = checkTreeEqualsImpl(node2);
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1347,"air<Node, Node> checkTreeEqualsImpl(Node node2) {"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1347,NodeMismatch checkTreeEqualsImpl(Node node2) {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1358,"eturn Pair.of(this, node2);"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1358,"return new NodeMismatch(this, node2);"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1361,"air<Node, Node> res = null;"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1361,NodeMismatch res = null;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1982,static class NodeMismatch {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1983,final Node nodeA;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1984,final Node nodeB;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1986,"NodeMismatch(Node nodeA, Node nodeB) {"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1987,this.nodeA = nodeA;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1988,this.nodeB = nodeB;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1991,@Override public boolean equals(Object object) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1992,if (object instanceof NodeMismatch) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1993,NodeMismatch that = (NodeMismatch) object;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1994,return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1996,return false;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1999,@Override public int hashCode() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,2000,"return Objects.hashCode(nodeA, nodeB);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,44,mport com.google.common.base.Pair;
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,646,"ublic Pair<JSType, JSType> getTypesUnderEquality(JSType that) {"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,645,public TypePair getTypesUnderEquality(JSType that) {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,649,"air<JSType, JSType> p = that.getTypesUnderEquality(this);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,650,"eturn Pair.of(p.second, p.first);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,648,TypePair p = that.getTypesUnderEquality(this);
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,649,"return new TypePair(p.typeB, p.typeA);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,656,"eturn Pair.of(null, null);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,655,"return new TypePair(null, null);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,660,"eturn Pair.of(this, that);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,659,"return new TypePair(this, that);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,679,"ublic Pair<JSType, JSType> getTypesUnderInequality(JSType that) {"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,678,public TypePair getTypesUnderInequality(JSType that) {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,682,"air<JSType, JSType> p = that.getTypesUnderInequality(this);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,683,"eturn Pair.of(p.second, p.first);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,681,TypePair p = that.getTypesUnderInequality(this);
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,682,"return new TypePair(p.typeB, p.typeA);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,689,"eturn Pair.of(null, null);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,688,"return new TypePair(null, null);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,693,"eturn Pair.of(this, that);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,692,"return new TypePair(this, that);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,709,"ublic Pair<JSType, JSType> getTypesUnderShallowEquality(JSType that) {"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,708,public TypePair getTypesUnderShallowEquality(JSType that) {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,711,"eturn new Pair<JSType, JSType>(commonType, commonType);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,710,"return new TypePair(commonType, commonType);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,723,"ublic Pair<JSType, JSType> getTypesUnderShallowInequality(JSType that) {"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,722,public TypePair getTypesUnderShallowInequality(JSType that) {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,726,"air<JSType, JSType> p = that.getTypesUnderShallowInequality(this);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,727,"eturn Pair.of(p.second, p.first);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,725,TypePair p = that.getTypesUnderShallowInequality(this);
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,726,"return new TypePair(p.typeB, p.typeA);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,735,"eturn Pair.of(null, null);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,734,"return new TypePair(null, null);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,737,"eturn Pair.of(this, that);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,736,"return new TypePair(this, that);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,833,public static class TypePair {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,834,public final JSType typeA;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,835,public final JSType typeB;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,837,"public TypePair(JSType typeA, JSType typeB) {"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,838,this.typeA = typeA;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,839,this.typeB = typeB;
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,44,mport com.google.common.base.Pair;
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,44,import com.google.javascript.rhino.jstype.JSType.TypePair;
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,421,"ublic Pair<JSType, JSType> getTypesUnderEquality(JSType that) {"
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,421,public TypePair getTypesUnderEquality(JSType that) {
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,425,"air<JSType, JSType> p = element.getTypesUnderEquality(that);"
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,426,f (p.first != null) {
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,427,hisRestricted.addAlternate(p.first);
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,425,TypePair p = element.getTypesUnderEquality(that);
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,426,if (p.typeA != null) {
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,427,thisRestricted.addAlternate(p.typeA);
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,429,f (p.second != null) {
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,430,hatRestricted.addAlternate(p.second);
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,429,if (p.typeB != null) {
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,430,thatRestricted.addAlternate(p.typeB);
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,433,eturn Pair.of(
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,433,return new TypePair(
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,439,"ublic Pair<JSType, JSType> getTypesUnderInequality(JSType that) {"
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,439,public TypePair getTypesUnderInequality(JSType that) {
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,443,"air<JSType, JSType> p = element.getTypesUnderInequality(that);"
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,444,f (p.first != null) {
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,445,hisRestricted.addAlternate(p.first);
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,443,TypePair p = element.getTypesUnderInequality(that);
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,444,if (p.typeA != null) {
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,445,thisRestricted.addAlternate(p.typeA);
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,447,f (p.second != null) {
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,448,hatRestricted.addAlternate(p.second);
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,447,if (p.typeB != null) {
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,448,thatRestricted.addAlternate(p.typeB);
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,451,eturn Pair.of(
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,451,return new TypePair(
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,457,"ublic Pair<JSType, JSType> getTypesUnderShallowInequality(JSType that) {"
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,457,public TypePair getTypesUnderShallowInequality(JSType that) {
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,461,"air<JSType, JSType> p = element.getTypesUnderShallowInequality(that);"
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,462,f (p.first != null) {
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,463,hisRestricted.addAlternate(p.first);
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,461,TypePair p = element.getTypesUnderShallowInequality(that);
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,462,if (p.typeA != null) {
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,463,thisRestricted.addAlternate(p.typeA);
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,465,f (p.second != null) {
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,466,hatRestricted.addAlternate(p.second);
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,465,if (p.typeB != null) {
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,466,thatRestricted.addAlternate(p.typeB);
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,469,eturn Pair.of(
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,469,return new TypePair(
False,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,19,mport com.google.common.base.Pair;
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,19,import com.google.javascript.jscomp.BasicErrorManager.ErrorWithLevel;
False,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,106,"rivate Pair<JSError, CheckLevel> error(JSError e) {"
False,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,107,"eturn Pair.of(e, CheckLevel.ERROR);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,106,private ErrorWithLevel error(JSError e) {
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,107,"return new ErrorWithLevel(e, CheckLevel.ERROR);"
False,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,110,"rivate Pair<JSError, CheckLevel> warning(JSError e) {"
False,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,111,"eturn Pair.of(e, CheckLevel.WARNING);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,110,private ErrorWithLevel warning(JSError e) {
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,111,"return new ErrorWithLevel(e, CheckLevel.WARNING);"
False,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,114,"rivate void assertSmaller(Pair<JSError, CheckLevel> p1,"
False,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,115,"air<JSError, CheckLevel> p2) {"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,114,"private void assertSmaller(ErrorWithLevel p1, ErrorWithLevel p2) {"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,19,mport com.google.common.base.Pair;
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,99,"ew Pair<String, JSType>(""a"", OBJECT_TYPE),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,100,"ew Pair<String, JSType>(""b"", OBJECT_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,98,"new TypedName(""a"", OBJECT_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,99,"new TypedName(""b"", OBJECT_TYPE)),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,102,"ew Pair<String, JSType>(""a"", NULL_TYPE),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,103,"ew Pair<String, JSType>(""b"", NULL_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,101,"new TypedName(""a"", NULL_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,102,"new TypedName(""b"", NULL_TYPE)));"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,116,"ets.newHashSet(new Pair<String, JSType>(""a"", NUMBER_TYPE)),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,117,"ets.newHashSet(new Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,115,"Sets.newHashSet(new TypedName(""a"", NUMBER_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,116,"Sets.newHashSet(new TypedName(""a"","
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,131,"ets.newHashSet(new Pair<String, JSType>(""a"", NUMBER_TYPE)),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,132,"ets.newHashSet(new Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,130,"Sets.newHashSet(new TypedName(""a"", NUMBER_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,131,"Sets.newHashSet(new TypedName(""a"","
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,146,"ets.newHashSet(new Pair<String, JSType>(""a"", STRING_TYPE),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,147,"ew Pair<String, JSType>(""b"", STRING_TYPE)),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,148,"ets.newHashSet(new Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,145,"Sets.newHashSet(new TypedName(""a"", STRING_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,146,"new TypedName(""b"", STRING_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,147,"Sets.newHashSet(new TypedName(""a"","
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,150,"ew Pair<String, JSType>(""b"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,149,"new TypedName(""b"","
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,161,"ets.newHashSet(new Pair<String, JSType>(""a"", VOID_TYPE),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,162,"ew Pair<String, JSType>(""b"", VOID_TYPE)),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,163,"ets.newHashSet(new Pair<String, JSType>(""a"", STRING_TYPE),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,164,"ew Pair<String, JSType>(""b"", VOID_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,160,"Sets.newHashSet(new TypedName(""a"", VOID_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,161,"new TypedName(""b"", VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,162,"Sets.newHashSet(new TypedName(""a"", STRING_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,163,"new TypedName(""b"", VOID_TYPE)));"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,174,"ets.newHashSet(new Pair<String, JSType>(""a"", VOID_TYPE),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,175,"ew Pair<String, JSType>(""b"", VOID_TYPE)),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,176,"ets.newHashSet(new Pair<String, JSType>(""a"", NULL_TYPE),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,177,"ew Pair<String, JSType>(""b"", VOID_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,173,"Sets.newHashSet(new TypedName(""a"", VOID_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,174,"new TypedName(""b"", VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,175,"Sets.newHashSet(new TypedName(""a"", NULL_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,176,"new TypedName(""b"", VOID_TYPE)));"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,188,"ew Pair<String, JSType>(""a"", VOID_TYPE),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,189,"ew Pair<String, JSType>(""b"", VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,187,"new TypedName(""a"", VOID_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,188,"new TypedName(""b"", VOID_TYPE)),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,191,"ew Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,190,"new TypedName(""a"","
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,193,"ew Pair<String, JSType>(""b"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,192,"new TypedName(""b"","
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,207,"ets.newHashSet(new Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,206,"Sets.newHashSet(new TypedName(""a"","
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,209,"ets.newHashSet(new Pair<String, JSType>(""a"", NUMBER_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,208,"Sets.newHashSet(new TypedName(""a"", NUMBER_TYPE)));"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,222,"ets.newHashSet(new Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,221,"Sets.newHashSet(new TypedName(""a"","
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,224,"ets.newHashSet(new Pair<String, JSType>(""a"", NUMBER_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,223,"Sets.newHashSet(new TypedName(""a"", NUMBER_TYPE)));"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,237,"ets.newHashSet(new Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,236,"Sets.newHashSet(new TypedName(""a"","
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,239,"ew Pair<String, JSType>(""b"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,238,"new TypedName(""b"","
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,241,"ets.newHashSet(new Pair<String, JSType>(""a"", STRING_TYPE),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,242,"ew Pair<String, JSType>(""b"", STRING_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,240,"Sets.newHashSet(new TypedName(""a"", STRING_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,241,"new TypedName(""b"", STRING_TYPE)));"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,252,"ets.newHashSet(new Pair<String, JSType>(""a"", STRING_TYPE),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,253,"ew Pair<String, JSType>(""b"", VOID_TYPE)),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,254,"ets.newHashSet(new Pair<String, JSType>(""a"", VOID_TYPE),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,255,"ew Pair<String, JSType>(""b"", VOID_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,251,"Sets.newHashSet(new TypedName(""a"", STRING_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,252,"new TypedName(""b"", VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,253,"Sets.newHashSet(new TypedName(""a"", VOID_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,254,"new TypedName(""b"", VOID_TYPE)));"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,265,"ets.newHashSet(new Pair<String, JSType>(""a"", VOID_TYPE),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,266,"ew Pair<String, JSType>(""b"", NULL_TYPE)),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,267,"ets.newHashSet(new Pair<String, JSType>(""a"", NULL_TYPE),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,268,"ew Pair<String, JSType>(""b"", NULL_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,264,"Sets.newHashSet(new TypedName(""a"", VOID_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,265,"new TypedName(""b"", NULL_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,266,"Sets.newHashSet(new TypedName(""a"", NULL_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,267,"new TypedName(""b"", NULL_TYPE)));"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,279,"ew Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,278,"new TypedName(""a"","
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,281,"ew Pair<String, JSType>(""b"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,280,"new TypedName(""b"","
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,284,"ew Pair<String, JSType>(""a"", VOID_TYPE),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,285,"ew Pair<String, JSType>(""b"", VOID_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,283,"new TypedName(""a"", VOID_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,284,"new TypedName(""b"", VOID_TYPE)));"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,298,"ets.newHashSet(new Pair<String, JSType>(""a"", VOID_TYPE)),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,299,"ets.newHashSet(new Pair<String, JSType>(""a"", BOOLEAN_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,297,"Sets.newHashSet(new TypedName(""a"", VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,298,"Sets.newHashSet(new TypedName(""a"", BOOLEAN_TYPE)));"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,312,"ets.newHashSet(new Pair<String, JSType>(""a"", BOOLEAN_TYPE)),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,313,"ets.newHashSet(new Pair<String, JSType>(""a"", VOID_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,311,"Sets.newHashSet(new TypedName(""a"", BOOLEAN_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,312,"Sets.newHashSet(new TypedName(""a"", VOID_TYPE)));"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,332,"ets.newHashSet(new Pair<String, JSType>(""a"", nullUndefined)),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,333,"ets.newHashSet(new Pair<String, JSType>(""a"", NUMBER_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,331,"Sets.newHashSet(new TypedName(""a"", nullUndefined)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,332,"Sets.newHashSet(new TypedName(""a"", NUMBER_TYPE)));"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,349,"ew Pair<String, JSType>(""a"", STRING_TYPE)),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,350,"ets.newHashSet(new Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,348,"new TypedName(""a"", STRING_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,349,"Sets.newHashSet(new TypedName(""a"","
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,370,"ew Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,369,"new TypedName(""a"","
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,372,"ew Pair<String, JSType>(""b"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,371,"new TypedName(""b"","
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,375,"ew Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,374,"new TypedName(""a"","
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,377,"ew Pair<String, JSType>(""b"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,376,"new TypedName(""b"","
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,395,"ew Pair<String, JSType>(""a"", STRING_TYPE)),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,396,"ets.newHashSet(new Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,394,"new TypedName(""a"", STRING_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,395,"Sets.newHashSet(new TypedName(""a"","
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,408,"ets.newHashSet(new Pair<String, JSType>(""a"", NUMBER_TYPE),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,409,"ew Pair<String, JSType>(""b"", STRING_TYPE)),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,410,"ets.newHashSet(new Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,407,"Sets.newHashSet(new TypedName(""a"", NUMBER_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,408,"new TypedName(""b"", STRING_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,409,"Sets.newHashSet(new TypedName(""a"","
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,412,"ew Pair<String, JSType>(""b"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,411,"new TypedName(""b"","
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,424,"ew Pair<String, JSType>(""a"", U2U_CONSTRUCTOR_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,423,"new TypedName(""a"", U2U_CONSTRUCTOR_TYPE)),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,426,"ew Pair<String, JSType>(""a"", OBJECT_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,425,"new TypedName(""a"", OBJECT_TYPE)));"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,437,"ew Pair<String, JSType>(""a"", U2U_CONSTRUCTOR_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,436,"new TypedName(""a"", U2U_CONSTRUCTOR_TYPE)),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,439,"ew Pair<String, JSType>(""a"", ALL_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,438,"new TypedName(""a"", ALL_TYPE)));"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,450,"ew Pair<String, JSType>(""x"", STRING_OBJECT_TYPE),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,451,"ew Pair<String, JSType>(""s"", STRING_OBJECT_FUNCTION_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,449,"new TypedName(""x"", STRING_OBJECT_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,450,"new TypedName(""s"", STRING_OBJECT_FUNCTION_TYPE)),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,453,"ew Pair<String, JSType>(""s"", STRING_OBJECT_FUNCTION_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,452,"new TypedName(""s"", STRING_OBJECT_FUNCTION_TYPE)));"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,465,"ew Pair<String, JSType>(""x"", STRING_OBJECT_TYPE),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,466,"ew Pair<String, JSType>(""s"", STRING_OBJECT_FUNCTION_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,464,"new TypedName(""x"", STRING_OBJECT_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,465,"new TypedName(""s"", STRING_OBJECT_FUNCTION_TYPE)),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,468,"ew Pair<String, JSType>(""x"", NUMBER_OBJECT_TYPE),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,469,"ew Pair<String, JSType>(""s"", STRING_OBJECT_FUNCTION_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,467,"new TypedName(""x"", NUMBER_OBJECT_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,468,"new TypedName(""s"", STRING_OBJECT_FUNCTION_TYPE)));"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,480,"ew Pair<String, JSType>(""x"", STRING_OBJECT_TYPE),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,481,"ew Pair<String, JSType>(""s"", STRING_OBJECT_FUNCTION_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,479,"new TypedName(""x"", STRING_OBJECT_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,480,"new TypedName(""s"", STRING_OBJECT_FUNCTION_TYPE)),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,483,"ew Pair<String, JSType>(""x"", OBJECT_TYPE),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,484,"ew Pair<String, JSType>(""s"", STRING_OBJECT_FUNCTION_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,482,"new TypedName(""x"", OBJECT_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,483,"new TypedName(""s"", STRING_OBJECT_FUNCTION_TYPE)));"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,495,"ew Pair<String, JSType>(""x"", STRING_OBJECT_TYPE),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,496,"ew Pair<String, JSType>(""s"", STRING_OBJECT_FUNCTION_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,494,"new TypedName(""x"", STRING_OBJECT_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,495,"new TypedName(""s"", STRING_OBJECT_FUNCTION_TYPE)),"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,498,"ew Pair<String, JSType>(""s"", STRING_OBJECT_FUNCTION_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,497,"new TypedName(""s"", STRING_OBJECT_FUNCTION_TYPE)));"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,502,"ollection<Pair<String, JSType>> trueOutcome,"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,503,"ollection<Pair<String, JSType>> falseOutcome) {"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,501,"Collection<TypedName> trueOutcome,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,502,Collection<TypedName> falseOutcome) {
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,511,"or (Pair<String, JSType> p : trueOutcome) {"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,512,"ssertEquals(p.first, p.second, getVarType(informedTrue, p.first));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,510,for (TypedName p : trueOutcome) {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,511,"assertEquals(p.name, p.type, getVarType(informedTrue, p.name));"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,518,"or (Pair<String, JSType> p : falseOutcome) {"
False,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,519,"ssertEquals(p.second, getVarType(informedFalse, p.first));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,517,for (TypedName p : falseOutcome) {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,518,"assertEquals(p.type, getVarType(informedFalse, p.name));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,550,private static class TypedName {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,551,private final String name;
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,552,private final JSType type;
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,554,"private TypedName(String name, JSType type) {"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,555,this.name = name;
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,556,this.type = type;
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,20,mport com.google.common.base.Pair;
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1207,"air<Node, Scope> p = parseAndTypeCheckWithScope(""var a = function b(){};"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1206,"TypeCheckResult p = parseAndTypeCheckWithScope(""var a = function b(){};"");"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1210,"ssertTrue(p.second.isDeclared(""a"", false));"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1211,"ssertFalse(p.second.isDeclared(""b"", false));"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1209,"assertTrue(p.scope.isDeclared(""a"", false));"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1210,"assertFalse(p.scope.isDeclared(""b"", false));"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1214,"ssertEquals(""function (): ?"", p.second.getVar(""a"").getType().toString());"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,1213,"assertEquals(""function (): ?"", p.scope.getVar(""a"").getType().toString());"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2929,"air<Node, Scope> p ="
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2928,TypeCheckResult p =
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2933,".getSecond().getVar(""a"").getType());"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2932,"p.scope.getVar(""a"").getType());"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2941,"air<Node, Scope> p = parseAndTypeCheckWithScope(""var a = 3;"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2940,"TypeCheckResult p = parseAndTypeCheckWithScope(""var a = 3;"");"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2943,"ssertEquals(NUMBER_TYPE, p.second.getVar(""a"").getType());"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2942,"assertEquals(NUMBER_TYPE, p.scope.getVar(""a"").getType());"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2947,"air<Node, Scope> p = parseAndTypeCheckWithScope("
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2946,TypeCheckResult p = parseAndTypeCheckWithScope(
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2951,".second.getVar(""a"").getType());"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,2950,"p.scope.getVar(""a"").getType());"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3967,"cope s = parseAndTypeCheckWithScope(""var a = function(){};"").second;"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3966,"Scope s = parseAndTypeCheckWithScope(""var a = function(){};"").scope;"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4265,"air<Node, Scope> p ="
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4264,TypeCheckResult p =
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4269,"SType aType = p.getSecond().getVar(""a"").getType();"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4268,"JSType aType = p.scope.getVar(""a"").getType();"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4313,"air<Node, Scope> p = parseAndTypeCheckWithScope(""var a = new Array();"");"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4314,"ar a = p.second.getVar(""a"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4312,"TypeCheckResult p = parseAndTypeCheckWithScope(""var a = new Array();"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4313,"Var a = p.scope.getVar(""a"");"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4320,"air<Node, Scope> p = parseAndTypeCheckWithScope("
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4319,TypeCheckResult p = parseAndTypeCheckWithScope(
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4323,"ar a = p.second.getVar(""a"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4322,"Var a = p.scope.getVar(""a"");"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4330,"air<Node, Scope> p = parseAndTypeCheckWithScope("
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4329,TypeCheckResult p = parseAndTypeCheckWithScope(
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4333,"ar a = p.second.getVar(""a"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4332,"Var a = p.scope.getVar(""a"");"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4340,"air<Node, Scope> p = parseAndTypeCheckWithScope("
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4339,TypeCheckResult p = parseAndTypeCheckWithScope(
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4344,"ar a = p.second.getVar(""a"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4343,"Var a = p.scope.getVar(""a"");"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4760,"air<Node, Scope> p ="
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4759,TypeCheckResult p =
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4763,"SType type = p.getSecond().getVar(""A"").getType();"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4762,"JSType type = p.scope.getVar(""A"").getType();"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4891,"air<Node, Scope> p = parseAndTypeCheckWithScope(js);"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4890,TypeCheckResult p = parseAndTypeCheckWithScope(js);
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4894,"SType googScopeType = p.second.getVar(""goog"").getType();"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4893,"JSType googScopeType = p.scope.getVar(""goog"").getType();"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4902,ode varNode = p.first.getFirstChild();
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4901,Node varNode = p.root.getFirstChild();
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4964,"air<Node, Scope> p = parseAndTypeCheckWithScope("
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4963,TypeCheckResult p = parseAndTypeCheckWithScope(
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4974,"air<Node, Scope> p = parseAndTypeCheckWithScope("
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4973,TypeCheckResult p = parseAndTypeCheckWithScope(
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4983,"air<Node, Scope> p) {"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4984,"bjectType goog = (ObjectType) p.second.getVar(""goog"").getType();"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4982,TypeCheckResult p) {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4983,"ObjectType goog = (ObjectType) p.scope.getVar(""goog"").getType();"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5793,"air<Node, Scope> ns ="
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5792,TypeCheckResult ns =
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5795,ode n = ns.getFirst();
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5796,cope s = ns.getSecond();
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5794,Node n = ns.root;
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5795,Scope s = ns.scope;
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6182,"air<Node, Scope> p = parseAndTypeCheckWithScope("""""
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6181,"TypeCheckResult p = parseAndTypeCheckWithScope("""""
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6194,"ssertTrue(p.second.getVar(""Foo"").getType() instanceof FunctionType);"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6195,"unctionType fooType = (FunctionType) p.second.getVar(""Foo"").getType();"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6193,"assertTrue(p.scope.getVar(""Foo"").getType() instanceof FunctionType);"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6194,"FunctionType fooType = (FunctionType) p.scope.getVar(""Foo"").getType();"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6677,"eturn parseAndTypeCheckWithScope(externs, js).getFirst();"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6676,"return parseAndTypeCheckWithScope(externs, js).root;"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6684,"rivate Pair<Node, Scope> parseAndTypeCheckWithScope(String js) {"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6683,private TypeCheckResult parseAndTypeCheckWithScope(String js) {
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6688,"rivate Pair<Node, Scope> parseAndTypeCheckWithScope(String externs,"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6687,"private TypeCheckResult parseAndTypeCheckWithScope(String externs,"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6700,"eturn new Pair<Node, Scope>(n, s);"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6699,"return new TypeCheckResult(n, s);"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6747,private static class TypeCheckResult {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6748,private final Node root;
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6749,private final Scope scope;
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6751,"private TypeCheckResult(Node root, Scope scope) {"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6752,this.root = root;
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6753,this.scope = scope;
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,19,mport com.google.common.base.Pair;
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,536,"ist<Pair<String, Node>> testCases = ImmutableList.of("
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,537,air.of(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,535,List<ParserResult> testCases = ImmutableList.of(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,536,new ParserResult(
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,540,air.of(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,539,new ParserResult(
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,543,air.of(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,542,new ParserResult(
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,548,"or (Pair<String, Node> testCase : testCases) {"
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,549,"ssertNodeEquality(testCase.second, parse(testCase.first));"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,547,for (ParserResult testCase : testCases) {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,548,"assertNodeEquality(testCase.node, parse(testCase.code));"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,727,private static class ParserResult {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,728,private final String code;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,729,private final Node node;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,731,"private ParserResult(String code, Node node) {"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,732,this.code = code;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,733,this.node = node;
False,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,41,mport com.google.common.base.Pair;
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,41,import com.google.javascript.rhino.Node.NodeMismatch;
False,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,75,"ssertEquals(Pair.of(node1, node2), node1.checkTreeEqualsImpl(node2));"
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,75,"assertEquals(new NodeMismatch(node1, node2),"
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,76,node1.checkTreeEqualsImpl(node2));
False,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,81,"ssertEquals(Pair.of(node1, node2), node1.checkTreeEqualsImpl(node2));"
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,82,"assertEquals(new NodeMismatch(node1, node2),"
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,83,node1.checkTreeEqualsImpl(node2));
False,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,89,"ssertEquals(Pair.of(child1, child2), node1.checkTreeEqualsImpl(node2));"
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,91,"assertEquals(new NodeMismatch(child1, child2),"
True,test/com/google/javascript/rhino/NodeTest.java,test/com/google/javascript/rhino/NodeTest.java,92,node1.checkTreeEqualsImpl(node2));
False,test/com/google/javascript/rhino/ParserTest.java,test/com/google/javascript/rhino/ParserTest.java,41,mport com.google.common.base.Pair;
False,test/com/google/javascript/rhino/ParserTest.java,test/com/google/javascript/rhino/ParserTest.java,280,"ist<Pair<String, Node>> testCases = ImmutableList.of("
False,test/com/google/javascript/rhino/ParserTest.java,test/com/google/javascript/rhino/ParserTest.java,281,air.of(
True,test/com/google/javascript/rhino/ParserTest.java,test/com/google/javascript/rhino/ParserTest.java,279,List<ParserResult> testCases = ImmutableList.of(
True,test/com/google/javascript/rhino/ParserTest.java,test/com/google/javascript/rhino/ParserTest.java,280,new ParserResult(
False,test/com/google/javascript/rhino/ParserTest.java,test/com/google/javascript/rhino/ParserTest.java,284,air.of(
True,test/com/google/javascript/rhino/ParserTest.java,test/com/google/javascript/rhino/ParserTest.java,283,new ParserResult(
False,test/com/google/javascript/rhino/ParserTest.java,test/com/google/javascript/rhino/ParserTest.java,287,air.of(
True,test/com/google/javascript/rhino/ParserTest.java,test/com/google/javascript/rhino/ParserTest.java,286,new ParserResult(
False,test/com/google/javascript/rhino/ParserTest.java,test/com/google/javascript/rhino/ParserTest.java,292,"or (Pair<String, Node> testCase : testCases) {"
False,test/com/google/javascript/rhino/ParserTest.java,test/com/google/javascript/rhino/ParserTest.java,293,"ssertNodeEquality(testCase.second, parse(testCase.first));"
True,test/com/google/javascript/rhino/ParserTest.java,test/com/google/javascript/rhino/ParserTest.java,291,for (ParserResult testCase : testCases) {
True,test/com/google/javascript/rhino/ParserTest.java,test/com/google/javascript/rhino/ParserTest.java,292,"assertNodeEquality(testCase.node, parse(testCase.code));"
True,test/com/google/javascript/rhino/ParserTest.java,test/com/google/javascript/rhino/ParserTest.java,346,private static class ParserResult {
True,test/com/google/javascript/rhino/ParserTest.java,test/com/google/javascript/rhino/ParserTest.java,347,private final String code;
True,test/com/google/javascript/rhino/ParserTest.java,test/com/google/javascript/rhino/ParserTest.java,348,private final Node node;
True,test/com/google/javascript/rhino/ParserTest.java,test/com/google/javascript/rhino/ParserTest.java,350,"private ParserResult(String code, Node node) {"
True,test/com/google/javascript/rhino/ParserTest.java,test/com/google/javascript/rhino/ParserTest.java,351,this.code = code;
True,test/com/google/javascript/rhino/ParserTest.java,test/com/google/javascript/rhino/ParserTest.java,352,this.node = node;
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,45,mport com.google.common.base.Pair;
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,48,import com.google.javascript.rhino.jstype.JSType.TypePair;
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5008,"air<JSType, JSType> p12 = t1.getTypesUnderEquality(t2);"
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5009,"air<JSType, JSType> p21 = t2.getTypesUnderEquality(t1);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5008,TypePair p12 = t1.getTypesUnderEquality(t2);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5009,TypePair p21 = t2.getTypesUnderEquality(t1);
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5012,"ssertEquals(t1Eq, p12.first);"
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5013,"ssertEquals(t1Eq, p21.second);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5012,"assertEquals(t1Eq, p12.typeA);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5013,"assertEquals(t1Eq, p21.typeB);"
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5016,"ssertEquals(t2Eq, p12.second);"
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5017,"ssertEquals(t2Eq, p21.first);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5016,"assertEquals(t2Eq, p12.typeB);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5017,"assertEquals(t2Eq, p21.typeA);"
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5072,"air<JSType, JSType> p12 = t1.getTypesUnderInequality(t2);"
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5073,"air<JSType, JSType> p21 = t2.getTypesUnderInequality(t1);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5072,TypePair p12 = t1.getTypesUnderInequality(t2);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5073,TypePair p21 = t2.getTypesUnderInequality(t1);
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5076,"ssertEquals(t1Eq, p12.first);"
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5077,"ssertEquals(t1Eq, p21.second);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5076,"assertEquals(t1Eq, p12.typeA);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5077,"assertEquals(t1Eq, p21.typeB);"
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5080,"ssertEquals(t2Eq, p12.second);"
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5081,"ssertEquals(t2Eq, p21.first);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5080,"assertEquals(t2Eq, p12.typeB);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5081,"assertEquals(t2Eq, p21.typeA);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,244,public static String getOrginalName(String name) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,245,int index = indexOfSeparator(name);
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,246,"return (index == -1) ? name : name.substring(0, index);"
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,249,private static int indexOfSeparator(String name) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,250,return name.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR);
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,253,"private static String getOrginalNameInternal(String name, int index) {"
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,254,"return name.substring(0, index);"
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,257,"private static String getNameSuffix(String name, int index) {"
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,258,return name.substring(
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,259,"index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,260,name.length());
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,258,tring newName = oldName.substring(
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,259,", oldName.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR));"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,260,tring suffix = oldName.substring(
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,261,ldName.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR)
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,262," ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,263,ldName.length());
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,277,int index = indexOfSeparator(oldName);
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,278,"String newName = getOrginalNameInternal(oldName, index);"
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,279,"String suffix = getNameSuffix(oldName, index);"
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,267,/    a$$inline_1 ($$ followed by anything that isn't a digit isn't
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,283,//    a$$inline_1 ($$ followed by anything that isn't a digit isn't
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,283,/ a reference to a global may have been introduced. Shortening
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,299,// a reference to a global may have been introduced. Shortening
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,415,/ To ensure that the id does not conflict with the id from the
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,431,// To ensure that the id does not conflict with the id from the
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,439,/ By using the same separator the id will be stripped if it isn't
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,455,// By using the same separator the id will be stripped if it isn't
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,102,oolean signatureAdded = false;
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,107,ignatureAdded = true;
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,108, else if (node.getType() == Token.NAME) {
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,109,"/ The one we're looking at is the name of a function, so look it up in"
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,110,/ the current scope
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,111,tring functionName = node.getString();
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,112,cope.Var v = t.getScope().getVar(functionName);
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,114,f (v == null) {
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,115,f (compiler.isIdeMode()) {
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,116,eturn;
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,117, else {
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,118,hrow new IllegalStateException(
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,119,"VarCheck should have caught this undefined function"");"
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,123,ode function = v.getInitialValue();
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,124,f (function != null &&
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,125,unction.getType() == Token.FUNCTION) {
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,126,"ddSignature(name, function, v.getInputName());"
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,127,ignatureAdded = true;
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,131,f (!signatureAdded) {
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,105,} else {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,203,if (local) {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,204,// Blindly de-uniquify for the Prototype library for issue 103.
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,205,String newName =
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,206,MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,207,name);
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,208,if (!newName.equals(name)) {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,209,n.setString(newName);
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,65,/** Whether the expected js strings should be normalized. */
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,66,private boolean normalizeExpected = false;
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,205,ormalizeEnabled  = true;
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,208,enableNormalize(true);
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,212,"* Perform AST normalization before running the test pass, and anti-normalize"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,213,* after running it.
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,215,* @param normalizeExpected Whether to perform normalization on the
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,216,* expected js result.
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,217,* @see Normalize
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,219,protected void enableNormalize(boolean normalizeExpected) {
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,220,normalizeEnabled = true;
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,221,this.normalizeExpected = normalizeExpected;
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,225,* Don't perform AST normalization before running the test pass.
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,226,* @see Normalize
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,228,protected void disableNormalize() {
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,229,normalizeEnabled = false;
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,820,f (normalizeEnabled && !compiler.hasErrors()) {
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,844,if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,235,public void testIssue2508576_1() {
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,236,// Method defined by an extern should be left alone.
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,237,"String externs = ""function alert(a) {}"";"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,238,"testSame(externs, ""({a:alert,b:alert}).a(\""a\"")"", null);"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,241,public void testIssue2508576_2() {
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,242,// Anonymous object definition with a side-effect should be left alone.
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,243,"testSame(""({a:function(){},b:x()}).a(\""a\"")"");"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,246,public void testIssue2508576_3() {
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,247,// Anonymous object definition without side-effect should be removed.
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,248,"test(""({a:function(){},b:alert}).a(\""a\"")"", """");"
False,test/com/google/javascript/jscomp/MethodCheckTest.java,test/com/google/javascript/jscomp/MethodCheckTest.java,100,"estErr(""var f = new Bar();f.oneOrTwoArg2(1, 2, 3);"","
False,test/com/google/javascript/jscomp/MethodCheckTest.java,test/com/google/javascript/jscomp/MethodCheckTest.java,101,unctionCheck.WRONG_ARGUMENT_COUNT_ERROR);
False,test/com/google/javascript/jscomp/MethodCheckTest.java,test/com/google/javascript/jscomp/MethodCheckTest.java,102,"estErr(""Boz.staticMethod1(1, 2);"","
False,test/com/google/javascript/jscomp/MethodCheckTest.java,test/com/google/javascript/jscomp/MethodCheckTest.java,103,unctionCheck.WRONG_ARGUMENT_COUNT_ERROR);
False,test/com/google/javascript/jscomp/MethodCheckTest.java,test/com/google/javascript/jscomp/MethodCheckTest.java,104,"estErr(""Boz.staticMethod2(1);"","
False,test/com/google/javascript/jscomp/MethodCheckTest.java,test/com/google/javascript/jscomp/MethodCheckTest.java,105,unctionCheck.WRONG_ARGUMENT_COUNT_ERROR);
True,test/com/google/javascript/jscomp/MethodCheckTest.java,test/com/google/javascript/jscomp/MethodCheckTest.java,100,// Can't detect these incorrect usuages as they are defined indirectly.
True,test/com/google/javascript/jscomp/MethodCheckTest.java,test/com/google/javascript/jscomp/MethodCheckTest.java,101,"testSame(""var f = new Bar();f.oneOrTwoArg2(1, 2, 3);"");"
True,test/com/google/javascript/jscomp/MethodCheckTest.java,test/com/google/javascript/jscomp/MethodCheckTest.java,102,"testSame(""Boz.staticMethod1(1, 2);"");"
True,test/com/google/javascript/jscomp/MethodCheckTest.java,test/com/google/javascript/jscomp/MethodCheckTest.java,103,"testSame(""Boz.staticMethod2(1);"");"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,77,// TODO(johnlenz): Enable Normalize during these tests.
False,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,443,ublic void testDollarSignSuperExport() {
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,445,public void testDollarSignSuperExport1() {
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,459,public void testDollarSignSuperExport2() {
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,460,boolean normalizedExpectedJs = false;
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,461,super.enableNormalize(false);
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,463,useGoogleCodingConvention = false;
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,464,// See http://code.google.com/p/closure-compiler/issues/detail?id=32
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,465,"test(""var x = function($super,duper,$fantastic){};"" +"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,466,"""var y = function($super,duper){};"","
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,467,"""var c = function($super,    a,         b){};"" +"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,468,"""var d = function($super,    a){};"");"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,470,localRenamingOnly = false;
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,471,"test(""var $super = 1"", ""var a = 1"");"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,473,useGoogleCodingConvention = true;
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,474,"test(""var x = function($super,duper,$fantastic){};"" +"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,475,"""var y = function($super,duper){};"","
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,476,"""var d = function(a,     b,    c         ){};"" +"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,477,"""var e = function(     a,    b){};"");"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,479,super.disableNormalize();
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,156,public void testMethodCalls() {
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,157,final String METHOD_DEFS =
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,158,"""/** @constructor */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,159,"""function Foo() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,160,// Methods defined in a separate functions and then added via assignment
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,161,"""function twoArg(arg1, arg2) {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,162,"""Foo.prototype.prototypeMethod = twoArg;"" +"
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,163,"""Foo.staticMethod = twoArg;"";"
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,165,// Prototype method with too many arguments.
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,166,testSame(METHOD_DEFS +
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,167,"""var f = new Foo();f.prototypeMethod(1, 2, 3);"","
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,168,TypeCheck.WRONG_ARGUMENT_COUNT);
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,169,// Prototype method with too few arguments.
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,170,testSame(METHOD_DEFS +
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,171,"""var f = new Foo();f.prototypeMethod(1);"","
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,172,TypeCheck.WRONG_ARGUMENT_COUNT);
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,174,// Static method with too many arguments.
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,175,testSame(METHOD_DEFS +
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,176,"""Foo.staticMethod(1, 2, 3);"","
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,177,TypeCheck.WRONG_ARGUMENT_COUNT);
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,178,// Static method with too few arguments.
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,179,testSame(METHOD_DEFS +
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,180,"""Foo.staticMethod(1);"","
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,181,TypeCheck.WRONG_ARGUMENT_COUNT);

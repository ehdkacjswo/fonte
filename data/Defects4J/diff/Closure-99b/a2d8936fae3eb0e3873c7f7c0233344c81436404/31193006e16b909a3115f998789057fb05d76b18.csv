is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,170,f (type instanceof InstanceObjectType) {
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,171,nvalidatingTypes.add(((ObjectType) type).getImplicitPrototype());
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,170,ObjectType objType = ObjectType.cast(type);
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,171,if (objType instanceof InstanceObjectType) {
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,172,invalidatingTypes.add(objType.getImplicitPrototype());
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,263,bjectType parentType = (ObjectType) type;
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,264,ObjectType parentType = type.toObjectType();
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,275,onstructor = ((ObjectType) type).getConstructor();
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,276,constructor = type.toObjectType().getConstructor();
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,503,eturn type == null || !(type instanceof ObjectType)
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,504,| invalidatingTypes.contains(type)
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,505,| !((ObjectType) type).hasReferenceName()
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,506,| (type.isNamedType() && type.isUnknownType())
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,507,| type.isEnumType() || type.autoboxesTo() != null;
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,504,ObjectType objType = ObjectType.cast(type);
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,505,return objType == null
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,506,|| invalidatingTypes.contains(objType)
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,507,|| !objType.hasReferenceName()
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,508,|| (objType.isNamedType() && objType.isUnknownType())
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,509,|| objType.isEnumType() || objType.autoboxesTo() != null;
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,280,SType maybeObjectType = dereference(n.getFirstChild().getJSType());
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,280,ObjectType objectType =
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,281,ObjectType.cast(dereference(n.getFirstChild().getJSType()));
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,283,f (maybeObjectType != null &&
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,284,aybeObjectType instanceof ObjectType) {
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,286,bjectType objectType = (ObjectType) maybeObjectType;
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,284,if (objectType != null) {
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,342,SType maybeObjectType = dereference(getprop.getFirstChild().getJSType());
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,339,ObjectType objectType =
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,340,ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,345,f (maybeObjectType != null &&
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,346,aybeObjectType instanceof ObjectType) {
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,343,if (objectType != null) {
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,355,bjectType objectType = (ObjectType) maybeObjectType;
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,538,f (type instanceof ObjectType) {
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,539,bjectType implicitProto = ((ObjectType) type).getImplicitPrototype();
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,534,ObjectType objType = ObjectType.cast(type);
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,535,if (objType != null) {
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,536,ObjectType implicitProto = objType.getImplicitPrototype();
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,19,mport com.google.common.base.Join;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,21,mport com.google.common.collect.Sets;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,30,mport com.google.javascript.jscomp.graph.GraphNode;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,32,mport com.google.javascript.jscomp.graph.UndiGraph;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,29,import com.google.javascript.jscomp.graph.GraphNode;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,32,import com.google.javascript.jscomp.graph.UndiGraph;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,65,"rivate final Deque<GraphColoring<Var, Void>> colorings;"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,66,rivate final boolean usePseudoNames;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,63,"private final Deque<GraphColoring<Var, ?>> colorings;"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,65,/** Logs all name assignments */
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,66,private StringBuilder coalescedLog;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,76," @param usePseudoNames For debug purposes, when merging variable foo and bar"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,77," to foo, rename both variable to foo_bar."
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,79,"oalesceVariableNames(AbstractCompiler compiler, boolean usePseudoNames) {"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,75,CoalesceVariableNames(AbstractCompiler compiler) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,82,his.usePseudoNames = usePseudoNames;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,78,coalescedLog = new StringBuilder();
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,85,"// Lastly, write the report to the debug log."
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,86,"compiler.addToDebugLog(""JS vars coalesced:\n"" + coalescedLog.toString());"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,87,coalescedLog = new StringBuilder();
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,110,"raphColoring<Var, Void> coloring ="
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,110,"GraphColoring<Var, ?> coloring ="
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,141,f (!usePseudoNames) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,142,f (vNode.getValue().equals(coalescedVar)) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,143,"/ The coalesced name is itself, nothing to do."
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,144,eturn;
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,140,if (vNode.getValue().equals(coalescedVar)) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,141,"// The coalesced name is itself, nothing to do."
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,142,return;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,147,/ Rename.
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,148,.setString(coalescedVar.name);
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,149,ompiler.reportCodeChange();
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,145,if (var.getNameNode() == n) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,146,"coalescedLog.append(n.getString()).append("" => "")"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,147,".append(coalescedVar.name).append("" in "")"
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,148,.append(t.getSourceName()).append(':')
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,149,.append(n.getLineno()).append('\n');
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,151,f (NodeUtil.isVar(parent)) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,152,emoveVarDeclaration(n);
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,154, else {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,155,"/ This code block is slow but since usePseudoName is for debugging,"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,156,/ we should not sacrifice performance for non-debugging compilation to
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,157,/ make this fast.
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,158,tring pseudoName = null;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,159,et<String> allMergedNames = Sets.newTreeSet();
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,160,or (Iterator<Var> i = t.getScope().getVars(); i.hasNext();) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,161,ar iVar = i.next();
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,162,f (coalescedVar.equals(colorings.peek().getPartitionSuperNode(iVar))) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,163,llMergedNames.add(iVar.name);
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,167,/ Keep its original name.
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,168,f (allMergedNames.size() == 1) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,169,eturn;
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,172,"seudoName = Join.join(""_"", allMergedNames);"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,174,"hile (t.getScope().isDeclared(pseudoName, true)) {"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,175,"seudoName += ""$"";"
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,178,.setString(pseudoName);
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,179,ompiler.reportCodeChange();
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,152,// Rename.
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,153,n.setString(coalescedVar.name);
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,154,compiler.reportCodeChange();
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,181,f (!vNode.getValue().equals(coalescedVar) && NodeUtil.isVar(parent)) {
False,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,182,emoveVarDeclaration(n);
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,156,if (NodeUtil.isVar(parent)) {
True,src/com/google/javascript/jscomp/CoalesceVariableNames.java,src/com/google/javascript/jscomp/CoalesceVariableNames.java,157,removeVarDeclaration(n);
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,415,/** Add code to skip properties that Caja adds to Object.prototype */
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,416,public boolean ignoreCajaProperties;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,634,ignoreCajaProperties = false;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,367,"// The Caja library adds properties to Object.prototype, which breaks"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,368,// most for-in loops.  This adds a check to each loop that skips
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,369,// any property matching /___$/.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,370,if (options.ignoreCajaProperties) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,371,passes.add(ignoreCajaProperties);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1031,/** Skips Caja-private properties in for-in loops */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1032,private final PassFactory ignoreCajaProperties =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1033,"new PassFactory(""ignoreCajaProperties"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1034,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1035,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1036,return new IgnoreCajaProperties(compiler);
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1384,"eturn new CoalesceVariableNames(compiler, options.generatePseudoNames);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1400,return new CoalesceVariableNames(compiler);
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,303,f (type instanceof ObjectType &&
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,304,(ObjectType) type).getImplicitPrototype() != null) {
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,305,ypeSystem.addInvalidatingType(
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,306,(ObjectType) type).getImplicitPrototype());
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,303,ObjectType objType = ObjectType.cast(type);
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,304,if (objType != null && objType.getImplicitPrototype() != null) {
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,305,typeSystem.addInvalidatingType(objType.getImplicitPrototype());
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,672,eturn (type == null) || invalidatingTypes.contains(type)
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,673,| (type instanceof ObjectType &&
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,674,((ObjectType) type).hasReferenceName())
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,675,| (type.isNamedType() && type.isUnknownType());
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,671,if (type == null || invalidatingTypes.contains(type) ||
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,672,(type.isNamedType() && type.isUnknownType())) {
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,673,return true;
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,676,ObjectType objType = ObjectType.cast(type);
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,677,return objType != null && !objType.hasReferenceName();
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,695,f (skipType instanceof ObjectType) {
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,696,kipType = ((ObjectType) skipType).getImplicitPrototype();
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,698,ObjectType objSkipType = skipType.toObjectType();
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,699,if (objSkipType != null) {
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,700,skipType = objSkipType.getImplicitPrototype();
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,715, else if (type instanceof ObjectType
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,716,& ((ObjectType) type).getConstructor() != null
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,717,& ((ObjectType) type).getConstructor().isInterface()) {
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,718,ist<JSType> list = Lists.newArrayList();
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,719,or (FunctionType impl
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,720, registry.getDirectImplementors((ObjectType) type)) {
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,721,ist.add(impl.getInstanceType());
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,723,eturn list;
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,725,eturn null;
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,720,ObjectType objType = type.toObjectType();
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,721,if (objType != null &&
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,722,objType.getConstructor() != null &&
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,723,objType.getConstructor().isInterface()) {
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,724,List<JSType> list = Lists.newArrayList();
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,725,for (FunctionType impl
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,726,: registry.getDirectImplementors(objType)) {
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,727,list.add(impl.getInstanceType());
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,729,return list;
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,730,} else {
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,731,return null;
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,742,bjectType objType = (ObjectType) type;
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,749,ObjectType objType = ObjectType.cast(type);
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,767,f (type instanceof ObjectType) {
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,774,ObjectType objType = ObjectType.cast(type);
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,775,if (objType != null) {
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,769,f (type instanceof FunctionType) {
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,770,onstructor = (FunctionType) type;
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,771, else if (type instanceof FunctionPrototypeType) {
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,772,onstructor = ((FunctionPrototypeType) type).getOwnerFunction();
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,777,if (objType instanceof FunctionType) {
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,778,constructor = (FunctionType) objType;
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,779,} else if (objType instanceof FunctionPrototypeType) {
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,780,constructor = ((FunctionPrototypeType) objType).getOwnerFunction();
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,774,onstructor = ((ObjectType) type).getConstructor();
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,782,constructor = objType.getConstructor();
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,218,SType maybeBaseType = info.getBaseType().evaluate(scope);
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,219,f (maybeBaseType instanceof ObjectType) {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,220,aseType = (ObjectType) maybeBaseType;
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,221, else {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,222,"eportWarning(EXTENDS_NON_OBJECT,"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,223,"nName, maybeBaseType.toString());"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,218,baseType = ObjectType.cast(info.getBaseType().evaluate(scope));
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,219,if (baseType == null) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,220,"reportWarning(EXTENDS_NON_OBJECT, fnName, baseType.toString());"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,234,SType interType = t.evaluate(scope);
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,235,f (interType instanceof ObjectType) {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,236,mplementedInterfaces.add((ObjectType) interType);
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,231,ObjectType interType = ObjectType.cast(t.evaluate(scope));
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,232,if (interType != null) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,233,implementedInterfaces.add(interType);
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,262,f (type instanceof ObjectType &&
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,263,info == null || !info.hasType())) {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,264,hisType = (ObjectType) type;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,259,ObjectType objType = ObjectType.cast(type);
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,260,if (objType != null && (info == null || !info.hasType())) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,261,thisType = objType;
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,278,SType maybeThisType = null;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,275,ObjectType maybeThisType = null;
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,280,aybeThisType = info.getThisType().evaluate(scope);
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,277,maybeThisType = ObjectType.cast(info.getThisType().evaluate(scope));
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,282,f (maybeThisType != null && maybeThisType instanceof ObjectType) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,279,if (maybeThisType != null) {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,289,hisType = (ObjectType) maybeThisType;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,286,thisType = maybeThisType;
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,299,SType ownerType = typeRegistry.getType(
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,300,"cope, ownerTypeName, sourceName,"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,301,"wner.getLineno(), owner.getCharno());"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,302,f (ownerType instanceof ObjectType) {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,303,hisType = (ObjectType) ownerType;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,296,ObjectType ownerType = ObjectType.cast(
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,297,typeRegistry.getType(
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,298,"scope, ownerTypeName, sourceName,"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,299,"owner.getLineno(), owner.getCharno()));"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,300,if (ownerType != null) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,301,thisType = ownerType;
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,2,* Copyright 2009 Google Inc.
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,19,import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,20,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,21,import com.google.javascript.rhino.Token;
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,24,"* Caja is a system that rewrites web content (JavaScript, CSS, HTML)"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,25,* into web content that is safe to inline directly into a page.
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,26,"* The rewritten (""cajoled"") code runs in the presence of a JS library"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,27,* that adds some properties to Object.prototype.  Because JS does not
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,28,"* yet (until ES5) allow programmers to mark properties as DontEnum,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,29,* for..in loops will see unexpected properties.
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,31,* This pass adds a conditional to for..in loops that filters out these
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,32,* properties.
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,37,class IgnoreCajaProperties implements CompilerPass {
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,39,final AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,41,// Counts the number of temporary variables introduced.
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,42,int counter;
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,44,public IgnoreCajaProperties(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,45,this.compiler = compiler;
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,46,this.counter = 0;
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,49,@Override
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,50,"public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,51,"NodeTraversal.traverse(compiler, root, new Traversal());"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,54,private class Traversal extends AbstractPostOrderCallback {
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,55,@Override
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,56,"public void visit(NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,57,// Look for a for..in loop.
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,58,if (n.getType() == Token.FOR && n.getChildCount() == 3) {
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,59,Node body = n.getLastChild();
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,60,n.removeChild(body);
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,61,Node key = n.getFirstChild();
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,62,n.removeChild(key);
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,63,"Node tmp = Node.newString(Token.NAME,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,64,"""JSCompiler_IgnoreCajaProperties_"" + counter++);"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,65,"n.addChildToFront(new Node(Token.VAR, tmp));"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,66,Node assignment;
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,67,Node ifBody;
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,69,// Construct the body of the if statement.
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,70,if (key.getType() == Token.VAR) {
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,71,// for (var key in x) { body; }
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,73,// for (var tmp in x) {
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,74,//   if (!tmp.match(/___$/)) {
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,75,//     var key;
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,76,//     key = tmp;
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,77,//     body;
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,80,ifBody = new Node(
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,81,"Token.BLOCK,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,82,"key,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,83,new Node(
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,84,"Token.EXPR_RESULT,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,85,new Node(
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,86,"Token.ASSIGN,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,87,"key.getFirstChild().cloneNode(),"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,88,"tmp.cloneTree())),"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,89,body);
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,90,} else {
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,91,// for (key in x) { body; }
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,93,// for (var tmp in x) {
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,94,//   if (!tmp.match(/___$/)) {
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,95,//     key = tmp;
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,96,//     body;
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,99,ifBody = new Node(
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,100,"Token.BLOCK,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,101,new Node(
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,102,"Token.EXPR_RESULT,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,103,new Node(
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,104,"Token.ASSIGN,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,105,"key,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,106,"tmp.cloneTree())),"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,107,body);
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,110,// Construct the new body of the for loop.
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,111,Node newBody = new Node(
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,112,"Token.BLOCK,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,113,new Node(
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,114,"Token.IF,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,115,new Node(
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,116,"Token.NOT,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,117,new Node(
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,118,"Token.CALL,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,119,new Node(
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,120,"Token.GETPROP,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,121,"tmp.cloneTree(),"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,122,"Node.newString(""match"")),"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,123,new Node(
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,124,"Token.REGEXP,"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,125,"Node.newString(""___$"")))),"
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,126,ifBody));
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,127,n.addChildToBack(newBody);
True,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,src/com/google/javascript/jscomp/IgnoreCajaProperties.java,128,compiler.reportCodeChange();
False,src/com/google/javascript/jscomp/InferJSDocInfo.java,src/com/google/javascript/jscomp/InferJSDocInfo.java,184,ype = type == null ? null : type.dereference();
False,src/com/google/javascript/jscomp/InferJSDocInfo.java,src/com/google/javascript/jscomp/InferJSDocInfo.java,185,eturn (type instanceof ObjectType) ? (ObjectType) type : null;
True,src/com/google/javascript/jscomp/InferJSDocInfo.java,src/com/google/javascript/jscomp/InferJSDocInfo.java,184,return ObjectType.cast(type == null ? null : type.dereference());
False,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,460,reconditions.checkState(instanceType instanceof ObjectType);
False,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,461,bjectType objType = (ObjectType) instanceType;
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,460,ObjectType objType = instanceType.toObjectType();
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,461,Preconditions.checkState(objType != null);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1150,* Is this node a hoisted function declaration? A function declaration in the
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1151,* scope root is hoisted to the top of the scope.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1152,* See {@link #isFunctionDeclaration}).
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1154,static boolean isHoistedFunctionDeclaration(Node n) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1155,return NodeUtil.isFunctionDeclaration(n)
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1156,&& (n.getParent().getType() == Token.SCRIPT
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1157,|| n.getParent().getParent().getType() == Token.FUNCTION);
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,413,eturn NodeUtil.isFunctionDeclaration(parent) &&
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,414,grandparent.getType() == Token.SCRIPT ||
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,415,randparent.getParent().getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,413,return NodeUtil.isHoistedFunctionDeclaration(parent);
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,496,rivate final boolean mayBeHoisted;
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,494,private final boolean isHoisted;
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,507,his.mayBeHoisted = (root.getType() == Token.FUNCTION) &&
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,508,NodeUtil.isFunctionAnonymous(root);
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,505,this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,526,f (currentBlock.mayBeHoisted) {
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,523,if (currentBlock.isHoisted) {
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,420,SType objectType = object.getJSType();
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,421,bjectType = this.getRestrictedWithoutNull(objectType);
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,422,bjectType = this.getRestrictedWithoutUndefined(objectType);
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,420,JSType jsType = object.getJSType();
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,421,jsType = this.getRestrictedWithoutNull(jsType);
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,422,jsType = this.getRestrictedWithoutUndefined(jsType);
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,424,f (objectType instanceof ObjectType) {
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,425,asProperty = ((ObjectType) objectType).hasProperty(propertyName);
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,425,ObjectType objectType = ObjectType.cast(jsType);
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,426,if (objectType != null) {
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,427,hasProperty = objectType.hasProperty(propertyName);
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,866,SType objType = getJSType(receiver.getFirstChild())
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,867,restrictByNotNullOrUndefined();
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,866,ObjectType objType = ObjectType.cast(
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,867,getJSType(receiver.getFirstChild())
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,868,.restrictByNotNullOrUndefined());
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,869,f (objType instanceof ObjectType &&
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,870,((ObjectType) objType).isPropertyInExterns(prop)) &&
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,870,if (objType != null &&
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,871,(objType.isPropertyInExterns(prop)) &&
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,918,f (alt instanceof ObjectType) {
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,919,bjectType altObj = (ObjectType) alt;
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,919,ObjectType altObj = ObjectType.cast(alt);
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,920,if (altObj != null) {
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,930, else if (jsType instanceof ObjectType && !jsType.isUnknownType()) {
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,931,bjectType objType = (ObjectType) jsType;
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,932,f (objType.hasProperty(prop)) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,931,} else {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,932,ObjectType objType = ObjectType.cast(jsType);
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,933,if (objType != null &&
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,934,!objType.isUnknownType() && objType.hasProperty(prop)) {
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1008,eturn createConcreteInstance((ObjectType) jsType);
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1010,return createConcreteInstance(jsType.toObjectType());
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1025,f (jsType instanceof ObjectType
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1026,& ((ObjectType) jsType).getConstructor() != null
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1027,& ((ObjectType) jsType).getConstructor().isInterface()) {
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1028,bjectType instType = (ObjectType) jsType;
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1027,ObjectType instType = ObjectType.cast(jsType);
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1028,if (instType != null &&
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1029,instType.getConstructor() != null &&
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1030,instType.getConstructor().isInterface()) {
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1157,oncreteType inst = createConcreteInstance((ObjectType) exprType);
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1158,ConcreteType inst = createConcreteInstance(exprType.toObjectType());
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,881,SType type = objectJsType.restrictByNotNullOrUndefined();
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,882,f (type instanceof ObjectType) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,883,bjectType objectType = (ObjectType) type;
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,884,f (objectType.hasProperty(property)) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,885,f (!objectType.isPropertyTypeInferred(property) &&
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,886,"propertyIsImplicitCast(objectType, property)) {"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,887,alidator.expectCanAssignToPropertyOf(
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,888,", assign, getJSType(rvalue),"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,889,"bjectType.getPropertyType(property), object, property);"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,881,ObjectType type = ObjectType.cast(
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,882,objectJsType.restrictByNotNullOrUndefined());
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,883,if (type != null) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,884,if (type.hasProperty(property) &&
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,885,!type.isPropertyTypeInferred(property) &&
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,886,"!propertyIsImplicitCast(type, property)) {"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,887,validator.expectCanAssignToPropertyOf(
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,888,"t, assign, getJSType(rvalue),"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,889,"type.getPropertyType(property), object, property);"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,961,(ObjectType) implementedInterface).getConstructor();
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,960,implementedInterface.toObjectType().getConstructor();
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1308,f (baseInterface instanceof ObjectType) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1307,ObjectType baseInterfaceObj = ObjectType.cast(baseInterface);
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1308,if (baseInterfaceObj != null) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1310,(ObjectType) baseInterface).getConstructor();
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1310,baseInterfaceObj.getConstructor();
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,509,SType ownerType =
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,510,etJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined();
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,511,f (ownerType instanceof ObjectType) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,512,bjectType objectType = (ObjectType) ownerType;
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,509,ObjectType objectType = ObjectType.cast(
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,510,getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined());
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,511,if (objectType != null) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,558,SType ownerType =
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,559,etJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined();
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,560,f (ownerType instanceof ObjectType) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,561,"nsurePropertyDeclaredHelper(getprop, (ObjectType) ownerType);"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,557,ObjectType ownerType = ObjectType.cast(
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,558,getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined());
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,559,if (ownerType != null) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,560,"ensurePropertyDeclaredHelper(getprop, ownerType);"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,883,SType objType =
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,884,etJSType(n.getFirstChild()).restrictByNotNullOrUndefined();
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,885,f (objType instanceof ObjectType) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,886,SType type = ((ObjectType) objType).getParameterType();
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,882,ObjectType objType = ObjectType.cast(
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,883,getJSType(n.getFirstChild()).restrictByNotNullOrUndefined());
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,884,if (objType != null) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,885,JSType type = objType.getParameterType();
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,947,SType regType = registry.getType(qualifiedName);
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,948,f (regType instanceof ObjectType) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,949,ropertyType = ((ObjectType) regType).getConstructor();
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,946,ObjectType regType = ObjectType.cast(registry.getType(qualifiedName));
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,947,if (regType != null) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,948,propertyType = regType.getConstructor();
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,259, else if (objType instanceof ObjectType &&
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,260,(ObjectType) objType).getIndexType() != null) {
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,261,"xpectCanAssignTo(t, n, indexType, ((ObjectType) objType).getIndexType(),"
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,259,} else if (objType.toObjectType() != null &&
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,260,objType.toObjectType().getIndexType() != null) {
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,261,"expectCanAssignTo(t, n, indexType, objType.toObjectType().getIndexType(),"
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,627,type instanceof ObjectType &&
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,628,(ObjectType) type).getConstructor() != null)) {
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,627,(type.toObjectType() != null &&
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,628,type.toObjectType().getConstructor() != null)) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,507,SType ownerType = var.getType();
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,508,f (ownerType instanceof ObjectType) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,507,ObjectType ownerType = ObjectType.cast(var.getType());
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,508,if (ownerType != null) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,510,SType propType =
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,511,(ObjectType) ownerType).getPropertyType(propName);
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,510,JSType propType = ownerType.getPropertyType(propName);
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,738,SType superClass =
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,739,ypeRegistry.getType(relationship.superclassName);
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,740,SType subClass = typeRegistry.getType(relationship.subclassName);
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,741,f (superClass instanceof ObjectType &&
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,742,ubClass instanceof ObjectType) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,743,bjectType superObject = (ObjectType) superClass;
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,744,bjectType subObject = (ObjectType) subClass;
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,746,unctionType superCtor = superObject.getConstructor();
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,747,unctionType subCtor = subObject.getConstructor();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,737,ObjectType superClass = ObjectType.cast(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,738,typeRegistry.getType(relationship.superclassName));
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,739,ObjectType subClass = ObjectType.cast(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,740,typeRegistry.getType(relationship.subclassName));
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,741,if (superClass != null && subClass != null) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,742,FunctionType superCtor = superClass.getConstructor();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,743,FunctionType subCtor = subClass.getConstructor();
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,750,"alidator.expectSuperType(t, n, superObject, subObject);"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,746,"validator.expectSuperType(t, n, superClass, subClass);"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,763,SType classType = typeRegistry.getType(singletonGetterClassName);
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,764,f (classType instanceof ObjectType) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,765,bjectType objectType = (ObjectType) classType;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,759,ObjectType objectType = ObjectType.cast(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,760,typeRegistry.getType(singletonGetterClassName));
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,761,if (objectType != null) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,782,SType delegatorClass =
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,783,ypeRegistry.getType(delegateRelationship.delegator);
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,784,SType delegateBaseClass =
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,785,ypeRegistry.getType(delegateRelationship.delegateBase);
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,786,SType delegateSuperClass = typeRegistry.getType(
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,787,odingConvention.getDelegateSuperclassName());
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,788,f (delegatorClass instanceof ObjectType &&
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,789,elegateBaseClass instanceof ObjectType &&
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,790,elegateSuperClass instanceof ObjectType) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,791,bjectType delegatorObject = (ObjectType) delegatorClass;
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,792,bjectType delegateBaseObject = (ObjectType) delegateBaseClass;
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,793,bjectType delegateSuperObject = (ObjectType) delegateSuperClass;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,778,ObjectType delegatorObject = ObjectType.cast(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,779,typeRegistry.getType(delegateRelationship.delegator));
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,780,ObjectType delegateBaseObject = ObjectType.cast(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,781,typeRegistry.getType(delegateRelationship.delegateBase));
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,782,ObjectType delegateSuperObject = ObjectType.cast(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,783,typeRegistry.getType(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,784,codingConvention.getDelegateSuperclassName()));
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,785,if (delegatorObject != null &&
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,786,delegateBaseObject != null &&
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,787,delegateSuperObject != null) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,809,"ypeRegistry.createNullableType(delegateBaseClass), null);"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,802,"typeRegistry.createNullableType(delegateBaseObject), null);"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,830,SType type = typeRegistry.getType(objectLiteralCast.typeName);
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,831,f (type instanceof ObjectType &&
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,832,(ObjectType) type).getConstructor() != null) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,823,ObjectType type = ObjectType.cast(
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,824,typeRegistry.getType(objectLiteralCast.typeName));
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,825,if (type != null && type.getConstructor() != null) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1082,wnerVarType = ownerVarType == null ?
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1083,ull : ownerVarType.restrictByNotNullOrUndefined();
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1085,f (ownerVarType instanceof ObjectType) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1086,eturn (ObjectType) ownerVarType;
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1075,return ObjectType.cast(ownerVarType == null ?
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1076,null : ownerVarType.restrictByNotNullOrUndefined());
True,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,52,static final DiagnosticType AMBIGUOUS_FUNCTION_DECL =
True,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,53,"DiagnosticType.warning(""AMBIGUIOUS_FUNCTION_DECL"","
True,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,54,"""Ambiguious use of a named function: {0}."");"
True,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,102,boolean isUnhoistedNamedFunction = false;
True,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,112,} else if (NodeUtil.isFunctionDeclaration(
True,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,113,reference.getNameNode().getParent())) {
True,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,114,isUnhoistedNamedFunction = true;
True,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,141,if (!isDeclaration && isDeclaredInScope && isUnhoistedNamedFunction) {
True,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,142,// Only allow an unhoisted named function to be used within the
True,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,143,// block it is declared.
True,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,144,for (BasicBlock declaredBlock : blocksWithDeclarations) {
True,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,145,if (!declaredBlock.provablyExecutesBefore(basicBlock)) {
True,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,146,compiler.report(
True,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,147,"JSError.make(reference.getSourceName(),"
True,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,148,"reference.getNameNode(),"
True,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,149,"checkLevel,"
True,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,150,"AMBIGUOUS_FUNCTION_DECL, v.name));"
True,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,151,break;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1923,"@SuppressWarnings(""unchecked"")"
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,72,his.primitiveObjectType = elementType instanceof ObjectType ?
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,73,ObjectType) elementType : null;
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,72,this.primitiveObjectType = elementType.toObjectType();
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,131, else if (this.isNominalType() && that instanceof JSType &&
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,132,(JSType) that).isNominalType()) {
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,133,eturn getReferenceName().equals(((ObjectType) that).getReferenceName());
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,130,} else if (that instanceof JSType && this.isNominalType()) {
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,131,ObjectType thatObj = ObjectType.cast((JSType) that);
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,132,if (thatObj != null && thatObj.isNominalType()) {
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,133,return getReferenceName().equals(thatObj.getReferenceName());
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,464,f (type instanceof ObjectType) {
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,465,bjectType objType = (ObjectType) type;
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,464,ObjectType objType = type.toObjectType();
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,465,if (objType != null) {
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,173, else if (this.isNominalType() && that instanceof JSType &&
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,174,(JSType) that).isNominalType()) {
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,175,eturn getReferenceName().equals(((ObjectType) that).getReferenceName());
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,173,} else if (that instanceof JSType && this.isNominalType()) {
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,174,ObjectType thatObj = ObjectType.cast((JSType) that);
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,175,if (thatObj != null && thatObj.isNominalType()) {
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,176,return getReferenceName().equals(thatObj.getReferenceName());
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,379,SType autoboxObjType = autoboxesTo();
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,380,f (autoboxObjType != null &&
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,381,utoboxObjType instanceof ObjectType) {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,382,eturn ((ObjectType) autoboxObjType).findPropertyType(propertyName);
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,379,ObjectType autoboxObjType = ObjectType.cast(autoboxesTo());
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,380,if (autoboxObjType != null) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,381,return autoboxObjType.findPropertyType(propertyName);
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,430,"* Casts this to an ObjectType, or returns null if this is not an ObjectType."
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,432,* Does not change the underlying JS type. If you want to simulate JS
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,433,"* autoboxing or dereferencing, you should use autoboxesTo() or dereference()."
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,434,* Those methods may change the underlying JS type.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,436,public ObjectType toObjectType() {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,437,return this instanceof ObjectType ? (ObjectType) this : null;
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,439,SType result =  autobox == null ? restricted : autobox;
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,440,eturn result instanceof ObjectType ?
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,441,ObjectType) result : null;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,449,return ObjectType.cast(autobox == null ? restricted : autobox);
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,733,f (windowType instanceof ObjectType) {
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,734,lobalThis.setImplicitPrototype((ObjectType) windowType);
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,733,ObjectType windowObjType = ObjectType.cast(windowType);
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,734,if (windowObjType != null) {
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,735,globalThis.setImplicitPrototype(windowObjType);
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1242,SType maybeThisType =
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1243,"reateFromTypeNodes(thisNode, sourceName, scope)"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1244,restrictByNotNullOrUndefined();
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1245,f (maybeThisType instanceof ObjectType) {
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1246,hisType = (ObjectType) maybeThisType;
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1247, else {
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1243,thisType =
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1244,ObjectType.cast(
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1245,"createFromTypeNodes(thisNode, sourceName, scope)"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1246,.restrictByNotNullOrUndefined());
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1247,if (thisType == null) {
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,172, else if (that instanceof ObjectType) {
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,173,bjectType objType = (ObjectType) that;
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,174,eturn objType.isNominalType() &&
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,175,eference.equals(objType.getReferenceName());
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,172,} else if (that instanceof JSType) {
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,173,ObjectType objType = ObjectType.cast((JSType) that);
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,174,if (objType != null) {
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,175,return objType.isNominalType() &&
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,176,reference.equals(objType.getReferenceName());
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,213,SType type = registry.getType(reference);
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,214,f (type != null && type instanceof ObjectType) {
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,215,"etReferencedType((ObjectType) type, t, enclosing);"
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,215,ObjectType type = ObjectType.cast(registry.getType(reference));
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,216,if (type != null) {
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,217,"setReferencedType(type, t, enclosing);"
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,252,f (!(value instanceof ObjectType)) {
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,254,ObjectType parentClass = ObjectType.cast(value);
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,255,if (parentClass == null) {
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,256,bjectType parentClass = (ObjectType)value;
True,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,435,* A null-safe version of JSType#toObjectType.
True,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,437,public static ObjectType cast(JSType type) {
True,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,438,return type == null ? null : type.toObjectType();
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,282,(ObjectType) getNativeType(JSTypeNative.FUNCTION_PROTOTYPE)) :
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,283,(ObjectType) getNativeType(JSTypeNative.OBJECT_PROTOTYPE));
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,282,registry.getNativeObjectType(JSTypeNative.FUNCTION_PROTOTYPE) :
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,283,registry.getNativeObjectType(JSTypeNative.OBJECT_PROTOTYPE);
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,369,f (that instanceof ObjectType) {
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,369,ObjectType thatObj = ObjectType.cast(that);
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,370,if (that != null) {
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,376,eturn this.isImplicitPrototype((ObjectType) that);
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,377,return this.isImplicitPrototype(thatObj);
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,30,rivate boolean usePseudoName = false;
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,32,Override
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,33,rotected int getNumRepetitions() {
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,34,eturn 1;
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,37,Override
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,38,ublic void setUp() {
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,39,sePseudoName = false;
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,47,"ew CoalesceVariableNames(compiler, usePseudoName));"
True,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,35,new CoalesceVariableNames(compiler));
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,344,ublic void testUsePseduoNames() {
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,345,sePseudoName = true;
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,346,"nFunction(""var x   = 0; print(x  ); var   y = 1; print(  y)"","
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,347,"var x_y = 0; print(x_y);     x_y = 1; print(x_y)"");"
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,349,"nFunction(""var x_y = 1; var x   = 0; print(x  ); var     y = 1;"" +"
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,350,"print(  y); print(x_y);"","
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,352,"var x_y = 1; var x_y$ = 0; print(x_y$);     x_y$ = 1;"" + """" +"
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,353,"print(x_y$); print(x_y);"");"
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,355,"nFunction(""var x_y = 1; function f() {"" +"
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,356,"var x    = 0; print(x  ); var y = 1; print( y);"" +"
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,357,"print(x_y);}"","
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,359,"var x_y = 1; function f() {"" +"
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,360,"var x_y$ = 0; print(x_y$); x_y$ = 1; print(x_y$);"" +"
False,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,361,"print(x_y);}"");"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,2,* Copyright 2009 Google Inc.
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,21,* {@link IgnoreCajaProperties} tests.
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,25,public class IgnoreCajaPropertiesTest extends CompilerTestCase {
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,27,private static final String EXTERNS =
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,28,"""var z = {}, "" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,29,"""f = function(y) { z[y] = z[y] ? (z[y]+1) : 1; }, "" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,30,"""x, i;"";"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,32,public IgnoreCajaPropertiesTest() {
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,33,super(EXTERNS);
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,36,@Override
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,37,public int getNumRepetitions() {
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,38,return 1;
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,41,public void testSimpleKey() {
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,42,// Test a one-statement body.
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,43,"test(""for (i in x) f(i);"","
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,44,"""for (var JSCompiler_IgnoreCajaProperties_0 in x)"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,45,"""  if (!JSCompiler_IgnoreCajaProperties_0.match(/___$/)) {"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,46,"""    i = JSCompiler_IgnoreCajaProperties_0;"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,47,"""    { f(i); }"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,49,// Test a two-statement body.
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,50,"test(""for (i in x) { f(i); f(i); }"","
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,51,"""for (var JSCompiler_IgnoreCajaProperties_0 in x)"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,52,"""  if (!JSCompiler_IgnoreCajaProperties_0.match(/___$/)) {"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,53,"""    i = JSCompiler_IgnoreCajaProperties_0;"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,54,"""    { f(i); f(i); }"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,56,// Check that the counter's incrementing properly and
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,57,//   that nested loops work.
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,58,"test(""for (i in x) for (j in y) f(i,j);"","
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,59,"""for (var JSCompiler_IgnoreCajaProperties_1 in x)"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,60,"""  if (!JSCompiler_IgnoreCajaProperties_1.match(/___$/)) {"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,61,"""    i = JSCompiler_IgnoreCajaProperties_1;"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,63,"""      for (var JSCompiler_IgnoreCajaProperties_0 in y)"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,64,"""        if (!JSCompiler_IgnoreCajaProperties_0.match(/___$/)) {"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,65,"""          j = JSCompiler_IgnoreCajaProperties_0;"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,66,"""          { f(i,j); }"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,72,public void testPropertyKey() {
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,73,"test(""for (z.i in x) { f(z.i); f(z.i); }"","
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,74,"""for (var JSCompiler_IgnoreCajaProperties_0 in x) {"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,75,"""  if (!JSCompiler_IgnoreCajaProperties_0.match(/___$/)) {"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,76,"""    z.i = JSCompiler_IgnoreCajaProperties_0;"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,77,"""    { f(z.i); f(z.i); }"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,82,public void testFunctionPropertyKey() {
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,83,// Note that both in the original code and the
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,84,"// rewritten code, z.j() is invoked on every"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,85,// iteration of the loop.
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,86,"test(""for (z.j().i in x) { f(z.j().i); f(z.j().i); }"","
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,87,"""for (var JSCompiler_IgnoreCajaProperties_0 in x) {"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,88,"""  if (!JSCompiler_IgnoreCajaProperties_0.match(/___$/)) {"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,89,"""    z.j().i = JSCompiler_IgnoreCajaProperties_0;"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,90,"""    { f(z.j().i); f(z.j().i); }"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,95,public void testVarKey() {
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,96,// Test a one-statement body.
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,97,"test(""for (var j in x) { f(j); }"","
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,98,"""for (var JSCompiler_IgnoreCajaProperties_0 in x) {"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,99,"""  if (!JSCompiler_IgnoreCajaProperties_0.match(/___$/)) {"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,100,"""    var j;"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,101,"""    j = JSCompiler_IgnoreCajaProperties_0;"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,102,"""    { f(j); }"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,105,// Test a two-statement body.
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,106,"test(""for (var j in x) { f(j); f(j); }"","
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,107,"""for (var JSCompiler_IgnoreCajaProperties_0 in x) {"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,108,"""  if (!JSCompiler_IgnoreCajaProperties_0.match(/___$/)) {"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,109,"""    var j;"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,110,"""    j = JSCompiler_IgnoreCajaProperties_0;"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,111,"""    { f(j); f(j); }"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,114,// Test two loops.
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,115,"test(""for (var i in x) for (var j in y) f(i,j);"","
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,116,"""for (var JSCompiler_IgnoreCajaProperties_1 in x)"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,117,"""  if (!JSCompiler_IgnoreCajaProperties_1.match(/___$/)) {"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,118,"""    var i;"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,119,"""    i = JSCompiler_IgnoreCajaProperties_1;"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,121,"""      for (var JSCompiler_IgnoreCajaProperties_0 in y)"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,122,"""        if (!JSCompiler_IgnoreCajaProperties_0.match(/___$/)) {"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,123,"""          var j;"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,124,"""          j = JSCompiler_IgnoreCajaProperties_0;"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,125,"""          { f(i,j); }"" +"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,131,public void testFourChildFor() {
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,132,"test(""for (i = 0; i < 10; ++i) { f(i); }"","
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,133,"""for (i = 0; i < 10; ++i) { f(i); }"");"
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,136,/** {@inheritDoc} */
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,137,@Override
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,138,public CompilerPass getProcessor(Compiler compiler) {
True,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java,139,return new IgnoreCajaProperties(compiler);
False,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,38,"ompiler,"
False,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,39,inlineLocalsOnly)
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,38,"compiler,"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,39,(inlineLocalsOnly)
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,413,public void testInlineIntoNestedNonHoistedNamedFunctions() {
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,414,"test(""f(); var x = false; if (false) function f() { alert(x); };"","
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,415,"""f(); if (false) function f() { alert(false); };"");"
False,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,414,"estSame(""f(); var x = false; if (false) function f() { alert(x); };"");"
False,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,502,"est(""var f = function () {}; var a = f;"","
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,506,"test(""var f = function () {}; var a = f;"","
False,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,504,"est(""var f = function () {}; foo(); var a = f;"","
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,508,"test(""var f = function () {}; foo(); var a = f;"","
False,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,506,"est(""var f = function () {}; foo(f);"","
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,510,"test(""var f = function () {}; foo(f);"","
False,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,509,"estSame(""var f = function () {}; function g() {var a = f;}"");"
False,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,510,"estSame(""var f = function () {}; function g() {h(f);}"");"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,513,"testSame(""var f = function () {}; function g() {var a = f;}"");"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,514,"testSame(""var f = function () {}; function g() {h(f);}"");"
False,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,52,"ssertNoWarning(""function f() { if (1) { var a = 2; } else { var a = 3; } }"");"
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,52,assertNoWarning(
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,53,"""function f() { if (1) { var a = 2; } else { var a = 3; } }"");"
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,107,public void testNonHoistedFunction2() {
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,108,"assertNoWarning(""if (false) { function f() {} f(); }"");"
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,111,public void testNonHoistedFunction3() {
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,112,"assertNoWarning(""function g() { if (false) { function f() {} f(); }}"");"
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,115,public void testNonHoistedFunction4() {
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,116,"assertAmbiguous(""if (false) { function f() {} }  f();"");"
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,119,public void testNonHoistedFunction5() {
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,120,"assertAmbiguous(""function g() { if (false) { function f() {} }  f(); }"");"
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,123,public void testNonHoistedFunction6() {
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,124,"assertUndeclared(""if (false) { f(); function f() {} }"");"
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,127,public void testNonHoistedFunction7() {
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,128,"assertUndeclared(""function g() { if (false) { f(); function f() {} }}"");"
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,132,public void testNonHoistedRecursiveFunction1() {
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,133,"assertNoWarning(""if (false) { function f() { f(); }}"");"
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,136,public void testNonHoistedRecursiveFunction2() {
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,137,"assertNoWarning(""function g() { if (false) { function f() { f(); }}}"");"
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,140,public void testNonHoistedRecursiveFunction3() {
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,141,"assertNoWarning(""function g() { if (false) { function f() { f(); g(); }}}"");"
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,159,* Expects the JS to generate one bad-write warning.
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,161,private void assertAmbiguous(String js) {
True,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,test/com/google/javascript/jscomp/VariableReferenceCheckTest.java,162,"testSame(js, VariableReferenceCheck.AMBIGUOUS_FUNCTION_DECL);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,193,"output to the specified path. If %module% is added, "" +"
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,194,"a source map will be generated for each module, with the "" +"
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,195," module's name placed into the path at that spot"")"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,193,"""output to the specified path. The %outname% placeholder will "" +"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,194,"""expand to the name of the output file that the source map "" +"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,195,"""corresponds to."")"
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,713,"apOut = openSourceMapStream(options, moduleFilePrefix, null);"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,713,"mapOut = openSourceMapStream(options, moduleFilePrefix);"
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,718,apOut =
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,719,"penSourceMapStream(options, moduleFilePrefix, m.getName());"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,718,mapOut = openSourceMapStream(
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,719,"options, moduleFilePrefix + m.getName() + "".js"");"
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,793, source map pattern include the %module% variable.
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,793,* source map pattern include the %outname% variable.
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,797,"& options.sourceMapOutputPath.contains(""%module%"");"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,797,"&& options.sourceMapOutputPath.contains(""%outname%"");"
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,832," @param module If modules are being generated, the name of the current"
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,833,        module.
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,835,"rivate PrintStream openSourceMapStream(B options, String path,"
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,836,tring module) throws IOException {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,833,"private PrintStream openSourceMapStream(B options, String path)"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,834,throws IOException {
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,843,"/ Replace the %module% ""variable"" with the name of the module."
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,844,f (module != null) {
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,845,"ourceMapPath = sourceMapPath.replace(""%module%"", module);"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,840,"sourceMapPath = sourceMapPath.replace(""%outname%"", path);"
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,875,"rintStream out = openSourceMapStream(options, path, null);"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,869,"PrintStream out = openSourceMapStream(options, path + "".js"");"
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,318,// Don't inline this special function
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,319,if (RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(fnName)) {
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,320,return false;
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,236,ode value = init.getAssignedValue();
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,236,Node value;
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,237,if (init != null) {
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,238,value = init.getAssignedValue();
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,239,} else {
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,240,// Create a new node for variable that is never initialized.
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,241,value = NodeUtil.newUndefinedNode();
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,309,eturn compiler.getCodingConvention().isExported(var.name) ||
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,310,taleVars.contains(var);
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,315,// 3) Don't inline the special RENAME_PROPERTY_FUNCTION_NAME
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,316,return compiler.getCodingConvention().isExported(var.name)
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,317,|| RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,318,|| staleVars.contains(var);
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,611,eference refInit = refInfo.getInitializingReference();
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,612,f (!isValidInitialization(refInit)) {
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,613,eturn false;
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,619,boolean isNeverAssigned = refInfo.isNeverAssigned();
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,620,"// For values that are never assigned, only the references need to be"
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,621,// checked.
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,622,if (!isNeverAssigned) {
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,623,Reference refInit = refInfo.getInitializingReference();
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,624,if (!isValidInitialization(refInit)) {
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,625,return false;
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,628,if (refDecl != refInit) {
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,629,Preconditions.checkState(refInit == refSet.get(1));
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,630,startingReadRef = 2;
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,633,if (!refInfo.isWellDefined()) {
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,634,return false;
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,637,Node value = refInit.getAssignedValue();
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,638,Preconditions.checkNotNull(value);
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,639,if (!(NodeUtil.isImmutableValue(value) &&
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,640,(value.getType() != Token.STRING ||
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,641,"isStringWorthInlining(v, refInfo.references)))) {"
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,642,return false;
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,616,f (refDecl != refInit) {
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,617,reconditions.checkState(refInit == refSet.get(1));
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,618,tartingReadRef = 2;
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,628,f (!refInfo.isWellDefined()) {
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,629,eturn false;
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,632,ode value = refInit.getAssignedValue();
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,633,reconditions.checkNotNull(value);
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,634,eturn NodeUtil.isImmutableValue(value) &&
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,635,value.getType() != Token.STRING ||
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,636,"sStringWorthInlining(v, refInfo.references));"
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,654,return true;
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,269, @param index The index into the references array to look for an
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,269,* @param index The index into the references array to look for an
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,278,/ This is a declaration that represents the initial value.
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,278,// This is a declaration that represents the initial value.
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,287, @param index The index into the references array to look for an
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,287,* @param index The index into the references array to look for an
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,355,* @return Whether the variable is never assigned a value.
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,357,boolean isNeverAssigned() {
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,358,int size = references.size();
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,359,for (int i = 0; i < size; i++) {
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,360,Reference ref = references.get(i);
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,361,if (ref.isLvalue() || ref.isInitializingDeclaration()) {
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,362,return false;
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,365,return true;
True,src/com/google/javascript/rhino/jstype/AllType.java,src/com/google/javascript/rhino/jstype/AllType.java,44,import com.google.javascript.rhino.ErrorReporter;
True,src/com/google/javascript/rhino/jstype/AllType.java,src/com/google/javascript/rhino/jstype/AllType.java,123,@Override
True,src/com/google/javascript/rhino/jstype/AllType.java,src/com/google/javascript/rhino/jstype/AllType.java,124,"JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {"
True,src/com/google/javascript/rhino/jstype/AllType.java,src/com/google/javascript/rhino/jstype/AllType.java,125,return this;
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,42,import com.google.javascript.rhino.ErrorReporter;
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,58,inal JSType returnType;
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,57,JSType returnType;
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,233,@Override
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,234,"JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {"
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,235,"returnType = safeResolve(returnType, t, scope);"
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,236,if (parameters != null) {
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,237,for (Node paramNode = parameters.getFirstChild();
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,238,paramNode != null; paramNode = paramNode.getNext()) {
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,239,"paramNode.setJSType(paramNode.getJSType().resolve(t, scope));"
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,242,return this;
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,44,import com.google.javascript.rhino.ErrorReporter;
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,61,rivate final JSType primitiveType;
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,63,private JSType primitiveType;
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,64,rivate final ObjectType primitiveObjectType;
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,66,private ObjectType primitiveObjectType;
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,257,@Override
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,258,"JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {"
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,259,"primitiveType = primitiveType.resolve(t, scope);"
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,260,primitiveObjectType =
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,261,"(ObjectType) safeResolve(primitiveObjectType, t, scope);"
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,262,return this;
True,src/com/google/javascript/rhino/jstype/EnumType.java,src/com/google/javascript/rhino/jstype/EnumType.java,45,import com.google.javascript.rhino.ErrorReporter;
False,src/com/google/javascript/rhino/jstype/EnumType.java,src/com/google/javascript/rhino/jstype/EnumType.java,60,rivate final EnumElementType elementsType;
True,src/com/google/javascript/rhino/jstype/EnumType.java,src/com/google/javascript/rhino/jstype/EnumType.java,61,private EnumElementType elementsType;
True,src/com/google/javascript/rhino/jstype/EnumType.java,src/com/google/javascript/rhino/jstype/EnumType.java,153,@Override
True,src/com/google/javascript/rhino/jstype/EnumType.java,src/com/google/javascript/rhino/jstype/EnumType.java,154,"JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {"
True,src/com/google/javascript/rhino/jstype/EnumType.java,src/com/google/javascript/rhino/jstype/EnumType.java,155,"elementsType = (EnumElementType) elementsType.resolve(t, scope);"
True,src/com/google/javascript/rhino/jstype/EnumType.java,src/com/google/javascript/rhino/jstype/EnumType.java,156,"return super.resolveInternal(t, scope);"
True,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,42,import com.google.javascript.rhino.ErrorReporter;
True,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,97,"// The owner will always be a resolved type, so there's no need to set"
True,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,98,// the ownerFunction in resolveInternal.
True,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,99,// (it would lead to infinite loops if we did).
True,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java,100,"// JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope);"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,50,import com.google.javascript.rhino.ErrorReporter;
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,79,rivate final ArrowType call;
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,80,private ArrowType call;
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,821,@Override
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,822,"JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,823,"call = (ArrowType) safeResolve(call, t, scope);"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,824,"prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,825,"typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,827,boolean changed = false;
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,828,ImmutableList.Builder<ObjectType> resolvedInterfaces =
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,829,ImmutableList.builder();
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,830,for (ObjectType iface : implementedInterfaces) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,831,"ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,832,resolvedInterfaces.add(resolvedIface);
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,833,changed |= (resolvedIface != iface);
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,835,if (changed) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,836,implementedInterfaces = resolvedInterfaces.build();
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,839,if (subTypes != null) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,840,for (int i = 0; i < subTypes.size(); i++) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,841,"subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,845,"return super.resolveInternal(t, scope);"
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,44,import com.google.javascript.rhino.ErrorReporter;
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,181,"// The owner will always be a resolved type, so there's no need to set"
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,182,// the constructor in resolveInternal.
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,183,// (it would lead to infinite loops if we did).
True,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,184,"// JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,44,import com.google.common.base.Preconditions;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,47,import com.google.javascript.rhino.ErrorReporter;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,74,private boolean resolved = false;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,75,private JSType resolveResult = null;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,839,* Resolve this type in the given scope.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,841,"* The returned value must be equal to {@code this}, as defined by"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,842,* {@link Object#equals}. It may or may not be the same object. This method
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,843,"* may modify the internal state of {@code this}, as long as it does"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,844,* so in a way that preserves Object equality.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,846,"* For efficiency, we should only resolve a type once per compilation job."
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,847,"* For incremental compilations, one compilation job may need the"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,848,"* artifacts from a previous generation, so we will eventually need"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,849,* a generational flag instead of a boolean one.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,851,"public final JSType resolve(ErrorReporter t, StaticScope<JSType> scope) {"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,852,if (resolved) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,853,// TODO(nicksantos): Check to see if resolve() looped back on itself.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,854,// Preconditions.checkNotNull(resolveResult);
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,855,if (resolveResult == null) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,856,return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,858,return resolveResult;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,860,resolved = true;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,861,"resolveResult = resolveInternal(t, scope);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,862,return resolveResult;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,866,* @see #resolve
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,868,"abstract JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,870,void setResolvedTypeInternal(JSType type) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,871,resolveResult = type;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,872,resolved = true;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,875,/** Whether the type has been resolved. */
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,876,public final boolean isResolved() {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,877,return resolved;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,880,/** Clears the resolved field. */
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,881,public final void clearResolved() {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,882,resolved = false;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,883,resolveResult = null;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,887,* A null-safe resolve.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,888,* @see #resolve
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,890,static final JSType safeResolve(
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,891,"JSType type, ErrorReporter t, StaticScope<JSType> scope) {"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,892,"return type == null ? null : type.resolve(t, scope);"
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,86,rivate boolean isResolved = false;
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,119,** Whether the type name has been resolved to an enum or object. */
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,120,ublic boolean isResolved() {
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,121,eturn isResolved;
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,124,** Clears the resolved field. */
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,125,ublic void clearResolved() {
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,126,sResolved = false;
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,190,"ublic void resolve(ErrorReporter t, StaticScope<JSType> enclosing) {"
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,179,@Override
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,180,"JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {"
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,195,f (isResolved()) return;
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,197,"esolveViaRegistry(t, enclosing);"
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,185,"boolean resolved = resolveViaRegistry(t, enclosing);"
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,202,f (isResolved()) return;
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,190,if (resolved) {
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,191,"super.resolveInternal(t, enclosing);"
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,192,return referencedType;
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,200,"super.resolveInternal(t, enclosing);"
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,201,return referencedType;
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,206,* @return True if we resolved successfully.
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,213,rivate void resolveViaRegistry(
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,208,private boolean resolveViaRegistry(
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,213,return true;
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,215,return false;
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,285,sResolved = true;
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,282,setResolvedTypeInternal(referencedType);
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,292,sResolved = true;
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,289,setResolvedTypeInternal(referencedType);
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,314,sResolved = true;
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,311,setResolvedTypeInternal(referencedType);
True,src/com/google/javascript/rhino/jstype/NoObjectType.java,src/com/google/javascript/rhino/jstype/NoObjectType.java,42,import com.google.javascript.rhino.ErrorReporter;
True,src/com/google/javascript/rhino/jstype/NoObjectType.java,src/com/google/javascript/rhino/jstype/NoObjectType.java,350,@Override
True,src/com/google/javascript/rhino/jstype/NoObjectType.java,src/com/google/javascript/rhino/jstype/NoObjectType.java,351,"JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {"
True,src/com/google/javascript/rhino/jstype/NoObjectType.java,src/com/google/javascript/rhino/jstype/NoObjectType.java,352,return this;
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,45,import com.google.javascript.rhino.ErrorReporter;
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,422,rivate final JSType type;
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,423,private JSType type;
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,456,@Override
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,457,"JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {"
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,458,"// Don't try to resolve native types, because it's unnecessary and"
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,459,// there are infinite loops between native types.
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,460,if (implicitPrototype != null && !implicitPrototype.isNativeObjectType()) {
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,461,"implicitPrototype = (ObjectType) implicitPrototype.resolve(t, scope);"
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,463,for (Property prop : properties.values()) {
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,464,"prop.type = safeResolve(prop.type, t, scope);"
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,466,return this;
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,42,import com.google.javascript.rhino.ErrorReporter;
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,119,@Override
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,120,public boolean isEnumElementType() {
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,121,return referencedType.isEnumElementType();
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,290,@Override
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,291,"JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {"
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,292,"referencedType = (ObjectType) referencedType.resolve(t, scope);"
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,293,return this;
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,42,import com.google.javascript.rhino.ErrorReporter;
False,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,62,"rivate final Map<String, JSType> properties = new HashMap<String, JSType>();"
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,64,"private Map<String, JSType> properties = new HashMap<String, JSType>();"
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,284,@Override
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,285,"JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {"
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,286,"for (Map.Entry<String, JSType> entry : properties.entrySet()) {"
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,287,JSType type = entry.getValue();
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,288,"JSType resolvedType = type.resolve(t, scope);"
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,289,if (type != resolvedType) {
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,290,"properties.put(entry.getKey(), resolvedType);"
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,293,"return super.resolveInternal(t, scope);"
True,src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java,src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java,42,import com.google.common.collect.ImmutableMap;
True,src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java,src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java,53,private boolean isEmpty = true;
False,src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java,src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java,53,"rivate final Map<String, JSType> properties = Maps.newHashMap();"
True,src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java,src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java,55,"private final ImmutableMap.Builder<String, JSType> properties ="
True,src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java,src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java,56,ImmutableMap.builder();
True,src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java,src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java,68,isEmpty = false;
False,src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java,src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java,75,f (properties.size() == 0) {
True,src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java,src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java,79,if (isEmpty) {
False,src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java,src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java,79,eturn registry.createRecordType(properties);
True,src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java,src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java,83,return registry.createRecordType(properties.build());
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,44,import com.google.common.collect.ImmutableSet;
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,45,import com.google.javascript.rhino.ErrorReporter;
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,68,inal Set<JSType> alternates;
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,69,Set<JSType> alternates;
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,480,@Override
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,481,"JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {"
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,482,setResolvedTypeInternal(this); // for circularly defined types.
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,484,boolean changed = false;
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,485,ImmutableSet.Builder<JSType> resolvedTypes = ImmutableSet.builder();
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,486,for (JSType alternate : alternates) {
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,487,"JSType newAlternate = alternate.resolve(t, scope);"
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,488,changed |= (alternate != newAlternate);
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,489,resolvedTypes.add(alternate);
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,491,if (changed) {
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,492,alternates = resolvedTypes.build();
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,494,return this;
True,src/com/google/javascript/rhino/jstype/UnknownType.java,src/com/google/javascript/rhino/jstype/UnknownType.java,44,import com.google.javascript.rhino.ErrorReporter;
True,src/com/google/javascript/rhino/jstype/UnknownType.java,src/com/google/javascript/rhino/jstype/UnknownType.java,190,@Override
True,src/com/google/javascript/rhino/jstype/UnknownType.java,src/com/google/javascript/rhino/jstype/UnknownType.java,191,"JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {"
True,src/com/google/javascript/rhino/jstype/UnknownType.java,src/com/google/javascript/rhino/jstype/UnknownType.java,192,return this;
True,src/com/google/javascript/rhino/jstype/ValueType.java,src/com/google/javascript/rhino/jstype/ValueType.java,42,import com.google.javascript.rhino.ErrorReporter;
True,src/com/google/javascript/rhino/jstype/ValueType.java,src/com/google/javascript/rhino/jstype/ValueType.java,57,@Override
True,src/com/google/javascript/rhino/jstype/ValueType.java,src/com/google/javascript/rhino/jstype/ValueType.java,58,"final JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {"
True,src/com/google/javascript/rhino/jstype/ValueType.java,src/com/google/javascript/rhino/jstype/ValueType.java,59,return this;
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,3,* ***** BEGIN LICENSE BLOCK *****
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,4,* Version: MPL 1.1/GPL 2.0
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,6,* The contents of this file are subject to the Mozilla Public License Version
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,7,"* 1.1 (the ""License""); you may not use this file except in compliance with"
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,8,* the License. You may obtain a copy of the License at
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,9,* http://www.mozilla.org/MPL/
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,11,"* Software distributed under the License is distributed on an ""AS IS"" basis,"
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,12,"* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License"
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,13,* for the specific language governing rights and limitations under the
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,14,* License.
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,16,"* The Original Code is Rhino code, released"
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,17,"* May 6, 1999."
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,19,* The Initial Developer of the Original Code is
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,20,* Netscape Communications Corporation.
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,21,* Portions created by the Initial Developer are Copyright (C) 1997-1999
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,22,* the Initial Developer. All Rights Reserved.
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,24,* Contributor(s):
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,25,*   Nick Santos
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,26,*   Google Inc.
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,28,"* Alternatively, the contents of this file may be used under the terms of"
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,29,"* the GNU General Public License Version 2 or later (the ""GPL""), in which"
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,30,* case the provisions of the GPL are applicable instead of those above. If
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,31,* you wish to allow use of your version of this file only under the terms of
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,32,* the GPL and not to allow others to use your version of this file under the
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,33,"* MPL, indicate your decision by deleting the provisions above and replacing"
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,34,* them with the notice and other provisions required by the GPL. If you do
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,35,"* not delete the provisions above, a recipient may use your version of this"
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,36,* file under either the MPL or the GPL.
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,38,* ***** END LICENSE BLOCK ***** */
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,40,package com.google.javascript.rhino.testing;
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,42,import com.google.javascript.rhino.ErrorReporter;
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,43,import com.google.javascript.rhino.jstype.JSType;
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,44,import com.google.javascript.rhino.jstype.StaticScope;
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,46,import junit.framework.Assert;
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,49,* Helper methods for making assertions about the validity of types.
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,52,public class Asserts {
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,53,private Asserts() {} // all static
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,55,public static JSType assertResolvesToSame(JSType type) {
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,56,"Assert.assertSame(type, assertValidResolve(type));"
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,57,return type;
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,60,/** @return The resolved type */
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,61,public static JSType assertValidResolve(JSType type) {
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,62,"return assertValidResolve(type, new EmptyScope());"
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,65,/** @return The resolved type */
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,66,public static JSType assertValidResolve(
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,67,"JSType type, StaticScope<JSType> scope) {"
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,68,ErrorReporter t = TestErrorReporter.forNoExpectedReports();
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,69,"JSType resolvedType = type.resolve(t, scope);"
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,70,"Assert.assertEquals(""JSType#resolve should not affect object equality"","
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,71,"type, resolvedType);"
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,72,"Assert.assertEquals(""JSType#resolve should not affect hash codes"","
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,73,"type.hashCode(), resolvedType.hashCode());"
True,src/com/google/javascript/rhino/testing/Asserts.java,src/com/google/javascript/rhino/testing/Asserts.java,74,return resolvedType;
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,3,* ***** BEGIN LICENSE BLOCK *****
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,4,* Version: MPL 1.1/GPL 2.0
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,6,* The contents of this file are subject to the Mozilla Public License Version
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,7,"* 1.1 (the ""License""); you may not use this file except in compliance with"
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,8,* the License. You may obtain a copy of the License at
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,9,* http://www.mozilla.org/MPL/
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,11,"* Software distributed under the License is distributed on an ""AS IS"" basis,"
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,12,"* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License"
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,13,* for the specific language governing rights and limitations under the
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,14,* License.
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,16,"* The Original Code is Rhino code, released"
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,17,"* May 6, 1999."
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,19,* The Initial Developer of the Original Code is
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,20,* Netscape Communications Corporation.
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,21,* Portions created by the Initial Developer are Copyright (C) 1997-1999
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,22,* the Initial Developer. All Rights Reserved.
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,24,* Contributor(s):
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,25,*   Nick Santos
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,27,"* Alternatively, the contents of this file may be used under the terms of"
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,28,"* the GNU General Public License Version 2 or later (the ""GPL""), in which"
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,29,* case the provisions of the GPL are applicable instead of those above. If
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,30,* you wish to allow use of your version of this file only under the terms of
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,31,* the GPL and not to allow others to use your version of this file under the
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,32,"* MPL, indicate your decision by deleting the provisions above and replacing"
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,33,* them with the notice and other provisions required by the GPL. If you do
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,34,"* not delete the provisions above, a recipient may use your version of this"
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,35,* file under either the MPL or the GPL.
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,37,* ***** END LICENSE BLOCK ***** */
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,39,package com.google.javascript.rhino.testing;
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,41,import com.google.javascript.rhino.jstype.JSType;
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,42,import com.google.javascript.rhino.jstype.StaticScope;
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,43,import com.google.javascript.rhino.jstype.StaticSlot;
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,46,* An empty scope implementation.
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,49,public class EmptyScope implements StaticScope<JSType> {
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,50,@Override
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,51,public StaticScope<JSType> getParentScope() {
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,52,return null;
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,55,@Override
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,56,public StaticSlot<JSType> getSlot(String name) {
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,57,return null;
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,60,@Override
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,61,public StaticSlot<JSType> getOwnSlot(String name) {
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,62,return null;
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,65,@Override
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,66,public JSType getTypeOfThis() {
True,src/com/google/javascript/rhino/testing/EmptyScope.java,src/com/google/javascript/rhino/testing/EmptyScope.java,67,return null;
True,src/com/google/javascript/rhino/testing/TestErrorReporter.java,src/com/google/javascript/rhino/testing/TestErrorReporter.java,72,public static TestErrorReporter forNoExpectedReports() {
True,src/com/google/javascript/rhino/testing/TestErrorReporter.java,src/com/google/javascript/rhino/testing/TestErrorReporter.java,73,"return new TestErrorReporter(null, null);"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1493,public void testRenamePropertyFunction() {
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1494,"testSame(""function JSCompiler_renameProperty(x) {return x} "" +"
True,test/com/google/javascript/jscomp/InlineFunctionsTest.java,test/com/google/javascript/jscomp/InlineFunctionsTest.java,1495,"""JSCompiler_renameProperty('foo')"");"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,783,public void testInlineUndefined1() {
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,784,"test(""var x; x;"","
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,785,"""void 0;"");"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,788,public void testInlineUndefined2() {
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,789,"testSame(""var x; x++;"");"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,792,public void testInlineUndefined3() {
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,793,"testSame(""var x; var x;"");"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,796,public void testInlineUndefined4() {
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,797,"test(""var x; x; x;"","
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,798,"""void 0; void 0;"");"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,801,public void testInlineUndefined5() {
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,802,"test(""var x; for(x in a) {}"","
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,803,"""var x; for(x in a) {}"");"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,806,public void testIssue90() {
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,807,"test(""var x; x && alert(1)"","
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,808,"""void 0 && alert(1)"");"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,811,public void testRenamePropertyFunction() {
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,812,"testSame(""var JSCompiler_renameProperty; "" +"
True,test/com/google/javascript/jscomp/InlineVariablesTest.java,test/com/google/javascript/jscomp/InlineVariablesTest.java,813,"""JSCompiler_renameProperty('foo')"");"
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,45,mport com.google.common.collect.Lists;
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,46,import com.google.common.collect.Lists;
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,48,mport com.google.javascript.rhino.jstype.JSType.TypePair;
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,52,import com.google.javascript.rhino.jstype.JSType.TypePair;
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,53,import com.google.javascript.rhino.testing.Asserts;
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,55,import com.google.javascript.rhino.testing.EmptyScope;
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,62,// TODO(nicksantos): Split some of this up into per-class unit tests.
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,79,rivate static final StaticScope<JSType> EMPTY_SCOPE =
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,80,ew StaticScope<JSType>() {
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,81,Override
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,82,ublic StaticScope<JSType> getParentScope() { return null; }
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,84,Override
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,85,ublic StaticSlot<JSType> getSlot(String name) { return null; }
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,87,Override
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,88,ublic StaticSlot<JSType> getOwnSlot(String name) { return null; }
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,90,Override
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,91,ublic JSType getTypeOfThis() { return null; }
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,82,private static final StaticScope<JSType> EMPTY_SCOPE = new EmptyScope();
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,156,assertNotNull(namedGoogBar.getImplicitPrototype());
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,370,Asserts.assertResolvesToSame(U2U_CONSTRUCTOR_TYPE);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,506,Asserts.assertResolvesToSame(NO_OBJECT_TYPE);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,634,Asserts.assertResolvesToSame(NO_TYPE);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,781,Asserts.assertResolvesToSame(ARRAY_TYPE);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,885,Asserts.assertResolvesToSame(UNKNOWN_TYPE);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,1001,Asserts.assertResolvesToSame(ALL_TYPE);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,1153,Asserts.assertResolvesToSame(OBJECT_TYPE);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,1290,Asserts.assertResolvesToSame(NUMBER_OBJECT_TYPE);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,1410,Asserts.assertResolvesToSame(NUMBER_TYPE);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,1554,Asserts.assertResolvesToSame(NULL_TYPE);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,1759,Asserts.assertResolvesToSame(DATE_TYPE);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,1902,Asserts.assertResolvesToSame(REGEXP_TYPE);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,2059,Asserts.assertResolvesToSame(STRING_OBJECT_TYPE);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,2168,Asserts.assertResolvesToSame(STRING_TYPE);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,2263,Asserts.assertResolvesToSame(recordType);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,2346,Asserts.assertResolvesToSame(functionInst);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,2422,Asserts.assertResolvesToSame(functionType);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,2941,Asserts.assertResolvesToSame(VOID_TYPE);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,3042,Asserts.assertResolvesToSame(BOOLEAN_TYPE);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,3148,Asserts.assertResolvesToSame(BOOLEAN_OBJECT_TYPE);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,3253,Asserts.assertResolvesToSame(enumType);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,3358,Asserts.assertResolvesToSame(elementsType);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,3371,Asserts.assertResolvesToSame(stringEnum);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,3428,Asserts.assertResolvesToSame(nullOrString);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,3477,Asserts.assertResolvesToSame(objectType);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,3500,Asserts.assertResolvesToSame(googBar);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,3501,Asserts.assertResolvesToSame(googSubBar);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,3623,JSType resolvedNamedGoogBar = Asserts.assertValidResolve(namedGoogBar);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,3624,"assertNotSame(resolvedNamedGoogBar, namedGoogBar);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,3625,"assertSame(resolvedNamedGoogBar, googBar.getInstanceType());"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4498,JSType resolvedA = Asserts.assertValidResolve(a);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4499,"assertNotSame(resolvedA, a);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4500,"assertSame(resolvedA, realA);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4502,JSType resolvedB = Asserts.assertValidResolve(b);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4503,"assertNotSame(resolvedB, b);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4504,"assertSame(resolvedB, realB);"

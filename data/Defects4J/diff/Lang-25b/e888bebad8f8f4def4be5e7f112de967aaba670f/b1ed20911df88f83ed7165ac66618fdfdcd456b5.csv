is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,20,import java.lang.reflect.InvocationTargetException;
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,21,import java.lang.reflect.Method;
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,23,import org.apache.commons.lang3.exception.CloneFailedException;
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,318,* Clone an object.
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,320,* @param <T> the type of the object
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,321,* @param o the object to clone
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,322,* @return the clone if the object implements {@link Cloneable} otherwise <code>null</code>
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,323,* @throws CloneFailedException if the object is cloneable and the clone operation fails
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,324,* @since 3.0
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,326,public static <T> T clone(final T o) {
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,327,if (o instanceof Cloneable) {
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,328,try {
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,329,"final Method clone = o.getClass().getMethod(""clone"", (Class[])null);"
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,330,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,331,"final T result = (T)clone.invoke(o, (Object[])null);"
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,332,return result;
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,333,} catch (final NoSuchMethodException e) {
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,334,"throw new CloneFailedException(""Cloneable type has no clone method"", e);"
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,335,} catch (final IllegalAccessException e) {
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,336,"throw new CloneFailedException(""Cannot clone Cloneable type"", e);"
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,337,} catch (final InvocationTargetException e) {
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,338,"throw new CloneFailedException(""Exception cloning Cloneable type"", e.getCause());"
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,342,return null;
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,346,* Clone an object if possible.
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,348,* @param <T> the type of the object
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,349,* @param o the object to clone
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,350,* @return the clone if the object implements {@link Cloneable} otherwise the object itself
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,351,* @throws CloneFailedException if the object is cloneable and the clone operation fails
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,352,* @since 3.0
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,354,public static <T> T cloneIfPossible(final T o) {
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,355,final T clone = clone(o);
True,src/main/java/org/apache/commons/lang3/ObjectUtils.java,src/main/java/org/apache/commons/lang3/ObjectUtils.java,356,return clone == null ? o : clone;
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,17,package org.apache.commons.lang3.exception;
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,20,* Exception thrown when a clone cannot be created. In contrast to
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,21,* {@link CloneNotSupportedException} this is a {@link RuntimeException}.
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,23,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,24,* @since 3.0
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,26,public class CloneFailedException extends RuntimeException {
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,27,// ~ Static fields/initializers ---------------------------------------------
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,29,private static final long serialVersionUID = 20091223L;
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,31,// ~ Constructors -----------------------------------------------------------
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,34,* Constructs a CloneFailedException.
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,36,* @param message description of the exception
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,37,* @since upcoming
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,39,public CloneFailedException(final String message) {
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,40,super(message);
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,44,* Constructs a CloneFailedException.
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,46,* @param cause cause of the exception
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,47,* @since upcoming
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,49,public CloneFailedException(final Throwable cause) {
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,50,super(cause);
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,54,* Constructs a CloneFailedException.
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,56,* @param message description of the exception
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,57,* @param cause cause of the exception
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,58,* @since upcoming
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,60,"public CloneFailedException(final String message, final Throwable cause) {"
True,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java,61,"super(message, cause);"
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,24,import org.apache.commons.lang3.exception.CloneFailedException;
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,25,import org.apache.commons.lang3.mutable.MutableObject;
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,219,* Tests {@link ObjectUtils#clone(Object)} with a cloneable object.
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,221,public void testCloneOfCloneable() {
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,222,"final CloneableString string = new CloneableString(""apache"");"
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,223,final CloneableString stringClone = ObjectUtils.clone(string);
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,224,"assertEquals(""apache"", stringClone.getValue());"
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,228,* Tests {@link ObjectUtils#clone(Object)} with a not cloneable object.
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,230,public void testCloneOfNotCloneable() {
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,231,"final String string = new String(""apache"");"
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,232,assertNull(ObjectUtils.clone(string));
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,236,* Tests {@link ObjectUtils#clone(Object)} with an uncloneable object.
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,238,public void testCloneOfUncloneable() {
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,239,"final UncloneableString string = new UncloneableString(""apache"");"
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,240,try {
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,241,ObjectUtils.clone(string);
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,242,"fail(""Thrown "" + CloneFailedException.class.getName() + "" expected"");"
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,243,} catch (final CloneFailedException e) {
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,244,"assertEquals(NoSuchMethodException.class, e.getCause().getClass());"
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,249,* Tests {@link ObjectUtils#cloneIfPossible(Object)} with a cloneable object.
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,251,public void testPossibleCloneOfCloneable() {
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,252,"final CloneableString string = new CloneableString(""apache"");"
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,253,final CloneableString stringClone = ObjectUtils.cloneIfPossible(string);
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,254,"assertEquals(""apache"", stringClone.getValue());"
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,258,* Tests {@link ObjectUtils#cloneIfPossible(Object)} with a not cloneable object.
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,260,public void testPossibleCloneOfNotCloneable() {
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,261,"final String string = new String(""apache"");"
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,262,"assertSame(string, ObjectUtils.cloneIfPossible(string));"
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,266,* Tests {@link ObjectUtils#cloneIfPossible(Object)} with an uncloneable object.
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,268,public void testPossibleCloneOfUncloneable() {
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,269,"final UncloneableString string = new UncloneableString(""apache"");"
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,270,try {
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,271,ObjectUtils.cloneIfPossible(string);
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,272,"fail(""Thrown "" + CloneFailedException.class.getName() + "" expected"");"
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,273,} catch (final CloneFailedException e) {
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,274,"assertEquals(NoSuchMethodException.class, e.getCause().getClass());"
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,279,* String that is cloneable.
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,281,static final class CloneableString extends MutableObject<String> implements Cloneable {
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,282,private static final long serialVersionUID = 1L;
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,283,CloneableString(final String s) {
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,284,super(s);
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,287,@Override
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,288,public CloneableString clone() throws CloneNotSupportedException {
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,289,return (CloneableString)super.clone();
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,294,* String that is not cloneable.
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,296,static final class UncloneableString extends MutableObject<String> implements Cloneable {
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,297,private static final long serialVersionUID = 1L;
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,298,UncloneableString(final String s) {
True,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java,299,super(s);

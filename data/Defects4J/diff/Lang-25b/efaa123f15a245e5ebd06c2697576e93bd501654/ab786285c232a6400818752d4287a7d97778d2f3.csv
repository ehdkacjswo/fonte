is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,4,* Copyright (c) 2002 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,5,* reserved.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,9,* are met:
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,17,*    distribution.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,54,package org.apache.commons.lang.builder;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,56,import java.lang.reflect.Field;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,57,import java.lang.reflect.Modifier;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,59,import org.apache.commons.lang.NumberUtils;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,61,* <code>CompareTo</code> generation routines.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,62,* <p>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,63,* This class provides methods to build a good <comde>compareTo()</code> method for any class.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,64,* It is consistent with the <code>equals</code> and <code>hashcode</code> built
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,65,* with EqualsBuilder and HashCodeBuilder.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,66,* <p>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,67,* Two object that compare equal using equals should compare equals using
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,68,* compareTo.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,69,* <p>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,70,* All relevant fields should be included in the calculation of the comparison. Derived
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,71,"* fields may be ignored. The same fields, in the same order, should be used in"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,72,* both <code>compareTo</code> and <code>equals</code>.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,73,* <p>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,74,* Typical use for the code is as follows:
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,76,* <pre>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,77,*  public int comapareTo(Object o) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,78,*    MyClass rhs = (MyClass) o;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,79,*    return new CompareToBuilder()
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,80,"*                 .append(field1, rhs.field1)"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,81,"*                 .append(field2, rhs.field2)"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,82,"*                 .appendb(field3, rhs.field3)"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,83,*                 .toComparison();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,85,* </pre>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,86,* <p>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,87,"* Alternatively, there is a method that uses reflection to determine"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,88,"* the fields to test. Because these fields are usually private, the method,"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,89,"* <code>reflectionCompare</code>, uses <code>Field.setAccessible</code> to change"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,90,"* the visibility of the fields. This will fail under a security manager,"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,91,* unless the appropriate permissions are set. It is also slower than testing
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,92,* explicitly.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,93,* <p>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,94,* A typical invocation for this method would look like:
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,95,* <pre>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,96,* public int compareTo(Object o) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,97,"*   return CompareToBuilder.reflectionCompare(this, obj);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,99,* </pre>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,100,"* @author <a href=""mailto:steve.downey@netfolio.com"">Steve Downey</a>"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,101,"* @author <a href=""mailto:scolebourne@joda.org"">Stephen Colebourne</a>"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,102,"* @version $Id: CompareToBuilder.java,v 1.1 2002/09/15 10:25:22 scolebourne Exp $"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,104,public class CompareToBuilder {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,106,* If the fields tested are equals.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,108,protected int comparison;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,111,* Constructor for CompareToBuilder.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,112,* Starts off assuming that the objects are equal.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,113,* @see java.lang.Object#Object()
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,115,public CompareToBuilder() {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,116,super();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,117,comparison = 0;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,123,* This method uses reflection to determine the ordering between two objects.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,124,* <p>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,125,* It uses Field.setAccessible to gain access to private fields. This means
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,126,"* that it will throw a security exception if run under a security manger, if"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,127,* the permissions are not set up.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,128,* It is also not as efficient as testing explicitly.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,129,"* Transient members will be not be tested, as they are likely derived"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,130,"* fields, and not part of the value of the object."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,131,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,132,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,133,"* @return int - a negative integer, zero, or a positive integer as this"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,134,"* object is less than, equal to, or greater than the specified object."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,135,* @throws ClassCastException - if the specified object's type prevents it
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,136,* from being compared to this Object.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,138,"public static int reflectionCompare(Object lhs, Object rhs) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,139,"return reflectionCompare(lhs, rhs, false);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,143,* This method uses reflection to determine if the two object are equal.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,144,* <p>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,145,* It uses Field.setAccessible to gain access to private fields. This means
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,146,"* that it will throw a security exception if run under a security manger, if"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,147,* the permissions are not set up.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,148,* It is also not as efficient as testing explicitly.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,149,"* If the TestTransients parameter is set to true, transient members will be"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,150,"* tested, otherwise they are ignored, as they are likely derived fields, and"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,151,* not part of the value of the object.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,153,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,154,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,155,* @param testTransients - whether to include transient fields
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,156,"* @return int - a negative integer, zero, or a positive integer as this"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,157,"* object is less than, equal to, or greater than the specified object."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,158,* @throws ClassCastException - if the specified object's type prevents it
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,159,* from being compared to this Object.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,161,"public static int reflectionCompare(Object lhs, Object rhs, boolean testTransients) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,162,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,163,return 0;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,165,if (lhs == null || rhs == null) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,166,throw new NullPointerException();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,168,Class c1 = lhs.getClass();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,169,if (!c1.isInstance(rhs)) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,170,throw new ClassCastException();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,172,Field[] fields = c1.getDeclaredFields();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,173,"Field.setAccessible(fields, true);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,174,CompareToBuilder compareToBuilder = new CompareToBuilder();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,175,for (int i = 0; i < fields.length && compareToBuilder.comparison == 0; ++i) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,176,Field f = fields[i];
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,177,if (testTransients || !Modifier.isTransient(f.getModifiers())) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,178,try {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,179,"compareToBuilder.append(f.get(lhs), f.get(rhs));"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,180,} catch (IllegalAccessException e) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,181,//this can't happen. Would get a Security exception instead
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,182,//throw a runtime exception in case the impossible happens.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,183,"throw new InternalError(""Unexpected IllegalAccessException"");"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,187,return compareToBuilder.toComparison();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,192,/** Test if two <code>Object</code>s are equal using either the
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,193,"* <code>compareTo</code> method, or native comparison if the Objects are"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,194,* actually arrays.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,195,* <p>
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,196,"* The objects must be <code>Comparable</code>. If they are not, the method"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,197,* will throw a <code>ClassCastException</code>.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,198,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,199,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,200,* @return CompareToBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,201,* @throws ClassCastException - if the specified object's type prevents it
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,202,* from being compared to this Object.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,204,"public CompareToBuilder append(Object lhs, Object rhs) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,205,if (comparison != 0) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,206,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,208,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,209,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,211,if (lhs == null || rhs == null) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,212,throw new NullPointerException();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,214,Class lhsClass = lhs.getClass();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,215,if (!lhsClass.isArray()) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,216,"//the simple case, not an array, just test the element"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,217,comparison = ((Comparable)lhs).compareTo(rhs);
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,218,} else {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,219,"//'Switch' on type of array, to dispatch to the correct handler"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,220,// This handles multi dimensional arrays
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,221,if (lhs instanceof long[]) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,222,"append((long[]) lhs, (long[]) rhs);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,223,} else if (lhs instanceof int[]) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,224,"append((int[]) lhs, (int[]) rhs);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,225,} else if (lhs instanceof short[]) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,226,"append((short[]) lhs, (short[]) rhs);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,227,} else if (lhs instanceof char[]) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,228,"append((char[]) lhs, (char[]) rhs);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,229,} else if (lhs instanceof byte[]) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,230,"append((byte[]) lhs, (byte[]) rhs);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,231,} else if (lhs instanceof double[]) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,232,"append((double[]) lhs, (double[]) rhs);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,233,} else if (lhs instanceof float[]) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,234,"append((float[]) lhs, (float[]) rhs);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,235,} else if (lhs instanceof boolean[]) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,236,"append((boolean[]) lhs, (boolean[]) rhs);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,237,} else {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,238,// Not an array of primitives
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,239,"append((Object[]) lhs, (Object[]) rhs);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,242,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,246,"* Test if two <code>long</code>s are <, > or ==."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,247,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,248,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,249,* @return CompareToBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,251,"public CompareToBuilder append(long lhs, long rhs) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,252,if (comparison != 0) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,253,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,255,comparison = ((lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0));
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,256,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,260,"* Test if two <code>int</code>s are <, > or ==."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,261,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,262,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,263,* @return CompareToBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,265,"public CompareToBuilder append(int lhs, int rhs) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,266,if (comparison != 0) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,267,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,269,comparison = ((lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0));
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,270,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,274,"* Test if two <code>short</code>s are <, > or ==."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,275,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,276,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,277,* @return CompareToBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,279,"public CompareToBuilder append(short lhs, short rhs) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,280,if (comparison != 0) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,281,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,283,comparison = ((lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0));
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,284,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,288,"* Test if two <code>char</code>s are <, > or ==."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,289,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,290,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,291,* @return CompareToBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,293,"public CompareToBuilder append(char lhs, char rhs) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,294,if (comparison != 0) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,295,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,297,comparison = ((lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0));
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,298,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,302,"* Test if two <code>byte</code>s are <, > or ==."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,303,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,304,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,305,* @return CompareToBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,307,"public CompareToBuilder append(byte lhs, byte rhs) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,308,if (comparison != 0) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,309,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,311,comparison = ((lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0));
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,312,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,316,"* Test if two <code>double</code>s are <, > or ==. This handles NaNs,"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,317,"* Infinties, and -0.0. It is compatible with the hash code generated by"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,318,* <code>HashCodeBuilder</code>.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,319,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,320,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,321,* @return CompareToBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,323,"public CompareToBuilder append(double lhs, double rhs) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,324,if (comparison != 0) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,325,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,327,"comparison = NumberUtils.compare(lhs, rhs);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,328,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,332,"* Test if two <code>double</code>s are <, > or ==. This handles NaNs,"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,333,"* Infinties, and -0.0. It is compatible with the hash code generated by"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,334,* <code>HashCodeBuilder</code>.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,335,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,336,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,337,* @return CompareToBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,339,"public CompareToBuilder append(float lhs, float rhs) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,340,if (comparison != 0) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,341,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,343,"comparison = NumberUtils.compare(lhs, rhs);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,344,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,348,"* Test if two <code>booleans</code>s are <, > or ==."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,349,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,350,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,351,* @return CompareToBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,353,"public CompareToBuilder append(boolean lhs, boolean rhs) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,354,if (comparison != 0) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,355,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,357,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,358,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,360,if (lhs == false) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,361,comparison = -1;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,362,} else {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,363,comparison = +1;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,365,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,369,* Performs a deep comparison of two object arrays. This also will be
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,370,"* called for the top level of multi-dimensional, ragged, and multi-typed"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,371,"* arrays. If two arrays are of different lengths, and all elements of the"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,372,"* shorter array are equal to the elements in the longer array, the longer"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,373,"* array is the greater. This is dictionary, or lexical, ordering."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,374,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,375,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,376,* @return CompareToBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,377,* @throws ClassCastException - if the specified object's type prevents it
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,378,* from being compared to this Object.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,380,"public CompareToBuilder append(Object[] lhs, Object[] rhs) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,381,if (comparison != 0) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,382,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,384,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,385,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,387,if (lhs == null || rhs == null) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,388,throw new NullPointerException();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,391,int length = (lhs.length < rhs.length) ? lhs.length : rhs.length;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,392,for (int i = 0; i < length && comparison == 0; ++i) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,393,Class lhsClass = lhs[i].getClass();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,394,if (!lhsClass.isInstance(rhs[i])) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,395,throw new ClassCastException();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,397,"append(lhs[i], rhs[i]);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,399,if (comparison == 0 && lhs.length != rhs.length) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,400,comparison = (lhs.length < rhs.length) ? -1 : +1;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,402,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,406,* Deep comparison of array of <code>long</code> Length and all values
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,407,"*  are compared. The method append(long, long) is used."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,408,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,409,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,410,* @return CompareToBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,412,"public CompareToBuilder append(long[] lhs, long[] rhs) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,413,if (comparison != 0) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,414,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,416,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,417,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,419,if (lhs == null || rhs == null) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,420,throw new NullPointerException();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,422,int length = (lhs.length < rhs.length) ? lhs.length : rhs.length;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,423,for (int i = 0; i < length && comparison == 0; ++i) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,424,"append(lhs[i], rhs[i]);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,426,if (comparison == 0 && lhs.length != rhs.length) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,427,comparison = (lhs.length < rhs.length) ? -1 : +1;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,429,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,433,* Deep comparison of array of <code>int</code> Length and all values
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,434,"*  are compared. The method append(int, int) is used."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,435,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,436,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,437,* @return CompareToBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,439,"public CompareToBuilder append(int[] lhs, int[] rhs) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,440,if (comparison != 0) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,441,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,443,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,444,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,446,if (lhs == null || rhs == null) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,447,throw new NullPointerException();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,449,int length = (lhs.length < rhs.length) ? lhs.length : rhs.length;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,450,for (int i = 0; i < length && comparison == 0; ++i) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,451,"append(lhs[i], rhs[i]);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,453,if (comparison == 0 && lhs.length != rhs.length) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,454,comparison = (lhs.length < rhs.length) ? -1 : +1;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,456,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,460,* Deep comparison of array of <code>short</code> Length and all values
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,461,"*  are compared. The method append(short, short) is used."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,462,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,463,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,464,* @return CompareToBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,466,"public CompareToBuilder append(short[] lhs, short[] rhs) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,467,if (comparison != 0) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,468,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,470,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,471,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,473,if (lhs == null || rhs == null) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,474,throw new NullPointerException();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,476,int length = (lhs.length < rhs.length) ? lhs.length : rhs.length;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,477,for (int i = 0; i < length && comparison == 0; ++i) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,478,"append(lhs[i], rhs[i]);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,480,if (comparison == 0 && lhs.length != rhs.length) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,481,comparison = (lhs.length < rhs.length) ? -1 : +1;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,483,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,487,* Deep comparison of array of <code>char</code> Length and all values
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,488,"*  are compared. The method append(char, char) is used."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,489,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,490,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,491,* @return CompareToBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,493,"public CompareToBuilder append(char[] lhs, char[] rhs) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,494,if (comparison != 0) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,495,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,497,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,498,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,500,if (lhs == null || rhs == null) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,501,throw new NullPointerException();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,503,int length = (lhs.length < rhs.length) ? lhs.length : rhs.length;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,504,for (int i = 0; i < length && comparison == 0; ++i) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,505,"append(lhs[i], rhs[i]);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,507,if (comparison == 0 && lhs.length != rhs.length) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,508,comparison = (lhs.length < rhs.length) ? -1 : +1;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,510,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,514,* Deep comparison of array of <code>byte</code> Length and all values
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,515,"*  are compared. The method append(byte, byte) is used."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,516,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,517,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,518,* @return CompareToBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,520,"public CompareToBuilder append(byte[] lhs, byte[] rhs) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,521,if (comparison != 0) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,522,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,524,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,525,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,527,if (lhs == null || rhs == null) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,528,throw new NullPointerException();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,530,int length = (lhs.length < rhs.length) ? lhs.length : rhs.length;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,531,for (int i = 0; i < length && comparison == 0; ++i) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,532,"append(lhs[i], rhs[i]);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,534,if (comparison == 0 && lhs.length != rhs.length) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,535,comparison = (lhs.length < rhs.length) ? -1 : +1;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,537,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,541,* Deep comparison of array of <code>double</code> Length and all values
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,542,"*  are compared. The method append(double, double) is used."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,543,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,544,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,545,* @return CompareToBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,547,"public CompareToBuilder append(double[] lhs, double[] rhs) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,548,if (comparison != 0) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,549,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,551,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,552,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,554,if (lhs == null || rhs == null) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,555,throw new NullPointerException();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,557,int length = (lhs.length < rhs.length) ? lhs.length : rhs.length;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,558,for (int i = 0; i < length && comparison == 0; ++i) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,559,"append(lhs[i], rhs[i]);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,561,if (comparison == 0 && lhs.length != rhs.length) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,562,comparison = (lhs.length < rhs.length) ? -1 : +1;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,564,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,568,* Deep comparison of array of <code>float</code> Length and all values
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,569,"*  are compared. The method append(float, float) is used."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,570,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,571,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,572,* @return CompareToBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,574,"public CompareToBuilder append(float[] lhs, float[] rhs) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,575,if (comparison != 0) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,576,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,578,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,579,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,581,if (lhs == null || rhs == null) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,582,throw new NullPointerException();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,584,int length = (lhs.length < rhs.length) ? lhs.length : rhs.length;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,585,for (int i = 0; i < length && comparison == 0; ++i) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,586,"append(lhs[i], rhs[i]);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,588,if (comparison == 0 && lhs.length != rhs.length) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,589,comparison = (lhs.length < rhs.length) ? -1 : +1;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,591,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,595,* Deep comparison of array of <code>boolean</code> Length and all values
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,596,"*  are compared. The method append(boolean, boolean) is used."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,597,* @param lhs - Left Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,598,* @param rhs - Right Hand Side
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,599,* @return CompareToBuilder - used to chain calls.
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,601,"public CompareToBuilder append(boolean[] lhs, boolean[] rhs) {"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,602,if (comparison != 0) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,603,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,605,if (lhs == rhs) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,606,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,608,if (lhs == null || rhs == null) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,609,throw new NullPointerException();
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,611,int length = (lhs.length < rhs.length) ? lhs.length : rhs.length;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,612,for (int i = 0; i < length && comparison == 0; ++i) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,613,"append(lhs[i], rhs[i]);"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,615,if (comparison == 0 && lhs.length != rhs.length) {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,616,comparison = (lhs.length < rhs.length) ? -1 : +1;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,618,return this;
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,622,"* Return a negative integer if the object is less than, a positive"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,623,"* integer if the object is greater than, or 0 if the object is equal."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,625,"* @return int - a negative integer, zero, or a positive integer as this"
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,626,"* object is less than, equal to, or greater than the specified object."
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,628,public int toComparison() {
True,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,src/java/org/apache/commons/lang/builder/CompareToBuilder.java,629,return comparison;

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,2,* Copyright 2005 The Apache Software Foundation.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,14,* limitations under the License.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,17,package org.apache.commons.lang.text;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,19,import java.util.ArrayList;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,20,import java.util.Iterator;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,21,import java.util.List;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,22,import java.util.Map;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,24,import org.apache.commons.lang.StringUtils;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,27,* Candidate class to replace Interpolation and MappedMessageFormat?
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,29,* <p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,30,* A class for variable interpolation (substitution).
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,31,* </p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,32,* <p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,33,* This class can be given a text which can contain an arbitrary number of variables. It will then try to replace all
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,34,"* variables by their current values, which are obtained from a map. A variable per default is specified using the"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,35,* typical notation &quot; <code>${&lt;varname&gt;}</code> &quot;. However by calling the
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,36,* <code>setVariablePrefix()</code> and <code>setVariableSuffix()</code> methods it is possible to use a different
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,37,* prefix or suffix.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,38,* </p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,39,* <p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,40,* Typical usage of this class follows the following pattern: First an instance is created and initialized with the map
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,41,* that contains the values for the available variables. If a prefix and/or suffix for variables should be used other
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,42,"* than the default ones, the appropriate settings can be performed. After that the <code>replace()</code> method can"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,43,* be called passing in the source text for interpolation. In the returned text all variable references (as long as
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,44,* their values are known) will be resolved. The following example demonstrates this:
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,45,* </p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,46,* <p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,47,* <code><pre>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,48,* Map valuesMap = HashMap();
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,49,"* valuesMap.put(&quot;animal&quot;, &quot;quick brown fox&quot;);"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,50,"* valuesMap.put(&quot;target&quot;, &quot;lazy dog&quot;);"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,51,* String templateString = &quot;The ${animal} jumped over the ${target}.&quot;;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,52,* VariableFormat vf = new VariableVormat(valuesMap);
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,53,* String resolvedString = cf.replace(templateString);
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,54,* </pre></code> yielding: <code><pre>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,55,*    The quick brown fox jumped over the lazy dog.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,56,* </pre></code>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,57,* </p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,58,* <p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,59,* In addition to this usage pattern there are some static convenience methods that cover the most common use cases.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,60,* These methods can be used without the need of creating an instance. However if multiple replace operations are to be
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,61,"* performed, creating and reusing an instance of this class will be more efficient."
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,62,* </p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,63,* <p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,64,"* Variable replacement works in a recursive way, i.e. it is possible that a variable's value is a text which again"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,65,"* contains variable references. These new variables will be replaced, too. Cyclic replacements are detected and will"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,66,* cause an exception to be thrown.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,67,* </p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,68,* <p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,69,* Sometimes the interpolation's result must contain a variable prefix. As an example take the following source text:
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,70,* </p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,71,* <p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,72,* <code>The variable ${${name}} must be used.</code>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,73,* </p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,74,* <p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,75,* Here only the variable's name refered to in the text should be replaced resulting in the text (assuming that the
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,76,* value of the <code>name</code> variable is <code>x</code>:
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,77,* </p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,78,* <p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,79,* <code>The variable ${x} must be used.</code>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,80,* </p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,81,* <p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,82,* To achieve this effect there are two possibilities: Either set a different prefix and suffix for variables which do
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,83,* not conflict with the result text you want to produce. The other possibility is to use the escape character that can
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,84,* be set through the <code>setEscapeCharacter()</code> method. If this character is placed before a variable
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,85,"* reference, this reference is ignored and won't be replaced. It can also be placed before a variable suffix, then this"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,86,"* suffix will be ignored, too. Per default the escape character is set to the <code>$</code> character, so that in"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,87,* the example above the text could have run:
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,88,* </p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,89,* <p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,90,* <code>The variable $${${name$}} must be used.</code>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,91,* </p>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,94,* @author Oliver Heger
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,95,* @version $Id$
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,96,* @since 2.2
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,98,public class VariableFormat {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,99,/** Constant for the default variable prefix. */
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,100,"static final String DEFAULT_PREFIX = ""${"";"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,102,/** Constant for the default variable suffix. */
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,103,"static final String DEFAULT_SUFFIX = ""}"";"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,105,/** Constant for the default escape character. */
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,106,static final char DEFAULT_ESCAPE = '$';
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,108,/** Stores the map with the variables' values. */
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,109,private Map valueMap;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,111,/** Stores the variable prefix. */
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,112,private String variablePrefix;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,114,/** Stores the variable suffix. */
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,115,private String variableSuffix;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,117,/** Stores the escape character. */
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,118,private char escapeCharacter;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,121,* Creates a new instance of <code>VariableFormat</code> and initializes it.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,123,* @param valueMap
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,124,*            the map with the variables' values
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,125,* @param prefix
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,126,*            the prefix for variables
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,127,* @param suffix
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,128,*            the suffix for variables
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,129,* @param escape
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,130,*            the escape character
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,131,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,132,*             if the map is undefined
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,134,"public VariableFormat(Map valueMap, String prefix, String suffix, char escape) {"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,135,setValueMap(valueMap);
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,136,setVariablePrefix(prefix);
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,137,setVariableSuffix(suffix);
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,138,setEscapeCharacter(escape);
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,142,* Creates a new instance of <code>VariableFormat</code> and initializes it. Uses a default escaping character.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,144,* @param valueMap
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,145,*            the map with the variables' values
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,146,* @param prefix
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,147,*            the prefix for variables
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,148,* @param suffix
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,149,*            the suffix for variables
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,150,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,151,*             if the map is undefined
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,153,"public VariableFormat(Map valueMap, String prefix, String suffix) {"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,154,"this(valueMap, prefix, suffix, DEFAULT_ESCAPE);"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,158,* Creates a new instance of <code>VariableFormat</code> and initializes it. Uses defaults for variable prefix and
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,159,* suffix and the escaping character.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,161,* @param valueMap
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,162,*            the map with the variables' values
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,163,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,164,*             if the map is undefined
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,166,public VariableFormat(Map valueMap) {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,167,"this(valueMap, DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE);"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,171,* Returns the escape character.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,173,* @return the character used for escaping variable references
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,175,public char getEscapeCharacter() {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,176,return this.escapeCharacter;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,180,"* Sets the escape character. If this character is placed before a variable reference in the source text, this"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,181,* variable will be ignored.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,183,* @param escapeCharacter
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,184,*            the escape character (0 for disabling escaping)
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,186,public void setEscapeCharacter(char escapeCharacter) {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,187,this.escapeCharacter = escapeCharacter;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,191,* Returns the map with the variables' values.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,193,* @return the values of the variables
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,195,public Map getValueMap() {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,196,return this.valueMap;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,200,* Sets the map with the variables' values.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,202,* @param valueMap
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,203,*            the values of the variables
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,204,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,205,*             if <code>valueMap</code> is <b>null</b>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,207,public void setValueMap(Map valueMap) throws IllegalArgumentException {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,208,if (valueMap == null) {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,209,"throw new IllegalArgumentException(""Value map must not be null"");"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,211,this.valueMap = valueMap;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,215,* Returns the prefix for variables.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,217,* @return the prefix for variables
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,219,public String getVariablePrefix() {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,220,return this.variablePrefix;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,224,* Sets the prefix for variables.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,226,* @param variablePrefix
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,227,*            the prefix for variables
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,228,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,229,*             if the prefix is <b>null</b>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,231,public void setVariablePrefix(String variablePrefix) throws IllegalArgumentException {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,232,if (variablePrefix == null) {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,233,"throw new IllegalArgumentException(""Variable prefix must not be null!"");"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,235,this.variablePrefix = variablePrefix;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,239,* Returns the suffix for variables.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,241,* @return the suffix for variables
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,243,public String getVariableSuffix() {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,244,return this.variableSuffix;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,248,* Sets the suffix for variables
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,250,* @param variableSuffix
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,251,*            the suffix for variables
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,252,* @throws IllegalArgumentException
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,253,*             if the prefix is <b>null</b>
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,255,public void setVariableSuffix(String variableSuffix) throws IllegalArgumentException {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,256,if (variableSuffix == null) {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,257,"throw new IllegalArgumentException(""Variable suffix must not be null!"");"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,259,this.variableSuffix = variableSuffix;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,263,* Replaces the occurrences of all variables in the given source data by their current values. If the source
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,264,"* consists only of a single variable reference, this method directly returns the value of this variable (which can"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,265,"* be an arbitrary object). If the source contains multiple variable references or static text, the return value"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,266,* will always be a String with the concatenation of all these elements.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,268,* @param source
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,269,*            the text to be interpolated; this can be an arbitrary object whose <code>toString()</code> method
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,270,*            will be called
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,271,* @return the result of the replace operation
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,273,public Object replaceObject(Object source) {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,274,"return doReplace(source, null);"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,278,* Replaces the occurrences of all variables in the given source data by their current values.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,280,* @param source
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,281,*            the text to be interpolated; this can be an arbitrary object whose <code>toString()</code> method
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,282,*            will be called
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,283,* @return the result of the replace operation
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,285,public String replace(Object source) {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,286,Object result = replaceObject(source);
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,287,return (result == null) ? null : result.toString();
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,291,* Replaces the occurrences of all variables in the given source data by their current values obtained from the
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,292,* passed in map.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,294,* @param valueMap
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,295,*            the map with the values
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,296,* @param source
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,297,*            the source text
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,298,* @return the result of the replace operation
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,300,"public static String replace(Map valueMap, Object source) {"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,301,return new VariableFormat(valueMap).replace(source);
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,305,* Replaces the occurrences of all variables in the given source data by their current values obtained from the
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,306,* passed in map. This method allows to specifiy a custom variable prefix and suffix
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,308,* @param valueMap
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,309,*            the map with the values
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,310,* @param prefix
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,311,*            the prefix of variables
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,312,* @param suffix
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,313,*            the suffix of variables
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,314,* @param source
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,315,*            the source text
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,316,* @return the result of the replace operation
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,318,"public static String replace(Map valueMap, String prefix, String suffix, Object source) {"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,319,"return new VariableFormat(valueMap, prefix, suffix).replace(source);"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,323,* Replaces all variables in the given source data with values obtained from system properties.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,325,* @param source
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,326,*            the source text
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,327,* @return the result of the replace operation
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,329,public static String replaceSystemProperties(Object source) {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,330,return new VariableFormat(System.getProperties()).replace(source);
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,334,"* Checks if the variable reference found at the specified position is escaped and if this is the case, where the"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,335,* escaped text starts.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,337,* @param text
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,338,*            the text to be processed
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,339,* @param beginIndex
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,340,*            the start index of the variable reference to check
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,341,* @return the starting index of the escaped text or -1 if this reference is not escaped
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,343,"protected int escaped(String text, int beginIndex) {"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,344,if (beginIndex < 1 || text.charAt(beginIndex - 1) != getEscapeCharacter()) {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,345,return -1;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,347,int idx = beginIndex - 2;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,348,while (idx >= 0 && text.charAt(idx) == getEscapeCharacter()) {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,349,idx--;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,351,return idx + 1;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,355,* Unescapes an escaped variable reference. This method is called if <code>escaped()</code> has determined an
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,356,* escaped variable reference. Its purpose is to remove any escaping characters and to add the resulting text into
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,357,"* the target buffer. This implementation will remove the first escape character. So if the default values are used,"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,358,"* a text portion of <code>$${myvar}</code> will become <code>${myvar}</code>,"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,359,* <code>$$$${var with dollars}</code> will result in <code>$$${var with dollars}</code>. Text between the
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,360,* first variable start token and the last unescaped variable end token can contain variable references and will be
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,361,* recursively replaced. So constructs of the following form can be built:
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,362,"* <code>Variable $${${varName$}} is incorrect!</code> (note how the first &quot;}&quot; character is escaped, so"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,363,* that the second &quot;}&quot; marks the end of this construct.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,365,* @param buf
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,366,*            the target buffer
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,367,* @param text
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,368,*            the text to be processed
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,369,* @param beginIndex
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,370,*            the begin index of the escaped variable reference
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,371,* @param endIndex
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,372,*            the end index of the escaped variable reference
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,373,* @param priorVariables
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,374,*            keeps track of the replaced variables
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,376,"protected void unescape(StringBuffer buf, String text, int beginIndex, int endIndex, List priorVariables) {"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,377,"int startToken = text.indexOf(getVariablePrefix(), beginIndex);"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,378,"buf.append(text.substring(beginIndex + 1, startToken));"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,379,buf.append(getVariablePrefix());
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,380,"String escapedContent = text.substring(startToken + getVariablePrefix().length(), endIndex);"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,381,"buf.append(doReplace(StringUtils.replace(escapedContent, String.valueOf(getEscapeCharacter())"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,382,"+ getVariableSuffix(), getVariableSuffix()), priorVariables));"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,386,* Searches for a variable end token in the given string from the specified start position.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,388,* @param text
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,389,*            the text to search
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,390,* @param beginIndex
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,391,*            the start index
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,392,* @return the index of the end token or -1 if none was found
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,394,"protected int findEndToken(String text, int beginIndex) {"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,395,int pos = beginIndex - getVariableSuffix().length();
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,397,do {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,398,"pos = text.indexOf(getVariableSuffix(), pos + getVariableSuffix().length());"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,399,} while (pos > 0 && getEscapeCharacter() == text.charAt(pos - 1));
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,401,return pos;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,405,* Resolves the specified variable. This method is called whenever a variable reference is detected in the source
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,406,* text. It is passed the variable's name and must return the corresponding value. This implementation accesses the
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,407,* value map using the variable's name as key. Derived classes may overload this method to implement a different
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,408,* strategy for resolving variables.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,410,* @param name
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,411,*            the name of the variable
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,412,* @return the variable's value or <b>null</b> if the variable is unknown
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,414,protected Object resolveVariable(String name) {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,415,return getValueMap().get(name);
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,419,"* Recursive handler for multple levels of interpolation. This is the main interpolation method, which resolves the"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,420,* values of all variable references contained in the passed in text.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,422,* @param base
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,423,*            string with the ${key} variables
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,424,* @param priorVariables
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,425,"*            serves two purposes: to allow checking for loops, and creating a meaningful exception message should a"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,426,*            loop occur. It's 0'th element will be set to the value of base from the first call. All subsequent
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,427,"*            interpolated variables are added afterward. When called for the first time, this argument should be"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,428,*            <b>null </b>.
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,429,* @param obj
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,430,*            the text to be interpolated (as object)
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,431,* @param priorVariables
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,432,*            keeps track of the replaced variables
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,433,* @return the result of the interpolation process
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,435,"private Object doReplace(Object obj, List priorVariables) {"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,436,if (obj == null) {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,437,return null;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,440,String base = obj.toString();
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,441,if (base.indexOf(getVariablePrefix()) < 0) {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,442,return obj;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,445,// on the first call initialize priorVariables
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,446,// and add base as the first element
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,447,if (priorVariables == null) {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,448,priorVariables = new ArrayList();
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,449,priorVariables.add(base);
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,452,int begin = -1;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,453,int end = -1;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,454,int prec = 0 - getVariableSuffix().length();
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,455,String variable = null;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,456,StringBuffer result = new StringBuffer();
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,457,Object objResult = null;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,458,int objLen = 0;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,460,"while (((begin = base.indexOf(getVariablePrefix(), prec + getVariableSuffix().length())) > -1)"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,461,"&& ((end = findEndToken(base, begin)) > -1)) {"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,462,"int escBegin = escaped(base, begin);"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,463,if (escBegin >= 0) {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,464,"result.append(base.substring(prec + getVariableSuffix().length(), escBegin));"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,465,"unescape(result, base, escBegin, end + getVariableSuffix().length(), priorVariables);"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,468,else {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,469,"result.append(base.substring(prec + getVariableSuffix().length(), begin));"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,470,"variable = base.substring(begin + getVariablePrefix().length(), end);"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,472,"// if we've got a loop, create a useful exception message and"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,473,// throw
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,474,if (priorVariables.contains(variable)) {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,475,String initialBase = priorVariables.remove(0).toString();
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,476,priorVariables.add(variable);
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,477,StringBuffer priorVariableSb = new StringBuffer();
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,479,// create a nice trace of interpolated variables like so:
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,480,// var1->var2->var3
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,481,for (Iterator it = priorVariables.iterator(); it.hasNext();) {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,482,priorVariableSb.append(it.next());
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,483,if (it.hasNext()) {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,484,"priorVariableSb.append(""->"");"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,487,"throw new IllegalStateException(""Infinite loop in property interpolation of """
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,488,+ initialBase
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,490,+ priorVariableSb.toString());
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,492,"// otherwise, add this variable to the interpolation list."
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,493,priorVariables.add(variable);
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,495,objResult = resolveVariable(variable);
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,496,if (objResult != null) {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,497,"objResult = doReplace(objResult, priorVariables);"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,498,result.append(objResult);
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,499,objLen = objResult.toString().length();
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,501,// pop the interpolated variable off the stack
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,502,// this maintains priorVariables correctness for
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,503,"// properties with multiple interpolations, e.g."
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,504,// prop.name=${some.other.prop1}/blahblah/${some.other.prop2}
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,505,priorVariables.remove(priorVariables.size() - 1);
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,506,} else {
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,507,// variable not defined - so put it back in the value
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,508,result.append(getVariablePrefix()).append(variable).append(getVariableSuffix());
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,512,prec = end;
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,515,"result.append(base.substring(prec + getVariableSuffix().length(), base.length()));"
True,src/java/org/apache/commons/lang/text/VariableFormat.java,src/java/org/apache/commons/lang/text/VariableFormat.java,516,return (objResult != null && objLen > 0 && objLen == result.length()) ? objResult : result.toString();
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,2,* Copyright 2005 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,17,package org.apache.commons.lang.text;
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,19,import java.util.HashMap;
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,20,import java.util.Map;
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,22,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,25,* Test class for VariableResolver.
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,27,* @author Oliver Heger
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,28,* @version $Id$
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,30,public class VariableFormatTest extends TestCase {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,31,"static final String REPLACE_TEMPLATE = ""The ${animal} jumps over the ${target}."";"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,33,private VariableFormat format;
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,35,private Map values;
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,37,protected void setUp() throws Exception {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,38,super.setUp();
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,39,Map map = new HashMap();
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,40,"map.put(""animal"", ""quick brown fox"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,41,"map.put(""target"", ""lazy dog"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,42,setValues(map);
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,43,setFormat(new VariableFormat(map));
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,47,* Tests creating new <code>VariableFormat</code> objects.
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,49,public void testInitialize() {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,50,assertNotNull(format.getValueMap());
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,51,"assertEquals(VariableFormat.DEFAULT_PREFIX, format.getVariablePrefix());"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,52,"assertEquals(VariableFormat.DEFAULT_SUFFIX, format.getVariableSuffix());"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,53,"assertEquals(VariableFormat.DEFAULT_ESCAPE, format.getEscapeCharacter());"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,55,"format = new VariableFormat(values, ""<<"", "">>"", '\\');"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,56,"assertEquals(""<<"", format.getVariablePrefix());"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,57,"assertEquals("">>"", format.getVariableSuffix());"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,58,"assertEquals('\\', format.getEscapeCharacter());"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,60,try {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,61,format = new VariableFormat(null);
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,62,"fail(""Could create format object with null map!"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,63,} catch (IllegalArgumentException iex) {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,64,// ok
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,67,try {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,68,"format = new VariableFormat(values, ""${"", null);"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,69,"fail(""Could create format object with undefined suffix!"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,70,} catch (IllegalArgumentException iex) {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,71,// ok
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,74,try {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,75,"format = new VariableFormat(values, null, ""]"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,76,"fail(""Could create format object with undefined prefix!"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,77,} catch (IllegalArgumentException iex) {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,78,// ok
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,83,* Tests typical replace operations.
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,85,public void testReplace() {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,86,"assertEquals(""The quick brown fox jumps over the lazy dog."", format.replaceObject(REPLACE_TEMPLATE));"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,88,"format.getValueMap().put(""animal"", ""cow"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,89,"format.getValueMap().put(""target"", ""moon"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,90,"assertEquals(""The cow jumps over the moon."", format.replace(REPLACE_TEMPLATE));"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,92,"assertEquals(""Variable ${var} is unknown!"", format.replace(""Variable ${var} is unknown!""));"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,96,* Tests source texts with nothing to replace.
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,98,public void testReplaceNothing() {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,99,assertNull(format.replace(null));
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,100,"assertEquals(""Nothing to replace."", format.replace(""Nothing to replace.""));"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,101,"assertEquals(""42"", format.replace(new Integer(42)));"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,105,* Tests escaping variable references.
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,107,public void testEscape() {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,108,"assertEquals(""${animal}"", format.replace(""$${animal}""));"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,109,"format.getValueMap().put(""var_name"", ""x"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,110,"assertEquals(""Many $$$$${target} $s"", format.replace(""Many $$$$$${target} $s""));"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,111,"assertEquals(""Variable ${x} must be used!"", format.replace(""Variable $${${var_name$}} must be used!""));"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,115,* Tests recursive replacements.
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,117,public void testRecursiveReplacement() {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,118,Map valuesMap = new HashMap();
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,119,"valuesMap.put(""animal"", ""${critter}"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,120,"valuesMap.put(""target"", ""${pet}"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,121,"valuesMap.put(""pet"", ""${petCharacteristic} dog"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,122,"valuesMap.put(""petCharacteristic"", ""lazy"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,123,"valuesMap.put(""critter"", ""${critterSpeed} ${critterColor} ${critterType}"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,124,"valuesMap.put(""critterSpeed"", ""quick"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,125,"valuesMap.put(""critterColor"", ""brown"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,126,"valuesMap.put(""critterType"", ""fox"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,127,format.setValueMap(valuesMap);
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,128,"assertEquals(""The quick brown fox jumps over the lazy dog."", format.replace(REPLACE_TEMPLATE));"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,132,* Tests a cyclic replace operation. The cycle should be detected and cause an exception to be thrown.
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,134,public void testCyclicReplacement() {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,135,Map valuesMap = new HashMap();
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,136,"valuesMap.put(""animal"", ""${critter}"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,137,"valuesMap.put(""target"", ""${pet}"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,138,"valuesMap.put(""pet"", ""${petCharacteristic} dog"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,139,"valuesMap.put(""petCharacteristic"", ""lazy"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,140,"valuesMap.put(""critter"", ""${critterSpeed} ${critterColor} ${critterType}"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,141,"valuesMap.put(""critterSpeed"", ""quick"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,142,"valuesMap.put(""critterColor"", ""brown"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,143,"valuesMap.put(""critterType"", ""${animal}"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,144,format.setValueMap(valuesMap);
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,145,try {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,146,format.replace(REPLACE_TEMPLATE);
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,147,"fail(""Cyclic replacement was not detected!"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,148,} catch (IllegalStateException isx) {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,149,// ok
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,154,* Tests operating on objects.
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,156,public void testReplaceObject() {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,157,"format.getValueMap().put(""value"", new Integer(42));"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,158,"assertEquals(new Integer(42), format.replaceObject(""${value}""));"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,159,"assertEquals(""The answer is 42."", format.replaceObject(""The answer is ${value}.""));"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,163,* Tests chaning variable prefix and suffix and the escaping character.
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,165,public void testNonDefaultTokens() {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,166,"format = new VariableFormat(values, ""<<"", "">>"", '\\');"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,167,"assertEquals(""The quick brown fox jumps over the lazy dog."", format"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,168,".replace(""The <<animal>> jumps over the <<target>>.""));"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,169,"assertEquals(""The quick brown fox jumps over the <<target>>."", format"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,170,".replace(""The <<animal>> jumps over the \\<<target>>.""));"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,174,* Tests invoking the static convenience methods.
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,176,public void testNonInstanceMethods() {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,177,"assertEquals(""The quick brown fox jumps over the lazy dog."", VariableFormat.replace(values, REPLACE_TEMPLATE));"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,178,"values.put(""animal"", ""cow"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,179,"values.put(""target"", ""moon"");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,180,"assertEquals(""The cow jumps over the moon."", VariableFormat.replace(values, ""&"", "";"","
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,181,"""The &animal; jumps over the &target;.""));"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,185,* Tests interpolation with system properties.
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,187,public void testReplaceSystemProperties() {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,188,StringBuffer buf = new StringBuffer();
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,189,"buf.append(""Hi "").append(System.getProperty(""user.name""));"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,190,"buf.append("", you are working with "");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,191,"buf.append(System.getProperty(""os.name""));"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,192,"buf.append("", your home directory is "");"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,193,"buf.append(System.getProperty(""user.home"")).append('.');"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,194,"assertEquals(buf.toString(), VariableFormat.replaceSystemProperties(""Hi ${user.name}, you are """
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,195,"+ ""working with ${os.name}, your home """
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,196,"+ ""directory is ${user.home}.""));"
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,199,Map getValues() {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,200,return this.values;
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,203,void setValues(Map values) {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,204,this.values = values;
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,207,VariableFormat getFormat() {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,208,return this.format;
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,211,void setFormat(VariableFormat format) {
True,src/test/org/apache/commons/lang/text/VariableFormatTest.java,src/test/org/apache/commons/lang/text/VariableFormatTest.java,212,this.format = format;

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,157, <p>Tests whether the specified <code>Number</code> occurs within
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,158, this range.</p>
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,160, <p>The exact comparison implementation varies by subclass. It is
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,161, intended that an <code>int</code> specific subclass will compare using
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,162, <code>int</code> comparison.</p>
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,157,* <p>Tests whether the specified element occurs within this range.</p>
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,166," @param number  the number to test, may be <code>null</code>"
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,167, @return <code>true</code> if the specified number occurs within this range
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,161,"* @param element  the element to test, may be <code>null</code>"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,162,* @return <code>true</code> if the specified element occurs within this range
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,170,ublic boolean contains(T t) {
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,171,/ TODO: Rewrite in terms of !lessThan and !greaterThan?
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,172,"eturn (comparator.compare(t, getMinimum()) > -1) && (comparator.compare(t, getMaximum()) < 1);"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,165,public boolean contains(T element) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,166,if(element == null) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,167,return false;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,169,"return (comparator.compare(element, getMinimum()) > -1) && (comparator.compare(element, getMaximum()) < 1);"
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,180,"eturn this.comparator.compare(this.getMinimum(), element) < 1;"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,177,"return this.comparator.compare(getMinimum(), element) < 1;"
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,99,public void testContains() {
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,100,assertFalse(intRange.contains(null));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,102,assertFalse(intRange.contains(5));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,103,assertTrue(intRange.contains(10));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,104,assertTrue(intRange.contains(15));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,105,assertTrue(intRange.contains(20));
True,src/test/org/apache/commons/lang/RangeTest.java,src/test/org/apache/commons/lang/RangeTest.java,106,assertFalse(intRange.contains(25));

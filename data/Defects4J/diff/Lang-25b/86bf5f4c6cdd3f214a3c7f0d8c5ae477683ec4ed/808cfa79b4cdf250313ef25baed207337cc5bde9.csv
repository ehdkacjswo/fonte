is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,85," @version $Id: MethodUtils.java,v 1.4 2002/11/18 23:00:26 rdonkin Exp $"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,85,"* @version $Id: MethodUtils.java,v 1.5 2002/11/20 21:45:47 rdonkin Exp $"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,573,"f (!isAssignmentCompatible(methodsParams[n], parameterTypes[n])) {"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,573,"if (!ReflectionUtils.isCompatable(parameterTypes[n], methodsParams[n])) {"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,620, <p>Determine whether a type can be used as a parameter in a method invocation.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,621, This method handles primitive conversions correctly.</p>
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,623," <p>In order words, it will match a <code>Boolean</code> to a <code>boolean</code>,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,624," a <code>Long</code> to a <code>long</code>,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,625," a <code>Float</code> to a <code>float</code>,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,626," a <code>Integer</code> to a <code>int</code>,"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,627, and a <code>Double</code> to a <code>double</code>.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,628, Now logic widening matches are allowed.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,629," For example, a <code>Long</code> will not match a <code>int</code>."
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,631, @param parameterType the type of parameter accepted by the method
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,632, @param parameterization the type of parameter being tested
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,634, @return true if the assignement is compatible.
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,636,"rivate static final boolean isAssignmentCompatible(Class parameterType, Class parameterization) {"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,637,/ try plain assignment
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,638,f (parameterType.isAssignableFrom(parameterization)) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,639,eturn true;
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,642,f (parameterType.isPrimitive()) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,643,/ does anyone know a better strategy than comparing names?
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,644,"/ also, this method does *not* do widening - you must specify exactly"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,645,/ is this the right behaviour?
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,646,f (boolean.class.equals(parameterType)) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,647,eturn Boolean.class.equals(parameterization);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,649,f (float.class.equals(parameterType)) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,650,eturn Float.class.equals(parameterization);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,652,f (long.class.equals(parameterType)) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,653,eturn Long.class.equals(parameterization);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,655,f (int.class.equals(parameterType)) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,656,eturn Integer.class.equals(parameterization);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,658,f (double.class.equals(parameterType)) {
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,659,eturn Double.class.equals(parameterization);
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,663,eturn false;
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,72," @version $Id: ReflectionUtils.java,v 1.2 2002/11/18 23:01:36 rdonkin Exp $"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,72,"* @version $Id: ReflectionUtils.java,v 1.3 2002/11/20 21:45:47 rdonkin Exp $"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,200, a <code>Boolean</code> Class and so on.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,200,* a <code>Boolean</code> Class and so on.</p>
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,202,* <p>This method also handles widening for primitives as given in section 5.1.2 of the
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,203,"* <em><a href=""http://java.sun.com/docs/books/jls/"">The Java Language Specification</a></em>."
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,217,"f (ClassUtils.isAssignable(requestedTypes[i], paramTypes[i]) == false) {"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,220,"if (isCompatable(requestedTypes[i], paramTypes[i]) == false) {"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,229,* <p>Determine whether a type can be used as a parameter in a method invocation.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,230,* This method handles primitive conversions correctly.</p>
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,232,* <p>This method also handles widening for primitives as given in section 5.1.2 of the
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,233,"* <em><a href=""http://java.sun.com/docs/books/jls/"">The Java Language Specification</a></em>."
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,235,* @param parameterType the type of parameter accepted by the method
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,236,* @param requestedType the type of parameter being requested
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,238,* @return true if the assignement is compatible.
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,240,"public static boolean isCompatable(Class requestedType, Class parameterType) {"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,241,// try plain assignment
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,242,"if (ClassUtils.isAssignable(requestedType, parameterType)) {"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,243,return true;
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,246,if (parameterType.isPrimitive()) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,247,"// also, this method does *not* do widening - you must specify exactly"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,248,// is this the right behaviour?
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,249,if (boolean.class.equals(parameterType)) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,250,return Boolean.class.equals(requestedType);
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,253,if (byte.class.equals(parameterType)) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,254,return Byte.class.equals(requestedType);
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,257,if (short.class.equals(parameterType)) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,258,return (Short.class.equals(requestedType)
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,259,|| Byte.class.equals(requestedType));
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,262,if (char.class.equals(parameterType)) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,263,return Character.class.equals(requestedType);
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,266,if (int.class.equals(parameterType)) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,267,return (Integer.class.equals(requestedType)
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,268,|| Character.class.equals(requestedType)
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,269,|| Short.class.equals(requestedType)
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,270,|| Byte.class.equals(requestedType));
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,272,if (long.class.equals(parameterType)) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,273,return (Long.class.equals(requestedType)
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,274,|| Integer.class.equals(requestedType)
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,275,|| Character.class.equals(requestedType)
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,276,|| Short.class.equals(requestedType)
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,277,|| Byte.class.equals(requestedType));
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,280,if (float.class.equals(parameterType)) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,281,return (Float.class.equals(requestedType)
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,282,|| Long.class.equals(requestedType)
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,283,|| Integer.class.equals(requestedType)
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,284,|| Character.class.equals(requestedType)
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,285,|| Short.class.equals(requestedType)
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,286,|| Byte.class.equals(requestedType));
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,289,if (double.class.equals(parameterType)) {
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,290,return (Double.class.equals(requestedType)
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,291,|| Float.class.equals(requestedType)
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,292,|| Long.class.equals(requestedType)
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,293,|| Integer.class.equals(requestedType)
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,294,|| Character.class.equals(requestedType)
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,295,|| Short.class.equals(requestedType)
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,296,|| Byte.class.equals(requestedType));
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,300,return false;
True,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,70,private short _short;
True,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,72,public short getShort() {
True,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,73,return _short;
True,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,76,public void setShort(short _short) {
True,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,src/test/org/apache/commons/lang/reflect/PrimitiveBean.java,77,this._short = _short;
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,206,public void testWidening() throws Exception
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,208,// test byte conversions
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,209,"assertEquals(""byte -> char"", ReflectionUtils.isCompatable(Byte.class, char.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,210,"assertEquals(""byte -> byte"", ReflectionUtils.isCompatable(Byte.class, byte.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,211,"assertEquals(""byte -> short"", ReflectionUtils.isCompatable(Byte.class, short.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,212,"assertEquals(""byte -> int"", ReflectionUtils.isCompatable(Byte.class, int.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,213,"assertEquals(""byte -> long"", ReflectionUtils.isCompatable(Byte.class, long.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,214,"assertEquals(""byte -> float"", ReflectionUtils.isCompatable(Byte.class, float.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,215,"assertEquals(""byte -> double"", ReflectionUtils.isCompatable(Byte.class, double.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,216,"assertEquals(""byte -> boolean"", ReflectionUtils.isCompatable(Byte.class, boolean.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,218,// test short conversions
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,219,"assertEquals(""short -> char"", ReflectionUtils.isCompatable(Short.class, char.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,220,"assertEquals(""short -> byte"", ReflectionUtils.isCompatable(Short.class, byte.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,221,"assertEquals(""short -> short"", ReflectionUtils.isCompatable(Short.class, short.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,222,"assertEquals(""short -> int"", ReflectionUtils.isCompatable(Short.class, int.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,223,"assertEquals(""short -> long"", ReflectionUtils.isCompatable(Short.class, long.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,224,"assertEquals(""short -> float"", ReflectionUtils.isCompatable(Short.class, float.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,225,"assertEquals(""short -> double"", ReflectionUtils.isCompatable(Short.class, double.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,226,"assertEquals(""short -> boolean"", ReflectionUtils.isCompatable(Short.class, boolean.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,228,// test char conversions
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,229,"assertEquals(""char -> char"", ReflectionUtils.isCompatable(Character.class, char.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,230,"assertEquals(""char -> byte"", ReflectionUtils.isCompatable(Character.class, byte.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,231,"assertEquals(""char -> short"", ReflectionUtils.isCompatable(Character.class, short.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,232,"assertEquals(""char -> int"", ReflectionUtils.isCompatable(Character.class, int.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,233,"assertEquals(""char -> long"", ReflectionUtils.isCompatable(Character.class, long.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,234,"assertEquals(""char -> float"", ReflectionUtils.isCompatable(Character.class, float.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,235,"assertEquals(""char -> double"", ReflectionUtils.isCompatable(Character.class, double.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,236,"assertEquals(""char -> boolean"", ReflectionUtils.isCompatable(Character.class, boolean.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,238,// test int conversions
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,239,"assertEquals(""int -> char"", ReflectionUtils.isCompatable(Integer.class, char.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,240,"assertEquals(""int -> byte"", ReflectionUtils.isCompatable(Integer.class, byte.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,241,"assertEquals(""int -> short"", ReflectionUtils.isCompatable(Integer.class, short.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,242,"assertEquals(""int -> int"", ReflectionUtils.isCompatable(Integer.class, int.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,243,"assertEquals(""int -> long"", ReflectionUtils.isCompatable(Integer.class, long.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,244,"assertEquals(""int -> float"", ReflectionUtils.isCompatable(Integer.class, float.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,245,"assertEquals(""int -> double"", ReflectionUtils.isCompatable(Integer.class, double.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,246,"assertEquals(""int -> boolean"", ReflectionUtils.isCompatable(Integer.class, boolean.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,248,// test long conversions
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,249,"assertEquals(""long -> char"", ReflectionUtils.isCompatable(Long.class, char.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,250,"assertEquals(""long -> byte"", ReflectionUtils.isCompatable(Long.class, byte.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,251,"assertEquals(""long -> short"", ReflectionUtils.isCompatable(Long.class, short.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,252,"assertEquals(""long -> int"", ReflectionUtils.isCompatable(Long.class, int.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,253,"assertEquals(""long -> long"", ReflectionUtils.isCompatable(Long.class, long.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,254,"assertEquals(""long -> float"", ReflectionUtils.isCompatable(Long.class, float.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,255,"assertEquals(""long -> double"", ReflectionUtils.isCompatable(Long.class, double.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,256,"assertEquals(""long -> boolean"", ReflectionUtils.isCompatable(Long.class, boolean.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,258,// test float conversions
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,259,"assertEquals(""float -> char"", ReflectionUtils.isCompatable(Float.class, char.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,260,"assertEquals(""float -> byte"", ReflectionUtils.isCompatable(Float.class, byte.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,261,"assertEquals(""float -> short"", ReflectionUtils.isCompatable(Float.class, short.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,262,"assertEquals(""float -> int"", ReflectionUtils.isCompatable(Float.class, int.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,263,"assertEquals(""float -> long"", ReflectionUtils.isCompatable(Float.class, long.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,264,"assertEquals(""float -> float"", ReflectionUtils.isCompatable(Float.class, float.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,265,"assertEquals(""float -> double"", ReflectionUtils.isCompatable(Float.class, double.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,266,"assertEquals(""float -> boolean"", ReflectionUtils.isCompatable(Float.class, boolean.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,268,// test float conversions
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,269,"assertEquals(""double -> char"", ReflectionUtils.isCompatable(Double.class, char.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,270,"assertEquals(""double -> byte"", ReflectionUtils.isCompatable(Double.class, byte.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,271,"assertEquals(""double -> short"", ReflectionUtils.isCompatable(Double.class, short.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,272,"assertEquals(""double -> int"", ReflectionUtils.isCompatable(Double.class, int.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,273,"assertEquals(""double -> long"", ReflectionUtils.isCompatable(Double.class, long.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,274,"assertEquals(""double -> float"", ReflectionUtils.isCompatable(Double.class, float.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,275,"assertEquals(""double -> double"", ReflectionUtils.isCompatable(Double.class, double.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,276,"assertEquals(""double -> boolean"", ReflectionUtils.isCompatable(Double.class, boolean.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,278,// test float conversions
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,279,"assertEquals(""boolean -> char"", ReflectionUtils.isCompatable(Boolean.class, char.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,280,"assertEquals(""boolean -> byte"", ReflectionUtils.isCompatable(Boolean.class, byte.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,281,"assertEquals(""boolean -> short"", ReflectionUtils.isCompatable(Boolean.class, short.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,282,"assertEquals(""boolean -> int"", ReflectionUtils.isCompatable(Boolean.class, int.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,283,"assertEquals(""boolean -> long"", ReflectionUtils.isCompatable(Boolean.class, long.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,284,"assertEquals(""boolean -> float"", ReflectionUtils.isCompatable(Boolean.class, float.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,285,"assertEquals(""boolean -> double"", ReflectionUtils.isCompatable(Boolean.class, double.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,286,"assertEquals(""boolean -> boolean"", ReflectionUtils.isCompatable(Boolean.class, boolean.class), true);"

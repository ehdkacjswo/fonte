is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,101, slower than testing explicitly and does not handle superclasses.</p>
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,101,* slower than testing explicitly.</p>
False,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,115," @version $Id: ToStringBuilder.java,v 1.10 2002/12/23 00:20:31 scolebourne Exp $"
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,115,"* @version $Id: ToStringBuilder.java,v 1.11 2002/12/31 20:17:53 scolebourne Exp $"
False,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,246, <p>Static fields will be not be included.</p>
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,246,* <p>Static fields will not be included. Superclass fields will be appended.</p>
False,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,253,"eturn reflectionToString(object, null, false);"
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,253,"return reflectionToString(object, null, false, null);"
False,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,268, <p>Static fields will be not be included.</p>
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,268,* <p>Static fields will not be included. Superclass fields will be appended.</p>
False,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,281,"eturn reflectionToString(object, style, false);"
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,281,"return reflectionToString(object, style, false, null);"
False,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,298, <p>Static fields will not be tested.</p>
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,298,* <p>Static fields will not be included. Superclass fields will be appended.</p>
False,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,311,"ublic static String reflectionToString(Object object, ToStringStyle style,"
False,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,312,oolean outputTransients) {
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,311,"public static String reflectionToString(Object object, ToStringStyle style, boolean outputTransients) {"
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,312,"return reflectionToString(object, style, outputTransients, null);"
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,316,* <p>This method uses reflection to build a suitable
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,317,* <code>toString</code>.</p>
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,319,* <p>It uses <code>Field.setAccessible</code> to gain access to private
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,320,* fields. This means that it will throw a security exception if run
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,321,"* under a security manger, if the permissions are not set up correctly."
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,322,* It is also not as efficient as testing explicitly. </p>
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,324,"* <p>If the <code>outputTransients</code> is <code>true</code>,"
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,325,"* transient members will be output, otherwise they are ignored,"
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,326,"* as they are likely derived fields, and not part of the value of the"
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,327,* Object.</p>
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,329,* <p>Static fields will not be included. Superclass fields will be appended
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,330,* up to and including the specified superclass. A null superclass is treated
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,331,* as java.lang.Object.</p>
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,333,* <p>
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,334,"* If the style is <code>null</code>, the default"
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,335,* <code>ToStringStyle</code> is used.</p>
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,337,* @param object  the Object to be output
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,338,"* @param style  the style of the <code>toString</code> to create,"
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,339,*  may be <code>null</code>
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,340,* @param outputTransients  whether to include transient fields
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,341,"* @param reflectUpToClass  the superclass to reflect up to (inclusive), may be null"
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,342,* @return the String result
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,343,* @throws IllegalArgumentException if the Object is <code>null</code>
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,345,"public static String reflectionToString(Object object, ToStringStyle style, boolean outputTransients, Class reflectUpToClass) {"
False,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,319,ield[] fields = object.getClass().getDeclaredFields();
False,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,320,"ield.setAccessible(fields, true);"
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,353,Class clazz = object.getClass();
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,354,"reflectionAppend(object, clazz, builder, outputTransients);"
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,355,while (clazz.getSuperclass() != null && clazz != reflectUpToClass) {
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,356,clazz = clazz.getSuperclass();
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,357,"reflectionAppend(object, clazz, builder, outputTransients);"
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,359,return builder.toString();
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,363,* Appends the fields and values defined by the given object of the
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,364,* given Class.
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,366,* @param object  the object to append details of
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,367,* @param clazz  the class to append details of
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,368,* @param builder  the builder to append to
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,369,* @param outputTransients  whether to output transient fields
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,371,"private static void reflectionAppend(Object object, Class clazz, ToStringBuilder builder, boolean outputTransients) {"
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,372,Field[] fields = clazz.getDeclaredFields();
True,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,373,"Field.setAccessible(fields, true);"
False,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,332,"hrow new InternalError(""Unexpected IllegalAccessException"");"
False,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,src/java/org/apache/commons/lang/builder/ToStringBuilder.java,337,eturn builder.toString();
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,59,import java.util.List;
False,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,68," @version $Id: ToStringBuilderTest.java,v 1.2 2002/12/08 20:48:46 scolebourne Exp $"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,69,"* @version $Id: ToStringBuilderTest.java,v 1.3 2002/12/31 20:17:53 scolebourne Exp $"
False,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,166,ublic void testReflection() {
False,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,167,"ssertEquals(baseStr + ""[value=5]"", ToStringBuilder.reflectionToString(base));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,167,public void testReflection() {
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,168,"assertEquals(baseStr + ""[value=5]"", ToStringBuilder.reflectionToString(base));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,171,private String toBaseString(Object o) {
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,172,"return o.getClass().getName() + ""@"" + Integer.toHexString(System.identityHashCode(o));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,175,public void testReflectionHierarchyArrayList() {
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,176,List base = new ArrayList();
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,177,String baseStr = this.toBaseString(base);
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,178,"assertEquals(baseStr + ""[elementData={<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>},size=0,modCount=0]"", ToStringBuilder.reflectionToString(base, null, true));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,179,"assertEquals(baseStr + ""[size=0]"", ToStringBuilder.reflectionToString(base, null, false));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,182,public void testReflectionHierarchy() {
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,183,ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,184,String baseStr = this.toBaseString(baseA);
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,185,"assertEquals(baseStr + ""[a=a]"", ToStringBuilder.reflectionToString(baseA));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,186,"assertEquals(baseStr + ""[a=a]"", ToStringBuilder.reflectionToString(baseA, null));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,187,"assertEquals(baseStr + ""[a=a]"", ToStringBuilder.reflectionToString(baseA, null, false));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,188,"assertEquals(baseStr + ""[a=a,transientA=t]"", ToStringBuilder.reflectionToString(baseA, null, true));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,189,"assertEquals(baseStr + ""[a=a]"", ToStringBuilder.reflectionToString(baseA, null, false, null));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,190,"assertEquals(baseStr + ""[a=a]"", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,191,"assertEquals(baseStr + ""[a=a]"", ToStringBuilder.reflectionToString(baseA, null, false, List.class));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,192,"assertEquals(baseStr + ""[a=a]"", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,194,ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,195,baseStr = this.toBaseString(baseB);
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,196,"assertEquals(baseStr + ""[b=b,a=a]"", ToStringBuilder.reflectionToString(baseB));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,197,"assertEquals(baseStr + ""[b=b,a=a]"", ToStringBuilder.reflectionToString(baseB));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,198,"assertEquals(baseStr + ""[b=b,a=a]"", ToStringBuilder.reflectionToString(baseB, null));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,199,"assertEquals(baseStr + ""[b=b,a=a]"", ToStringBuilder.reflectionToString(baseB, null, false));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,200,"assertEquals(baseStr + ""[b=b,transientB=t,a=a,transientA=t]"", ToStringBuilder.reflectionToString(baseB, null, true));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,201,"assertEquals(baseStr + ""[b=b,a=a]"", ToStringBuilder.reflectionToString(baseB, null, false, null));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,202,"assertEquals(baseStr + ""[b=b,a=a]"", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,203,"assertEquals(baseStr + ""[b=b,a=a]"", ToStringBuilder.reflectionToString(baseB, null, false, List.class));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,204,"assertEquals(baseStr + ""[b=b,a=a]"", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,205,"assertEquals(baseStr + ""[b=b]"", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));"
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,208,static class ReflectionTestFixtureA {
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,209,private char a='a';
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,210,private transient char transientA='t';
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,213,static class ReflectionTestFixtureB extends ReflectionTestFixtureA {
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,214,private char b='b';
True,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java,215,private transient char transientB='t';

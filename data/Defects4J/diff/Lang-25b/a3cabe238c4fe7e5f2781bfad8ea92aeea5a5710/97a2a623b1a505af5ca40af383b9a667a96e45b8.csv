is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,70,* Constructs a new MutableByte parsing the given string.
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,72,* @param value
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,73,*                  the string to parse.
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,74,* @throws NumberFormatException
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,75,*                  if the string cannot be parsed into a byte
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,77,public MutableByte(String value) throws NumberFormatException {
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,78,super();
True,src/java/org/apache/commons/lang/mutable/MutableByte.java,src/java/org/apache/commons/lang/mutable/MutableByte.java,79,this.value = Byte.parseByte(value);
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,70,* Constructs a new MutableDouble parsing the given string.
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,72,* @param value
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,73,*                  the string to parse.
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,74,* @throws NumberFormatException
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,75,*                  if the string cannot be parsed into a double
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,77,public MutableDouble(String value) throws NumberFormatException {
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,78,super();
True,src/java/org/apache/commons/lang/mutable/MutableDouble.java,src/java/org/apache/commons/lang/mutable/MutableDouble.java,79,this.value = Double.parseDouble(value);
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,70,* Constructs a new MutableFloat parsing the given string.
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,72,* @param value
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,73,*                  the string to parse.
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,74,* @throws NumberFormatException
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,75,*                  if the string cannot be parsed into a float
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,77,public MutableFloat(String value) throws NumberFormatException {
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,78,super();
True,src/java/org/apache/commons/lang/mutable/MutableFloat.java,src/java/org/apache/commons/lang/mutable/MutableFloat.java,79,this.value = Float.parseFloat(value);
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,70,* Constructs a new MutableInt parsing the given string.
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,72,* @param value
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,73,*                  the string to parse.
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,74,* @throws NumberFormatException
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,75,*                  if the string cannot be parsed into an int
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,77,public MutableInt(String value) throws NumberFormatException {
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,78,super();
True,src/java/org/apache/commons/lang/mutable/MutableInt.java,src/java/org/apache/commons/lang/mutable/MutableInt.java,79,this.value = Integer.parseInt(value);
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,70,* Constructs a new MutableLong parsing the given string.
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,72,* @param value
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,73,*                  the string to parse.
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,74,* @throws NumberFormatException
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,75,*                  if the string cannot be parsed into a long
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,77,public MutableLong(String value) throws NumberFormatException {
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,78,super();
True,src/java/org/apache/commons/lang/mutable/MutableLong.java,src/java/org/apache/commons/lang/mutable/MutableLong.java,79,this.value = Long.parseLong(value);
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,70,* Constructs a new MutableShort parsing the given string.
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,72,* @param value
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,73,*                  the string to parse.
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,74,* @throws NumberFormatException
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,75,*                  if the string cannot be parsed into a short
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,77,public MutableShort(String value) throws NumberFormatException {
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,78,super();
True,src/java/org/apache/commons/lang/mutable/MutableShort.java,src/java/org/apache/commons/lang/mutable/MutableShort.java,79,this.value = Short.parseShort(value);
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,53,"assertEquals((byte) 2, new MutableByte(""2"").byteValue());"
False,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,53,ew MutableByte(null);
True,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,src/test/org/apache/commons/lang/mutable/MutableByteTest.java,56,new MutableByte((Number)null);
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,53,"assertEquals(2d, new MutableDouble(""2.0"").doubleValue(), 0.0001d);"
False,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,53,ew MutableDouble(null);
True,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java,56,new MutableDouble((Number)null);
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,53,"assertEquals(2f, new MutableDouble(""2.0"").floatValue(), 0.0001f);"
False,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,53,ew MutableFloat(null);
True,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,src/test/org/apache/commons/lang/mutable/MutableFloatTest.java,56,new MutableFloat((Number)null);
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,53,"assertEquals(2, new MutableInt(""2"").intValue());"
False,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,53,ew MutableInt(null);
True,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,src/test/org/apache/commons/lang/mutable/MutableIntTest.java,56,new MutableInt((Number)null);
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,53,"assertEquals(2, new MutableLong(""2"").longValue());"
False,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,53,ew MutableLong(null);
True,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,src/test/org/apache/commons/lang/mutable/MutableLongTest.java,56,new MutableLong((Number)null);
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,53,"assertEquals((short) 2, new MutableShort(""2"").shortValue());"
False,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,53,ew MutableShort(null);
True,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,src/test/org/apache/commons/lang/mutable/MutableShortTest.java,56,new MutableShort((Number)null);

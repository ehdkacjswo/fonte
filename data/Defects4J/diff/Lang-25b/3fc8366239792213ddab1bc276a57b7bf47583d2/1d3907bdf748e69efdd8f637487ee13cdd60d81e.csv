is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,15,* limitations under the License.
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,17,package org.apache.commons.lang.math;
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,20,* <p>Provides IEEE-754r variants of NumberUtils methods. </p>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,22,"* <p>See: <a href=""http://en.wikipedia.org/wiki/IEEE_754r"">http://en.wikipedia.org/wiki/IEEE_754r</a></p>"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,24,* @since 2.4
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,25,* @version $Id: IEEE754rUtils.java 491076 2006-12-29 18:48:37Z bayard $
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,27,public class IEEE754rUtils {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,30,* <p>Returns the minimum value in an array.</p>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,32,"* @param array  an array, must not be null or empty"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,33,* @return the minimum value in the array
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,34,* @throws IllegalArgumentException if <code>array</code> is <code>null</code>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,35,* @throws IllegalArgumentException if <code>array</code> is empty
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,37,public static double min(double[] array) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,38,// Validates input
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,39,if (array == null) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,40,"throw new IllegalArgumentException(""The Array must not be null"");"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,41,} else if (array.length == 0) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,42,"throw new IllegalArgumentException(""Array cannot be empty."");"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,45,// Finds and returns min
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,46,double min = array[0];
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,47,for (int i = 1; i < array.length; i++) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,48,"min = min(array[i], min);"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,51,return min;
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,55,* <p>Returns the minimum value in an array.</p>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,57,"* @param array  an array, must not be null or empty"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,58,* @return the minimum value in the array
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,59,* @throws IllegalArgumentException if <code>array</code> is <code>null</code>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,60,* @throws IllegalArgumentException if <code>array</code> is empty
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,62,public static float min(float[] array) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,63,// Validates input
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,64,if (array == null) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,65,"throw new IllegalArgumentException(""The Array must not be null"");"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,66,} else if (array.length == 0) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,67,"throw new IllegalArgumentException(""Array cannot be empty."");"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,70,// Finds and returns min
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,71,float min = array[0];
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,72,for (int i = 1; i < array.length; i++) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,73,"min = min(array[i], min);"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,76,return min;
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,80,* <p>Gets the minimum of three <code>double</code> values.</p>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,82,* <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,84,* @param a  value 1
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,85,* @param b  value 2
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,86,* @param c  value 3
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,87,* @return  the smallest of the values
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,89,"public static double min(double a, double b, double c) {"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,90,"return min(min(a, b), c);"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,94,* <p>Gets the minimum of two <code>double</code> values.</p>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,96,* <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,98,* @param a  value 1
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,99,* @param b  value 2
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,100,* @return  the smallest of the values
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,102,"public static double min(double a, double b) {"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,103,if(Double.isNaN(a)) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,104,return b;
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,105,} else
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,106,if(Double.isNaN(b)) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,107,return a;
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,108,} else {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,109,"return Math.min(a, b);"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,114,* <p>Gets the minimum of three <code>float</code> values.</p>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,116,* <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,118,* @param a  value 1
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,119,* @param b  value 2
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,120,* @param c  value 3
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,121,* @return  the smallest of the values
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,123,"public static float min(float a, float b, float c) {"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,124,"return min(min(a, b), c);"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,128,* <p>Gets the minimum of two <code>float</code> values.</p>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,130,* <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,132,* @param a  value 1
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,133,* @param b  value 2
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,134,* @return  the smallest of the values
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,136,"public static float min(float a, float b) {"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,137,if(Float.isNaN(a)) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,138,return b;
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,139,} else
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,140,if(Float.isNaN(b)) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,141,return a;
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,142,} else {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,143,"return Math.min(a, b);"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,148,* <p>Returns the maximum value in an array.</p>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,150,"* @param array  an array, must not be null or empty"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,151,* @return the minimum value in the array
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,152,* @throws IllegalArgumentException if <code>array</code> is <code>null</code>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,153,* @throws IllegalArgumentException if <code>array</code> is empty
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,155,public static double max(double[] array) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,156,// Validates input
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,157,if (array== null) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,158,"throw new IllegalArgumentException(""The Array must not be null"");"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,159,} else if (array.length == 0) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,160,"throw new IllegalArgumentException(""Array cannot be empty."");"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,163,// Finds and returns max
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,164,double max = array[0];
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,165,for (int j = 1; j < array.length; j++) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,166,"max = max(array[j], max);"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,169,return max;
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,173,* <p>Returns the maximum value in an array.</p>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,175,"* @param array  an array, must not be null or empty"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,176,* @return the minimum value in the array
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,177,* @throws IllegalArgumentException if <code>array</code> is <code>null</code>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,178,* @throws IllegalArgumentException if <code>array</code> is empty
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,180,public static float max(float[] array) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,181,// Validates input
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,182,if (array == null) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,183,"throw new IllegalArgumentException(""The Array must not be null"");"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,184,} else if (array.length == 0) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,185,"throw new IllegalArgumentException(""Array cannot be empty."");"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,188,// Finds and returns max
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,189,float max = array[0];
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,190,for (int j = 1; j < array.length; j++) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,191,"max = max(array[j], max);"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,194,return max;
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,198,* <p>Gets the maximum of three <code>double</code> values.</p>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,200,* <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,202,* @param a  value 1
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,203,* @param b  value 2
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,204,* @param c  value 3
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,205,* @return  the largest of the values
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,207,"public static double max(double a, double b, double c) {"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,208,"return max(max(a, b), c);"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,212,* <p>Gets the maximum of two <code>double</code> values.</p>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,214,* <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,216,* @param a  value 1
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,217,* @param b  value 2
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,218,* @return  the largest of the values
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,220,"public static double max(double a, double b) {"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,221,if(Double.isNaN(a)) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,222,return b;
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,223,} else
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,224,if(Double.isNaN(b)) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,225,return a;
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,226,} else {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,227,"return Math.max(a, b);"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,232,* <p>Gets the maximum of three <code>float</code> values.</p>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,234,* <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,236,* @param a  value 1
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,237,* @param b  value 2
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,238,* @param c  value 3
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,239,* @return  the largest of the values
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,241,"public static float max(float a, float b, float c) {"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,242,"return max(max(a, b), c);"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,246,* <p>Gets the maximum of two <code>float</code> values.</p>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,248,* <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,250,* @param a  value 1
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,251,* @param b  value 2
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,252,* @return  the largest of the values
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,254,"public static float max(float a, float b) {"
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,255,if(Float.isNaN(a)) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,256,return b;
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,257,} else
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,258,if(Float.isNaN(b)) {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,259,return a;
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,260,} else {
True,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,src/java/org/apache/commons/lang/math/IEEE754rUtils.java,261,"return Math.max(a, b);"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,786,* @see IEEE754rUtils#min(double[]) IEEE754rUtils for a version of this method that handles NaN differently
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,799,if (Double.isNaN(array[i])) {
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,800,return Double.NaN;
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,817,* @see IEEE754rUtils#min(float[]) IEEE754rUtils for a version of this method that handles NaN differently
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,830,if (Float.isNaN(array[i])) {
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,831,return Float.NaN;
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,958,* @see IEEE754rUtils#max(double[]) IEEE754rUtils for a version of this method that handles NaN differently
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,971,if (Double.isNaN(array[j])) {
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,972,return Double.NaN;
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,989,* @see IEEE754rUtils#max(float[]) IEEE754rUtils for a version of this method that handles NaN differently
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1002,if (Float.isNaN(array[j])) {
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1003,return Float.NaN;
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1097,"* @see IEEE754rUtils#min(double, double, double) for a version of this method that handles NaN differently"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1113,"* @see IEEE754rUtils#min(float, float, float) for a version of this method that handles NaN differently"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1203,"* @see IEEE754rUtils#max(double, double, double) for a version of this method that handles NaN differently"
True,src/java/org/apache/commons/lang/math/NumberUtils.java,src/java/org/apache/commons/lang/math/NumberUtils.java,1219,"* @see IEEE754rUtils#max(float, float, float) for a version of this method that handles NaN differently"
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,17,package org.apache.commons.lang.math;
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,19,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,22,* Unit tests {@link org.apache.commons.lang.math.IEEE754rUtils}.
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,24,* @version $Id: IEEE754rUtilsTest.java 583665 2007-10-11 01:34:13Z ggregory $
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,26,public class IEEE754rUtilsTest extends TestCase {
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,28,public void testLang381() {
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,29,"assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01);"
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,30,"assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01);"
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,31,"assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN)));"
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,32,"assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01);"
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,33,"assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01);"
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,34,"assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN)));"
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,36,"double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };"
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,37,"assertEquals(42.0, IEEE754rUtils.max(a), 0.01);"
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,38,"assertEquals(1.2, IEEE754rUtils.min(a), 0.01);"
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,40,"double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };"
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,41,"assertEquals(42.0, IEEE754rUtils.max(b), 0.01);"
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,42,"assertEquals(1.2, IEEE754rUtils.min(b), 0.01);"
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,44,"float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };"
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,45,"assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01);"
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,46,"assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01);"
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,48,"float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };"
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,49,"assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01);"
True,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,src/test/org/apache/commons/lang/math/IEEE754rUtilsTest.java,50,"assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01);"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,1187,public void testLang381() {
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,1188,"assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN)));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,1189,"assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN)));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,1190,"assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN)));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,1191,"assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN)));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,1193,"double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,1194,assertTrue(Double.isNaN(NumberUtils.max(a)));
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,1195,assertTrue(Double.isNaN(NumberUtils.min(a)));
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,1197,"double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,1198,assertTrue(Double.isNaN(NumberUtils.max(b)));
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,1199,assertTrue(Double.isNaN(NumberUtils.min(b)));
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,1201,"float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,1202,assertTrue(Float.isNaN(NumberUtils.max(aF)));
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,1204,"float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,1205,assertTrue(Float.isNaN(NumberUtils.max(bF)));

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,17,package org.apache.commons.lang3.concurrent;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,19,import java.util.concurrent.Executors;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,20,import java.util.concurrent.ThreadFactory;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,21,import java.util.concurrent.atomic.AtomicLong;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,24,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,25,* An implementation of the {@code ThreadFactory} interface that provides some
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,26,* configuration options for the threads it creates.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,27,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,28,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,29,* A {@code ThreadFactory} is used for instance by an {@code ExecutorService} to
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,30,* create the threads it uses for executing tasks. In many cases users do not
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,31,* have to care about a {@code ThreadFactory} because the default one used by an
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,32,"* {@code ExecutorService} will do. However, if there are special requirements"
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,33,"* for the threads, a custom {@code ThreadFactory} has to be created."
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,34,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,35,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,36,* This class provides some frequently needed configuration options for the
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,37,* threads it creates. These are the following:
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,38,* <ul>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,39,* <li>A name pattern for the threads created by this factory can be specified.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,40,* This is often useful if an application uses multiple executor services for
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,41,* different purposes. If the names of the threads used by these services have
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,42,"* meaningful names, log output or exception traces can be much easier to read."
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,43,* Naming patterns are <em>format strings</em> as used by the {@code
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,44,* String.format()} method. The string can contain the place holder {@code %d}
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,45,* which will be replaced by the number of the current thread ({@code
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,46,* ThreadFactoryImpl} keeps a counter of the threads it has already created).
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,47,"* For instance, the naming pattern {@code ""My %d. worker thread""} will result"
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,48,"* in thread names like {@code ""My 1. worker thread""}, {@code"
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,49,"* ""My 2. worker thread""} and so on.</li>"
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,50,* <li>A flag whether the threads created by this factory should be daemon
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,51,* threads. This can impact the exit behavior of the current Java application
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,52,* because the JVM shuts down if there are only daemon threads running.</li>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,53,* <li>The priority of the thread. Here an integer value can be provided. The
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,54,* {@code java.lang.Thread} class defines constants for valid ranges of priority
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,55,* values.</li>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,56,* <li>The {@code UncaughtExceptionHandler} for the thread. This handler is
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,57,* called if an uncaught exception occurs within the thread.</li>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,58,* </ul>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,59,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,60,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,61,* {@code BasicThreadFactory} wraps another thread factory which actually
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,62,* creates new threads. The configuration options are set on the threads created
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,63,* by the wrapped thread factory. On construction time the factory to be wrapped
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,64,"* can be specified. If none is provided, a default {@code ThreadFactory} is"
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,65,* used.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,66,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,67,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,68,"* Instances of {@code BasicThreadFactory} are not created directly, but the"
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,69,* nested {@code Builder} class is used for this purpose. Using the builder only
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,70,* the configuration options an application is interested in need to be set. The
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,71,* following example shows how a {@code BasicThreadFactory} is created and
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,72,* installed in an {@code ExecutorService}:
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,74,* <pre>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,75,* // Create a factory that produces daemon threads with a naming pattern and
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,76,* // a priority
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,77,* BasicThreadFactory factory = new BasicThreadFactory.Builder()
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,78,*     .namingPattern(&quot;workerthread-%d&quot;)
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,79,*     .daemon(true)
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,80,*     .priority(Thread.MAX_PRIORITY)
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,81,*     .build();
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,82,* // Create an executor service for single-threaded execution
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,83,* ExecutorService exec = Executors.newSingleThreadExecutor(factory);
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,84,* </pre>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,85,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,87,* @version $Id: $
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,88,* @since 3.0
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,90,public class BasicThreadFactory implements ThreadFactory {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,91,/** A counter for the threads created by this factory. */
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,92,private final AtomicLong threadCounter;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,94,/** Stores the wrapped factory. */
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,95,private final ThreadFactory wrappedFactory;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,97,/** Stores the uncaught exception handler. */
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,98,private final Thread.UncaughtExceptionHandler uncaughtExceptionHandler;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,100,/** Stores the naming pattern for newly created threads. */
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,101,private final String namingPattern;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,103,/** Stores the priority. */
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,104,private final Integer priority;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,106,/** Stores the daemon status flag. */
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,107,private final Boolean daemonFlag;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,110,* Creates a new instance of {@code ThreadFactoryImpl} and configures it
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,111,* from the specified {@code Builder} object.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,113,* @param builder the {@code Builder} object
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,115,private BasicThreadFactory(Builder builder) {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,116,if (builder.wrappedFactory == null) {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,117,wrappedFactory = Executors.defaultThreadFactory();
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,118,} else {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,119,wrappedFactory = builder.wrappedFactory;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,122,namingPattern = builder.namingPattern;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,123,priority = builder.priority;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,124,daemonFlag = builder.daemonFlag;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,125,uncaughtExceptionHandler = builder.exceptionHandler;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,127,threadCounter = new AtomicLong();
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,131,* Returns the wrapped {@code ThreadFactory}. This factory is used for
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,132,* actually creating threads. This method never returns <b>null</b>. If no
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,133,"* {@code ThreadFactory} was passed when this object was created, a default"
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,134,* thread factory is returned.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,136,* @return the wrapped {@code ThreadFactory}
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,138,public final ThreadFactory getWrappedFactory() {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,139,return wrappedFactory;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,143,* Returns the naming pattern for naming newly created threads. Result can
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,144,* be <b>null</b> if no naming pattern was provided.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,146,* @return the naming pattern
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,148,public final String getNamingPattern() {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,149,return namingPattern;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,153,* Returns the daemon flag. This flag determines whether newly created
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,154,"* threads should be daemon threads. If <b>true</b>, this factory object"
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,155,* calls {@code setDaemon(true)} on the newly created threads. Result can be
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,156,* <b>null</b> if no daemon flag was provided at creation time.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,158,* @return the daemon flag
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,160,public final Boolean getDaemonFlag() {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,161,return daemonFlag;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,165,* Returns the priority of the threads created by this factory. Result can
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,166,* be <b>null</b> if no priority was specified.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,168,* @return the priority for newly created threads
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,170,public final Integer getPriority() {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,171,return priority;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,175,* Returns the {@code UncaughtExceptionHandler} for the threads created by
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,176,* this factory. Result can be <b>null</b> if no handler was provided.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,178,* @return the {@code UncaughtExceptionHandler}
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,180,public final Thread.UncaughtExceptionHandler getUncaughtExceptionHandler() {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,181,return uncaughtExceptionHandler;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,185,* Returns the number of threads this factory has already created. This
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,186,* class maintains an internal counter that is incremented each time the
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,187,* {@link #newThread(Runnable)} method is invoked.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,189,* @return the number of threads created by this factory
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,191,public long getThreadCount() {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,192,return threadCounter.get();
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,196,* Creates a new thread. This implementation delegates to the wrapped
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,197,"* factory for creating the thread. Then, on the newly created thread the"
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,198,* corresponding configuration options are set.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,200,* @param r the {@code Runnable} to be executed by the new thread
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,201,* @return the newly created thread
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,203,public Thread newThread(Runnable r) {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,204,Thread t = getWrappedFactory().newThread(r);
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,205,initializeThread(t);
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,207,return t;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,211,* Initializes the specified thread. This method is called by
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,212,* {@link #newThread(Runnable)} after a new thread has been obtained from
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,213,* the wrapped thread factory. It initializes the thread according to the
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,214,* options set for this factory.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,216,* @param t the thread to be initialized
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,218,private void initializeThread(Thread t) {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,219,long count = threadCounter.incrementAndGet();
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,221,if (getNamingPattern() != null) {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,222,"t.setName(String.format(getNamingPattern(), count));"
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,225,if (getUncaughtExceptionHandler() != null) {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,226,t.setUncaughtExceptionHandler(getUncaughtExceptionHandler());
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,229,if (getPriority() != null) {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,230,t.setPriority(getPriority().intValue());
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,233,if (getDaemonFlag() != null) {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,234,t.setDaemon(getDaemonFlag().booleanValue());
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,239,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,240,* A <em>builder</em> class for creating instances of {@code
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,241,* BasicThreadFactory}.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,242,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,243,* <p>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,244,* Using this builder class instances of {@code BasicThreadFactory} can be
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,245,* created and initialized. The class provides methods that correspond to
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,246,* the configuration options supported by {@code BasicThreadFactory}. Method
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,247,* chaining is supported. Refer to the documentation of {@code
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,248,* BasicThreadFactory} for a usage example.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,249,* </p>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,251,* @version $Id: $
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,253,public static class Builder {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,254,/** The wrapped factory. */
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,255,private ThreadFactory wrappedFactory;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,257,/** The uncaught exception handler. */
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,258,private Thread.UncaughtExceptionHandler exceptionHandler;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,260,/** The naming pattern. */
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,261,private String namingPattern;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,263,/** The priority. */
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,264,private Integer priority;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,266,/** The daemon flag. */
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,267,private Boolean daemonFlag;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,270,* Sets the {@code ThreadFactory} to be wrapped by the new {@code
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,271,* BasicThreadFactory}.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,273,* @param factory the wrapped {@code ThreadFactory} (must not be
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,274,* <b>null</b>)
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,275,* @return a reference to this {@code Builder}
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,276,* @throws NullPointerException if the passed in {@code ThreadFactory}
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,277,* is <b>null</b>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,279,public Builder wrappedFactory(ThreadFactory factory) {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,280,if (factory == null) {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,281,throw new NullPointerException(
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,282,"""Wrapped ThreadFactory must not be null!"");"
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,285,wrappedFactory = factory;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,286,return this;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,290,* Sets the naming pattern to be used by the new {@code
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,291,* BasicThreadFactory}.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,293,* @param pattern the naming pattern (must not be <b>null</b>)
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,294,* @return a reference to this {@code Builder}
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,295,* @throws NullPointerException if the naming pattern is <b>null</b>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,297,public Builder namingPattern(String pattern) {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,298,if (pattern == null) {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,299,throw new NullPointerException(
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,300,"""Naming pattern must not be null!"");"
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,303,namingPattern = pattern;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,304,return this;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,308,* Sets the daemon flag for the new {@code BasicThreadFactory}. If this
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,309,* flag is set to <b>true</b> the new thread factory will create daemon
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,310,* threads.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,312,* @param f the value of the daemon flag
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,313,* @return a reference to this {@code Builder}
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,315,public Builder daemon(boolean f) {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,316,daemonFlag = Boolean.valueOf(f);
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,317,return this;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,321,* Sets the priority for the threads created by the new {@code
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,322,* BasicThreadFactory}.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,324,* @param prio the priority
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,325,* @return a reference to this {@code Builder}
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,327,public Builder priority(int prio) {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,328,priority = Integer.valueOf(prio);
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,329,return this;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,333,* Sets the uncaught exception handler for the threads created by the
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,334,* new {@code BasicThreadFactory}.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,336,* @param handler the {@code UncaughtExceptionHandler} (must not be
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,337,* <b>null</b>)
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,338,* @return a reference to this {@code Builder}
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,339,* @throws NullPointerException if the exception handler is <b>null</b>
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,341,public Builder uncaughtExceptionHandler(
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,342,Thread.UncaughtExceptionHandler handler) {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,343,if (handler == null) {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,344,throw new NullPointerException(
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,345,"""Uncaught exception handler must not be null!"");"
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,348,exceptionHandler = handler;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,349,return this;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,353,* Resets this builder. All configuration options are set to default
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,354,"* values. Note: If the {@link #build()} method was called, it is not"
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,355,* necessary to call {@code reset()} explicitly because this is done
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,356,* automatically.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,358,public void reset() {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,359,wrappedFactory = null;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,360,exceptionHandler = null;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,361,namingPattern = null;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,362,priority = null;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,363,daemonFlag = null;
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,367,* Creates a new {@code BasicThreadFactory} with all configuration
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,368,* options that have been specified by calling methods on this builder.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,369,* After creating the factory {@link #reset()} is called.
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,371,* @return the new {@code BasicThreadFactory}
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,373,public BasicThreadFactory build() {
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,374,BasicThreadFactory factory = new BasicThreadFactory(this);
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,375,reset();
True,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java,376,return factory;
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,17,package org.apache.commons.lang3.concurrent;
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,19,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,20,import static org.junit.Assert.assertFalse;
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,21,import static org.junit.Assert.assertNotNull;
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,22,import static org.junit.Assert.assertNotSame;
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,23,import static org.junit.Assert.assertNull;
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,24,import static org.junit.Assert.assertSame;
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,25,import static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,27,import java.util.concurrent.ThreadFactory;
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,29,import org.easymock.EasyMock;
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,30,import org.junit.Before;
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,31,import org.junit.Test;
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,34,* Test class for {@code BasicThreadFactory}.
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,36,* @version $Id: $
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,38,public class BasicThreadFactoryTest {
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,39,/** Constant for the test naming pattern. */
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,40,"private static final String PATTERN = ""testThread-%d"";"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,42,/** The builder for creating a thread factory. */
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,43,private BasicThreadFactory.Builder builder;
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,45,@Before
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,46,public void setUp() throws Exception {
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,47,builder = new BasicThreadFactory.Builder();
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,51,* Tests the default options of a thread factory.
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,53,* @param factory the factory to be checked
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,55,private void checkFactoryDefaults(BasicThreadFactory factory) {
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,56,"assertNull(""Got a naming pattern"", factory.getNamingPattern());"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,57,"assertNull(""Got an exception handler"", factory"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,58,.getUncaughtExceptionHandler());
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,59,"assertNull(""Got a priority"", factory.getPriority());"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,60,"assertNull(""Got a daemon flag"", factory.getDaemonFlag());"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,61,"assertNotNull(""No wrapped factory"", factory.getWrappedFactory());"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,65,* Tests the default values used by the builder.
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,67,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,68,public void testBuildDefaults() {
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,69,BasicThreadFactory factory = builder.build();
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,70,checkFactoryDefaults(factory);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,74,* Tries to set a null naming pattern.
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,76,@Test(expected = NullPointerException.class)
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,77,public void testBuildNamingPatternNull() {
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,78,builder.namingPattern(null);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,82,* Tries to set a null wrapped factory.
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,84,@Test(expected = NullPointerException.class)
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,85,public void testBuildWrappedFactoryNull() {
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,86,builder.wrappedFactory(null);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,90,* Tries to set a null exception handler.
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,92,@Test(expected = NullPointerException.class)
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,93,public void testBuildUncaughtExceptionHandlerNull() {
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,94,builder.uncaughtExceptionHandler(null);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,98,* Tests the reset() method of the builder.
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,100,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,101,public void testBuilderReset() {
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,102,ThreadFactory wrappedFactory = EasyMock.createMock(ThreadFactory.class);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,103,Thread.UncaughtExceptionHandler exHandler = EasyMock
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,104,.createMock(Thread.UncaughtExceptionHandler.class);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,105,"EasyMock.replay(wrappedFactory, exHandler);"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,106,builder.namingPattern(PATTERN).daemon(true).priority(
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,107,Thread.MAX_PRIORITY).uncaughtExceptionHandler(exHandler)
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,108,.wrappedFactory(wrappedFactory);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,109,builder.reset();
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,110,BasicThreadFactory factory = builder.build();
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,111,checkFactoryDefaults(factory);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,112,"assertNotSame(""Wrapped factory not reset"", wrappedFactory, factory"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,113,.getWrappedFactory());
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,114,"EasyMock.verify(wrappedFactory, exHandler);"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,118,* Tests whether reset() is automatically called after build().
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,120,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,121,public void testBuilderResetAfterBuild() {
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,122,builder.wrappedFactory(EasyMock.createNiceMock(ThreadFactory.class))
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,123,.namingPattern(PATTERN).daemon(true).build();
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,124,checkFactoryDefaults(builder.build());
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,128,* Tests whether the naming pattern is applied to new threads.
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,130,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,131,public void testNewThreadNamingPattern() {
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,132,ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,133,Runnable r = EasyMock.createMock(Runnable.class);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,134,final int count = 12;
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,135,for (int i = 0; i < count; i++) {
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,136,EasyMock.expect(wrapped.newThread(r)).andReturn(new Thread());
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,138,"EasyMock.replay(wrapped, r);"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,139,BasicThreadFactory factory = builder.wrappedFactory(wrapped)
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,140,.namingPattern(PATTERN).build();
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,141,for (int i = 0; i < count; i++) {
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,142,Thread t = factory.newThread(r);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,143,"assertEquals(""Wrong thread name"", String.format(PATTERN, Long"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,144,".valueOf(i + 1)), t.getName());"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,145,"assertEquals(""Wrong thread count"", i + 1, factory.getThreadCount());"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,147,"EasyMock.verify(wrapped, r);"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,151,* Tests whether the thread name is not modified if no naming pattern is
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,152,* set.
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,154,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,155,public void testNewThreadNoNamingPattern() {
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,156,ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,157,Runnable r = EasyMock.createMock(Runnable.class);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,158,"final String name = ""unchangedThreadName"";"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,159,Thread t = new Thread(name);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,160,EasyMock.expect(wrapped.newThread(r)).andReturn(t);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,161,"EasyMock.replay(wrapped, r);"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,162,BasicThreadFactory factory = builder.wrappedFactory(wrapped).build();
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,163,"assertSame(""Wrong thread"", t, factory.newThread(r));"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,164,"assertEquals(""Name was changed"", name, t.getName());"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,165,"EasyMock.verify(wrapped, r);"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,169,* Helper method for testing whether the daemon flag is taken into account.
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,171,* @param flag the value of the flag
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,173,private void checkDaemonFlag(boolean flag) {
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,174,ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,175,Runnable r = EasyMock.createMock(Runnable.class);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,176,Thread t = new Thread();
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,177,EasyMock.expect(wrapped.newThread(r)).andReturn(t);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,178,"EasyMock.replay(wrapped, r);"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,179,BasicThreadFactory factory = builder.wrappedFactory(wrapped).daemon(
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,180,flag).build();
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,181,"assertSame(""Wrong thread"", t, factory.newThread(r));"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,182,"assertEquals(""Wrong daemon flag"", flag, t.isDaemon());"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,183,"EasyMock.verify(wrapped, r);"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,187,* Tests whether daemon threads can be created.
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,189,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,190,public void testNewThreadDaemonTrue() {
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,191,checkDaemonFlag(true);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,195,* Tests whether the daemon status of new threads can be turned off.
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,197,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,198,public void testNewThreadDaemonFalse() {
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,199,checkDaemonFlag(false);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,203,* Tests whether the daemon flag is not touched on newly created threads if
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,204,* it is not specified.
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,206,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,207,public void testNewThreadNoDaemonFlag() {
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,208,ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,209,Runnable r1 = EasyMock.createMock(Runnable.class);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,210,Runnable r2 = EasyMock.createMock(Runnable.class);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,211,Thread t1 = new Thread();
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,212,Thread t2 = new Thread();
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,213,t1.setDaemon(true);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,214,EasyMock.expect(wrapped.newThread(r1)).andReturn(t1);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,215,EasyMock.expect(wrapped.newThread(r2)).andReturn(t2);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,216,"EasyMock.replay(wrapped, r1, r2);"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,217,BasicThreadFactory factory = builder.wrappedFactory(wrapped).build();
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,218,"assertSame(""Wrong thread 1"", t1, factory.newThread(r1));"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,219,"assertTrue(""No daemon thread"", t1.isDaemon());"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,220,"assertSame(""Wrong thread 2"", t2, factory.newThread(r2));"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,221,"assertFalse(""A daemon thread"", t2.isDaemon());"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,222,"EasyMock.verify(wrapped, r1, r2);"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,226,* Tests whether the priority is set on newly created threads.
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,228,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,229,public void testNewThreadPriority() {
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,230,ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,231,Runnable r = EasyMock.createMock(Runnable.class);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,232,Thread t = new Thread();
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,233,EasyMock.expect(wrapped.newThread(r)).andReturn(t);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,234,"EasyMock.replay(wrapped, r);"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,235,final int priority = Thread.NORM_PRIORITY + 1;
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,236,BasicThreadFactory factory = builder.wrappedFactory(wrapped).priority(
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,237,priority).build();
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,238,"assertSame(""Wrong thread"", t, factory.newThread(r));"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,239,"assertEquals(""Wrong priority"", priority, t.getPriority());"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,240,"EasyMock.verify(wrapped, r);"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,244,* Tests whether the original priority is not changed if no priority is
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,245,* specified.
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,247,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,248,public void testNewThreadNoPriority() {
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,249,ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,250,Runnable r = EasyMock.createMock(Runnable.class);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,251,final int orgPriority = Thread.NORM_PRIORITY + 1;
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,252,Thread t = new Thread();
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,253,t.setPriority(orgPriority);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,254,EasyMock.expect(wrapped.newThread(r)).andReturn(t);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,255,"EasyMock.replay(wrapped, r);"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,256,BasicThreadFactory factory = builder.wrappedFactory(wrapped).build();
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,257,"assertSame(""Wrong thread"", t, factory.newThread(r));"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,258,"assertEquals(""Wrong priority"", orgPriority, t.getPriority());"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,259,"EasyMock.verify(wrapped, r);"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,263,* Tests whether the exception handler is set if one is provided.
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,265,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,266,public void testNewThreadExHandler() {
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,267,ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,268,Runnable r = EasyMock.createMock(Runnable.class);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,269,Thread.UncaughtExceptionHandler handler = EasyMock
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,270,.createMock(Thread.UncaughtExceptionHandler.class);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,271,Thread t = new Thread();
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,272,EasyMock.expect(wrapped.newThread(r)).andReturn(t);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,273,"EasyMock.replay(wrapped, r, handler);"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,274,BasicThreadFactory factory = builder.wrappedFactory(wrapped)
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,275,.uncaughtExceptionHandler(handler).build();
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,276,"assertSame(""Wrong thread"", t, factory.newThread(r));"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,277,"assertEquals(""Wrong exception handler"", handler, t"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,278,.getUncaughtExceptionHandler());
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,279,"EasyMock.verify(wrapped, r, handler);"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,283,* Tests whether the original exception hander is not touched if none is
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,284,* specified.
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,286,@Test
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,287,public void testNewThreadNoExHandler() {
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,288,ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,289,Runnable r = EasyMock.createMock(Runnable.class);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,290,Thread.UncaughtExceptionHandler handler = EasyMock
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,291,.createMock(Thread.UncaughtExceptionHandler.class);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,292,Thread t = new Thread();
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,293,t.setUncaughtExceptionHandler(handler);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,294,EasyMock.expect(wrapped.newThread(r)).andReturn(t);
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,295,"EasyMock.replay(wrapped, r, handler);"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,296,BasicThreadFactory factory = builder.wrappedFactory(wrapped).build();
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,297,"assertSame(""Wrong thread"", t, factory.newThread(r));"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,298,"assertEquals(""Wrong exception handler"", handler, t"
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,299,.getUncaughtExceptionHandler());
True,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java,300,"EasyMock.verify(wrapped, r, handler);"

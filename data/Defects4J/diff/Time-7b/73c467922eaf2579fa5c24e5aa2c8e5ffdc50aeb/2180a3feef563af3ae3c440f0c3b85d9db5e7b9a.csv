is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,506, @param partial  the partial set of fields to apply to this datetime
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,506,"* @param partial  the partial set of fields to apply to this datetime, null ignored"
False,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,508, @throws IllegalArgumentException if any value if invalid
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,508,* @throws IllegalArgumentException if any value is invalid
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,518,* Gets a copy of this datetime with the specified field set to a new value.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,519,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,520,"* For example, if the field type is <code>hourOfDay</code> then the hour of day"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,521,* field would be changed in the returned instance.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,522,"* If the field type is null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,523,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,524,"* An alternative to this method is to use the properties, for example:"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,525,* <pre>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,526,* DateTime added = dt.hourOfDay().setCopy(6);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,527,* </pre>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,529,"* @param fieldType  the field type to set, null ignored"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,530,* @param value  the value to set
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,531,* @return a copy of this datetime with the field set
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,532,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,534,"public DateTime withField(DateTimeFieldType fieldType, int value) {"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,535,if (fieldType == null) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,536,return this;
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,538,"long instant = fieldType.getField(getChronology()).set(getMillis(), value);"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,539,return withMillis(instant);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,610,* Gets a copy of this datetime with the value of the specified field increased.
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,611,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,612,"* If the addition is zero or the field is null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,613,* <p>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,614,"* An alternative to this method is to use the properties, for example:"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,615,* <pre>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,616,* DateTime added = dt.hourOfDay().addToCopy(6);
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,617,* </pre>
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,619,"* @param fieldType  the field type to add to, null ignored"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,620,* @param amount  the amount to add
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,621,* @return a copy of this datetime with the field updated
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,622,* @throws ArithmeticException if the new datetime exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,624,"public DateTime withFieldAdded(DurationFieldType fieldType, int amount) {"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,625,if (fieldType == null || amount == 0) {
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,626,return this;
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,628,"long instant = fieldType.getField(getChronology()).add(getMillis(), amount);"
True,JodaTime/src/java/org/joda/time/DateTime.java,JodaTime/src/java/org/joda/time/DateTime.java,629,return withMillis(instant);
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,244," If the zone is <code>null</code>, {@link PeriodType#getAllType()}"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,244,"* If the zone is <code>null</code>, {@link PeriodType#standard()}"
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,247," @param type  the time zone to use, null means the All type"
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,247,"* @param type  the time zone to use, null means the standard type"
False,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,252,eturn PeriodType.getAllType();
True,JodaTime/src/java/org/joda/time/DateTimeUtils.java,JodaTime/src/java/org/joda/time/DateTimeUtils.java,252,return PeriodType.standard();
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,503,"etMillis(period.addTo(getMillis(), scalar));  // set via this class not super"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,503,"setMillis(period.addTo(getMillis(), scalar, getChronology()));  // set via this class not super"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,332," Sets the period of this time interval, preserving the start instant."
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,332,"* Sets the period of this time interval, preserving the start instant"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,333,* and using the ISOChronology in the default zone for calculations.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,340,"setPeriodAfterStart(period, null);"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,344,"* Sets the period of this time interval, preserving the start instant."
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,346,"* @param period  new period for interval, null means zero length"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,347,"* @param chrono  the chronology to add using, null means ISO default"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,348,* @throws IllegalArgumentException if the end is before the start
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,349,* @throws ArithmeticException if the end instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,351,"public void setPeriodAfterStart(ReadablePeriod period, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,342,"etEndMillis(period.addTo(getStartMillis(), 1));"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,355,chrono = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,356,"setEndMillis(period.addTo(getStartMillis(), 1, chrono));"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,347," Sets the period of this time interval, preserving the end instant."
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,361,"* Sets the period of this time interval, preserving the end instant"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,362,* and using the ISOChronology in the default zone for calculations.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,369,"setPeriodBeforeEnd(period, null);"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,373,"* Sets the period of this time interval, preserving the end instant."
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,375,"* @param period  new period for interval, null means zero length"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,376,"* @param chrono  the chronology to add using, null means ISO default"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,377,* @throws IllegalArgumentException if the end is before the start
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,378,* @throws ArithmeticException if the start instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,380,"public void setPeriodBeforeEnd(ReadablePeriod period, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,357,"etStartMillis(period.addTo(getEndMillis(), -1));"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,384,chrono = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,385,"setStartMillis(period.addTo(getEndMillis(), -1, chrono));"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,80, Creates a zero-length period using AllType.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,80,* Creates a zero-length period using the standard period type.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,83,"uper(0L, null);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,83,"super(0L, null, null);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,92,"uper(0L, type);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,92,"super(0L, type, null);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,96, Creates a period from the given millisecond duration using AllType.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,96,* Create a period from a set of field values using the time set of fields.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,98,* @param hours  amount of hours in this period
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,99,* @param minutes  amount of minutes in this period
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,100,* @param seconds  amount of seconds in this period
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,101,* @param millis  amount of milliseconds in this period
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,103,"public MutablePeriod(int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,104,"super(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.time());"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,108,* Create a period from a set of field values using the standard set of fields.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,110,* @param years  amount of years in this period
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,111,* @param months  amount of months in this period
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,112,* @param weeks  amount of weeks in this period
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,113,* @param days  amount of days in this period
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,114,* @param hours  amount of hours in this period
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,115,* @param minutes  amount of minutes in this period
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,116,* @param seconds  amount of seconds in this period
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,117,* @param millis  amount of milliseconds in this period
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,119,"public MutablePeriod(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,120,"int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,121,"super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,125,* Create a period from a set of field values.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,127,"* @param years  amount of years in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,128,"* @param months  amount of months in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,129,"* @param weeks  amount of weeks in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,130,"* @param days  amount of days in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,131,"* @param hours  amount of hours in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,132,"* @param minutes  amount of minutes in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,133,"* @param seconds  amount of seconds in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,134,"* @param millis  amount of milliseconds in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,135,"* @param type  which set of fields this period supports, null means AllType"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,136,* @throws IllegalArgumentException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,138,"public MutablePeriod(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,139,"int hours, int minutes, int seconds, int millis, PeriodType type) {"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,140,"super(years, months, weeks, days, hours, minutes, seconds, millis, type);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,144,* Creates a period from the given millisecond duration using the standard
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,145,* set of fields.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,99," For AllType, this is the time fields only."
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,100," The year, month, week and day fields will not be populated."
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,101, The period constructed will always be precise.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,148,* For the standard period type this is the time fields only.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,149,"* Thus the year, month, week and day fields will not be populated."
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,122,"uper(duration, null);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,170,"super(duration, null, null);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,130, The period constructed will always be precise.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,140, @param type  which set of fields this duration supports
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,187,"* @param type  which set of fields this period supports, null means standard"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,143,"uper(duration, type);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,190,"super(duration, type, null);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,147, Create a period from a set of field values using AllType.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,148, This constructor creates a precise period.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,194,* Creates a period from the given millisecond duration using the standard
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,195,* set of fields.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,196,* <p>
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,197,* Only precise fields in the period type will be used.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,198,* Imprecise fields will not be populated.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,199,* <p>
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,200,* If the duration is small then this method will perform
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,201,* as you might expect and split the fields evenly.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,202,* <p>
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,203,* If the duration is large then all the remaining duration will
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,204,* be stored in the largest available precise field.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,205,"* For details as to which fields are precise, review the period type javadoc."
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,150, @param hours  amount of hours in this period
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,151, @param minutes  amount of minutes in this period
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,152, @param seconds  amount of seconds in this period
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,153, @param millis  amount of milliseconds in this period
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,207,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,208,"* @param chronology  the chronology to use to split the duration, null means ISO default"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,155,"ublic MutablePeriod(int hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,156,"uper(0, 0, 0, 0, hours, minutes, seconds, millis, null);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,210,"public MutablePeriod(long duration, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,211,"super(duration, null, chronology);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,160, Create a period from a set of field values using AllType.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,215,* Creates a period from the given millisecond duration.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,216,* <p>
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,217,* Only precise fields in the period type will be used.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,218,* Imprecise fields will not be populated.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,219,* <p>
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,220,* If the duration is small then this method will perform
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,221,* as you might expect and split the fields evenly.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,222,* <p>
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,223,* If the duration is large then all the remaining duration will
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,224,* be stored in the largest available precise field.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,225,"* For details as to which fields are precise, review the period type javadoc."
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,162, @param years  amount of years in this period
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,163, @param months  amount of months in this period
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,164, @param weeks  amount of weeks in this period
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,165, @param days  amount of days in this period
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,166, @param hours  amount of hours in this period
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,167, @param minutes  amount of minutes in this period
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,168, @param seconds  amount of seconds in this period
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,169, @param millis  amount of milliseconds in this period
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,227,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,228,"* @param type  which set of fields this period supports, null means standard"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,229,"* @param chronology  the chronology to use to split the duration, null means ISO default"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,171,"ublic MutablePeriod(int years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,172,"nt hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,173,"uper(years, months, weeks, days, hours, minutes, seconds, millis, null);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,231,"public MutablePeriod(long duration, PeriodType type, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,232,"super(duration, type, chronology);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,177, Create a period from a set of field values.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,236,* Creates a period from the given interval endpoints using the standard
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,237,* set of fields.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,179," @param years  amount of years in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,180," @param months  amount of months in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,181," @param weeks  amount of weeks in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,182," @param days  amount of days in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,183," @param hours  amount of hours in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,184," @param minutes  amount of minutes in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,185," @param seconds  amount of seconds in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,186," @param millis  amount of milliseconds in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,187," @param type  which set of fields this period supports, null means AllType"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,188, @throws IllegalArgumentException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,239,"* @param startInstant  interval start, in milliseconds"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,240,"* @param endInstant  interval end, in milliseconds"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,190,"ublic MutablePeriod(int years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,191,"nt hours, int minutes, int seconds, int millis, PeriodType type) {"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,192,"uper(years, months, weeks, days, hours, minutes, seconds, millis, type);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,242,"public MutablePeriod(long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,243,"super(startInstant, endInstant, null, null);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,196, Creates a period from the given interval endpoints using AllType.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,197, This constructor creates a precise period.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,247,* Creates a period from the given interval endpoints.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,251,"* @param type  which set of fields this period supports, null means standard"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,202,"ublic MutablePeriod(long startInstant, long endInstant) {"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,203,"uper(startInstant, endInstant, null);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,253,"public MutablePeriod(long startInstant, long endInstant, PeriodType type) {"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,254,"super(startInstant, endInstant, type, null);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,258,* Creates a period from the given interval endpoints using the standard
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,259,* set of fields.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,261,"* @param startInstant  interval start, in milliseconds"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,262,"* @param endInstant  interval end, in milliseconds"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,263,"* @param chrono  the chronology to use, null means ISO in default zone"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,265,"public MutablePeriod(long startInstant, long endInstant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,266,"super(startInstant, endInstant, null, chrono);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,208, This constructor creates a precise period.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,212," @param type  which set of fields this period supports, null means AllType"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,274,"* @param type  which set of fields this period supports, null means standard"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,275,"* @param chrono  the chronology to use, null means ISO in default zone"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,214,"ublic MutablePeriod(long startInstant, long endInstant, PeriodType type) {"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,215,"uper(startInstant, endInstant, type);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,277,"public MutablePeriod(long startInstant, long endInstant, PeriodType type, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,278,"super(startInstant, endInstant, type, chrono);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,219, Creates a period from the given interval endpoints using AllType.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,220, This constructor creates a precise period.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,282,* Creates a period from the given interval endpoints using the standard
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,283,* set of fields.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,231, This constructor creates a precise period.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,250,"uper(period, null);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,312,"super(period, null, null);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,263,"uper(period, type);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,325,"super(period, type, null);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,329,* Creates a period from the specified object using the
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,330,* {@link org.joda.time.convert.ConverterManager ConverterManager}.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,332,* @param period  period to convert
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,333,"* @param chrono  the chronology to use, null means ISO in default zone"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,334,* @throws IllegalArgumentException if period is invalid
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,335,* @throws UnsupportedOperationException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,337,"public MutablePeriod(Object period, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,338,"super(period, null, chrono);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,342,* Creates a period from the specified object using the
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,343,* {@link org.joda.time.convert.ConverterManager ConverterManager}.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,345,* @param period  period to convert
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,346,"* @param type  which set of fields this period supports, null means use converter"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,347,"* @param chrono  the chronology to use, null means ISO in default zone"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,348,* @throws IllegalArgumentException if period is invalid
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,349,* @throws UnsupportedOperationException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,351,"public MutablePeriod(Object period, PeriodType type, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,352,"super(period, type, chrono);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,357,* Sets the value of one of the fields.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,358,* <p>
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,359,* The field type specified must be one of those that is supported by the period.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,361,* @param field  a DurationFieldType instance that is supported by this period
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,362,* @param value  the new value for the field
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,363,* @throws IllegalArgumentException if the field is null or not supported
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,365,"public void set(DurationFieldType field, int value) {"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,366,"super.setField(field, value);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,274,f (period == null) {
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,275,etPeriod(0L);
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,276, else {
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,277,etPeriod(
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,278,"eriod.getYears(), period.getMonths(),"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,279,"eriod.getWeeks(), period.getDays(),"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,280,"eriod.getHours(), period.getMinutes(),"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,281,"eriod.getSeconds(), period.getMillis());"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,376,super.setPeriod(period);
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,299,"nt hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,300,"uper.setPeriod(years, months, weeks, days,"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,301,"ours, minutes, seconds, millis);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,393,"int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,394,"super.setPeriod(years, months, weeks, days, hours, minutes, seconds, millis);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,398,* Sets all the fields in one go from an interval using the ISO chronology
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,399,* and dividing the fields using the period type.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,401,"* @param interval  the interval to set, null means zero length"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,403,public void setPeriod(ReadableInterval interval) {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,404,"setPeriod(interval, null);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,412,"* @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,310,ublic void setPeriod(ReadableInterval interval) {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,414,"public void setPeriod(ReadableInterval interval, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,314,"etPeriod(interval.getStartMillis(), interval.getEndMillis());"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,418,"setPeriod(interval.getStartMillis(), interval.getEndMillis(), chrono);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,423,* Sets all the fields in one go from a millisecond interval using ISOChronology
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,424,* and dividing the fields using the period type.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,426,"* @param startInstant  interval start, in milliseconds"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,427,"* @param endInstant  interval end, in milliseconds"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,429,"public void setPeriod(long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,430,"setPeriod(startInstant, endInstant, null);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,439,"* @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,325,"ublic void setPeriod(long startInstant, long endInstant) {"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,326,"uper.setPeriod(startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,441,"public void setPeriod(long startInstant, long endInstant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,442,"super.setPeriod(startInstant, endInstant, chrono);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,456,"setPeriod(duration, null);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,460,* Sets all the fields in one go from a duration dividing the
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,461,* fields using the period type.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,462,* <p>
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,463,"* When dividing the duration, only precise fields in the period type will be used."
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,464,"* For large durations, all the remaining duration will be stored in the largest"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,465,* available precise field.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,467,"* @param duration  the duration to set, null means zero length"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,468,"* @param chrono  the chronology to use, null means ISO default"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,470,"public void setPeriod(ReadableDuration duration, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,341,etPeriod(durationMillis);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,472,"setPeriod(durationMillis, chrono);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,355,uper.setPeriod(duration);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,486,"setPeriod(duration, null);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,490,* Sets all the fields in one go from a millisecond duration dividing the
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,491,* fields using the period type.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,492,* <p>
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,493,"* When dividing the duration, only precise fields in the period type will be used."
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,494,"* For large durations, all the remaining duration will be stored in the largest"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,495,* available precise field.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,497,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,498,"* @param chrono  the chronology to use, null means ISO default"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,500,"public void setPeriod(long duration, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,501,"super.setPeriod(duration, chrono);"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,506,* Adds to the value of one of the fields.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,507,* <p>
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,508,* The field type specified must be one of those that is supported by the period.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,510,* @param field  a DurationFieldType instance that is supported by this period
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,511,* @param value  the value to add to the field
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,512,* @throws IllegalArgumentException if the field is null or not supported
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,514,"public void add(DurationFieldType field, int value) {"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,515,if (value != 0) {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,516,"set(field, FieldUtils.safeAdd(get(field), value));"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,369,etPeriod(
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,370,"ieldUtils.safeAdd(getYears(), period.getYears()),"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,371,"ieldUtils.safeAdd(getMonths(), period.getMonths()),"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,372,"ieldUtils.safeAdd(getWeeks(), period.getWeeks()),"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,373,"ieldUtils.safeAdd(getDays(), period.getDays()),"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,374,"ieldUtils.safeAdd(getHours(), period.getHours()),"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,375,"ieldUtils.safeAdd(getMinutes(), period.getMinutes()),"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,376,"ieldUtils.safeAdd(getSeconds(), period.getSeconds()),"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,377,"ieldUtils.safeAdd(getMillis(), period.getMillis())"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,530,addPeriod(period);
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,449, Normalizes all the field values in this period.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,450, <p>
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,451, This method converts to a milliecond duration and back again.
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,453, @throws IllegalStateException if this period is imprecise
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,602,* Gets the years field part of the period.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,604,"* @return the number of years in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,606,public int getYears() {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,607,return getPeriodType().getYears(this);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,611,* Gets the months field part of the period.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,613,"* @return the number of months in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,615,public int getMonths() {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,616,return getPeriodType().getMonths(this);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,620,* Gets the weeks field part of the period.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,622,"* @return the number of weeks in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,624,public int getWeeks() {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,625,return getPeriodType().getWeeks(this);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,629,* Gets the days field part of the period.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,631,"* @return the number of days in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,633,public int getDays() {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,634,return getPeriodType().getDays(this);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,639,* Gets the hours field part of the period.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,641,"* @return the number of hours in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,643,public int getHours() {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,644,return getPeriodType().getHours(this);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,648,* Gets the minutes field part of the period.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,650,"* @return the number of minutes in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,652,public int getMinutes() {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,653,return getPeriodType().getMinutes(this);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,657,* Gets the seconds field part of the period.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,659,"* @return the number of seconds in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,661,public int getSeconds() {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,662,return getPeriodType().getSeconds(this);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,666,* Gets the millis field part of the period.
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,668,"* @return the number of millis in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,455,ublic void normalize() {
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,456,etPeriod(toDurationMillis());
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,670,public int getMillis() {
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,671,return getPeriodType().getMillis(this);
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,467,uper.setYears(years);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,682,"super.setField(DurationFieldType.years(), years);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,491,uper.setMonths(months);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,706,"super.setField(DurationFieldType.months(), months);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,515,uper.setWeeks(weeks);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,730,"super.setField(DurationFieldType.weeks(), weeks);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,539,uper.setDays(days);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,754,"super.setField(DurationFieldType.days(), days);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,563,uper.setHours(hours);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,778,"super.setField(DurationFieldType.hours(), hours);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,587,uper.setMinutes(minutes);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,802,"super.setField(DurationFieldType.minutes(), minutes);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,611,uper.setSeconds(seconds);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,826,"super.setField(DurationFieldType.seconds(), seconds);"
False,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,635,uper.setMillis(millis);
True,JodaTime/src/java/org/joda/time/MutablePeriod.java,JodaTime/src/java/org/joda/time/MutablePeriod.java,850,"super.setField(DurationFieldType.millis(), millis);"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,64, The way in which that divide occurs is controlled by the PeriodType class.
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,65, <p>
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,66, <code>Period</code> can use any period type to split the milliseconds into fields.
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,67, The {@link PeriodType#getAllType() All} type is used by default.
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,68," <code>All</code> uses the ISO chronology and divides a duration into years, months,"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,69," weeks, days, hours, minutes, seconds and milliseconds as best it can."
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,70, <p>
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,71, This class performs calculations using the individual fields.
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,72, It <i>may</i> be possible to convert a <code>Period</code> to a <code>Duration</code>.
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,73, The conversion will succeed if the time period is precise.
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,74, A time period is precise if all of the populated fields have a fixed known duration.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,64,* Which fields are supported is defined by the PeriodType class.
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,98, Creates a period from the given millisecond duration using AllType.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,88,* Create a period from a set of field values using the time set of fields.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,90,* @param hours  amount of hours in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,91,* @param minutes  amount of minutes in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,92,* @param seconds  amount of seconds in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,93,* @param millis  amount of milliseconds in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,95,"public Period(int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,96,"super(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.time());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,100,* Create a period from a set of field values using the standard set of fields.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,102,* @param years  amount of years in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,103,* @param months  amount of months in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,104,* @param weeks  amount of weeks in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,105,* @param days  amount of days in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,106,* @param hours  amount of hours in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,107,* @param minutes  amount of minutes in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,108,* @param seconds  amount of seconds in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,109,* @param millis  amount of milliseconds in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,111,"public Period(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,112,"int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,113,"super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,117,* Create a period from a set of field values.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,119,"* @param years  amount of years in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,120,"* @param months  amount of months in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,121,"* @param weeks  amount of weeks in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,122,"* @param days  amount of days in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,123,"* @param hours  amount of hours in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,124,"* @param minutes  amount of minutes in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,125,"* @param seconds  amount of seconds in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,126,"* @param millis  amount of milliseconds in this period, which must be zero if unsupported"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,127,"* @param type  which set of fields this period supports, null means AllType"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,128,* @throws IllegalArgumentException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,130,"public Period(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,131,"int hours, int minutes, int seconds, int millis, PeriodType type) {"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,132,"super(years, months, weeks, days, hours, minutes, seconds, millis, type);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,136,* Creates a period from the given millisecond duration using the standard
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,137,* set of fields.
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,101," For AllType, this is the time fields only."
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,102," The year, month, week and day fields will not be populated."
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,103, The period constructed will always be precise.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,140,* For the standard period type this is the time fields only.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,141,"* Thus the year, month, week and day fields will not be populated."
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,124,"uper(duration, null);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,162,"super(duration, null, null);"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,132, The period constructed will always be precise.
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,142, @param type  which set of fields this period supports
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,179,"* @param type  which set of fields this period supports, null means standard"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,145,"uper(duration, type);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,182,"super(duration, type, null);"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,149, Create a period from a set of field values using AllType.
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,150, This constructor creates a precise period.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,186,* Creates a period from the given millisecond duration using the standard
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,187,* set of fields.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,188,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,189,* Only precise fields in the period type will be used.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,190,* Imprecise fields will not be populated.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,191,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,192,* If the duration is small then this method will perform
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,193,* as you might expect and split the fields evenly.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,194,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,195,* If the duration is large then all the remaining duration will
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,196,* be stored in the largest available precise field.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,197,"* For details as to which fields are precise, review the period type javadoc."
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,152, @param hours  amount of hours in this period
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,153, @param minutes  amount of minutes in this period
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,154, @param seconds  amount of seconds in this period
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,155, @param millis  amount of milliseconds in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,199,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,200,"* @param chronology  the chronology to use to split the duration, null means ISO default"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,157,"ublic Period(int hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,158,"uper(0, 0, 0, 0, hours, minutes, seconds, millis, null);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,202,"public Period(long duration, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,203,"super(duration, null, chronology);"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,162, Create a period from a set of field values using AllType.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,207,* Creates a period from the given millisecond duration.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,208,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,209,* Only precise fields in the period type will be used.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,210,* Imprecise fields will not be populated.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,211,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,212,* If the duration is small then this method will perform
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,213,* as you might expect and split the fields evenly.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,214,* <p>
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,215,* If the duration is large then all the remaining duration will
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,216,* be stored in the largest available precise field.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,217,"* For details as to which fields are precise, review the period type javadoc."
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,164, @param years  amount of years in this period
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,165, @param months  amount of months in this period
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,166, @param weeks  amount of weeks in this period
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,167, @param days  amount of days in this period
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,168, @param hours  amount of hours in this period
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,169, @param minutes  amount of minutes in this period
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,170, @param seconds  amount of seconds in this period
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,171, @param millis  amount of milliseconds in this period
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,219,"* @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,220,"* @param type  which set of fields this period supports, null means standard"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,221,"* @param chronology  the chronology to use to split the duration, null means ISO default"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,173,"ublic Period(int years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,174,"nt hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,175,"uper(years, months, weeks, days, hours, minutes, seconds, millis, null);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,223,"public Period(long duration, PeriodType type, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,224,"super(duration, type, chronology);"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,179, Create a period from a set of field values.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,228,* Creates a period from the given interval endpoints using the standard
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,229,* set of fields.
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,181," @param years  amount of years in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,182," @param months  amount of months in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,183," @param weeks  amount of weeks in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,184," @param days  amount of days in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,185," @param hours  amount of hours in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,186," @param minutes  amount of minutes in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,187," @param seconds  amount of seconds in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,188," @param millis  amount of milliseconds in this period, which must be zero if unsupported"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,189," @param type  which set of fields this period supports, null means AllType"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,190, @throws IllegalArgumentException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,231,"* @param startInstant  interval start, in milliseconds"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,232,"* @param endInstant  interval end, in milliseconds"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,192,"ublic Period(int years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,193,"nt hours, int minutes, int seconds, int millis, PeriodType type) {"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,194,"uper(years, months, weeks, days, hours, minutes, seconds, millis, type);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,234,"public Period(long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,235,"super(startInstant, endInstant, null, null);"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,198, Creates a period from the given interval endpoints using AllType.
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,199, This constructor creates a precise period.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,239,* Creates a period from the given interval endpoints.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,243,"* @param type  which set of fields this period supports, null means standard"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,204,"ublic Period(long startInstant, long endInstant) {"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,205,"uper(startInstant, endInstant, null);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,245,"public Period(long startInstant, long endInstant, PeriodType type) {"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,246,"super(startInstant, endInstant, type, null);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,250,* Creates a period from the given interval endpoints using the standard
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,251,* set of fields.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,253,"* @param startInstant  interval start, in milliseconds"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,254,"* @param endInstant  interval end, in milliseconds"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,255,"* @param chrono  the chronology to use, null means ISO in default zone"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,257,"public Period(long startInstant, long endInstant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,258,"super(startInstant, endInstant, null, chrono);"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,210, This constructor creates a precise period.
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,214," @param type  which set of fields this period supports, null means AllType"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,266,"* @param type  which set of fields this period supports, null means standard"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,267,"* @param chrono  the chronology to use, null means ISO in default zone"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,216,"ublic Period(long startInstant, long endInstant, PeriodType type) {"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,217,"uper(startInstant, endInstant, type);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,269,"public Period(long startInstant, long endInstant, PeriodType type, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,270,"super(startInstant, endInstant, type, chrono);"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,221, Creates a period from the given interval endpoints using AllType.
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,222, This constructor creates a precise period.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,274,* Creates a period from the given interval endpoints using the standard
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,275,* set of fields.
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,233, This constructor creates a precise period.
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,252,"uper(period, null);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,304,"super(period, null, null);"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,265,"uper(period, type);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,317,"super(period, type, null);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,321,* Creates a period from the specified object using the
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,322,* {@link org.joda.time.convert.ConverterManager ConverterManager}.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,324,* @param period  period to convert
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,325,"* @param chrono  the chronology to use, null means ISO in default zone"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,326,* @throws IllegalArgumentException if period is invalid
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,327,* @throws UnsupportedOperationException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,329,"public Period(Object period, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,330,"super(period, null, chrono);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,334,* Creates a period from the specified object using the
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,335,* {@link org.joda.time.convert.ConverterManager ConverterManager}.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,337,* @param period  period to convert
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,338,"* @param type  which set of fields this period supports, null means use converter"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,339,"* @param chrono  the chronology to use, null means ISO in default zone"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,340,* @throws IllegalArgumentException if period is invalid
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,341,* @throws UnsupportedOperationException if an unsupported field's value is non-zero
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,343,"public Period(Object period, PeriodType type, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,344,"super(period, type, chrono);"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,281, Creates a new Period instance with the same field values but
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,282, different PeriodType.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,360,* Gets the years field part of the period.
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,284," @param type  the period type to use, null means AllType"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,285, @return the new period instance
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,286, @throws IllegalArgumentException if the new period won't accept all of the current fields
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,362,"* @return the number of years in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,288,ublic Period withPeriodType(PeriodType type) {
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,289,f (type == null) {
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,290,ype = PeriodType.getAllType();
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,292,f (type.equals(getPeriodType())) {
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,293,eturn this;
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,295,"eturn new Period(getYears(), getMonths(), getWeeks(), getDays(),"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,296,"etHours(), getMinutes(), getSeconds(), getMillis(), type);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,364,public int getYears() {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,365,return getPeriodType().getYears(this);
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,300, Creates a new Period instance with the same millisecond duration but
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,301, different PeriodType.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,369,* Gets the months field part of the period.
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,303," @param type  the period type to use, null means AllType"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,304, @return the new period instance
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,305, @throws IllegalStateException if this period is imprecise
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,371,"* @return the number of months in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,307,ublic Period withPeriodTypeRetainDuration(PeriodType type) {
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,308,f (type == null) {
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,309,ype = PeriodType.getAllType();
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,311,f (type.equals(getPeriodType())) {
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,312,eturn this;
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,314,"eturn new Period(toDurationMillis(), type);"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,373,public int getMonths() {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,374,return getPeriodType().getMonths(this);
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,378,* Gets the weeks field part of the period.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,380,"* @return the number of weeks in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,382,public int getWeeks() {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,383,return getPeriodType().getWeeks(this);
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,318, Creates a new Period instance with the same millisecond duration but
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,319, all the fields normalized to be within their standard ranges.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,387,* Gets the days field part of the period.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,389,"* @return the number of days in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,391,public int getDays() {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,392,return getPeriodType().getDays(this);
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,397,* Gets the hours field part of the period.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,399,"* @return the number of hours in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,401,public int getHours() {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,402,return getPeriodType().getHours(this);
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,406,* Gets the minutes field part of the period.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,408,"* @return the number of minutes in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,410,public int getMinutes() {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,411,return getPeriodType().getMinutes(this);
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,415,* Gets the seconds field part of the period.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,417,"* @return the number of seconds in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,419,public int getSeconds() {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,420,return getPeriodType().getSeconds(this);
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,424,* Gets the millis field part of the period.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,426,"* @return the number of millis in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,428,public int getMillis() {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,429,return getPeriodType().getMillis(this);
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,434,* Creates a new Period instance with the same field values but
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,435,* different PeriodType.
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,437,"* @param type  the period type to use, null means AllType"
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,322, @throws IllegalStateException if this period is imprecise
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,439,* @throws IllegalArgumentException if the new period won't accept all of the current fields
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,324,ublic Period withFieldsNormalized() {
False,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,325,"eturn new Period(toDurationMillis(), getPeriodType());"
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,441,public Period withPeriodType(PeriodType type) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,442,type = DateTimeUtils.getPeriodType(type);
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,443,if (type.equals(getPeriodType())) {
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,444,return this;
True,JodaTime/src/java/org/joda/time/Period.java,JodaTime/src/java/org/joda/time/Period.java,446,"return new Period(this, type);"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,58,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,59,mport org.joda.time.field.MillisDurationField;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,60,mport org.joda.time.field.ScaledDurationField;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,61,mport org.joda.time.field.UnsupportedDurationField;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,57,import java.util.Arrays;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,64, Controls a duration implementation by specifying which duration fields are to be used.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,60,* Controls a period implementation by specifying which duration fields are to be used.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,68," <li>Millis - the duration is defined only in terms of milliseconds, other"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,69,  fields are not used
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,70, <li>All - the duration is defined to permit all fields to be used
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,71," <li>DayHour - the duration is expressed in terms of days, hours, minutes, seconds"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,72,  and milliseconds
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,73, <li>YearMonth - the duration is expressed using all fields except weeks
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,74, <li>YearWeek - the duration is expressed using all fields except months
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,75," <li>AverageYearMonth - as YearMonth, but years and months have fixed average lengths"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,76," <li>PreciseAll - defines years as 365 days, months as 30 days, weeks as 7 days,"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,77, days as 24 hours and all the time fields
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,78, <li>PreciseDayHour - defines days as 24 hours and all the time fields
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,79," <li>PreciseYearDay - defines years as 365 days, days as 24 hours and all the time fields"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,80," <li>PreciseYearWeek - defines years as 365 days, weeks as 7 days,"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,81, days as 24 hours and all the time fields
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,82," <li>PreciseYearMonth - defines years as 365 days, months as 30 days,"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,83, days as 24 hours and all the time fields
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,64,"* <li>Standard - years, months, weeks, days, hours, minutes, seconds, millis"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,65,"* <li>YearMonthDayTime - years, months, days, hours, minutes, seconds, millis"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,66,"* <li>YearWeekDayTime - years, weeks, days, hours, minutes, seconds, millis"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,67,"* <li>YearDayTime - years, days, hours, minutes, seconds, millis"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,68,"* <li>DayTime - days, hours, minutes, seconds, millis"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,69,"* <li>Time - hours, minutes, seconds, millis"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,70,* <li>plus one for each single type
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,93,ublic abstract class PeriodType implements Serializable {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,80,public class PeriodType implements Serializable {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,81,/** Serialization version */
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,96,rivate static final PeriodType MILLIS;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,97,rivate static final PeriodType DAY_HOUR;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,98,rivate static final PeriodType YEAR_DAY;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,99,rivate static final PeriodType YEAR_WEEK;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,100,rivate static final PeriodType YEAR_MONTH;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,101,rivate static final PeriodType ALL;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,102,rivate static final PeriodType DAY_HOUR_UTC;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,103,rivate static final PeriodType YEAR_DAY_UTC;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,104,rivate static final PeriodType YEAR_WEEK_UTC;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,105,rivate static final PeriodType YEAR_MONTH_UTC;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,106,rivate static final PeriodType ALL_UTC;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,107,rivate static final PeriodType PRECISE_DAY_HOUR;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,108,rivate static final PeriodType PRECISE_YEAR_DAY;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,109,rivate static final PeriodType PRECISE_YEAR_WEEK;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,110,rivate static final PeriodType PRECISE_YEAR_MONTH;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,111,rivate static final PeriodType PRECISE_ALL;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,113,tatic {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,114,ILLIS = new MillisType();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,115,AY_HOUR = new DayHourType(ISOChronology.getInstance());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,116,EAR_DAY = new YearDayType(ISOChronology.getInstance());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,117,EAR_WEEK = new YearWeekType(ISOChronology.getInstance());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,118,EAR_MONTH = new YearMonthType(ISOChronology.getInstance());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,119,LL = new AllType(ISOChronology.getInstance());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,120,AY_HOUR_UTC = new DayHourType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,121,EAR_DAY_UTC = new YearDayType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,122,EAR_WEEK_UTC = new YearWeekType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,123,EAR_MONTH_UTC = new YearMonthType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,124,LL_UTC = new AllType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,125,RECISE_DAY_HOUR = new PreciseDayHourType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,126,RECISE_YEAR_DAY = new PreciseYearDayType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,127,RECISE_YEAR_WEEK = new PreciseYearWeekType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,128,RECISE_YEAR_MONTH = new PreciseYearMonthType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,129,RECISE_ALL = new PreciseAllType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,133, Returns a PeriodType of only a milliseconds field using the ISOChronology.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,134," When using this type, the maximum millisecond value that can be stored is"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,135, typically limited by a 32 bit int.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,137,ublic static PeriodType getMillisType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,138,eturn MILLIS;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,142, Returns a PeriodType using the ISOChronology in current time zone of:
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,144, <ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,145, <li>days
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,146, <li>hours (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,147, <li>minutes (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,148, <li>seconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,149, <li>milliseconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,150, </ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,152,ublic static PeriodType getDayHourType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,153,eturn DAY_HOUR;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,157, Returns a precise PeriodType using the ISOChronology in UTC of:
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,159, <ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,160," <li>days (precise, fixed at 24 hours)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,161, <li>hours (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,162, <li>minutes (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,163, <li>seconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,164, <li>milliseconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,165, </ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,167,ublic static PeriodType getDayHourTypeUTC() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,168,eturn DAY_HOUR_UTC;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,84,private static PeriodType cStandard;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,85,private static PeriodType cYMDTime;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,86,private static PeriodType cYWDTime;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,87,private static PeriodType cYDTime;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,88,private static PeriodType cDTime;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,89,private static PeriodType cTime;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,91,private static PeriodType cYears;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,92,private static PeriodType cMonths;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,93,private static PeriodType cWeeks;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,94,private static PeriodType cDays;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,95,private static PeriodType cHours;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,96,private static PeriodType cMinutes;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,97,private static PeriodType cSeconds;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,98,private static PeriodType cMillis;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,172, Returns a PeriodType of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,101,* Gets a type that defines all standard fields.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,103,* <li>years
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,104,* <li>months
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,105,* <li>weeks
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,176, <li>hours (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,177, <li>minutes (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,178, <li>seconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,179, <li>milliseconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,107,* <li>hours
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,108,* <li>minutes
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,109,* <li>seconds
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,110,* <li>milliseconds
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,182, This factory method returns a PeriodType that calculates using any Chronology.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,184, @param chrono Chronology to use for calculations.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,113,* @return the period type
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,186,ublic static PeriodType getDayHourType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,187,f (chrono == null || chrono.equals(ISOChronology.getInstance())) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,188,eturn getDayHourType();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,115,public static PeriodType standard() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,116,PeriodType type = cStandard;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,117,if (type == null) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,118,type = new PeriodType(
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,119,"""Standard"","
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,120,new DurationFieldType[] {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,121,"DurationFieldType.years(), DurationFieldType.months(),"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,122,"DurationFieldType.weeks(), DurationFieldType.days(),"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,123,"DurationFieldType.hours(), DurationFieldType.minutes(),"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,124,"DurationFieldType.seconds(), DurationFieldType.millis(),"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,126,"new int[] { 0, 1, 2, 3, 4, 5, 6, 7, }"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,128,cStandard = type;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,190,f (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,191,eturn getDayHourTypeUTC();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,193,eturn new DayHourType(chrono);
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,130,return type;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,198, Returns a PeriodType using the ISOChronology in current time zone of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,134,* Gets a type that defines all standard fields except weeks.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,137,* <li>months
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,203, <li>hours (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,204, <li>minutes (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,205, <li>seconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,206, <li>milliseconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,139,* <li>hours
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,140,* <li>minutes
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,141,* <li>seconds
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,142,* <li>milliseconds
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,209,ublic static PeriodType getYearDayType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,210,eturn YEAR_DAY;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,214, Returns a PeriodType using the ISOChronology in UTC of:
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,216, <ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,217, <li>years
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,218," <li>days (precise, fixed at 24 hours)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,219, <li>hours (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,220, <li>minutes (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,221, <li>seconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,222, <li>milliseconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,223, </ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,145,* @return the period type
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,225,ublic static PeriodType getYearDayTypeUTC() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,226,eturn YEAR_DAY_UTC;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,147,public static PeriodType yearMonthDayTime() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,148,PeriodType type = cYMDTime;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,149,if (type == null) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,150,type = new PeriodType(
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,151,"""YearMonthDayTime"","
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,152,new DurationFieldType[] {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,153,"DurationFieldType.years(), DurationFieldType.months(),"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,154,"DurationFieldType.days(),"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,155,"DurationFieldType.hours(), DurationFieldType.minutes(),"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,156,"DurationFieldType.seconds(), DurationFieldType.millis(),"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,158,"new int[] { 0, 1, -1, 2, 3, 4, 5, 6, }"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,160,cYMDTime = type;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,162,return type;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,230, Returns a PeriodType of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,166,* Gets a type that defines all standard fields except months.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,169,* <li>weeks
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,235, <li>hours (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,236, <li>minutes (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,237, <li>seconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,238, <li>milliseconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,171,* <li>hours
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,172,* <li>minutes
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,173,* <li>seconds
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,174,* <li>milliseconds
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,241, This factory method returns a PeriodType that calculates using any Chronology.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,243, @param chrono Chronology to use for calculations.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,177,* @return the period type
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,245,ublic static PeriodType getYearDayType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,246,f (chrono == null || chrono.equals(ISOChronology.getInstance())) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,247,eturn getYearDayType();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,249,f (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,250,eturn getYearDayTypeUTC();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,179,public static PeriodType yearWeekDayTime() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,180,PeriodType type = cYWDTime;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,181,if (type == null) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,182,type = new PeriodType(
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,183,"""YearWeekDayTime"","
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,184,new DurationFieldType[] {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,185,"DurationFieldType.years(),"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,186,"DurationFieldType.weeks(), DurationFieldType.days(),"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,187,"DurationFieldType.hours(), DurationFieldType.minutes(),"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,188,"DurationFieldType.seconds(), DurationFieldType.millis(),"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,190,"new int[] { 0, -1, 1, 2, 3, 4, 5, 6, }"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,192,cYWDTime = type;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,252,eturn new YearDayType(chrono);
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,194,return type;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,257, Returns a PeriodType using the ISOChronology in current time zone of:
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,259, <ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,260, <li>years (weekyears)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,261, <li>weeks
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,262, <li>days
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,263, <li>hours (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,264, <li>minutes (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,265, <li>seconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,266, <li>milliseconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,267, </ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,269,ublic static PeriodType getYearWeekType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,270,eturn YEAR_WEEK;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,274, Returns a PeriodType using the ISOChronology in UTC of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,198,* Gets a type that defines all standard fields except months and weeks.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,278," <li>weeks (precise, fixed at 7 days)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,279," <li>days (precise, fixed at 24 hours)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,280, <li>hours (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,281, <li>minutes (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,282, <li>seconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,283, <li>milliseconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,284, </ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,286,ublic static PeriodType getYearWeekTypeUTC() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,287,eturn YEAR_WEEK_UTC;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,291, Returns a PeriodType of:
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,293, <ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,294, <li>years (weekyears)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,295, <li>weeks
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,303, This factory method returns a PeriodType that calculates using any Chronology.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,305, @param chrono Chronology to use for calculations.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,208,* @return the period type
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,307,ublic static PeriodType getYearWeekType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,308,f (chrono == null || chrono.equals(ISOChronology.getInstance())) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,309,eturn getYearWeekType();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,210,public static PeriodType yearDayTime() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,211,PeriodType type = cYDTime;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,212,if (type == null) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,213,type = new PeriodType(
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,214,"""YearDayTime"","
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,215,new DurationFieldType[] {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,216,"DurationFieldType.years(), DurationFieldType.days(),"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,217,"DurationFieldType.hours(), DurationFieldType.minutes(),"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,218,"DurationFieldType.seconds(), DurationFieldType.millis(),"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,220,"new int[] { 0, -1, -1, 1, 2, 3, 4, 5, }"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,222,cYDTime = type;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,311,f (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,312,eturn getYearWeekTypeUTC();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,314,eturn new YearWeekType(chrono);
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,224,return type;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,319, Returns a PeriodType using the ISOChronology in current time zone of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,228,* Gets a type that defines all standard fields from days downwards.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,322, <li>years
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,323, <li>months
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,325, <li>hours (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,326, <li>minutes (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,327, <li>seconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,328, <li>milliseconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,231,* <li>hours
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,232,* <li>minutes
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,233,* <li>seconds
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,234,* <li>milliseconds
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,331,ublic static PeriodType getYearMonthType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,332,eturn YEAR_MONTH;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,336, Returns a PeriodType using the ISOChronology in UTC of:
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,338, <ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,339, <li>years
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,340, <li>months
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,341," <li>days (precise, fixed at 24 hours)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,342, <li>hours (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,343, <li>minutes (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,344, <li>seconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,345, <li>milliseconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,346, </ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,237,* @return the period type
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,348,ublic static PeriodType getYearMonthTypeUTC() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,349,eturn YEAR_MONTH_UTC;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,239,public static PeriodType dayTime() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,240,PeriodType type = cDTime;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,241,if (type == null) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,242,type = new PeriodType(
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,243,"""DayTime"","
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,244,new DurationFieldType[] {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,245,"DurationFieldType.days(),"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,246,"DurationFieldType.hours(), DurationFieldType.minutes(),"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,247,"DurationFieldType.seconds(), DurationFieldType.millis(),"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,249,"new int[] { -1, -1, -1, 0, 1, 2, 3, 4, }"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,251,cDTime = type;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,253,return type;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,353, Returns a PeriodType of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,257,* Gets a type that defines all standard time fields.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,356, <li>years
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,357, <li>months
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,358, <li>days
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,365, This factory method returns a PeriodType that calculates using any Chronology.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,367, @param chrono Chronology to use for calculations.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,265,* @return the period type
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,369,ublic static PeriodType getYearMonthType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,370,f (chrono == null || chrono.equals(ISOChronology.getInstance())) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,371,eturn getYearMonthType();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,373,f (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,374,eturn getYearMonthTypeUTC();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,267,public static PeriodType time() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,268,PeriodType type = cTime;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,269,if (type == null) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,270,type = new PeriodType(
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,271,"""Time"","
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,272,new DurationFieldType[] {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,273,"DurationFieldType.hours(), DurationFieldType.minutes(),"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,274,"DurationFieldType.seconds(), DurationFieldType.millis(),"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,276,"new int[] { -1, -1, -1, -1, 0, 1, 2, 3, }"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,278,cTime = type;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,376,eturn new YearMonthType(chrono);
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,280,return type;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,381, Returns a PeriodType using the ISOChronology in current time zone of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,284,* Gets a type that defines just the years field.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,383, <ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,384, <li>years
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,385, <li>months
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,386, <li>weeks
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,387, <li>days
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,388, <li>hours (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,389, <li>minutes (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,390, <li>seconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,391, <li>milliseconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,392, </ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,286,* @return the period type
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,394,ublic static PeriodType getAllType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,395,eturn ALL;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,288,public static PeriodType years() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,289,PeriodType type = cYears;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,290,if (type == null) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,291,type = new PeriodType(
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,292,"""Years"","
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,293,"new DurationFieldType[] { DurationFieldType.years() },"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,294,"new int[] { 0, -1, -1, -1, -1, -1, -1, -1, }"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,296,cYears = type;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,298,return type;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,399, Returns a PeriodType using the ISOChronology in UTC of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,302,* Gets a type that defines just the months field.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,401, <ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,402, <li>years
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,403, <li>months
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,404," <li>weeks (precise, fixed at 7 days)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,405," <li>days (precise, fixed at 24 hours)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,406, <li>hours (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,407, <li>minutes (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,408, <li>seconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,409, <li>milliseconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,410, </ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,304,* @return the period type
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,412,ublic static PeriodType getAllTypeUTC() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,413,eturn ALL_UTC;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,306,public static PeriodType months() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,307,PeriodType type = cMonths;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,308,if (type == null) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,309,type = new PeriodType(
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,310,"""Months"","
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,311,"new DurationFieldType[] { DurationFieldType.months() },"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,312,"new int[] { -1, 0, -1, -1, -1, -1, -1, -1, }"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,314,cMonths = type;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,316,return type;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,417, Returns a PeriodType of:
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,419, <ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,420, <li>years
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,421, <li>months
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,422, <li>weeks
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,423, <li>days
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,424, <li>hours
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,425, <li>minutes
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,426, <li>seconds
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,427, <li>milliseconds
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,428, </ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,430, This factory method returns a PeriodType that calculates using any Chronology.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,320,* Gets a type that defines just the weeks field.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,432, @param chrono Chronology to use for calculations.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,322,* @return the period type
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,434,ublic static PeriodType getAllType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,435,f (chrono == null || chrono.equals(ISOChronology.getInstance())) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,436,eturn getAllType();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,324,public static PeriodType weeks() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,325,PeriodType type = cWeeks;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,326,if (type == null) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,327,type = new PeriodType(
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,328,"""Weeks"","
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,329,"new DurationFieldType[] { DurationFieldType.weeks() },"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,330,"new int[] { -1, -1, 0, -1, -1, -1, -1, -1, }"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,332,cWeeks = type;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,438,f (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,439,eturn getAllTypeUTC();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,441,eturn new AllType(chrono);
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,334,return type;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,446, Returns a precise PeriodType using the ISOChronology in UTC of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,338,* Gets a type that defines just the days field.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,448, <ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,449," <li>days (precise, fixed at 24 hours)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,450, <li>hours (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,451, <li>minutes (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,452, <li>seconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,453, <li>milliseconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,454, </ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,340,* @return the period type
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,456,ublic static PeriodType getPreciseDayHourType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,457,eturn PRECISE_DAY_HOUR;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,342,public static PeriodType days() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,343,PeriodType type = cDays;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,344,if (type == null) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,345,type = new PeriodType(
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,346,"""Days"","
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,347,"new DurationFieldType[] { DurationFieldType.days() },"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,348,"new int[] { -1, -1, -1, 0, -1, -1, -1, -1, }"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,350,cDays = type;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,352,return type;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,461, Returns a precise PeriodType using the ISOChronology in UTC of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,356,* Gets a type that defines just the hours field.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,463, <ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,464," <li>years (precise, fixed at 365 days)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,465," <li>days (precise, fixed at 24 hours)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,466, <li>hours (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,467, <li>minutes (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,468, <li>seconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,469, <li>milliseconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,470, </ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,358,* @return the period type
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,472,ublic static PeriodType getPreciseYearDayType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,473,eturn PRECISE_YEAR_DAY;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,360,public static PeriodType hours() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,361,PeriodType type = cHours;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,362,if (type == null) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,363,type = new PeriodType(
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,364,"""Hours"","
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,365,"new DurationFieldType[] { DurationFieldType.hours() },"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,366,"new int[] { -1, -1, -1, -1, 0, -1, -1, -1, }"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,368,cHours = type;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,370,return type;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,477, Returns a precise PeriodType using the ISOChronology in UTC of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,374,* Gets a type that defines just the minutes field.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,479, <ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,480," <li>years (precise, fixed at 365 days)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,481," <li>months (precise, fixed at 30 days)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,482," <li>days (precise, fixed at 24 hours)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,483, <li>hours (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,484, <li>minutes (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,485, <li>seconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,486, <li>milliseconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,487, </ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,376,* @return the period type
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,489,ublic static PeriodType getPreciseYearMonthType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,490,eturn PRECISE_YEAR_MONTH;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,378,public static PeriodType minutes() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,379,PeriodType type = cMinutes;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,380,if (type == null) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,381,type = new PeriodType(
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,382,"""Minutes"","
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,383,"new DurationFieldType[] { DurationFieldType.minutes() },"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,384,"new int[] { -1, -1, -1, -1, -1, 0, -1, -1, }"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,386,cMinutes = type;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,388,return type;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,494, Returns a precise PeriodType using the ISOChronology in UTC of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,392,* Gets a type that defines just the seconds field.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,496, <ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,497," <li>years (precise, fixed at 365 days)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,498," <li>weeks (precise, fixed at 7 days)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,499," <li>days (precise, fixed at 24 hours)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,500, <li>hours (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,501, <li>minutes (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,502, <li>seconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,503, <li>milliseconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,504, </ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,394,* @return the period type
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,506,ublic static PeriodType getPreciseYearWeekType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,507,eturn PRECISE_YEAR_WEEK;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,396,public static PeriodType seconds() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,397,PeriodType type = cSeconds;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,398,if (type == null) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,399,type = new PeriodType(
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,400,"""Seconds"","
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,401,"new DurationFieldType[] { DurationFieldType.seconds() },"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,402,"new int[] { -1, -1, -1, -1, -1, -1, 0, -1, }"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,404,cSeconds = type;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,406,return type;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,511, Returns a precise PeriodType using the ISOChronology in UTC of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,410,* Gets a type that defines just the millis field.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,513, <ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,514," <li>years (precise, fixed at 365 days)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,515," <li>months (precise, fixed at 30 days)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,516," <li>weeks (precise, fixed at 7 days)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,517," <li>days (precise, fixed at 24 hours)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,518, <li>hours (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,519, <li>minutes (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,520, <li>seconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,521, <li>milliseconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,522, </ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,412,* @return the period type
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,524,ublic static PeriodType getPreciseAllType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,525,eturn PRECISE_ALL;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,414,public static PeriodType millis() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,415,PeriodType type = cMillis;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,416,if (type == null) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,417,type = new PeriodType(
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,418,"""Millis"","
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,419,"new DurationFieldType[] { DurationFieldType.millis() },"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,420,"new int[] { -1, -1, -1, -1, -1, -1, -1, 0, }"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,422,cMillis = type;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,424,return type;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,428,/** The name of the type */
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,429,private final String iName;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,430,/** The array of types */
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,431,private final DurationFieldType[] iTypes;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,432,/** The array of indices */
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,433,private final int[] iIndices;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,438,* @param name  the name
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,439,* @param types  the types
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,440,* @param indices  the indices
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,532,rotected PeriodType() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,442,"protected PeriodType(String name, DurationFieldType[] types, int[] indices) {"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,443,super();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,444,iName = name;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,445,iTypes = types;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,446,iIndices = indices;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,540,ublic abstract String getName();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,455,public String getName() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,456,return iName;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,543," Returns the chronology used, or null if none."
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,460,* Gets the number of fields in the period type.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,545, @return the chronology
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,462,* @return the number of fields
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,547,ublic abstract Chronology getChronology();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,464,public int size() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,465,return iTypes.length;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,550, Returns a PeriodType that uses the given chronology.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,469,* Gets the field type by index.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,552," @param chrono  the new chronology, null means ISOChronology in UTC"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,553, @return a new period type with the specified chronology
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,471,* @param index  the index to retrieve
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,472,* @return the field type
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,473,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,475,public DurationFieldType getFieldType(int index) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,476,return iTypes[index];
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,480,* Checks whether the field specified is supported by this period.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,482,"* @param type  the type to check, may be null which returns false"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,483,* @return true if the field is supported
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,555,ublic abstract PeriodType withChronology(Chronology chrono);
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,485,public boolean isSupported(DurationFieldType type) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,486,return (indexOf(type) >= 0);
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,558, Returns true if every supported field in this type is precise.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,490,* Gets the index of the field in this period.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,492,"* @param type  the type to check, may be null which returns -1"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,493,* @return the index of -1 if not supported
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,495,public int indexOf(DurationFieldType type) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,496,"for (int i = 0, isize = size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,497,if (iTypes[i] == type) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,498,return i;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,501,return -1;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,505,* Gets a debugging to string.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,560, @return true if precise
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,507,* @return a string
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,562,ublic abstract boolean isPrecise();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,509,public String toString() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,510,String name = getName();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,511,"return ""PeriodType["" + getName() + ""]"";"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,566, Returns a DurationField representing years.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,568, @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,516,* Gets the years field part of the period.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,518,* @param period  the period to query
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,519,"* @return the number of years in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,570,ublic DurationField years() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,571,eturn UnsupportedDurationField.getInstance(DurationFieldType.years());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,521,public int getYears(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,522,int index = iIndices[0];
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,523,return (index == -1 ? 0 : period.getValue(index));
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,575, Returns a DurationField representing months.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,577, @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,527,* Gets the months field part of the period.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,529,* @param period  the period to query
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,530,"* @return the number of months in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,579,ublic DurationField months() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,580,eturn UnsupportedDurationField.getInstance(DurationFieldType.months());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,532,public int getMonths(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,533,int index = iIndices[1];
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,534,return (index == -1 ? 0 : period.getValue(index));
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,584, Returns a DurationField representing weeks.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,586, @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,538,* Gets the weeks field part of the period.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,540,* @param period  the period to query
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,541,"* @return the number of weeks in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,588,ublic DurationField weeks() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,589,eturn UnsupportedDurationField.getInstance(DurationFieldType.weeks());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,543,public int getWeeks(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,544,int index = iIndices[2];
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,545,return (index == -1 ? 0 : period.getValue(index));
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,593, Returns a DurationField representing days.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,595, @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,549,* Gets the days field part of the period.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,551,* @param period  the period to query
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,552,"* @return the number of days in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,597,ublic DurationField days() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,598,eturn UnsupportedDurationField.getInstance(DurationFieldType.days());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,554,public int getDays(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,555,int index = iIndices[3];
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,556,return (index == -1 ? 0 : period.getValue(index));
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,602, Returns a DurationField representing hours.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,604, @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,561,* Gets the hours field part of the period.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,563,* @param period  the period to query
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,564,"* @return the number of hours in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,606,ublic DurationField hours() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,607,eturn UnsupportedDurationField.getInstance(DurationFieldType.hours());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,566,public int getHours(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,567,int index = iIndices[4];
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,568,return (index == -1 ? 0 : period.getValue(index));
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,611, Returns a DurationField representing minutes.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,613, @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,572,* Gets the minutes field part of the period.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,574,* @param period  the period to query
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,575,"* @return the number of minutes in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,615,ublic DurationField minutes() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,616,eturn UnsupportedDurationField.getInstance(DurationFieldType.minutes());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,577,public int getMinutes(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,578,int index = iIndices[5];
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,579,return (index == -1 ? 0 : period.getValue(index));
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,620, Returns a DurationField representing seconds.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,622, @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,583,* Gets the seconds field part of the period.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,585,* @param period  the period to query
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,586,"* @return the number of seconds in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,624,ublic DurationField seconds() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,625,eturn UnsupportedDurationField.getInstance(DurationFieldType.seconds());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,588,public int getSeconds(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,589,int index = iIndices[6];
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,590,return (index == -1 ? 0 : period.getValue(index));
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,629, Returns a DurationField representing milliseconds.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,631, @return DurationField or UnsupportedDurationField if unsupported
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,594,* Gets the millis field part of the period.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,596,* @param period  the period to query
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,597,"* @return the number of millis in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,633,ublic DurationField millis() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,634,eturn UnsupportedDurationField.getInstance(DurationFieldType.millis());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,599,public int getMillis(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,600,int index = iIndices[7];
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,601,return (index == -1 ? 0 : period.getValue(index));
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,644,f (!years().isSupported()) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,645,eturn this;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,647,"eturn MaskedType.mask(this, 1 << 0);"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,611,"return withFieldRemoved(0, ""NoYears"");"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,656,f (!months().isSupported()) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,657,eturn this;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,659,"eturn MaskedType.mask(this, 1 << 1);"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,620,"return withFieldRemoved(1, ""NoMonths"");"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,668,f (!weeks().isSupported()) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,669,eturn this;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,671,"eturn MaskedType.mask(this, 1 << 2);"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,629,"return withFieldRemoved(2, ""NoWeeks"");"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,680,f (!days().isSupported()) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,681,eturn this;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,683,"eturn MaskedType.mask(this, 1 << 3);"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,638,"return withFieldRemoved(3, ""NoDays"");"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,692,f (!hours().isSupported()) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,693,eturn this;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,695,"eturn MaskedType.mask(this, 1 << 4);"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,647,"return withFieldRemoved(4, ""NoHours"");"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,704,f (!minutes().isSupported()) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,705,eturn this;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,707,"eturn MaskedType.mask(this, 1 << 5);"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,656,"return withFieldRemoved(5, ""NoMinutes"");"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,716,f (!seconds().isSupported()) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,717,eturn this;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,719,"eturn MaskedType.mask(this, 1 << 6);"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,665,"return withFieldRemoved(6, ""NoSeconds"");"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,728,f (!millis().isSupported()) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,674,"return withFieldRemoved(7, ""NoMillis"");"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,678,* Removes the field specified by indices index.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,680,* @param indicesIndex  the index to remove
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,681,* @param name  the name addition
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,682,* @return the new type
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,684,"private PeriodType withFieldRemoved(int indicesIndex, String name) {"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,685,int fieldIndex = iIndices[indicesIndex];
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,686,if (fieldIndex == -1) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,731,"eturn MaskedType.mask(this, 1 << 7);"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,690,DurationFieldType[] types = new DurationFieldType[size() - 1];
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,691,for (int i = 0; i < iTypes.length; i++) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,692,if (i < fieldIndex) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,693,types[i] = iTypes[i];
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,694,} else if (i > fieldIndex) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,695,types[i - 1] = iTypes[i];
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,699,int[] indices = new int[8];
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,700,for (int i = 0; i < indices.length; i++) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,701,if (i < indicesIndex) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,702,indices[i] = iIndices[i];
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,703,} else if (i > indicesIndex) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,704,indices[i] = (iIndices[i] == -1 ? -1 : iIndices[i] - 1);
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,705,} else {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,706,indices[i] = -1;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,709,"return new PeriodType(getName() + name, types, indices);"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,737," To be equal, the object must be a PeriodType with the same chronology"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,738, and same supported fields.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,715,"* To be equal, the object must be a PeriodType with the same set of fields."
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,747,f (!(obj instanceof PeriodType)) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,748,eturn false;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,750,eriodType other = (PeriodType)obj;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,751,hronology chrono = getChronology();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,752,f (chrono == null) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,753,f (other.getChronology() != null) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,754,eturn false;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,756, else if (!chrono.equals(other.getChronology())) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,724,if (obj instanceof PeriodType == false) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,759,eturn years().equals(other.years())
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,760,& months().equals(other.months())
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,761,& weeks().equals(other.weeks())
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,762,& days().equals(other.days())
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,763,& hours().equals(other.hours())
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,764,& minutes().equals(other.minutes())
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,765,& seconds().equals(other.seconds())
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,766,& millis().equals(other.millis());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,727,PeriodType other = (PeriodType) obj;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,728,"return (Arrays.equals(iTypes, other.iTypes));"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,770, Returns a hashcode based on the chronology and supported fields.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,732,* Returns a hashcode based on the field types.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,776,hronology chrono = getChronology();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,777,f (chrono != null) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,778,ash += chrono.hashCode();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,738,for (int i = 0; i < iTypes.length; i++) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,739,hash += iTypes[i].hashCode();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,780,ash = hash
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,781, years().hashCode()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,782, months().hashCode()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,783, weeks().hashCode()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,784, days().hashCode()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,785, hours().hashCode()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,786, minutes().hashCode()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,787, seconds().hashCode()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,788, millis().hashCode();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,792,ublic String toString() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,793,tring name = getName();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,794,"eturn ""PeriodType["" + (name == null ? """" : name) + ""]"";"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,798,rivate static class MillisType extends PeriodType {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,799,rivate static final long serialVersionUID = -4314867016852780422L;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,801,illisType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,804,ublic boolean isPrecise() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,805,eturn true;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,808,ublic final DurationField millis() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,809,eturn MillisDurationField.INSTANCE;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,812,ublic Chronology getChronology() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,813,eturn ISOChronology.getInstanceUTC();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,816,ublic PeriodType withChronology(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,817,eturn this;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,820,rivate Object readResolve() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,821,eturn getMillisType();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,824,ublic String getName() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,825,"eturn ""MillisType"";"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,829,rivate static class DayHourType extends PeriodType {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,830,rivate static final long serialVersionUID = 1115025839896760481L;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,832,rotected final Chronology iChronology;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,834,ayHourType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,835,Chronology = chrono;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,838,ublic final Chronology getChronology() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,839,eturn iChronology;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,842,ublic PeriodType withChronology(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,843,f (chrono == iChronology) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,844,eturn this;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,846,eturn PeriodType.getDayHourType(chrono);
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,849,ublic boolean isPrecise() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,850,eturn days().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,851,& hours().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,852,& minutes().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,853,& seconds().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,854,& minutes().isPrecise();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,857,ublic final DurationField days() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,858,eturn iChronology.days();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,861,ublic final DurationField hours() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,862,eturn iChronology.hours();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,865,ublic final DurationField minutes() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,866,eturn iChronology.minutes();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,869,ublic final DurationField seconds() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,870,eturn iChronology.seconds();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,873,ublic final DurationField millis() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,874,eturn iChronology.millis();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,877,rivate Object readResolve() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,878,eturn getDayHourType(iChronology);
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,881,ublic String getName() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,882,"eturn ""DayHourType"";"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,886,rivate static class YearDayType extends DayHourType {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,887,rivate static final long serialVersionUID = 6567563546499L;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,889,earDayType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,890,uper(chrono);
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,893,ublic PeriodType withChronology(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,894,f (chrono == iChronology) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,895,eturn this;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,897,eturn PeriodType.getYearDayType(chrono);
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,900,ublic boolean isPrecise() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,901,eturn years().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,902,& super.isPrecise();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,905,ublic DurationField years() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,906,eturn iChronology.weekyears();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,909,rivate Object readResolve() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,910,eturn getYearDayType(iChronology);
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,913,ublic String getName() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,914,"eturn ""YearDayType"";"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,918,rivate static class YearWeekType extends DayHourType {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,919,rivate static final long serialVersionUID = 1347170237843447098L;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,921,earWeekType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,922,uper(chrono);
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,925,ublic PeriodType withChronology(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,926,f (chrono == iChronology) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,927,eturn this;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,929,eturn PeriodType.getYearWeekType(chrono);
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,932,ublic boolean isPrecise() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,933,eturn years().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,934,& weeks().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,935,& super.isPrecise();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,938,ublic DurationField years() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,939,eturn iChronology.years();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,942,ublic DurationField weeks() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,943,eturn iChronology.weeks();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,946,rivate Object readResolve() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,947,eturn getYearWeekType(iChronology);
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,950,ublic String getName() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,951,"eturn ""YearWeekType"";"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,955,rivate static class YearMonthType extends DayHourType {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,956,rivate static final long serialVersionUID = -1336767257680877683L;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,958,earMonthType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,959,uper(chrono);
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,962,ublic PeriodType withChronology(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,963,f (chrono == iChronology) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,964,eturn this;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,966,eturn PeriodType.getYearMonthType(chrono);
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,969,ublic boolean isPrecise() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,970,eturn years().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,971,& months().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,972,& super.isPrecise();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,975,ublic DurationField years() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,976,eturn iChronology.years();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,979,ublic DurationField months() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,980,eturn iChronology.months();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,983,rivate Object readResolve() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,984,eturn getYearMonthType(iChronology);
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,987,ublic String getName() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,988,"eturn ""YearMonthType"";"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,992,rivate static class AllType extends DayHourType {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,993,rivate static final long serialVersionUID = -359769822629866L;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,995,llType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,996,uper(chrono);
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,999,ublic PeriodType withChronology(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1000,f (chrono == iChronology) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1001,eturn this;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1003,eturn PeriodType.getAllType(chrono);
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1006,ublic boolean isPrecise() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1007,eturn years().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1008,& months().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1009,& weeks().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1010,& super.isPrecise();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1013,ublic DurationField years() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1014,eturn iChronology.years();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1017,ublic DurationField months() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1018,eturn iChronology.months();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1021,ublic DurationField weeks() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1022,eturn iChronology.weeks();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1025,rivate Object readResolve() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1026,eturn getAllType(iChronology);
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1029,ublic String getName() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1030,"eturn ""AllType"";"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1035,rivate static class PreciseDayHourType extends PeriodType {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1036,rivate static final long serialVersionUID = 216528691637527857L;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1038,rotected final Chronology iChronology;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1040,reciseDayHourType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1041,Chronology = chrono;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1044,ublic final Chronology getChronology() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1045,eturn iChronology;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1048,ublic PeriodType withChronology(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1049,eturn this;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1052,ublic boolean isPrecise() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1053,eturn true;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1056,ublic final DurationField days() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1057,eturn iChronology.days();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1060,ublic final DurationField hours() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1061,eturn iChronology.hours();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1064,ublic final DurationField minutes() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1065,eturn iChronology.minutes();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1068,ublic final DurationField seconds() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1069,eturn iChronology.seconds();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1072,ublic final DurationField millis() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1073,eturn iChronology.millis();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1076,rivate Object readResolve() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1077,eturn getPreciseDayHourType();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1080,ublic String getName() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1081,"eturn ""PreciseDayHourType"";"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1085,rivate static class PreciseYearDayType extends PreciseDayHourType {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1086,rivate static final long serialVersionUID = -2553285612358L;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1088,rivate final DurationField iYears;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1090,reciseYearDayType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1091,uper(chrono);
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1092,"Years = new ScaledDurationField(chrono.days(), DurationFieldType.years(), 365);"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1093,/ rely on days/weeks to be precise because only ISO UTC used
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1096,ublic PeriodType withChronology(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1097,eturn this;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1100,ublic boolean isPrecise() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1101,eturn years().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1102,& super.isPrecise();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1105,ublic DurationField years() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1106,eturn iYears;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1109,rivate Object readResolve() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1110,eturn getPreciseYearDayType();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1113,ublic String getName() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1114,"eturn ""PreciseYearDayType"";"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1118,rivate static class PreciseYearWeekType extends PreciseYearDayType {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1119,rivate static final long serialVersionUID = -2040324323318740267L;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1121,reciseYearWeekType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1122,uper(chrono);
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1125,ublic PeriodType withChronology(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1126,eturn this;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1129,ublic boolean isPrecise() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1130,eturn weeks().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1131,& super.isPrecise();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1134,ublic DurationField weeks() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1135,eturn iChronology.weeks();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1138,rivate Object readResolve() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1139,eturn getPreciseYearWeekType();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1142,ublic String getName() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1143,"eturn ""PreciseYearWeekType"";"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1147,rivate static class PreciseYearMonthType extends PreciseYearDayType {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1148,rivate static final long serialVersionUID = 1203161678926193794L;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1150,rivate final DurationField iMonths;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1152,reciseYearMonthType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1153,uper(chrono);
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1154,"Months = new ScaledDurationField(chrono.days(), DurationFieldType.months(), 30);"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1157,ublic PeriodType withChronology(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1158,eturn this;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1161,ublic boolean isPrecise() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1162,eturn months().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1163,& super.isPrecise();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1166,ublic DurationField months() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1167,eturn iMonths;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1170,rivate Object readResolve() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1171,eturn getPreciseYearMonthType();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1174,ublic String getName() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1175,"eturn ""PreciseYearMonthType"";"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1179,rivate static class PreciseAllType extends PreciseYearMonthType {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1180,rivate static final long serialVersionUID = 43967269280186L;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1182,reciseAllType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1183,uper(chrono);
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1186,ublic PeriodType withChronology(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1187,eturn this;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1190,ublic boolean isPrecise() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1191,eturn weeks().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1192,& super.isPrecise();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1195,ublic DurationField weeks() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1196,eturn iChronology.weeks();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1199,rivate Object readResolve() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1200,eturn getPreciseAllType();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1203,ublic String getName() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1204,"eturn ""PreciseAllType"";"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1209,rivate static class MaskedType extends PeriodType {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1210,rivate static final long serialVersionUID = 940106774669244586L;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1212,"ublic static PeriodType mask(PeriodType type, int mask) {"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1213,f (type instanceof MaskedType) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1214,askedType masked = (MaskedType)type;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1215,ask |= masked.iMask;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1216,ype = masked.iType;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1218,"eturn new MaskedType(type, mask);"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1221,rivate final PeriodType iType;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1223,"/ Bit 0: when set, years is unsupported"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1224,"/ Bit 1: when set, months is unsupported"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1226,rivate final int iMask;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1228,"rivate MaskedType(PeriodType type, int mask) {"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1229,Type = type;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1230,Mask = mask;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1233,ublic Chronology getChronology() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1234,eturn iType.getChronology();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1237,ublic PeriodType withChronology(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1238,f (chrono == getChronology()) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1239,eturn this;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1241,"eturn MaskedType.mask(iType.withChronology(chrono), iMask);"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1244,ublic boolean isPrecise() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1245,eturn years().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1246,& months().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1247,& weeks().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1248,& days().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1249,& hours().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1250,& minutes().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1251,& seconds().isPrecise()
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1252,& minutes().isPrecise();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1255,ublic DurationField years() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1256,f ((iMask & (1 << 0)) != 0) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1257,eturn UnsupportedDurationField.getInstance(DurationFieldType.years());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1259,eturn iType.years();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1262,ublic DurationField months() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1263,f ((iMask & (1 << 1)) != 0) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1264,eturn UnsupportedDurationField.getInstance(DurationFieldType.months());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1266,eturn iType.months();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1269,ublic DurationField weeks() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1270,f ((iMask & (1 << 2)) != 0) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1271,eturn UnsupportedDurationField.getInstance(DurationFieldType.weeks());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1273,eturn iType.weeks();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1276,ublic DurationField days() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1277,f ((iMask & (1 << 3)) != 0) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1278,eturn UnsupportedDurationField.getInstance(DurationFieldType.days());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1280,eturn iType.days();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1283,ublic DurationField hours() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1284,f ((iMask & (1 << 4)) != 0) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1285,eturn UnsupportedDurationField.getInstance(DurationFieldType.hours());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1287,eturn iType.hours();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1290,ublic DurationField minutes() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1291,f ((iMask & (1 << 5)) != 0) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1292,eturn UnsupportedDurationField.getInstance(DurationFieldType.minutes());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1294,eturn iType.minutes();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1297,ublic DurationField seconds() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1298,f ((iMask & (1 << 6)) != 0) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1299,eturn UnsupportedDurationField.getInstance(DurationFieldType.seconds());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1301,eturn iType.seconds();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1304,ublic DurationField millis() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1305,f ((iMask & (1 << 7)) != 0) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1306,eturn UnsupportedDurationField.getInstance(DurationFieldType.millis());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1308,eturn iType.millis();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1311,ublic String getName() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1312,tring name = iType.getName();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1313,"tring maskStr = """";"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1314,f ((iMask & (1 << 0)) != 0) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1315,"askStr += ""Years"";"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1317,f ((iMask & (1 << 1)) != 0) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1318,"askStr += ""Months"";"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1320,f ((iMask & (1 << 2)) != 0) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1321,"askStr += ""Weeks"";"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1323,f ((iMask & (1 << 3)) != 0) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1324,"askStr += ""Days"";"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1326,f ((iMask & (1 << 4)) != 0) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1327,"askStr += ""Hours"";"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1329,f ((iMask & (1 << 5)) != 0) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1330,"askStr += ""Minutes"";"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1332,f ((iMask & (1 << 6)) != 0) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1333,"askStr += ""Seconds"";"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1335,f ((iMask & (1 << 7)) != 0) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1336,"askStr += ""Millis"";"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,1338,"eturn ""Masked"" + maskStr + ""["" + (name == null ? """" : name) + ""]"";"
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,170,"* @param chrono  the chronology to add using, null means ISO default"
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,173,oid setPeriodAfterStart(ReadablePeriod period);
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,174,"void setPeriodAfterStart(ReadablePeriod period, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,180,"* @param chrono  the chronology to add using, null means ISO default"
False,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,182,oid setPeriodBeforeEnd(ReadablePeriod period);
True,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,JodaTime/src/java/org/joda/time/ReadWritableInterval.java,184,"void setPeriodBeforeEnd(ReadablePeriod period, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,69,* Sets the value of one of the fields.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,70,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,71,* The field type specified must be one of those that is supported by the period.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,73,* @param field  a DurationFieldType instance that is supported by this period
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,74,* @param value  the new value for the field
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,75,* @throws IllegalArgumentException if the field is null or not supported
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,77,"void set(DurationFieldType field, int value);"
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,108,"* @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,99,oid setPeriod(ReadableInterval interval);
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,110,"void setPeriod(ReadableInterval interval, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,118,"* @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,108,"oid setPeriod(long startInstant, long endInstant);"
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,120,"void setPeriod(long startInstant, long endInstant, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,131,"* @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,120,oid setPeriod(ReadableDuration duration);
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,133,"void setPeriod(ReadableDuration duration, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,144,"* @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,132,oid setPeriod(long duration);
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,146,"void setPeriod(long duration, Chronology chrono);"
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,150,* Adds to the value of one of the fields.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,151,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,152,* The field type specified must be one of those that is supported by the period.
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,154,* @param field  a DurationFieldType instance that is supported by this period
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,155,* @param value  the value to add to the field
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,156,* @throws IllegalArgumentException if the field is null or not supported
True,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,158,"void add(DurationFieldType field, int value);"
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,199, Normalizes all the field values in this period.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,200, <p>
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,201, This method converts to a milliecond duration and back again.
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,203, @throws IllegalStateException if this period is imprecise
False,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,JodaTime/src/java/org/joda/time/ReadWritablePeriod.java,205,oid normalize();
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,66, The {@link PeriodType} defines the rules for dividing the fields and which fields
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,67, are supported. Unsupported fields always have a value of zero.
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,72,* <p>
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,73,"* Periods are independent of chronology, and can only be treated as durations"
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,74,* when paired with a time.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,84, Returns the period type which defines which fields this period supports.
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,85,* Gets the period type that defines which fields are included in the period.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,91," Is this period a precise length of time, or descriptive."
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,92, <p>
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,93," A precise period could include millis, seconds, minutes or hours."
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,94," However, days, weeks, months and years can vary in length, resulting in"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,95, an imprecise period.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,96, <p>
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,97, An imprecise period can be made precise by pairing it with a
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,98, date in a {@link ReadableInterval}.
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,92,* Gets the number of fields that this period supports.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,100, @return true if the period is precise
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,94,* @return the number of fields supported
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,102,oolean isPrecise();
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,96,int size();
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,106," Adds this period to the given instant, returning a new value."
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,99,* Gets the field type at the specified index.
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,101,* @param index  the index to retrieve
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,102,* @return the field at the specified index
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,103,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,105,DurationFieldType getFieldType(int index);
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,108,* Gets the value at the specified index.
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,110,* @param index  the index to retrieve
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,111,* @return the value of the field at the specified index
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,112,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,114,int getValue(int index);
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,117,* Gets the value of one of the fields.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,108, The addition uses the chronology of the PeriodType.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,109," To add just once, pass in a scalar of one. To subtract once, pass"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,110, in a scalar of minus one.
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,119,* If the field type specified is not supported by the period then zero
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,120,* is returned.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,112, @param instant  the milliseconds from 1970-01-01T00:00:00Z to add the
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,113, period to
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,114," @param scalar  the number of times to add the period, negative to subtract"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,115, @return milliseconds value plus this period times scalar
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,116, @throws ArithmeticException if the result of the calculation is too large
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,122,"* @param field  the field type to query, null returns zero"
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,123,"* @return the value of that field, zero if field not supported"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,118,"ong addTo(long instant, int scalar);"
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,125,int get(DurationFieldType field);
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,128,* Checks whether the field type specified is supported by this period.
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,130,"* @param field  the field to check, may be null which returns false"
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,131,* @return true if the field is supported
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,133,boolean isSupported(DurationFieldType field);
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,123, The addition uses the chronology specified.
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,139,"* The addition uses the chronology specified, or ISOChronology"
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,140,* in the default zone if it is null.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,127, @param instant  the milliseconds from 1970-01-01T00:00:00Z to add the
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,128, period to
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,144,* @param instant  the millisecond instant to add the period to
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,130," @param chrono  override the chronology of the period type, unless null is passed in"
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,146,"* @param chrono  the chronology to use, null means ISO in the default zone"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,165, Gets the years field part of the period.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,167," @return the number of years in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,169,nt getYears();
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,172, Gets the months field part of the period.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,174," @return the number of months in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,176,nt getMonths();
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,179, Gets the weeks field part of the period.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,181," @return the number of weeks in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,183,nt getWeeks();
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,186, Gets the days field part of the period.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,188," @return the number of days in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,190,nt getDays();
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,193, Gets the hours field part of the period.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,195," @return the number of hours in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,197,nt getHours();
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,200, Gets the minutes field part of the period.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,202," @return the number of minutes in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,204,nt getMinutes();
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,207, Gets the seconds field part of the period.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,209," @return the number of seconds in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,211,nt getSeconds();
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,214, Gets the millis field part of the period.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,216," @return the number of millis in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,218,nt getMillis();
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,240," Gets the total length of this time period in milliseconds,"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,241, failing if the period is imprecise.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,243, @return the total length of the time period in milliseconds.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,244, @throws IllegalStateException if this time period is imprecise
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,246,ong toDurationMillis();
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,249," Gets the total length of this time period,"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,250, failing if the period is imprecise.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,252, @return the total length of the time period in milliseconds.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,253, @throws IllegalStateException if this time period is imprecise
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,255,uration toDuration();
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,260, on the value of each field. All ReadablePeriod instances are accepted.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,261, <p>
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,262, To compare two periods for absolute duration (ie. millisecond duration
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,263," ignoring the fields), use {@link #toDurationMillis()} or {@link #toDuration()}."
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,201,* on the value and type of each supported field.
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,202,* All ReadablePeriod instances are accepted.
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,266," @return true if all the field values are equal, false if"
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,205,"* @return true if all the field values and types are equal, false if"
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,272, Gets a hash code for the period that is compatible with the
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,273, equals method. The hashcode is the period type hashcode plus
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,274, each period value from largest to smallest calculated as follows:
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,211,* Gets a hash code for the period that is compatible with the equals method.
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,212,* The hashcode is calculated as follows:
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,276,   int hash = getPeriodType().hashCode();
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,277,   hash = 53 * hash + getYears();
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,278,   hash = 53 * hash + getMonths();
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,279,   hash = 53 * hash + getWeeks();
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,280,   hash = 53 * hash + getDays();
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,281,   hash = 53 * hash + getHours();
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,282,   hash = 53 * hash + getMinutes();
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,283,   hash = 53 * hash + getSeconds();
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,284,   hash = 53 * hash + getMillis();
False,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,285,   return hash;
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,214,*  int total = 17;
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,215,*  for (int i = 0; i < fields.length; i++) {
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,216,*      total = 27 * total + getValue(i);
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,217,*      total = 27 * total + getFieldType(i).hashCode();
True,JodaTime/src/java/org/joda/time/ReadablePeriod.java,JodaTime/src/java/org/joda/time/ReadablePeriod.java,219,*  return total;
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,60,mport org.joda.time.format.ISOPeriodFormat;
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,60,import org.joda.time.format.FormatUtils;
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,246, Gets the value as a String in the ISO8601 duration format.
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,246,* Gets the value as a String in the ISO8601 duration format including
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,247,* only seconds and milliseconds.
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,248," For example, ""P6H3M7S"" represents 6 hours, 3 minutes, 7 seconds."
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,249, The field values are determined using {@link #toPeriod()}.
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,249,"* For example, ""PT72.345S"" represents 1 minute, 12 seconds and 345 milliseconds."
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,257,eturn ISOPeriodFormat.getInstance().standard().print(toPeriod());
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,257,long millis = getMillis();
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,258,StringBuffer buf = new StringBuffer();
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,259,"buf.append(""PT"");"
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,260,"FormatUtils.appendUnpaddedInteger(buf, millis / 1000);"
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,261,long part = Math.abs(millis % 1000);
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,262,if (part > 0) {
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,263,buf.append('.');
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,264,"FormatUtils.appendPaddedInteger(buf, part, 3);"
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,266,buf.append('S');
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,267,return buf.toString();
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,289,if (this == partial) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,290,return true;
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,60,import org.joda.time.DurationFieldType;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,62,mport org.joda.time.PeriodType;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,93, Adds this period to the given instant using the chronology of the period
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,94, which typically ignores time zones.
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,93,* Gets an array of the field types that this period supports.
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,95,"* The fields are returned largest to smallest, for example Hours, Minutes, Seconds."
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,97,"* @return the fields supported in an array that may be altered, largest to smallest"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,99,public DurationFieldType[] getFieldTypes() {
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,100,DurationFieldType[] result = new DurationFieldType[size()];
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,101,for (int i = 0; i < result.length; i++) {
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,102,result[i] = getFieldType(i);
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,104,return result;
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,108,* Gets an array of the value of each of the fields that this period supports.
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,109,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,110,"* The fields are returned largest to smallest, for example Hours, Minutes, Seconds."
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,111,* Each value corresponds to the same array index as <code>getFields()</code>
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,113,"* @return the current values of each field in an array that may be altered, largest to smallest"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,115,public int[] getValues() {
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,116,int[] result = new int[size()];
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,117,for (int i = 0; i < result.length; i++) {
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,118,result[i] = getValue(i);
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,120,return result;
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,125,* Gets the value of one of the fields.
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,126,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,127,* If the field type specified is not supported by the period then zero
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,128,* is returned.
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,130,"* @param field  the field type to query, null returns zero"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,131,"* @return the value of that field, zero if field not supported"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,133,public int get(DurationFieldType type) {
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,134,int index = indexOf(type);
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,135,if (index == -1) {
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,136,return 0;
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,138,return getValue(index);
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,142,* Checks whether the field specified is supported by this period.
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,144,"* @param type  the type to check, may be null which returns false"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,145,* @return true if the field is supported
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,147,public boolean isSupported(DurationFieldType type) {
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,148,return getPeriodType().isSupported(type);
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,152,* Gets the index of the field in this period.
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,154,"* @param type  the type to check, may be null which returns -1"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,155,* @return the index of -1 if not supported
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,157,public int indexOf(DurationFieldType type) {
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,158,return getPeriodType().indexOf(type);
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,163,"* Adds this period to the given instant, returning a new value."
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,164,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,165,* The addition uses ISOChronology in the default zone.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,99, @param instant  the milliseconds from 1970-01-01T00:00:00Z to add the
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,100, period to
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,169,* @param instant  the millisecond instant to add the period to
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,110, Adds this period to the given instant using a specific chronology.
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,179,"* Adds this period to the given instant, returning a new value."
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,181,"* The addition uses the chronology specified, or ISOChronology"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,182,* in the default zone if it is null.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,115, @param instant  the milliseconds from 1970-01-01T00:00:00Z to add the
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,116, period to
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,186,* @param instant  the millisecond instant to add the period to
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,118," @param chrono  override the period's chronology, unless null is passed in"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,188,"* @param chrono  the chronology to use, null means ISO in the default zone"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,123,f (isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,124,"eturn FieldUtils.safeAdd(instant, toDurationMillis() * scalar);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,127,eriodType type = getPeriodType();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,128,f (chrono != null) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,129,ype = type.withChronology(chrono);
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,132,ong value; // used to lock fields against threading issues
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,133,"alue = scaleValue(getYears(), scalar);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,134,f (value != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,135,"nstant = type.years().add(instant, value);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,137,"alue = scaleValue(getMonths(), scalar);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,138,f (value != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,139,"nstant = type.months().add(instant, value);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,141,"alue = scaleValue(getWeeks(), scalar);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,142,f (value != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,143,"nstant = type.weeks().add(instant, value);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,145,"alue = scaleValue(getDays(), scalar);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,146,f (value != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,147,"nstant = type.days().add(instant, value);"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,193,if (scalar != 0) {
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,194,chrono = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,195,"for (int i = 0, isize = size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,196,long value = getValue(i); // use long to allow for multiplication (fits OK)
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,197,if (value != 0) {
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,198,"instant = getFieldType(i).getField(chrono).add(instant, value * scalar);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,149,"alue = scaleValue(getHours(), scalar);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,150,f (value != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,151,"nstant = type.hours().add(instant, value);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,153,"alue = scaleValue(getMinutes(), scalar);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,154,f (value != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,155,"nstant = type.minutes().add(instant, value);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,157,"alue = scaleValue(getSeconds(), scalar);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,158,f (value != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,159,"nstant = type.seconds().add(instant, value);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,161,"alue = scaleValue(getMillis(), scalar);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,162,f (value != 0) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,163,"nstant = type.millis().add(instant, value);"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,170, Convert the scalar to a multiple efficiently.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,172, @param value  the value
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,173, @param scalar  the scalar
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,174, @return the converted value
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,176,"rivate static long scaleValue(int value, int scalar) {"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,177,ong val = value;  // use long to avoid truncation
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,178,witch (scalar) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,179,ase -1:
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,180,eturn -val;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,181,ase 0:
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,182,eturn 0;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,183,ase 1:
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,184,eturn val;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,185,efault:
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,186,eturn val * scalar;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,250," Gets the total millisecond duration of this period,"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,251, failing if the period is imprecise.
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,265,* Gets the total millisecond duration of this period relative to a start
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,266,* instant and chronology.
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,267,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,268,* This method adds the period to the specifed instant.
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,269,* The difference between the start instant and the result of the add is the duration
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,253, @return the total length of the period in milliseconds.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,254, @throws IllegalStateException if the period is imprecise
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,271,"* @param startInstant  the instant to add the period to, thus obtaining the duration"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,272,* @param chrono  the chronology to use
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,273,* @return the total length of the period in milliseconds relative to the start instant
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,257,ublic Duration toDuration() {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,258,eturn new Duration(toDurationMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,276,"public long toDurationMillisFrom(long startInstant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,277,"long endInstant = addTo(startInstant, 1, chrono);"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,278,"return FieldUtils.safeAdd(endInstant, -startInstant);"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,282,* Gets the total millisecond duration of this period relative to a start
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,283,* instant and chronology.
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,284,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,285,* This method adds the period to the specifed instant.
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,286,* The difference between the start instant and the result of the add is the duration
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,288,"* @param startInstant  the instant to add the period to, thus obtaining the duration"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,289,* @return the total length of the period in milliseconds relative to the start instant
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,290,* @throws ArithmeticException if the millis exceeds the capacity of the duration
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,292,public Duration toDurationFrom(ReadableInstant startInstant) {
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,293,long millis = DateTimeUtils.getInstantMillis(startInstant);
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,294,Chronology chrono = DateTimeUtils.getInstantChronology(startInstant);
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,295,"return new Duration(toDurationMillisFrom(millis, chrono));"
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,265, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,266, To compare two periods for absolute duration (ie. millisecond duration
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,267," ignoring the fields), use {@link #toDurationMillis()} or {@link #toDuration()}."
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,273,ublic boolean equals(Object readablePeriod) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,274,f (this == readablePeriod) {
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,307,public boolean equals(Object period) {
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,308,if (this == period) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,277,f (readablePeriod instanceof ReadablePeriod == false) {
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,311,if (period instanceof ReadablePeriod == false) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,280,eadablePeriod other = (ReadablePeriod) readablePeriod;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,281,eriodType type = getPeriodType();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,282,f (type.equals(other.getPeriodType()) == false) {
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,314,ReadablePeriod other = (ReadablePeriod) period;
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,315,if (size() != other.size()) {
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,285,eturn getYears() == other.getYears()
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,286,& getMonths() == other.getMonths()
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,287,& getWeeks() == other.getWeeks()
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,288,& getDays() == other.getDays()
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,289,& getHours() == other.getHours()
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,290,& getMinutes() == other.getMinutes()
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,291,& getSeconds() == other.getSeconds()
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,292,& getMillis() == other.getMillis();
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,318,"for (int i = 0, isize = size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,319,if (getValue(i) != other.getValue(i) || getFieldType(i) != other.getFieldType(i)) {
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,320,return false;
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,323,return true;
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,296, Gets a hash code for the period that is compatible with the
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,297, equals method. The hashcode is the period type hashcode plus
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,298, each period value from largest to smallest calculated as follows:
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,327,* Gets a hash code for the period as defined by ReadablePeriod.
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,303,nt hash = getPeriodType().hashCode();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,304,ash = 53 * hash + getYears();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,305,ash = 53 * hash + getMonths();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,306,ash = 53 * hash + getWeeks();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,307,ash = 53 * hash + getDays();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,308,ash = 53 * hash + getHours();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,309,ash = 53 * hash + getMinutes();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,310,ash = 53 * hash + getSeconds();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,311,ash = 53 * hash + getMillis();
False,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,312,eturn hash;
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,332,int total = 17;
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,333,"for (int i = 0, isize = size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,334,total = 27 * total + getValue(i);
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,335,total = 27 * total + getFieldType(i).hashCode();
True,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,JodaTime/src/java/org/joda/time/base/AbstractPeriod.java,337,return total;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,58,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,61,import org.joda.time.DurationFieldType;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,71, data in a <code>int</code> and <code>PeriodType</code> fields.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,73,* data in a <code>PeriodType</code> and an <code>int[]</code>.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,90,** Millis cache is currently unknown */
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,91,rivate static final int STATE_UNKNOWN = 0;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,92,** Millis cache is not calculable */
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,93,rivate static final int STATE_NOT_CALCULABLE = 1;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,94,** Millis cache has been calculated and is valid */
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,95,rivate static final int STATE_CALCULATED = 2;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,97,** The period type that allocates the duration to fields */
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,98,rivate final PeriodType iType;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,99,** The object state */
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,100,rivate transient int iState;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,101,"** The duration, if known */"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,102,rivate transient long iDuration;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,103,** Value for years */
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,104,rivate int iYears;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,105,** Value for months */
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,106,rivate int iMonths;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,107,** Value for weeks */
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,108,rivate int iWeeks;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,109,** Value for days */
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,110,rivate int iDays;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,111,** Value for hours */
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,112,rivate int iHours;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,113,** Value for minutes */
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,114,rivate int iMinutes;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,115,** Value for seconds */
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,116,rivate int iSeconds;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,117,** Value for millis */
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,118,rivate int iMillis;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,92,/** The type of period */
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,93,private PeriodType iType;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,94,/** The values */
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,95,private int[] iValues;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,128, @param type  which set of fields this period supports
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,105,"* @param type  which set of fields this period supports, null means standard"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,106,"* @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,131,"rotected BasePeriod(long duration, PeriodType type) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,109,"protected BasePeriod(long duration, PeriodType type, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,135,/ Only call a private method
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,136,"etPeriod(type, duration);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,113,"setPeriodInternal(duration, chrono); // internal method"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,160,/ Only call a private method
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,161,"etPeriod(type, years, months, weeks, days, hours, minutes, seconds, millis);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,137,"setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,169, @param type  which set of fields this period supports
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,145,"* @param type  which set of fields this period supports, null means standard"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,146,"* @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,172,"rotected BasePeriod(long startInstant, long endInstant, PeriodType type) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,149,"protected BasePeriod(long startInstant, long endInstant, PeriodType type, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,176,/ Only call a private method
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,177,"etPeriod(type, startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,153,"setPeriodInternal(startInstant, endInstant, chrono); // internal method"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,185, @param type  which set of fields this period supports
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,161,"* @param type  which set of fields this period supports, null means standard"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,188,rotected BasePeriod(
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,189,"eadableInstant startInstant, ReadableInstant  endInstant, PeriodType type) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,164,"protected BasePeriod(ReadableInstant startInstant, ReadableInstant  endInstant, PeriodType type) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,169,iValues = new int[size()];
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,195,ong start = (startInstant == null ? DateTimeUtils.currentTimeMillis() : startInstant.getMillis());
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,196,ong end = (endInstant == null ? DateTimeUtils.currentTimeMillis() : endInstant.getMillis());
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,171,long start = DateTimeUtils.getInstantMillis(startInstant);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,172,long end = DateTimeUtils.getInstantMillis(endInstant);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,173,Chronology chrono = (startInstant != null ? startInstant.getChronology() : endInstant.getChronology());
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,198,/ Only call a private method
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,199,"etPeriod(type, start, end);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,175,"setPeriodInternal(start, end, chrono); // internal method"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,184,"* @param chrono  the chronology to use, null means ISO default"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,211,"rotected BasePeriod(Object period, PeriodType type) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,188,"protected BasePeriod(Object period, PeriodType type, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,214,"ype = (type == null ? converter.getPeriodType(period, false) : type);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,191,type = (type == null ? converter.getPeriodType(period) : type);
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,218,"onverter.setInto((ReadWritablePeriod) this, period);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,195,iValues = new int[size()];
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,196,chrono = DateTimeUtils.getChronology(chrono);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,197,"converter.setInto((ReadWritablePeriod) this, period, chrono);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,220,/ Only call a private method
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,221,"etPeriod(type, new MutablePeriod(period, type));"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,199,"setPeriodInternal(new MutablePeriod(period, type, chrono));"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,240, Returns the object which defines which fields this period supports.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,218,* Gets the period type.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,220,* @return the period type
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,247," Is this period a precise length of time, or descriptive."
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,248, <p>
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,249," A typical precise period could include millis, seconds, minutes or hours,"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,250," but days, weeks, months and years usually vary in length, resulting in"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,251, an imprecise period.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,252, <p>
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,253, An imprecise period can be made precise by pairing it with a
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,254, date in a {@link org.joda.time.ReadableInterval}.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,256, @return true if the period is precise
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,258,ublic boolean isPrecise() {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,259,nt state = iState;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,260,f (state == STATE_UNKNOWN) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,261,tate = updateTotalMillis();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,263,eturn (state == STATE_CALCULATED);
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,268, Gets the years field part of the period.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,270," @return the number of years in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,272,ublic int getYears() {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,273,eturn iYears;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,278, Gets the months field part of the period.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,280," @return the number of months in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,282,ublic int getMonths() {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,283,eturn iMonths;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,288, Gets the weeks field part of the period.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,290," @return the number of weeks in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,292,ublic int getWeeks() {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,293,eturn iWeeks;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,298, Gets the days field part of the period.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,300," @return the number of days in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,302,ublic int getDays() {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,303,eturn iDays;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,308, Gets the hours field part of the period.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,310," @return the number of hours in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,228,* Gets the number of fields that this period supports.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,230,* @return the number of fields supported
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,312,ublic int getHours() {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,313,eturn iHours;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,232,public int size() {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,233,return iType.size();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,318, Gets the minutes field part of the period.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,320," @return the number of minutes in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,237,* Gets the field type at the specified index.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,239,* @param index  the index to retrieve
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,240,* @return the field at the specified index
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,241,* @throws IndexOutOfBoundsException if the index is invalid
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,322,ublic int getMinutes() {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,323,eturn iMinutes;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,243,public DurationFieldType getFieldType(int index) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,244,return iType.getFieldType(index);
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,328, Gets the seconds field part of the period.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,330," @return the number of seconds in the period, zero if unsupported"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,248,* Gets the value at the specified index.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,250,* @param index  the index to retrieve
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,251,* @return the value of the field at the specified index
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,252,* @throws IndexOutOfBoundsException if the index is invalid
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,332,ublic int getSeconds() {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,333,eturn iSeconds;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,254,public int getValue(int index) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,255,return iValues[index];
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,338, Gets the millis field part of the period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,260,"* Checks whether a field type is supported, and if so adds the new value"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,261,* to the relevent index in the specified array.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,340," @return the number of millis in the period, zero if unsupported"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,342,ublic int getMillis() {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,343,eturn iMillis;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,348," Gets the total millisecond duration of this period,"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,349, failing if the period is imprecise.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,351, @return the total length of the period in milliseconds.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,352, @throws IllegalStateException if the period is imprecise
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,353, @throws ArithmeticException if the millis exceeds the capacity of the duration
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,355,ublic long toDurationMillis() {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,356,nt state = iState;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,357,f (state == STATE_UNKNOWN) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,358,tate = updateTotalMillis();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,360,f (state != STATE_CALCULATED) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,361,"hrow new IllegalStateException(""Duration is imprecise"");"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,263,* @param type  the field type
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,264,* @param values  the array to update
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,265,* @param newValue  the new value to store if successful
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,267,"private void checkAndUpdate(DurationFieldType type, int[] values, int newValue) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,268,int index = indexOf(type);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,269,if (index == -1) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,270,if (newValue != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,271,throw new IllegalArgumentException(
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,272,"""Period does not support field '"" + type.getName() + ""'"");"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,274,} else {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,275,values[index] = newValue;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,363,eturn iDuration;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,368, Checks whether the field is supported.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,281,* Sets all the fields of this period from another.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,283,"* @param period  the period to copy from, not null"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,284,* @throws IllegalArgumentException if an unsupported field's value is non-zero
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,370,rivate static void checkArgument(DurationField field) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,371,f (!field.isSupported()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,372,hrow new IllegalArgumentException
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,373,"""Time period does not support field '"" + field.getName() + ""'"");"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,286,protected void setPeriod(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,287,if (period == null) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,288,"setPeriodInternal(0L, null);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,289,} else {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,290,setPeriodInternal(period);
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,378, Checks whether the field is supported.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,295,* Private method called from constructor.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,380,rivate static void checkSupport(DurationField field) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,381,f (!field.isSupported()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,382,hrow new UnsupportedOperationException
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,383,"""Time period does not support field '"" + field.getName() + ""'"");"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,297,private void setPeriodInternal(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,298,int[] newValues = new int[size()];
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,299,"for (int i = 0, isize = period.size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,300,DurationFieldType type = period.getFieldType(i);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,301,int value = period.getValue(i);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,302,"checkAndUpdate(type, newValues, value);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,304,iValues = newValues;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,388, This method is private to prevent subclasses from overriding.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,390,"rivate void setPeriod(PeriodType type, ReadablePeriod period) {"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,391,"etPeriod(type,"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,392,"eriod.getYears(), period.getMonths(),"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,393,"eriod.getWeeks(), period.getDays(),"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,394,"eriod.getHours(), period.getMinutes(),"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,395,"eriod.getSeconds(), period.getMillis());"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,399, Sets all the fields in one go.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,308,* Sets the eight standard the fields in one go.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,412,"nt hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,413,"etPeriod(iType, years, months, weeks, days, hours, minutes, seconds, millis);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,321,"int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,322,"setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,417, This method is private to prevent subclasses from overriding.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,326,* Private method called from constructor.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,419,"rivate void setPeriod(PeriodType type,"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,420,"nt years, int months, int weeks, int days,"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,421,"nt hours, int minutes, int seconds, int millis) {"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,422,f (years != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,423,heckArgument(type.years());
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,425,f (months != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,426,heckArgument(type.months());
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,428,f (weeks != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,429,heckArgument(type.weeks());
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,431,f (days != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,432,heckArgument(type.days());
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,434,f (hours != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,435,heckArgument(type.hours());
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,437,f (minutes != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,438,heckArgument(type.minutes());
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,440,f (seconds != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,441,heckArgument(type.seconds());
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,443,f (millis != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,444,heckArgument(type.millis());
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,447,/ assign fields in one block to reduce threading issues
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,448,Years = years;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,449,Months = months;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,450,Weeks = weeks;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,451,Days = days;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,452,Hours = hours;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,453,Minutes = minutes;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,454,Seconds = seconds;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,455,Millis = millis;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,456,State = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,328,"private void setPeriodInternal(int years, int months, int weeks, int days,"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,329,"int hours, int minutes, int seconds, int millis) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,330,int[] newValues = new int[size()];
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,331,"checkAndUpdate(DurationFieldType.years(), newValues, years);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,332,"checkAndUpdate(DurationFieldType.months(), newValues, months);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,333,"checkAndUpdate(DurationFieldType.weeks(), newValues, weeks);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,334,"checkAndUpdate(DurationFieldType.days(), newValues, days);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,335,"checkAndUpdate(DurationFieldType.hours(), newValues, hours);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,336,"checkAndUpdate(DurationFieldType.minutes(), newValues, minutes);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,337,"checkAndUpdate(DurationFieldType.seconds(), newValues, seconds);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,338,"checkAndUpdate(DurationFieldType.millis(), newValues, millis);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,339,iValues = newValues;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,347,"* @param chrono  the chronology to use, not null"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,465,"rotected void setPeriod(long startInstant, long endInstant) {"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,466,"etPeriod(iType, startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,349,"protected void setPeriod(long startInstant, long endInstant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,350,"setPeriodInternal(startInstant, endInstant, chrono);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,470, This method is private to prevent subclasses from overriding.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,472," @param startInstant  interval start, in milliseconds"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,473," @param endInstant  interval end, in milliseconds"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,354,* Private method called from constructor.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,475,"rivate void setPeriod(PeriodType type, long startInstant, long endInstant) {"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,476,ong baseTotalMillis = (endInstant - startInstant);
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,477,"nt years = 0, months = 0, weeks = 0, days = 0;"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,478,"nt hours = 0, minutes = 0, seconds = 0, millis = 0;"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,479,urationField field;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,480,ield = type.years();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,481,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,482,"ears = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,483,"tartInstant = field.add(startInstant, years);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,485,ield = type.months();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,486,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,487,"onths = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,488,"tartInstant = field.add(startInstant, months);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,490,ield = type.weeks();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,491,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,492,"eeks = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,493,"tartInstant = field.add(startInstant, weeks);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,495,ield = type.days();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,496,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,497,"ays = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,498,"tartInstant = field.add(startInstant, days);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,500,ield = type.hours();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,501,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,502,"ours = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,503,"tartInstant = field.add(startInstant, hours);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,505,ield = type.minutes();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,506,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,507,"inutes = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,508,"tartInstant = field.add(startInstant, minutes);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,510,ield = type.seconds();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,511,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,512,"econds = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,513,"tartInstant = field.add(startInstant, seconds);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,515,ield = type.millis();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,516,f (field.isSupported()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,517,"illis = field.getDifference(endInstant, startInstant);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,518,"tartInstant = field.add(startInstant, millis);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,356,"private void setPeriodInternal(long startInstant, long endInstant, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,357,int[] newValues = new int[size()];
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,358,if (startInstant == endInstant) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,359,iValues = newValues;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,360,} else {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,361,"for (int i = 0, isize = size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,362,DurationField field = getFieldType(i).getField(chrono);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,363,"int value = field.getDifference(endInstant, startInstant);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,364,"startInstant = field.add(startInstant, value);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,365,newValues[i] = value;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,367,iValues = newValues;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,521,/ assign fields in one block to reduce threading issues
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,522,Years = years;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,523,Months = months;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,524,Weeks = weeks;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,525,Days = days;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,526,Hours = hours;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,527,Minutes = minutes;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,528,Seconds = seconds;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,529,Millis = millis;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,530,State = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,373,* <p>
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,374,* This calculates the period relative to 1970-01-01 but only sets those
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,375,* fields which are precise.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,379,"* @param chrono  the chronology to use, not null"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,539,rotected void setPeriod(long duration) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,540,"etPeriod(iType, duration);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,381,"protected void setPeriod(long duration, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,382,"setPeriodInternal(duration, chrono);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,544, This method is private to prevent subclasses from overriding.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,546," @param duration  the duration, in milliseconds"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,386,* Private method called from constructor.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,548,"rivate void setPeriod(PeriodType type, long duration) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,388,"private void setPeriodInternal(long duration, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,389,int[] newValues = new int[size()];
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,550,Duration = duration;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,551,Years = 0;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,552,Months = 0;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,553,Weeks = 0;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,554,Days = 0;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,555,Hours = 0;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,556,Minutes = 0;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,557,Seconds = 0;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,558,Millis = 0;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,559,State = STATE_CALCULATED;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,560,eturn;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,563,ong startInstant = 0;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,564,"nt years = 0, months = 0, weeks = 0, days = 0;"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,565,"nt hours = 0, minutes = 0, seconds = 0, millis = 0;"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,566,urationField field;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,568,ield = type.years();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,569,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,570,"ears = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,571,"tartInstant = field.add(startInstant, years);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,573,ield = type.months();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,574,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,575,"onths = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,576,"tartInstant = field.add(startInstant, months);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,578,ield = type.weeks();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,579,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,580,"eeks = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,581,"tartInstant = field.add(startInstant, weeks);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,583,ield = type.days();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,584,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,585,"ays = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,586,"tartInstant = field.add(startInstant, days);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,588,ield = type.hours();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,589,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,590,"ours = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,591,"tartInstant = field.add(startInstant, hours);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,593,ield = type.minutes();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,594,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,595,"inutes = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,596,"tartInstant = field.add(startInstant, minutes);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,598,ield = type.seconds();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,599,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,600,"econds = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,601,"tartInstant = field.add(startInstant, seconds);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,603,ield = type.millis();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,604,f (field.isSupported() && field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,605,"illis = field.getDifference(duration, startInstant);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,606,"tartInstant = field.add(startInstant, millis);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,609,/ assign fields in one block to reduce threading issues
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,610,Years = years;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,611,Months = months;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,612,Weeks = weeks;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,613,Days = days;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,614,Hours = hours;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,615,Minutes = minutes;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,616,Seconds = seconds;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,617,Millis = millis;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,618,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,623," Walks through the field values, determining total millis and whether"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,624, this period is precise.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,626, @return new state
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,627, @throws ArithmeticException if the millis exceeds the capacity of the period
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,629,rivate int updateTotalMillis() {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,630,eriodType type = iType;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,632,oolean isPrecise = true;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,633,ong totalMillis = 0;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,635,urationField field;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,636,"nt years = iYears, months = iMonths, weeks = iWeeks, days = iDays;"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,637,"nt hours = iHours, minutes = iMinutes, seconds = iSeconds, millis = iMillis;"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,638,f (years != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,639,ield = type.years();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,640,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,641,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(years));"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,644,f (months != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,645,ield = type.months();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,646,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,647,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(months));"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,650,f (weeks != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,651,ield = type.weeks();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,652,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,653,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(weeks));"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,656,f (days != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,657,ield = type.days();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,658,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,659,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(days));"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,662,f (hours != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,663,ield = type.hours();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,664,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,665,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(hours));"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,668,f (minutes != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,669,ield = type.minutes();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,670,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,671,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(minutes));"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,674,f (seconds != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,675,ield = type.seconds();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,676,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,677,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(seconds));"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,680,f (millis != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,681,ield = type.millis();
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,682,f (isPrecise &= field.isPrecise()) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,683,"otalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(millis));"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,687,Duration = totalMillis;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,688,f (isPrecise) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,689,eturn iState = STATE_CALCULATED;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,391,iValues = newValues;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,691,eturn iState = STATE_NOT_CALCULABLE;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,697, Sets the number of years of the period.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,699, @param years  the number of years
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,700, @throws UnsupportedOperationException if field is not supported.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,702,rotected void setYears(int years) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,703,f (years != iYears) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,704,f (years != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,705,heckSupport(iType.years());
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,707,Years = years;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,708,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,714, Sets the number of months of the period.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,716, @param months  the number of months
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,717, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,719,rotected void setMonths(int months) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,720,f (months != iMonths) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,721,f (months != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,722,heckSupport(iType.months());
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,724,Months = months;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,725,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,731, Sets the number of weeks of the period.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,733, @param weeks  the number of weeks
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,734, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,736,rotected void setWeeks(int weeks) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,737,f (weeks != iWeeks) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,738,f (weeks != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,739,heckSupport(iType.weeks());
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,741,Weeks = weeks;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,742,State = STATE_UNKNOWN;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,748, Sets the number of days of the period.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,750, @param days  the number of days
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,751, @throws UnsupportedOperationException if field is not supported
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,753,rotected void setDays(int days) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,754,f (days != iDays) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,755,f (days != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,756,heckSupport(iType.days());
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,393,long current = 0;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,394,"for (int i = 0, isize = size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,395,DurationField field = getFieldType(i).getField(chrono);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,396,if (field.isPrecise()) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,397,"int value = field.getDifference(duration, current);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,398,"current = field.add(current, value);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,399,newValues[i] = value;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,758,Days = days;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,759,State = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,402,iValues = newValues;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,765, Sets the number of hours of the period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,407,* Sets the value of a field in this period.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,767, @param hours  the number of hours
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,768, @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,409,* @param field  the field to set
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,410,* @param value  the value to set
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,411,* @throws UnsupportedOperationException if field is not supported.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,770,rotected void setHours(int hours) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,771,f (hours != iHours) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,772,f (hours != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,773,heckSupport(iType.hours());
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,413,"protected void setField(DurationFieldType field, int value) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,414,int index = indexOf(field);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,415,if (index == -1) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,416,if (value != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,417,throw new UnsupportedOperationException(
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,418,"""Period does not support field '"" + field.getName() + ""'"");"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,775,Hours = hours;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,776,State = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,420,} else {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,421,"setValue(index, value);"
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,782, Sets the number of minutes of the period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,426,* Adds the fields from another period.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,784, @param minutes  the number of minutes
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,785, @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,428,"* @param period  the period to add from, not null"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,429,* @throws IllegalArgumentException if an unsupported field's value is non-zero
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,787,rotected void setMinutes(int minutes) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,788,f (minutes != iMinutes) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,789,f (minutes != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,790,heckSupport(iType.minutes());
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,792,Minutes = minutes;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,793,State = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,431,protected void addPeriod(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,432,int[] newValues = getValues(); // already cloned
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,433,"for (int i = 0, isize = period.size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,434,DurationFieldType type = period.getFieldType(i);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,435,int value = period.getValue(i);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,436,int index = indexOf(type);
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,437,if (index == -1) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,438,if (value != 0) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,439,throw new IllegalArgumentException(
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,440,"""Period does not support field '"" + type.getName() + ""'"");"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,442,} else {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,443,"newValues[index] = FieldUtils.safeAdd(getValue(index), value);"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,446,setValues(newValues);
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,799, Sets the number of seconds of the period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,451,* Sets the value of the field at the specifed index.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,801, @param seconds  the number of seconds
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,802, @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,453,* @param index  the index
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,454,* @param value  the value to set
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,455,* @throws IndexOutOfBoundsException if the index is invalid
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,804,rotected void setSeconds(int seconds) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,805,f (seconds != iSeconds) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,806,f (seconds != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,807,heckSupport(iType.seconds());
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,809,Seconds = seconds;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,810,State = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,457,"protected void setValue(int index, int value) {"
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,458,if (value != getValue(index)) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,459,iValues[index] = value;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,816, Sets the number of millis of the period.
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,464,* Sets the values of all fields.
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,818, @param millis  the number of millis
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,819, @throws UnsupportedOperationException if field is not supported
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,466,* @param values  the array of values
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,821,rotected void setMillis(int millis) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,822,f (millis != iMillis) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,823,f (millis != 0) {
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,824,heckSupport(iType.millis());
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,826,Millis = millis;
False,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,827,State = STATE_UNKNOWN;
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,468,protected void setValues(int[] values) {
True,JodaTime/src/java/org/joda/time/base/BasePeriod.java,JodaTime/src/java/org/joda/time/base/BasePeriod.java,469,iValues = values;
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,171, @param precise  true if a precise type is required
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,175,"ublic PeriodType getPeriodType(Object object, boolean precise) {"
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,176,f (precise) {
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,177,eturn PeriodType.getPreciseAllType();
False,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,179,eturn PeriodType.getAllType();
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,174,public PeriodType getPeriodType(Object object) {
True,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,JodaTime/src/java/org/joda/time/convert/AbstractConverter.java,175,return PeriodType.standard();
False,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,143,"eadablePeriodConverter.INSTANCE,"
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,56,mport org.joda.time.ReadWritablePeriod;
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,107," Extracts duration values from an object of this converter's type, and"
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,108, sets them into the given ReadWritableDuration.
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,110, @param duration duration to get modified
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,111," @param object  the object to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,112, @throws NullPointerException if the duration or object is null
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,113, @throws ClassCastException if the object is an invalid type
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,114, @throws IllegalArgumentException if the object is invalid
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,116,"ublic void setInto(ReadWritablePeriod duration, Object object) {"
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,117,uration.setPeriod(((Long) object).longValue());
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,56,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,110,* @param chrono  the chronology to use
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,111,"ublic void setInto(ReadWritablePeriod duration, Object object) {"
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,112,uration.setPeriod(0L);
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,113,"public void setInto(ReadWritablePeriod duration, Object object, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,114,"duration.setPeriod(0L, chrono);"
True,JodaTime/src/java/org/joda/time/convert/PeriodConverter.java,JodaTime/src/java/org/joda/time/convert/PeriodConverter.java,56,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/convert/PeriodConverter.java,JodaTime/src/java/org/joda/time/convert/PeriodConverter.java,75,"* @param chrono  the chronology to use, must not be null"
False,JodaTime/src/java/org/joda/time/convert/PeriodConverter.java,JodaTime/src/java/org/joda/time/convert/PeriodConverter.java,76,"oid setInto(ReadWritablePeriod period, Object object);"
True,JodaTime/src/java/org/joda/time/convert/PeriodConverter.java,JodaTime/src/java/org/joda/time/convert/PeriodConverter.java,78,"void setInto(ReadWritablePeriod period, Object object, Chronology chrono);"
False,JodaTime/src/java/org/joda/time/convert/PeriodConverter.java,JodaTime/src/java/org/joda/time/convert/PeriodConverter.java,82, @param precise  true if the period type must be precise
False,JodaTime/src/java/org/joda/time/convert/PeriodConverter.java,JodaTime/src/java/org/joda/time/convert/PeriodConverter.java,86,"eriodType getPeriodType(Object object, boolean precise);"
True,JodaTime/src/java/org/joda/time/convert/PeriodConverter.java,JodaTime/src/java/org/joda/time/convert/PeriodConverter.java,87,PeriodType getPeriodType(Object object);
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,56,mport org.joda.time.PeriodType;
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,56,import org.joda.time.Chronology;
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,103, @return the millisecond duration
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,103,"* @param chrono  the chronology to use, must not be null"
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,108,"ublic void setInto(ReadWritablePeriod duration, Object object) {"
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,109,uration.setPeriod((ReadableDuration) object);
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,113, Selects a suitable period type for the given object.
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,115," @param object  the object to examine, must not be null"
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,116, @param precise  true if a precise type is required
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,117, @return the period type from the readable duration
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,118, @throws NullPointerException if the object is null
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,119, @throws ClassCastException if the object is an invalid type
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,121,"ublic PeriodType getPeriodType(Object object, boolean precise) {"
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,122,eturn PeriodType.getPreciseAllType();
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,108,"public void setInto(ReadWritablePeriod duration, Object object, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,109,"duration.setPeriod((ReadableDuration) object, chrono);"
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,56,mport org.joda.time.ReadWritablePeriod;
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,56,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,58,import org.joda.time.ReadWritablePeriod;
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,98,* @param chrono  the chronology to use
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,98,"ublic void setInto(ReadWritablePeriod writablePeriod, Object object) {"
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,99,eadableInterval interval = (ReadableInterval) object;
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,100,"ritablePeriod.setPeriod(interval.getStartMillis(), interval.getEndMillis());"
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,100,"public void setInto(ReadWritablePeriod writablePeriod, Object object, Chronology chrono) {"
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,101,"writablePeriod.setPeriod((ReadableInterval) object, chrono);"
True,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,56,import org.joda.time.Chronology;
False,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,68,"mplements PeriodConverter, DurationConverter {"
True,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,69,implements PeriodConverter {
False,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,84, Extracts the millis from an object of this convertor's type.
False,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,86," @param object  the object to convert, must not be null"
False,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,87, @return the millisecond value
False,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,88, @throws NullPointerException if the object is null
False,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,89, @throws ClassCastException if the object is an invalid type
False,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,90, @throws IllegalArgumentException if the object is invalid
False,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,92,ublic long getDurationMillis(Object object) {
False,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,93,eturn ((ReadablePeriod) object).toDurationMillis();
False,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,103, @return the millisecond duration
True,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,90,* @param chrono  the chronology to use
False,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,108,"ublic void setInto(ReadWritablePeriod duration, Object object) {"
True,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,95,"public void setInto(ReadWritablePeriod duration, Object object, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,116, @param precise  true if a precise type is required
False,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,121,"ublic PeriodType getPeriodType(Object object, boolean precise) {"
True,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,107,public PeriodType getPeriodType(Object object) {
False,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,123,f (precise) {
False,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,124,f (period.getPeriodType().isPrecise()) {
False,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,125,eturn period.getPeriodType();
False,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,126, else {
False,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,127,eturn PeriodType.getPreciseAllType();
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,58,mport org.joda.time.PeriodType;
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,59,mport org.joda.time.MutablePeriod;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,58,import org.joda.time.Period;
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,62,mport org.joda.time.Period;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,62,import org.joda.time.field.FieldUtils;
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,125, Gets the duration of the string using the PreciseAll type.
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,124,* Gets the duration of the string using the standard type.
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,132,tring str = (String) object;
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,133,utablePeriod period = new MutablePeriod(PeriodType.getPreciseAllType());
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,134,eriodParser parser = ISOPeriodFormat.getInstance().standard();
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,135,"nt pos = parser.parseInto(period, str, 0);"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,136,f (pos < str.length()) {
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,137,f (pos < 0) {
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,138,/ Parse again to get a better exception thrown.
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,139,"arser.parseMutablePeriod(period.getPeriodType(), str);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,131,// parse here because duration could be bigger than the int supported
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,132,// by the period parser
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,133,String original = (String) object;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,134,String str = original;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,135,int len = str.length();
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,136,if (len >= 4 &&
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,137,(str.charAt(0) == 'P' || str.charAt(0) == 'p') &&
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,138,(str.charAt(1) == 'T' || str.charAt(1) == 't') &&
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,139,(str.charAt(len - 1) == 'S' || str.charAt(len - 1) == 's')) {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,140,// ok
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,141,} else {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,142,"throw new IllegalArgumentException(""Invalid format: \"""" + original + '""');"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,144,"str = str.substring(2, len - 1);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,145,int dot = -1;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,146,for (int i = 0; i < str.length(); i++) {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,147,if ((str.charAt(i) >= '0' && str.charAt(i) <= '9') ||
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,148,(i == 0 && str.charAt(0) == '-')) {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,149,// ok
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,150,} else if (i > 0 && str.charAt(i) == '.' && dot == -1) {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,151,// ok
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,152,dot = i;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,153,} else {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,154,"throw new IllegalArgumentException(""Invalid format: \"""" + original + '""');"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,141,"hrow new IllegalArgumentException(""Invalid format: \"""" + str + '""');"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,143,eturn period.toDurationMillis();
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,157,"long millis = 0, seconds = 0;"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,158,if (dot > 0) {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,159,"seconds = Long.parseLong(str.substring(0, dot));"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,160,str = str.substring(dot + 1);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,161,if (str.length() != 3) {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,162,"str = (str + ""000"").substring(0, 3);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,164,millis = Integer.parseInt(str);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,165,} else {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,166,seconds = Long.parseLong(str);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,168,if (seconds < 0) {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,169,"return FieldUtils.safeAdd(FieldUtils.safeMultiply(seconds, 1000), -millis);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,170,} else {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,171,"return FieldUtils.safeAdd(FieldUtils.safeMultiply(seconds, 1000), millis);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,182,* @param chrono  the chronology to use
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,156,"ublic void setInto(ReadWritablePeriod period, Object object) {"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,186,"public void setInto(ReadWritablePeriod period, Object object, Chronology chrono) {"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,224,"eriod = periodParser.parsePeriod(getPeriodType(leftStr, false), leftStr);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,254,"period = periodParser.parsePeriod(getPeriodType(leftStr), leftStr);"
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,236,"eriod = periodParser.parsePeriod(getPeriodType(rightStr, false), rightStr);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,266,"period = periodParser.parsePeriod(getPeriodType(rightStr), rightStr);"
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,62,import org.joda.time.DurationFieldType;
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1185,alue = period.getYears();
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1186,value = period.get(DurationFieldType.years());
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1188,alue = period.getMonths();
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1189,value = period.get(DurationFieldType.months());
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1191,alue = period.getWeeks();
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1192,value = period.get(DurationFieldType.weeks());
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1194,alue = period.getDays();
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1195,value = period.get(DurationFieldType.days());
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1197,alue = period.getHours();
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1198,value = period.get(DurationFieldType.hours());
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1200,alue = period.getMinutes();
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1201,value = period.get(DurationFieldType.minutes());
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1203,alue = period.getSeconds();
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1204,value = period.get(DurationFieldType.seconds());
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1206,alue = period.getMillis();
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1207,value = period.get(DurationFieldType.millis());
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1210,alue = period.getSeconds() * DateTimeConstants.MILLIS_PER_SECOND + period.getMillis();
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1211,int seconds = period.get(DurationFieldType.seconds());
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1212,int millis = period.get(DurationFieldType.millis());
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1213,value = seconds * DateTimeConstants.MILLIS_PER_SECOND + millis;
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1248,eturn (period.getYears() == 0 && period.getMonths() == 0 &&
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1249,eriod.getWeeks() == 0 && period.getDays() == 0 &&
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1250,eriod.getHours() == 0 && period.getMinutes() == 0 &&
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1251,eriod.getSeconds() == 0 && period.getMillis() == 0);
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1251,"for (int i = 0, isize = period.size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1252,if (period.getValue(i) != 0) {
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1253,return false;
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1256,return true;
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1259,eturn type.years().isSupported();
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1264,return type.isSupported(DurationFieldType.years());
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1261,eturn type.months().isSupported();
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1266,return type.isSupported(DurationFieldType.months());
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1263,eturn type.weeks().isSupported();
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1268,return type.isSupported(DurationFieldType.weeks());
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1265,eturn type.days().isSupported();
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1270,return type.isSupported(DurationFieldType.days());
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1267,eturn type.hours().isSupported();
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1272,return type.isSupported(DurationFieldType.hours());
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1269,eturn type.minutes().isSupported();
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1274,return type.isSupported(DurationFieldType.minutes());
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1271,eturn type.seconds().isSupported();
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1276,return type.isSupported(DurationFieldType.seconds());
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1273,eturn type.millis().isSupported();
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1278,return type.isSupported(DurationFieldType.millis());
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1276,eturn type.seconds().isSupported() ||  type.millis().isSupported();
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1281,return type.isSupported(DurationFieldType.seconds()) ||
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1282,type.isSupported(DurationFieldType.millis());
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,327,"ssertEquals(PeriodType.getDayHourType(), DateTimeUtils.getPeriodType(PeriodType.getDayHourType()));"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,328,"ssertEquals(PeriodType.getAllType(), DateTimeUtils.getPeriodType(null));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,327,"assertEquals(PeriodType.dayTime(), DateTimeUtils.getPeriodType(PeriodType.dayTime()));"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,328,"assertEquals(PeriodType.standard(), DateTimeUtils.getPeriodType(null));"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,294,L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,295,nt total = (365 + 2 * 30 + 3 * 7 + 4) * 24 + 5;
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,294,7L * DateTimeConstants.MILLIS_PER_SECOND + 845L;
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,297,"ssertEquals(""PT"" + total + ""H6M7.008S"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,296,"assertEquals(""PT"" + (length / 1000) + ""."" + (length % 1000) + ""S"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,304,test = new Duration(-12345L);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,305,"assertEquals(""PT-12.345S"", test.toString());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,329,"ssertEquals(PeriodType.getAllType(), result.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,331,"assertEquals(PeriodType.standard(), result.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,339,"ssertEquals(true, result.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,340,"ssertEquals(length, result.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,351,"ssertEquals(PeriodType.getAllType(), result.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,351,"assertEquals(PeriodType.standard(), result.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,361,"ssertEquals(true, result.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,362,"ssertEquals(length, result.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,365,ublic void testToPeriod_PeriodType2() {
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,366,ong length =
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,367,4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,368,L * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,369,L * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,370,L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,371,uration test = new Duration(length);
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,372,eriod result = test.toPeriod(PeriodType.getPreciseAllType());
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,373,"ssertEquals(PeriodType.getPreciseAllType(), result.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,374,/ only time fields are precise in AllType
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,375,"ssertEquals(1, result.getYears());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,376,"ssertEquals(2, result.getMonths());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,377,"ssertEquals(3, result.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,378,"ssertEquals(4, result.getDays());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,379,"ssertEquals(5, result.getHours());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,380,"ssertEquals(6, result.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,381,"ssertEquals(7, result.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,382,"ssertEquals(8, result.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,383,"ssertEquals(true, result.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,384,"ssertEquals(length, result.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,363,//    public void testToPeriod_PeriodType2() {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,364,//        long length =
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,365,//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,366,//            5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,367,//            6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,368,//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,369,//        Duration test = new Duration(length);
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,370,//        Period result = test.toPeriod(PeriodType.getPreciseAllType());
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,371,"//        assertEquals(PeriodType.getPreciseAllType(), result.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,372,//        // only time fields are precise in AllType
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,373,"//        assertEquals(1, result.getYears());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,374,"//        assertEquals(2, result.getMonths());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,375,"//        assertEquals(3, result.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,376,"//        assertEquals(4, result.getDays());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,377,"//        assertEquals(5, result.getHours());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,378,"//        assertEquals(6, result.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,379,"//        assertEquals(7, result.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,380,"//        assertEquals(8, result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,381,"//        assertEquals(true, result.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,382,"//        assertEquals(length, result.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,196,"uration test = new Duration(""P1Y2M3D"");"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,197,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,198,"365L + 2L * 30L + 3L) * DateTimeConstants.MILLIS_PER_DAY, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,196,"Duration test = new Duration(""P72.345S"");"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,197,"assertEquals(72345, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,232,ublic void testConstructor_Object6() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,233,"ateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,234,"ateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,235,eriod base = new Period(dt2.getMillis() - dt1.getMillis());  // precise
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,236,uration test = new Duration(base);
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,237,"ssertEquals(dt2.getMillis() - dt1.getMillis(), test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,425,"ssertEquals(PeriodType.getAllType(), result.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,425,"assertEquals(PeriodType.standard(), result.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,443,"ssertEquals(PeriodType.getAllType(), result.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,443,"assertEquals(PeriodType.standard(), result.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,459,eriod result = test.toPeriod(PeriodType.getYearWeekType());
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,460,"ssertEquals(PeriodType.getYearWeekType(), result.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,459,Period result = test.toPeriod(PeriodType.yearWeekDayTime());
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,460,"assertEquals(PeriodType.yearWeekDayTime(), result.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,476,eriod result = test.toPeriod(PeriodType.getYearWeekType());
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,477,"ssertEquals(PeriodType.getYearWeekType(), result.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,476,Period result = test.toPeriod(PeriodType.yearWeekDayTime());
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,477,"assertEquals(PeriodType.yearWeekDayTime(), result.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,245,"eriod dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.getAllTypeUTC());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,245,"Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,329,"eriod dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.getAllTypeUTC());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,329,"Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,426,"ssertEquals(PeriodType.getAllType(), result.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,426,"assertEquals(PeriodType.standard(), result.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,444,"ssertEquals(PeriodType.getAllType(), result.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,444,"assertEquals(PeriodType.standard(), result.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,460,eriod result = test.toPeriod(PeriodType.getYearWeekType());
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,461,"ssertEquals(PeriodType.getYearWeekType(), result.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,460,Period result = test.toPeriod(PeriodType.yearWeekDayTime());
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,461,"assertEquals(PeriodType.yearWeekDayTime(), result.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,477,eriod result = test.toPeriod(PeriodType.getYearWeekType());
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,478,"ssertEquals(PeriodType.getYearWeekType(), result.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,477,Period result = test.toPeriod(PeriodType.yearWeekDayTime());
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,478,"assertEquals(PeriodType.yearWeekDayTime(), result.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,259,"eriod dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.getAllTypeUTC());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,259,"Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,343,"eriod dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.getAllTypeUTC());"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,343,"Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,152,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,155,ublic void testGetIsPrecise() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,156,utablePeriod test = new MutablePeriod(123L);
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,157,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,158,"est = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,159,"ssertEquals(false, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,152,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,196,"ssertEquals(false, test1.equals(new Period(123L, PeriodType.getDayHourType())));"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,189,"assertEquals(false, test1.equals(new Period(123L, PeriodType.dayTime())));"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,201,"uper(value, null);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,194,"super(value, null, null);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,257,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,258,"xpected = ISOChronology.getInstanceUTC().years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,259,"xpected = ISOChronology.getInstanceUTC().months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,260,"xpected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,261,"xpected = ISOChronology.getInstanceUTC().days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,262,"xpected = ISOChronology.getInstanceUTC().hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,263,"xpected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,264,"xpected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,265,"xpected = ISOChronology.getInstanceUTC().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,267,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,268,"ong added = test.addTo(TEST_TIME_NOW, -2);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,269,"ssertEquals(expected, added);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,272,ublic void testAddTo4() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,279,ublic void testAddTo5() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,256,public void testAddTo4() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,304,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,305,"xpected = ISOChronology.getInstance().years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,306,"xpected = ISOChronology.getInstance().months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,307,"xpected = ISOChronology.getInstance().weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,308,"xpected = ISOChronology.getInstance().days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,309,"xpected = ISOChronology.getInstance().hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,310,"xpected = ISOChronology.getInstance().minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,311,"xpected = ISOChronology.getInstance().seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,312,"xpected = ISOChronology.getInstance().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,314,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,315,"ong added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstance());  // local specified so use it"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,316,"ssertEquals(expected, added);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,319,ublic void testAddToWithChronology3() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,330,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,331,"ong added = test.addTo(TEST_TIME_NOW, -2, null);  // no chrono specified so drop back to duration (UTC)"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,291,"MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,292,"long added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstanceUTC());  // chrono specified so use it"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,293,"assertEquals(expected, added);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,296,public void testAddToWithChronology3() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,297,long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,298,"expected = ISOChronology.getInstance().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,299,"expected = ISOChronology.getInstance().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,300,"expected = ISOChronology.getInstance().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,301,"expected = ISOChronology.getInstance().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,302,"expected = ISOChronology.getInstance().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,303,"expected = ISOChronology.getInstance().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,304,"expected = ISOChronology.getInstance().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,305,"expected = ISOChronology.getInstance().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,307,"MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,308,"long added = test.addTo(TEST_TIME_NOW, -2, null);  // no chrono so use default"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,348,"ateTime added = test.addTo(new Instant(), 1);  // Instant has no time zone, uses duration's zone (local)"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,325,"DateTime added = test.addTo(new Instant(), 1);  // Instant has no time zone, use default"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,354,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,355,"xpected = ISOChronology.getInstanceUTC().years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,356,"xpected = ISOChronology.getInstanceUTC().months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,357,"xpected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,358,"xpected = ISOChronology.getInstanceUTC().days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,359,"xpected = ISOChronology.getInstanceUTC().hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,360,"xpected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,361,"xpected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,362,"xpected = ISOChronology.getInstanceUTC().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,364,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,365,"ateTime added = test.addTo(new Instant(), -2);  // Instant has no time zone, uses duration's zone (UTC)"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,366,"ssertEquals(expected, added.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,367,"ssertEquals(ISOChronology.getInstance(), added.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,370,ublic void testAddToRI3() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,381,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,382,"ateTime added = test.addTo(new DateTime(), -2);  // DateTime has local time zone"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,341,"MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,342,"DateTime added = test.addTo(new Instant(), -2);  // Instant has no time zone, use default"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,347,public void testAddToRI3() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,348,long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,349,"expected = ISOChronology.getInstanceUTC().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,350,"expected = ISOChronology.getInstanceUTC().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,351,"expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,352,"expected = ISOChronology.getInstanceUTC().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,353,"expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,354,"expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,355,"expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,356,"expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,358,"MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,359,"DateTime added = test.addTo(new DateTime(ISOChronology.getInstanceUTC()), -2);  // DateTime has UTC time zone"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,360,"assertEquals(expected, added.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,361,"assertEquals(ISOChronology.getInstanceUTC(), added.getChronology());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,398,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,375,"MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,406,"xpected = ISOChronology.getInstanceUTC().years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,407,"xpected = ISOChronology.getInstanceUTC().months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,408,"xpected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,409,"xpected = ISOChronology.getInstanceUTC().days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,410,"xpected = ISOChronology.getInstanceUTC().hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,411,"xpected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,412,"xpected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,413,"xpected = ISOChronology.getInstanceUTC().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,383,"expected = ISOChronology.getInstance().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,384,"expected = ISOChronology.getInstance().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,385,"expected = ISOChronology.getInstance().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,386,"expected = ISOChronology.getInstance().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,387,"expected = ISOChronology.getInstance().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,388,"expected = ISOChronology.getInstance().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,389,"expected = ISOChronology.getInstance().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,390,"expected = ISOChronology.getInstance().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,415,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,416,"ateTime added = test.addTo(null, -2);  // null has no time zone, uses duration's zone (UTC)"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,392,"MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,393,"DateTime added = test.addTo(null, -2);  // null has no time zone, use default"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,450,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,427,"MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,490,ublic void testToDurationMillis() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,467,public void testToDurationMillisFrom() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,492,"ssertEquals(123L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,494,"est = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,495,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,496,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,497,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,498, catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,469,"assertEquals(123L, test.toDurationMillisFrom(0L, null));"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,501,ublic void testToDuration() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,472,public void testToDurationFrom() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,503,"ssertEquals(new Duration(123L), test.toDuration());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,505,"est = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,506,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,507,est.toDuration();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,508,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,509, catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,474,"assertEquals(new Duration(123L), test.toDurationFrom(new Instant(0L)));"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,517,"ssertEquals(test.isPrecise(), copy.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,518,"ssertEquals(test.toDurationMillis(), copy.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,482,"assertEquals(test, copy);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,526,"ssertEquals(test.isPrecise(), copy.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,527,"ssertEquals(test.toDurationMillis(), copy.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,490,"assertEquals(test, copy);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,141,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,141,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,150,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,151,"ssertEquals(0, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,159,utablePeriod test = new MutablePeriod(PeriodType.getYearMonthType());
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,160,"ssertEquals(PeriodType.getYearMonthType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,157,MutablePeriod test = new MutablePeriod(PeriodType.yearMonthDayTime());
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,158,"assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,169,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,170,"ssertEquals(0, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,175,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,171,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,184,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,185,"ssertEquals(0, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,195,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,189,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,204,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,205,"ssertEquals(length, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,214,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,206,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,223,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,224,"ssertEquals(length, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,234,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,224,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,244,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,245,"ssertEquals(length, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,254,"utablePeriod test = new MutablePeriod(length, null);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,255,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,242,"MutablePeriod test = new MutablePeriod(length, (PeriodType) null);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,243,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,264,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,265,"ssertEquals(length, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,273,"utablePeriod test = new MutablePeriod(length, PeriodType.getMillisType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,274,"ssertEquals(PeriodType.getMillisType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,259,"MutablePeriod test = new MutablePeriod(length, PeriodType.millis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,260,"assertEquals(PeriodType.millis(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,283,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,284,"ssertEquals(length, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,292,"utablePeriod test = new MutablePeriod(length, PeriodType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,293,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,276,"MutablePeriod test = new MutablePeriod(length, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,277,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,302,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,303,"ssertEquals(length, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,311,"utablePeriod test = new MutablePeriod(length, PeriodType.getAllType().withMillisRemoved());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,312,"ssertEquals(PeriodType.getAllType().withMillisRemoved(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,293,"MutablePeriod test = new MutablePeriod(length, PeriodType.standard().withMillisRemoved());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,294,"assertEquals(PeriodType.standard().withMillisRemoved(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,321,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,322,"ssertEquals(length - 8, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,306,public void testConstructor_long_Chronology1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,307,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,308,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,309,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,310,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,311,"MutablePeriod test = new MutablePeriod(length, Chronology.getISO());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,312,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,313,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,314,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,315,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,316,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,317,"assertEquals((4 * 24) + 5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,318,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,319,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,320,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,323,public void testConstructor_long_Chronology2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,324,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,325,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,326,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,327,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,328,"MutablePeriod test = new MutablePeriod(length, Chronology.getISOUTC());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,329,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,330,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,331,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,332,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,333,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,334,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,335,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,336,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,337,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,340,public void testConstructor_long_Chronology3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,341,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,342,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,343,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,344,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,345,"MutablePeriod test = new MutablePeriod(length, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,346,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,347,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,348,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,349,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,350,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,351,"assertEquals((4 * 24) + 5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,352,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,353,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,354,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,358,public void testConstructor_long_PeriodType_Chronology1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,359,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,360,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,361,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,362,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,363,"MutablePeriod test = new MutablePeriod(length, PeriodType.time().withMillisRemoved(), Chronology.getISO());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,364,"assertEquals(PeriodType.time().withMillisRemoved(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,365,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,366,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,367,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,368,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,369,"assertEquals((4 * 24) + 5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,370,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,371,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,372,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,375,public void testConstructor_long_PeriodType_Chronology2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,376,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,377,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,378,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,379,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,380,"MutablePeriod test = new MutablePeriod(length, PeriodType.standard(), Chronology.getISOUTC());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,381,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,382,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,383,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,384,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,385,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,386,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,387,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,388,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,389,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,392,public void testConstructor_long_PeriodType_Chronology3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,393,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,394,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,395,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,396,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,397,"MutablePeriod test = new MutablePeriod(length, PeriodType.standard(), (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,398,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,399,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,400,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,401,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,402,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,403,"assertEquals((4 * 24) + 5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,404,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,405,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,406,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,409,public void testConstructor_long_PeriodType_Chronology4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,410,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,411,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,412,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,413,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,414,"MutablePeriod test = new MutablePeriod(length, (PeriodType) null, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,415,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,416,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,417,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,418,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,419,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,420,"assertEquals((4 * 24) + 5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,421,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,422,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,423,"assertEquals(8, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,331,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,432,"assertEquals(PeriodType.time(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,340,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,341,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,342, * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,343," * DateTimeConstants.MILLIS_PER_SECOND + 8, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,352,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,449,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,361,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,362,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,363,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,364,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,365, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,374,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,466,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,383,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,384,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,385,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,386,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,387, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,391,"utablePeriod test = new MutablePeriod(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.getDayHourType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,392,"ssertEquals(PeriodType.getDayHourType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,478,"MutablePeriod test = new MutablePeriod(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.dayTime());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,479,"assertEquals(PeriodType.dayTime(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,401,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,402,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,403, * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,404," * DateTimeConstants.MILLIS_PER_SECOND + 8, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,409,"ew MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getDayHourType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,492,"new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.dayTime());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,419,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,502,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,428,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,429,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,430,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,431,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,432, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,439,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,517,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,448,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,449,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,450,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,451,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,452, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,459,"utablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), null);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,460,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,532,"MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), (PeriodType) null);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,533,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,469,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,470,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,471,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,472,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,473, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,479,"utablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), PeriodType.getDayHourType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,480,"ssertEquals(PeriodType.getDayHourType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,547,"MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), PeriodType.dayTime());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,548,"assertEquals(PeriodType.dayTime(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,489,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,490,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,491,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,492,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,493, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,499,"utablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), PeriodType.getAllType().withMillisRemoved());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,500,"ssertEquals(PeriodType.getAllType().withMillisRemoved(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,562,"MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), PeriodType.standard().withMillisRemoved());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,563,"assertEquals(PeriodType.standard().withMillisRemoved(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,509,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,510,"ssertEquals(dt2.getMillis() - dt1.getMillis() - 1, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,518,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,579,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,527,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,528,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,529,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,530,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,531, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,538,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,594,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,547,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,548,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,549,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,550,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,551, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,558,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,609,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,567,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,568,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,569,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,570,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,571, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,578,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,624,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,587,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,588,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,589,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,590,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,591, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,598,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,639,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,607,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,608,"ssertEquals(0L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,616,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,655,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,625,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,626,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,627,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,628,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,629, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,635,"utablePeriod test = new MutablePeriod(dt1, dt2, PeriodType.getDayHourType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,636,"ssertEquals(PeriodType.getDayHourType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,669,"MutablePeriod test = new MutablePeriod(dt1, dt2, PeriodType.dayTime());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,670,"assertEquals(PeriodType.dayTime(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,645,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,646,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,647,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,648,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,649, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,655,"utablePeriod test = new MutablePeriod(dt1, dt2, PeriodType.getAllType().withMillisRemoved());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,656,"ssertEquals(PeriodType.getAllType().withMillisRemoved(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,684,"MutablePeriod test = new MutablePeriod(dt1, dt2, PeriodType.standard().withMillisRemoved());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,685,"assertEquals(PeriodType.standard().withMillisRemoved(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,665,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,666,"ssertEquals(dt2.getMillis() - dt1.getMillis() - 1, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,672,"utablePeriod test = new MutablePeriod(dt1, dt2, PeriodType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,673,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,699,"MutablePeriod test = new MutablePeriod(dt1, dt2, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,700,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,682,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,683,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,684,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,685,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,686, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,692,"utablePeriod test = new MutablePeriod(dt1, dt2, PeriodType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,693,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,714,"MutablePeriod test = new MutablePeriod(dt1, dt2, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,715,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,702,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,703,"ssertEquals(0L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,712,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,732,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,721,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,722,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,723,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,724,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,725, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,730,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,745,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,739,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,740,"ssertEquals(0, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,744,"utablePeriod test = new MutablePeriod(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.getDayHourType()));"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,745,"ssertEquals(PeriodType.getDayHourType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,757,"MutablePeriod test = new MutablePeriod(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()));"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,758,"assertEquals(PeriodType.dayTime(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,754,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,755,ssertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,756," * DateTimeConstants.MILLIS_PER_SECOND + 4, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,760,"eriod base = new Period(1, 1, 0, 1, 1, 1, 1, 1, PeriodType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,770,"Period base = new Period(1, 1, 0, 1, 1, 1, 1, 1, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,762,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,772,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,771,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,772,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,773,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,774,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,775, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,783,"utablePeriod test = new MutablePeriod(""P1Y2M3D"", PeriodType.getYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,784,"ssertEquals(PeriodType.getYearMonthType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,788,"MutablePeriod test = new MutablePeriod(""P1Y2M3D"", PeriodType.yearMonthDayTime());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,789,"assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,793,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,794,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,795,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,796,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,797, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,801,"utablePeriod test = new MutablePeriod((Object) null, PeriodType.getYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,802,"ssertEquals(PeriodType.getYearMonthType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,801,"MutablePeriod test = new MutablePeriod((Object) null, PeriodType.yearMonthDayTime());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,802,"assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,811,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,812,"ssertEquals(0, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,816,"utablePeriod test = new MutablePeriod(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.getDayHourType()), PeriodType.getYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,817,"ssertEquals(PeriodType.getYearMonthType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,814,"MutablePeriod test = new MutablePeriod(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()), PeriodType.yearMonthDayTime());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,815,"assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,826,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,827,ssertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,828," * DateTimeConstants.MILLIS_PER_SECOND + 4, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,832,"utablePeriod test = new MutablePeriod(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.getDayHourType()), null);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,833,"ssertEquals(PeriodType.getDayHourType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,827,"MutablePeriod test = new MutablePeriod(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()), (PeriodType) null);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,828,"assertEquals(PeriodType.dayTime(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,842,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,843,ssertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,844," * DateTimeConstants.MILLIS_PER_SECOND + 4, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,280,"est = new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.getMillisType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,280,"test = new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.millis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,435,"utablePeriod test = new MutablePeriod(100L, PeriodType.getMillisType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,435,"MutablePeriod test = new MutablePeriod(100L, PeriodType.millis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,448,"ssertEquals(100, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,452,"utablePeriod test = new MutablePeriod(100L, PeriodType.getMillisType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,451,"MutablePeriod test = new MutablePeriod(100L, PeriodType.millis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,462,"ssertEquals(18, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,467,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,469,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,495,"utablePeriod test = new MutablePeriod(100L, PeriodType.getMillisType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,491,"MutablePeriod test = new MutablePeriod(100L, PeriodType.millis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,508,"ssertEquals(100, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,512,"utablePeriod test = new MutablePeriod(100L, PeriodType.getMillisType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,507,"MutablePeriod test = new MutablePeriod(100L, PeriodType.millis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,522,"ssertEquals(18, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,527,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,529,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,599,utablePeriod test = new MutablePeriod(PeriodType.getAllType().withYearsRemoved());
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,591,MutablePeriod test = new MutablePeriod(PeriodType.standard().withYearsRemoved());
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,614,utablePeriod test = new MutablePeriod(PeriodType.getAllType().withMonthsRemoved());
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,606,MutablePeriod test = new MutablePeriod(PeriodType.standard().withMonthsRemoved());
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,629,utablePeriod test = new MutablePeriod(PeriodType.getAllType().withWeeksRemoved());
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,621,MutablePeriod test = new MutablePeriod(PeriodType.standard().withWeeksRemoved());
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,644,utablePeriod test = new MutablePeriod(PeriodType.getAllType().withDaysRemoved());
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,636,MutablePeriod test = new MutablePeriod(PeriodType.standard().withDaysRemoved());
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,659,utablePeriod test = new MutablePeriod(PeriodType.getAllType().withHoursRemoved());
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,651,MutablePeriod test = new MutablePeriod(PeriodType.standard().withHoursRemoved());
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,674,utablePeriod test = new MutablePeriod(PeriodType.getAllType().withMinutesRemoved());
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,666,MutablePeriod test = new MutablePeriod(PeriodType.standard().withMinutesRemoved());
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,689,utablePeriod test = new MutablePeriod(PeriodType.getAllType().withSecondsRemoved());
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,681,MutablePeriod test = new MutablePeriod(PeriodType.standard().withSecondsRemoved());
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,704,utablePeriod test = new MutablePeriod(PeriodType.getAllType().withMillisRemoved());
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,696,MutablePeriod test = new MutablePeriod(PeriodType.standard().withMillisRemoved());
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,779,ublic void testSetPeriod_long3() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,780,utablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType());
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,781,est.setPeriod(
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,782,4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,783,L * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,784,L * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,785,L * DateTimeConstants.MILLIS_PER_SECOND + 8L);
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,786,"ssertEquals(1, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,787,"ssertEquals(2, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,788,"ssertEquals(0, test.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,789,"ssertEquals(25, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,790,"ssertEquals(5, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,791,"ssertEquals(6, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,792,"ssertEquals(7, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,793,"ssertEquals(8, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,796,ublic void testSetPeriod_long4() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,797,utablePeriod test = new MutablePeriod(PeriodType.getPreciseYearWeekType());
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,798,est.setPeriod(
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,799,4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,800,L * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,801,L * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,802,L * DateTimeConstants.MILLIS_PER_SECOND + 8L);
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,803,"ssertEquals(1, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,804,"ssertEquals(0, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,805,"ssertEquals(12, test.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,806,"ssertEquals(1, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,807,"ssertEquals(5, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,808,"ssertEquals(6, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,809,"ssertEquals(7, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,810,"ssertEquals(8, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,813,ublic void testSetPeriod_long_NoYears() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,814,ong ms =
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,815,4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,816,L * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,817,L * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,818,L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,819,utablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType().withYearsRemoved());
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,820,est.setPeriod(ms);
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,821,"ssertEquals(0, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,822,"ssertEquals(15, test.getMonths()); // totalDays=365+85=450=15*30"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,823,"ssertEquals(0, test.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,824,"ssertEquals(0, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,825,"ssertEquals(5, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,826,"ssertEquals(6, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,827,"ssertEquals(7, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,828,"ssertEquals(8, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,829,"ssertEquals(ms, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,832,ublic void testSetPeriod_long_NoMonths() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,833,ong ms =
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,834,4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,835,L * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,836,L * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,837,L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,838,utablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType().withMonthsRemoved());
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,839,est.setPeriod(ms);
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,840,"ssertEquals(1, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,841,"ssertEquals(0, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,842,"ssertEquals(0, test.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,843,"ssertEquals(85, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,844,"ssertEquals(5, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,845,"ssertEquals(6, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,846,"ssertEquals(7, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,847,"ssertEquals(8, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,848,"ssertEquals(ms, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,851,ublic void testSetPeriod_long_NoWeeks() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,852,ong ms =
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,853,4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,854,L * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,855,L * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,856,L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,857,utablePeriod test = new MutablePeriod(PeriodType.getPreciseYearWeekType().withWeeksRemoved());
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,858,est.setPeriod(ms);
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,859,"ssertEquals(1, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,860,"ssertEquals(0, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,861,"ssertEquals(0, test.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,862,"ssertEquals(85, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,863,"ssertEquals(5, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,864,"ssertEquals(6, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,865,"ssertEquals(7, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,866,"ssertEquals(8, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,867,"ssertEquals(ms, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,870,ublic void testSetPeriod_long_NoDays() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,871,ong ms =
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,872,4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,873,L * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,874,L * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,875,L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,876,utablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType().withDaysRemoved());
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,877,est.setPeriod(ms);
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,878,"ssertEquals(1, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,879,"ssertEquals(2, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,880,"ssertEquals(0, test.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,881,"ssertEquals(0, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,882,"ssertEquals(5 + 25 * 24, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,883,"ssertEquals(6, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,884,"ssertEquals(7, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,885,"ssertEquals(8, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,886,"ssertEquals(ms, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,889,ublic void testSetPeriod_long_NoHours() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,890,ong ms =
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,891,4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,892,L * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,893,L * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,894,L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,895,utablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType().withHoursRemoved());
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,896,est.setPeriod(ms);
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,897,"ssertEquals(1, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,898,"ssertEquals(2, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,899,"ssertEquals(0, test.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,900,"ssertEquals(25, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,901,"ssertEquals(0, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,902,"ssertEquals(6 + 5 * 60, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,903,"ssertEquals(7, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,904,"ssertEquals(8, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,905,"ssertEquals(ms, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,908,ublic void testSetPeriod_long_NoMinutes() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,909,ong ms =
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,910,4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,911,L * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,912,L * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,913,L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,914,utablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType().withMinutesRemoved());
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,915,est.setPeriod(ms);
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,916,"ssertEquals(1, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,917,"ssertEquals(2, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,918,"ssertEquals(0, test.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,919,"ssertEquals(25, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,920,"ssertEquals(5, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,921,"ssertEquals(0, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,922,"ssertEquals(7 + 6 * 60, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,923,"ssertEquals(8, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,924,"ssertEquals(ms, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,927,ublic void testSetPeriod_long_NoSeconds() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,928,ong ms =
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,929,4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,930,L * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,931,L * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,932,L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,933,utablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType().withSecondsRemoved());
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,934,est.setPeriod(ms);
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,935,"ssertEquals(1, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,936,"ssertEquals(2, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,937,"ssertEquals(0, test.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,938,"ssertEquals(25, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,939,"ssertEquals(5, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,940,"ssertEquals(6, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,941,"ssertEquals(0, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,942,"ssertEquals(8 + 7 * 1000, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,943,"ssertEquals(ms, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,946,ublic void testSetPeriod_long_NoMillis() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,947,ong ms =
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,948,4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,949,L * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,950,L * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,951,L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,952,utablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType().withMillisRemoved());
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,953,est.setPeriod(ms);
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,954,"ssertEquals(1, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,955,"ssertEquals(2, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,956,"ssertEquals(0, test.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,957,"ssertEquals(25, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,958,"ssertEquals(5, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,959,"ssertEquals(6, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,960,"ssertEquals(7, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,961,"ssertEquals(0, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,962,"ssertEquals(ms - 8, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,771,//    public void testSetPeriod_long3() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,772,//        MutablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType());
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,773,//        test.setPeriod(
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,774,//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,775,//            5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,776,//            6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,777,//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,778,"//        assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,779,"//        assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,780,"//        assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,781,"//        assertEquals(25, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,782,"//        assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,783,"//        assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,784,"//        assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,785,"//        assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,788,//    public void testSetPeriod_long4() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,789,//        MutablePeriod test = new MutablePeriod(PeriodType.getPreciseYearWeekType());
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,790,//        test.setPeriod(
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,791,//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,792,//            5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,793,//            6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,794,//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,795,"//        assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,796,"//        assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,797,"//        assertEquals(12, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,798,"//        assertEquals(1, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,799,"//        assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,800,"//        assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,801,"//        assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,802,"//        assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,805,//    public void testSetPeriod_long_NoYears() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,806,//        long ms =
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,807,//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,808,//            5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,809,//            6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,810,//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,811,//        MutablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType().withYearsRemoved());
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,812,//        test.setPeriod(ms);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,813,"//        assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,814,"//        assertEquals(15, test.getMonths()); // totalDays=365+85=450=15*30"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,815,"//        assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,816,"//        assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,817,"//        assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,818,"//        assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,819,"//        assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,820,"//        assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,821,"//        assertEquals(ms, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,824,//    public void testSetPeriod_long_NoMonths() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,825,//        long ms =
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,826,//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,827,//            5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,828,//            6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,829,//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,830,//        MutablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType().withMonthsRemoved());
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,831,//        test.setPeriod(ms);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,832,"//        assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,833,"//        assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,834,"//        assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,835,"//        assertEquals(85, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,836,"//        assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,837,"//        assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,838,"//        assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,839,"//        assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,840,"//        assertEquals(ms, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,843,//    public void testSetPeriod_long_NoWeeks() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,844,//        long ms =
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,845,//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,846,//            5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,847,//            6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,848,//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,849,//        MutablePeriod test = new MutablePeriod(PeriodType.getPreciseYearWeekType().withWeeksRemoved());
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,850,//        test.setPeriod(ms);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,851,"//        assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,852,"//        assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,853,"//        assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,854,"//        assertEquals(85, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,855,"//        assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,856,"//        assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,857,"//        assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,858,"//        assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,859,"//        assertEquals(ms, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,862,//    public void testSetPeriod_long_NoDays() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,863,//        long ms =
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,864,//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,865,//            5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,866,//            6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,867,//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,868,//        MutablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType().withDaysRemoved());
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,869,//        test.setPeriod(ms);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,870,"//        assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,871,"//        assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,872,"//        assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,873,"//        assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,874,"//        assertEquals(5 + 25 * 24, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,875,"//        assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,876,"//        assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,877,"//        assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,878,"//        assertEquals(ms, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,881,//    public void testSetPeriod_long_NoHours() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,882,//        long ms =
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,883,//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,884,//            5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,885,//            6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,886,//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,887,//        MutablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType().withHoursRemoved());
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,888,//        test.setPeriod(ms);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,889,"//        assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,890,"//        assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,891,"//        assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,892,"//        assertEquals(25, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,893,"//        assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,894,"//        assertEquals(6 + 5 * 60, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,895,"//        assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,896,"//        assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,897,"//        assertEquals(ms, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,900,//    public void testSetPeriod_long_NoMinutes() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,901,//        long ms =
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,902,//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,903,//            5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,904,//            6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,905,//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,906,//        MutablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType().withMinutesRemoved());
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,907,//        test.setPeriod(ms);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,908,"//        assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,909,"//        assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,910,"//        assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,911,"//        assertEquals(25, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,912,"//        assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,913,"//        assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,914,"//        assertEquals(7 + 6 * 60, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,915,"//        assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,916,"//        assertEquals(ms, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,919,//    public void testSetPeriod_long_NoSeconds() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,920,//        long ms =
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,921,//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,922,//            5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,923,//            6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,924,//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,925,//        MutablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType().withSecondsRemoved());
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,926,//        test.setPeriod(ms);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,927,"//        assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,928,"//        assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,929,"//        assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,930,"//        assertEquals(25, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,931,"//        assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,932,"//        assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,933,"//        assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,934,"//        assertEquals(8 + 7 * 1000, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,935,"//        assertEquals(ms, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,938,//    public void testSetPeriod_long_NoMillis() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,939,//        long ms =
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,940,//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,941,//            5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,942,//            6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,943,//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,944,//        MutablePeriod test = new MutablePeriod(PeriodType.getPreciseYearMonthType().withMillisRemoved());
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,945,//        test.setPeriod(ms);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,946,"//        assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,947,"//        assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,948,"//        assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,949,"//        assertEquals(25, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,950,"//        assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,951,"//        assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,952,"//        assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,953,"//        assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,954,"//        assertEquals(ms - 8, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1026,"utablePeriod test = new MutablePeriod(100L, PeriodType.getYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1018,"MutablePeriod test = new MutablePeriod(100L, PeriodType.yearMonthDayTime());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1053,"ssertEquals(200L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1057,"utablePeriod test = new MutablePeriod(100L, PeriodType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1048,"MutablePeriod test = new MutablePeriod(100L, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1075,ublic void testAdd_long3() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1076,"utablePeriod test = new MutablePeriod(100L, PeriodType.getPreciseYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1077,ong ms =
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1078,4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1079,L * DateTimeConstants.MILLIS_PER_HOUR +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1080,L * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1081,L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1082,est.add(ms);
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1083,"ssertEquals(1, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1084,"ssertEquals(2, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1085,"ssertEquals(0, test.getWeeks());  // checks that YearMonth type is used in conversion"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1086,"ssertEquals(25, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1087,"ssertEquals(5, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1088,"ssertEquals(6, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1089,"ssertEquals(7, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1090,"ssertEquals(108, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1091,"ssertEquals(ms + 100L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1094,ublic void testAdd_long4() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1095,"utablePeriod test = new MutablePeriod(100L, PeriodType.getPreciseYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1096,ong ms =0L;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1097,est.add(ms);
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1098,"ssertEquals(0, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1099,"ssertEquals(0, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1100,"ssertEquals(0, test.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1101,"ssertEquals(0, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1102,"ssertEquals(0, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1103,"ssertEquals(0, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1104,"ssertEquals(0, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1105,"ssertEquals(100, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1106,"ssertEquals(100L, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1066,//    public void testAdd_long3() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1067,"//        MutablePeriod test = new MutablePeriod(100L, PeriodType.getPreciseYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1068,//        long ms =
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1069,//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1070,//            5L * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1071,//            6L * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1072,//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1073,//        test.add(ms);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1074,"//        assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1075,"//        assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1076,"//        assertEquals(0, test.getWeeks());  // checks that YearMonth type is used in conversion"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1077,"//        assertEquals(25, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1078,"//        assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1079,"//        assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1080,"//        assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1081,"//        assertEquals(108, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1084,//    public void testAdd_long4() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1085,"//        MutablePeriod test = new MutablePeriod(100L, PeriodType.getPreciseYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1086,//        long ms =0L;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1087,//        test.add(ms);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1088,"//        assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1089,"//        assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1090,"//        assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1091,"//        assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1092,"//        assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1093,"//        assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1094,"//        assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1095,"//        assertEquals(100, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1134,"ssertEquals(200L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1138,"utablePeriod test = new MutablePeriod(100L, PeriodType.getPreciseYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1126,"MutablePeriod test = new MutablePeriod(100L, PeriodType.yearMonthDayTime());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1140,4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1128,(4L + (3L * 7L)) * DateTimeConstants.MILLIS_PER_DAY +
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1145,"ssertEquals(1, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1146,"ssertEquals(2, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1147,"ssertEquals(0, test.getWeeks());  // checks that YearMonth type is used in conversion"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1148,"ssertEquals(25, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1149,"ssertEquals(5, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1150,"ssertEquals(6, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1151,"ssertEquals(7, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1152,"ssertEquals(108, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1153,"ssertEquals(ms + 100L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1156,ublic void testAdd_RD3() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1157,"utablePeriod test = new MutablePeriod(100L, PeriodType.getPreciseYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1158,ong ms =0L;
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1159,est.add(new Duration(ms));
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1164,"ssertEquals(0, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1165,"ssertEquals(0, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1166,"ssertEquals(0, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1167,"ssertEquals(100, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1168,"ssertEquals(100L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1171,ublic void testAdd_RD4() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1172,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1173,est.add(new Duration(2100L));
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1174,"ssertEquals(1, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1175,"ssertEquals(2, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1176,"ssertEquals(3, test.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1177,"ssertEquals(4, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1178,"ssertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1137,"assertEquals((4 + (3 * 7)) * 24 + 5, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1180,"ssertEquals(9, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1139,"assertEquals(7, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1184,ublic void testAdd_RD5() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1185,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1186,est.add((ReadableDuration) null);
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1187,"ssertEquals(1, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1188,"ssertEquals(2, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1189,"ssertEquals(3, test.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1190,"ssertEquals(4, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1191,"ssertEquals(5, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1192,"ssertEquals(6, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1193,"ssertEquals(7, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1194,"ssertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1143,//    public void testAdd_RD3() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1144,"//        MutablePeriod test = new MutablePeriod(100L, PeriodType.getPreciseYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1145,//        long ms =0L;
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1146,//        test.add(new Duration(ms));
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1147,"//        assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1148,"//        assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1149,"//        assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1150,"//        assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1151,"//        assertEquals(0, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1152,"//        assertEquals(0, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1153,"//        assertEquals(0, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1154,"//        assertEquals(100, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1155,"//        assertEquals(100L, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1158,//    public void testAdd_RD4() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1159,"//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1160,//        test.add(new Duration(2100L));
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1161,"//        assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1162,"//        assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1163,"//        assertEquals(3, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1164,"//        assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1165,"//        assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1166,"//        assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1167,"//        assertEquals(9, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1168,"//        assertEquals(108, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1171,//    public void testAdd_RD5() {
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1172,"//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1173,//        test.add((ReadableDuration) null);
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1174,"//        assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1175,"//        assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1176,"//        assertEquals(3, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1177,"//        assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1178,"//        assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1179,"//        assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1180,"//        assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1181,"//        assertEquals(8, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1209,"ssertEquals(200L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1213,utablePeriod test = new MutablePeriod(100L);  // All type
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1214,"est.add(new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getPreciseAllType()));"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1215,"ssertEquals(1, test.getYears());  // add field value, ignore different types"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1216,"ssertEquals(2, test.getMonths());  // add field value, ignore different types"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1217,"ssertEquals(3, test.getWeeks());  // add field value, ignore different types"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1218,"ssertEquals(4, test.getDays());  // add field value, ignore different types"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1199,"MutablePeriod test = new MutablePeriod(100L, PeriodType.standard());  // All type"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1200,"test.add(new Period(1, 2, 3, 4, 5, 6, 7, 0, PeriodType.standard().withMillisRemoved()));"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1201,"// add field value, ignore different types"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1202,"assertEquals(1, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1203,"assertEquals(2, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1204,"assertEquals(3, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1205,"assertEquals(4, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1222,"ssertEquals(108, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1209,"assertEquals(100, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1226,"utablePeriod test = new MutablePeriod(100L, PeriodType.getPreciseYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1213,"MutablePeriod test = new MutablePeriod(100L, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1236,"ssertEquals(100L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1240,"utablePeriod test = new MutablePeriod(1, 2, 0, 4, 5, 6, 7, 8, PeriodType.getYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1226,"MutablePeriod test = new MutablePeriod(1, 2, 0, 4, 5, 6, 7, 8, PeriodType.yearMonthDayTime());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1280,"ssertEquals(200L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1299,"utablePeriod test = new MutablePeriod(100L, PeriodType.getPreciseYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1284,"MutablePeriod test = new MutablePeriod(100L, PeriodType.yearMonthDayTime());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1314,"utablePeriod test = new MutablePeriod(100L, PeriodType.getYearMonthType());"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1299,"MutablePeriod test = new MutablePeriod(100L, PeriodType.yearMonthDayTime());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1340,ublic void testNormalize1() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1341,"utablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1342,ry {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1343,est.normalize();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1344,ail();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1345, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1348,ublic void testNormalize2() {
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1349,"utablePeriod test = new MutablePeriod(1, 14, 0, 36, 29, 66, 67, 1008, PeriodType.getPreciseYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1350,/   365 + 14*30 + 6 days
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1351,/ extra year created from 12 months of 30 days plus 5 extra days
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1352,/ 2*365 +  2*30 + 1 day
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1353,est.normalize();
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1354,"ssertEquals(2, test.getYears());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1355,"ssertEquals(3, test.getMonths());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1356,"ssertEquals(0, test.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1357,"ssertEquals(2, test.getDays());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1358,"ssertEquals(6, test.getHours());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1359,"ssertEquals(7, test.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1360,"ssertEquals(8, test.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,1361,"ssertEquals(8, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,60,mport java.lang.reflect.Modifier;
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,67,mport org.joda.time.chrono.BuddhistChronology;
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,68,mport org.joda.time.chrono.CopticChronology;
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,69,mport org.joda.time.chrono.ISOChronology;
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,179,"ssertSame(type, result);"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,174,"assertEquals(type, result);"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,183,ublic void testMillisType() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,184,eriodType type = PeriodType.getMillisType();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,185,"ssertEquals(false, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,186,"ssertEquals(false, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,187,"ssertEquals(false, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,188,"ssertEquals(false, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,189,"ssertEquals(false, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,190,"ssertEquals(false, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,191,"ssertEquals(false, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,192,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,193,"ssertEquals(true, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,194,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,178,public void testStandard() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,179,PeriodType type = PeriodType.standard();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,180,"assertEquals(8, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,181,"assertEquals(DurationFieldType.years(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,182,"assertEquals(DurationFieldType.months(), type.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,183,"assertEquals(DurationFieldType.weeks(), type.getFieldType(2));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,184,"assertEquals(DurationFieldType.days(), type.getFieldType(3));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,185,"assertEquals(DurationFieldType.hours(), type.getFieldType(4));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,186,"assertEquals(DurationFieldType.minutes(), type.getFieldType(5));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,187,"assertEquals(DurationFieldType.seconds(), type.getFieldType(6));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,188,"assertEquals(DurationFieldType.millis(), type.getFieldType(7));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,189,"assertEquals(""Standard"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,190,"assertEquals(""PeriodType[Standard]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,196,"ssertEquals(true, type == PeriodType.getMillisType());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,197,"ssertEquals(false, type.equals(PeriodType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,192,"assertEquals(true, type == PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,193,"assertEquals(false, type.equals(PeriodType.millis()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,199,"ssertEquals(true, type.hashCode() == PeriodType.getMillisType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,200,"ssertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,201,"ssertEquals(""MillisType"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,202,"ssertEquals(""PeriodType[MillisType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,195,"assertEquals(true, type.hashCode() == PeriodType.standard().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,196,"assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,204,"ssertSame(type, type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,205,"ssertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,209,ublic void testDayHourType() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,210,eriodType type = PeriodType.getDayHourType();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,211,"ssertEquals(false, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,212,"ssertEquals(false, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,213,"ssertEquals(false, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,214,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,215,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,216,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,217,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,218,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,219,"ssertEquals(false, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,220,"ssertEquals(ISOChronology.getInstance(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,201,public void testYearMonthDayTime() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,202,PeriodType type = PeriodType.yearMonthDayTime();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,203,"assertEquals(7, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,204,"assertEquals(DurationFieldType.years(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,205,"assertEquals(DurationFieldType.months(), type.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,206,"assertEquals(DurationFieldType.days(), type.getFieldType(2));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,207,"assertEquals(DurationFieldType.hours(), type.getFieldType(3));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,208,"assertEquals(DurationFieldType.minutes(), type.getFieldType(4));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,209,"assertEquals(DurationFieldType.seconds(), type.getFieldType(5));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,210,"assertEquals(DurationFieldType.millis(), type.getFieldType(6));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,211,"assertEquals(""YearMonthDayTime"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,212,"assertEquals(""PeriodType[YearMonthDayTime]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,222,"ssertEquals(true, type == PeriodType.getDayHourType());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,223,"ssertEquals(false, type.equals(PeriodType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,214,"assertEquals(true, type == PeriodType.yearMonthDayTime());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,215,"assertEquals(false, type.equals(PeriodType.millis()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,225,"ssertEquals(true, type.hashCode() == PeriodType.getDayHourType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,226,"ssertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,227,"ssertEquals(""DayHourType"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,228,"ssertEquals(""PeriodType[DayHourType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,217,"assertEquals(true, type.hashCode() == PeriodType.yearMonthDayTime().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,218,"assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,230,"ssertSame(type, type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,231,"ssertSame(type, type.withChronology(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,232,"ssertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,236,ublic void testDayHourType_Chronology() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,237,eriodType type = PeriodType.getDayHourType(BuddhistChronology.getInstanceUTC());
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,238,"ssertEquals(false, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,239,"ssertEquals(false, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,240,"ssertEquals(false, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,241,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,242,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,243,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,244,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,245,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,246,"ssertEquals(true, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,247,"ssertEquals(BuddhistChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,223,public void testYearWeekDayTime() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,224,PeriodType type = PeriodType.yearWeekDayTime();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,225,"assertEquals(7, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,226,"assertEquals(DurationFieldType.years(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,227,"assertEquals(DurationFieldType.weeks(), type.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,228,"assertEquals(DurationFieldType.days(), type.getFieldType(2));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,229,"assertEquals(DurationFieldType.hours(), type.getFieldType(3));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,230,"assertEquals(DurationFieldType.minutes(), type.getFieldType(4));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,231,"assertEquals(DurationFieldType.seconds(), type.getFieldType(5));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,232,"assertEquals(DurationFieldType.millis(), type.getFieldType(6));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,233,"assertEquals(""YearWeekDayTime"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,234,"assertEquals(""PeriodType[YearWeekDayTime]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,249,"ssertEquals(true, PeriodType.getDayHourType() == PeriodType.getDayHourType(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,250,"ssertEquals(true, PeriodType.getDayHourType() == PeriodType.getDayHourType(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,251,"ssertEquals(true, type.equals(PeriodType.getDayHourType(BuddhistChronology.getInstanceUTC())));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,252,"ssertEquals(false, type.equals(PeriodType.getDayHourType()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,253,"ssertEquals(false, type.equals(PeriodType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,236,"assertEquals(true, type == PeriodType.yearWeekDayTime());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,237,"assertEquals(false, type.equals(PeriodType.millis()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,255,"ssertEquals(false, type.hashCode() == PeriodType.getDayHourType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,256,"ssertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,257,"ssertEquals(""DayHourType"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,258,"ssertEquals(""PeriodType[DayHourType]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,259,ssertEqualsAfterSerialization(type);
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,260,"ssertSame(PeriodType.getDayHourType(), type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,261,"ssertSame(PeriodType.getDayHourType(), type.withChronology(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,262,"ssertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,266,ublic void testYearDayType() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,267,eriodType type = PeriodType.getYearDayType();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,268,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,269,"ssertEquals(false, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,270,"ssertEquals(false, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,271,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,272,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,273,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,274,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,275,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,276,"ssertEquals(false, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,277,"ssertEquals(ISOChronology.getInstance(), type.getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,278,"ssertEquals(true, type.equals(type));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,279,"ssertEquals(true, type == PeriodType.getYearDayType());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,280,"ssertEquals(false, type.equals(PeriodType.getAllType()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,281,"ssertEquals(true, type.hashCode() == type.hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,282,"ssertEquals(true, type.hashCode() == PeriodType.getYearDayType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,283,"ssertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,284,"ssertEquals(""YearDayType"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,285,"ssertEquals(""PeriodType[YearDayType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,239,"assertEquals(true, type.hashCode() == PeriodType.yearWeekDayTime().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,240,"assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,287,"ssertSame(type, type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,288,"ssertSame(type, type.withChronology(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,289,"ssertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,293,ublic void testYearWeekType() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,294,eriodType type = PeriodType.getYearWeekType();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,295,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,296,"ssertEquals(false, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,297,"ssertEquals(true, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,298,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,299,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,300,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,301,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,302,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,303,"ssertEquals(false, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,304,"ssertEquals(ISOChronology.getInstance(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,245,public void testYearDayTime() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,246,PeriodType type = PeriodType.yearDayTime();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,247,"assertEquals(6, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,248,"assertEquals(DurationFieldType.years(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,249,"assertEquals(DurationFieldType.days(), type.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,250,"assertEquals(DurationFieldType.hours(), type.getFieldType(2));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,251,"assertEquals(DurationFieldType.minutes(), type.getFieldType(3));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,252,"assertEquals(DurationFieldType.seconds(), type.getFieldType(4));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,253,"assertEquals(DurationFieldType.millis(), type.getFieldType(5));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,254,"assertEquals(""YearDayTime"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,255,"assertEquals(""PeriodType[YearDayTime]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,306,"ssertEquals(true, type == PeriodType.getYearWeekType());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,307,"ssertEquals(false, type.equals(PeriodType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,257,"assertEquals(true, type == PeriodType.yearDayTime());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,258,"assertEquals(false, type.equals(PeriodType.millis()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,309,"ssertEquals(true, type.hashCode() == PeriodType.getYearWeekType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,310,"ssertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,311,"ssertEquals(""YearWeekType"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,312,"ssertEquals(""PeriodType[YearWeekType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,260,"assertEquals(true, type.hashCode() == PeriodType.yearDayTime().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,261,"assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,314,"ssertSame(type, type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,315,"ssertSame(type, type.withChronology(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,316,"ssertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,320,ublic void testYearWeekType_Chronology() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,321,eriodType type = PeriodType.getYearWeekType(BuddhistChronology.getInstanceUTC());
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,322,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,323,"ssertEquals(false, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,324,"ssertEquals(true, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,325,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,326,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,327,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,328,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,329,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,330,"ssertEquals(false, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,331,"ssertEquals(BuddhistChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,266,public void testDayTime() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,267,PeriodType type = PeriodType.dayTime();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,268,"assertEquals(5, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,269,"assertEquals(DurationFieldType.days(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,270,"assertEquals(DurationFieldType.hours(), type.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,271,"assertEquals(DurationFieldType.minutes(), type.getFieldType(2));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,272,"assertEquals(DurationFieldType.seconds(), type.getFieldType(3));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,273,"assertEquals(DurationFieldType.millis(), type.getFieldType(4));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,274,"assertEquals(""DayTime"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,275,"assertEquals(""PeriodType[DayTime]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,333,"ssertEquals(true, PeriodType.getYearWeekType() == PeriodType.getYearWeekType(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,334,"ssertEquals(true, PeriodType.getYearWeekType() == PeriodType.getYearWeekType(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,335,"ssertEquals(true, type.equals(PeriodType.getYearWeekType(BuddhistChronology.getInstanceUTC())));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,336,"ssertEquals(false, type.equals(PeriodType.getYearWeekType()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,337,"ssertEquals(false, type.equals(PeriodType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,277,"assertEquals(true, type == PeriodType.dayTime());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,278,"assertEquals(false, type.equals(PeriodType.millis()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,339,"ssertEquals(false, type.hashCode() == PeriodType.getYearWeekType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,340,"ssertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,341,"ssertEquals(""YearWeekType"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,342,"ssertEquals(""PeriodType[YearWeekType]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,343,ssertEqualsAfterSerialization(type);
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,344,"ssertSame(PeriodType.getYearWeekType(), type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,345,"ssertSame(PeriodType.getYearWeekType(), type.withChronology(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,346,"ssertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,350,ublic void testYearMonthType() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,351,eriodType type = PeriodType.getYearMonthType();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,352,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,353,"ssertEquals(true, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,354,"ssertEquals(false, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,355,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,356,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,357,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,358,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,359,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,360,"ssertEquals(false, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,361,"ssertEquals(ISOChronology.getInstance(), type.getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,362,"ssertEquals(true, type.equals(type));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,363,"ssertEquals(true, type == PeriodType.getYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,364,"ssertEquals(false, type.equals(PeriodType.getAllType()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,365,"ssertEquals(true, type.hashCode() == type.hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,366,"ssertEquals(true, type.hashCode() == PeriodType.getYearMonthType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,367,"ssertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,368,"ssertEquals(""YearMonthType"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,369,"ssertEquals(""PeriodType[YearMonthType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,280,"assertEquals(true, type.hashCode() == PeriodType.dayTime().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,281,"assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,371,"ssertSame(type, type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,372,"ssertSame(type, type.withChronology(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,373,"ssertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,377,ublic void testYearMonthType_Chronology() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,378,eriodType type = PeriodType.getYearMonthType(BuddhistChronology.getInstanceUTC());
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,379,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,380,"ssertEquals(true, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,381,"ssertEquals(false, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,382,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,383,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,384,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,385,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,386,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,387,"ssertEquals(false, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,388,"ssertEquals(BuddhistChronology.getInstanceUTC(), type.getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,389,"ssertEquals(true, type.equals(type));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,390,"ssertEquals(true, PeriodType.getYearMonthType() == PeriodType.getYearMonthType(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,391,"ssertEquals(true, PeriodType.getYearMonthType() == PeriodType.getYearMonthType(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,392,"ssertEquals(true, type.equals(PeriodType.getYearMonthType(BuddhistChronology.getInstanceUTC())));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,393,"ssertEquals(false, type.equals(PeriodType.getYearMonthType()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,394,"ssertEquals(false, type.equals(PeriodType.getAllType()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,395,"ssertEquals(true, type.hashCode() == type.hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,396,"ssertEquals(false, type.hashCode() == PeriodType.getYearMonthType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,397,"ssertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,398,"ssertEquals(""YearMonthType"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,399,"ssertEquals(""PeriodType[YearMonthType]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,400,ssertEqualsAfterSerialization(type);
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,401,"ssertSame(PeriodType.getYearMonthType(), type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,402,"ssertSame(PeriodType.getYearMonthType(), type.withChronology(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,403,"ssertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,407,ublic void testAllType() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,408,eriodType type = PeriodType.getAllType();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,409,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,410,"ssertEquals(true, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,411,"ssertEquals(true, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,412,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,413,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,414,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,415,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,416,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,417,"ssertEquals(false, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,418,"ssertEquals(ISOChronology.getInstance(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,286,public void testTime() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,287,PeriodType type = PeriodType.time();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,288,"assertEquals(4, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,289,"assertEquals(DurationFieldType.hours(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,290,"assertEquals(DurationFieldType.minutes(), type.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,291,"assertEquals(DurationFieldType.seconds(), type.getFieldType(2));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,292,"assertEquals(DurationFieldType.millis(), type.getFieldType(3));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,293,"assertEquals(""Time"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,294,"assertEquals(""PeriodType[Time]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,420,"ssertEquals(true, type == PeriodType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,421,"ssertEquals(false, type.equals(PeriodType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,296,"assertEquals(true, type == PeriodType.time());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,297,"assertEquals(false, type.equals(PeriodType.millis()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,423,"ssertEquals(true, type.hashCode() == PeriodType.getAllType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,424,"ssertEquals(false, type.hashCode() == PeriodType.getMillisType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,425,"ssertEquals(""AllType"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,426,"ssertEquals(""PeriodType[AllType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,299,"assertEquals(true, type.hashCode() == PeriodType.time().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,300,"assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,428,"ssertSame(type, type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,429,"ssertSame(type, type.withChronology(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,430,"ssertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,434,ublic void testAllType_Chronology() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,435,eriodType type = PeriodType.getAllType(BuddhistChronology.getInstanceUTC());
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,436,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,437,"ssertEquals(true, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,438,"ssertEquals(true, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,439,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,440,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,441,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,442,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,443,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,444,"ssertEquals(false, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,445,"ssertEquals(BuddhistChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,305,public void testYears() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,306,PeriodType type = PeriodType.years();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,307,"assertEquals(1, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,308,"assertEquals(DurationFieldType.years(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,309,"assertEquals(""Years"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,310,"assertEquals(""PeriodType[Years]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,447,"ssertEquals(true, PeriodType.getAllType() == PeriodType.getAllType(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,448,"ssertEquals(true, PeriodType.getAllType() == PeriodType.getAllType(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,449,"ssertEquals(true, type.equals(PeriodType.getAllType(BuddhistChronology.getInstanceUTC())));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,450,"ssertEquals(false, type.equals(PeriodType.getAllType()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,451,"ssertEquals(false, type.equals(PeriodType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,312,"assertEquals(true, type == PeriodType.years());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,313,"assertEquals(false, type.equals(PeriodType.standard()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,453,"ssertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,454,"ssertEquals(false, type.hashCode() == PeriodType.getMillisType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,455,"ssertEquals(""AllType"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,456,"ssertEquals(""PeriodType[AllType]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,457,ssertEqualsAfterSerialization(type);
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,458,"ssertSame(PeriodType.getAllType(), type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,459,"ssertSame(PeriodType.getAllType(), type.withChronology(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,460,"ssertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,464,ublic void testDayHourTypeUTC() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,465,eriodType type = PeriodType.getDayHourTypeUTC();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,466,"ssertEquals(false, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,467,"ssertEquals(false, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,468,"ssertEquals(false, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,469,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,470,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,471,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,472,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,473,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,474,"ssertEquals(true, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,475,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,476,"ssertEquals(true, type.equals(type));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,477,"ssertEquals(true, type == PeriodType.getDayHourTypeUTC());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,478,"ssertEquals(false, type.equals(PeriodType.getAllType()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,479,"ssertEquals(true, type.hashCode() == type.hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,480,"ssertEquals(true, type.hashCode() == PeriodType.getDayHourTypeUTC().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,481,"ssertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,482,"ssertEquals(""DayHourType"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,483,"ssertEquals(""PeriodType[DayHourType]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,484,ssertSameAfterSerialization(type);
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,485,"ssertSame(PeriodType.getDayHourType(), type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,486,"ssertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,487,"ssertEquals(PeriodType.getDayHourType(CopticChronology.getInstanceUTC()), type.withChronology(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,491,ublic void testYearDayTypeUTC() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,492,eriodType type = PeriodType.getYearDayTypeUTC();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,493,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,494,"ssertEquals(false, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,495,"ssertEquals(false, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,496,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,497,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,498,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,499,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,500,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,501,"ssertEquals(false, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,502,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,503,"ssertEquals(true, type.equals(type));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,504,"ssertEquals(true, type == PeriodType.getYearDayTypeUTC());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,505,"ssertEquals(false, type.equals(PeriodType.getAllType()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,506,"ssertEquals(true, type.hashCode() == type.hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,507,"ssertEquals(true, type.hashCode() == PeriodType.getYearDayTypeUTC().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,508,"ssertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,509,"ssertEquals(""YearDayType"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,510,"ssertEquals(""PeriodType[YearDayType]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,511,ssertSameAfterSerialization(type);
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,512,"ssertSame(PeriodType.getYearDayType(), type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,513,"ssertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,514,"ssertEquals(PeriodType.getYearDayType(CopticChronology.getInstanceUTC()), type.withChronology(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,518,ublic void testYearWeekTypeUTC() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,519,eriodType type = PeriodType.getYearWeekTypeUTC();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,520,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,521,"ssertEquals(false, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,522,"ssertEquals(true, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,523,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,524,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,525,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,526,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,527,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,528,"ssertEquals(false, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,529,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,530,"ssertEquals(true, type.equals(type));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,531,"ssertEquals(true, type == PeriodType.getYearWeekTypeUTC());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,532,"ssertEquals(false, type.equals(PeriodType.getAllType()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,533,"ssertEquals(true, type.hashCode() == type.hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,534,"ssertEquals(true, type.hashCode() == PeriodType.getYearWeekTypeUTC().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,535,"ssertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,536,"ssertEquals(""YearWeekType"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,537,"ssertEquals(""PeriodType[YearWeekType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,315,"assertEquals(true, type.hashCode() == PeriodType.years().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,316,"assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,539,"ssertSame(PeriodType.getYearWeekType(), type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,540,"ssertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,541,"ssertEquals(PeriodType.getYearWeekType(CopticChronology.getInstanceUTC()), type.withChronology(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,545,ublic void testYearMonthTypeUTC() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,546,eriodType type = PeriodType.getYearMonthTypeUTC();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,547,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,548,"ssertEquals(true, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,549,"ssertEquals(false, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,550,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,551,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,552,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,553,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,554,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,555,"ssertEquals(false, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,556,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,321,public void testMonths() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,322,PeriodType type = PeriodType.months();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,323,"assertEquals(1, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,324,"assertEquals(DurationFieldType.months(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,325,"assertEquals(""Months"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,326,"assertEquals(""PeriodType[Months]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,558,"ssertEquals(true, type == PeriodType.getYearMonthTypeUTC());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,559,"ssertEquals(false, type.equals(PeriodType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,328,"assertEquals(true, type == PeriodType.months());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,329,"assertEquals(false, type.equals(PeriodType.standard()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,561,"ssertEquals(true, type.hashCode() == PeriodType.getYearMonthTypeUTC().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,562,"ssertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,563,"ssertEquals(""YearMonthType"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,564,"ssertEquals(""PeriodType[YearMonthType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,331,"assertEquals(true, type.hashCode() == PeriodType.months().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,332,"assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,566,"ssertSame(PeriodType.getYearMonthType(), type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,567,"ssertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,568,"ssertEquals(PeriodType.getYearMonthType(CopticChronology.getInstanceUTC()), type.withChronology(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,572,ublic void testAllTypeUTC() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,573,eriodType type = PeriodType.getAllTypeUTC();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,574,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,575,"ssertEquals(true, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,576,"ssertEquals(true, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,577,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,578,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,579,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,580,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,581,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,582,"ssertEquals(false, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,583,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,337,public void testWeeks() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,338,PeriodType type = PeriodType.weeks();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,339,"assertEquals(1, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,340,"assertEquals(DurationFieldType.weeks(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,341,"assertEquals(""Weeks"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,342,"assertEquals(""PeriodType[Weeks]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,585,"ssertEquals(true, type == PeriodType.getAllTypeUTC());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,586,"ssertEquals(false, type.equals(PeriodType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,344,"assertEquals(true, type == PeriodType.weeks());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,345,"assertEquals(false, type.equals(PeriodType.standard()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,588,"ssertEquals(true, type.hashCode() == PeriodType.getAllTypeUTC().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,589,"ssertEquals(false, type.hashCode() == PeriodType.getMillisType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,590,"ssertEquals(""AllType"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,591,"ssertEquals(""PeriodType[AllType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,347,"assertEquals(true, type.hashCode() == PeriodType.weeks().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,348,"assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,593,"ssertSame(PeriodType.getAllType(), type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,594,"ssertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,595,"ssertEquals(PeriodType.getAllType(CopticChronology.getInstanceUTC()), type.withChronology(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,599,ublic void testPreciseDayHourType() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,600,eriodType type = PeriodType.getPreciseDayHourType();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,601,"ssertEquals(false, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,602,"ssertEquals(false, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,603,"ssertEquals(false, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,604,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,605,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,606,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,607,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,608,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,609,"ssertEquals(true, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,610,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,353,public void testDays() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,354,PeriodType type = PeriodType.days();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,355,"assertEquals(1, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,356,"assertEquals(DurationFieldType.days(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,357,"assertEquals(""Days"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,358,"assertEquals(""PeriodType[Days]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,612,"ssertEquals(true, type == PeriodType.getPreciseDayHourType());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,613,"ssertEquals(false, type.equals(PeriodType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,360,"assertEquals(true, type == PeriodType.days());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,361,"assertEquals(false, type.equals(PeriodType.standard()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,615,"ssertEquals(true, type.hashCode() == PeriodType.getPreciseDayHourType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,616,"ssertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,617,"ssertEquals(""PreciseDayHourType"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,618,"ssertEquals(""PeriodType[PreciseDayHourType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,363,"assertEquals(true, type.hashCode() == PeriodType.days().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,364,"assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,620,"ssertSame(type, type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,621,"ssertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,622,"ssertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,626,ublic void testPreciseYearDayType() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,627,eriodType type = PeriodType.getPreciseYearDayType();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,628,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,629,"ssertEquals(false, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,630,"ssertEquals(false, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,631,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,632,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,633,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,634,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,635,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,636,"ssertEquals(true, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,637,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,369,public void testHours() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,370,PeriodType type = PeriodType.hours();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,371,"assertEquals(1, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,372,"assertEquals(DurationFieldType.hours(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,373,"assertEquals(""Hours"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,374,"assertEquals(""PeriodType[Hours]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,639,"ssertEquals(true, type == PeriodType.getPreciseYearDayType());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,640,"ssertEquals(false, type.equals(PeriodType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,376,"assertEquals(true, type == PeriodType.hours());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,377,"assertEquals(false, type.equals(PeriodType.standard()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,642,"ssertEquals(true, type.hashCode() == PeriodType.getPreciseYearDayType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,643,"ssertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,644,"ssertEquals(""PreciseYearDayType"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,645,"ssertEquals(""PeriodType[PreciseYearDayType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,379,"assertEquals(true, type.hashCode() == PeriodType.hours().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,380,"assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,647,"ssertSame(type, type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,648,"ssertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,649,"ssertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,653,ublic void testPreciseYearWeekType() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,654,eriodType type = PeriodType.getPreciseYearWeekType();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,655,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,656,"ssertEquals(false, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,657,"ssertEquals(true, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,658,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,659,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,660,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,661,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,662,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,663,"ssertEquals(true, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,664,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,385,public void testMinutes() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,386,PeriodType type = PeriodType.minutes();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,387,"assertEquals(1, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,388,"assertEquals(DurationFieldType.minutes(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,389,"assertEquals(""Minutes"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,390,"assertEquals(""PeriodType[Minutes]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,666,"ssertEquals(true, type == PeriodType.getPreciseYearWeekType());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,667,"ssertEquals(false, type.equals(PeriodType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,392,"assertEquals(true, type == PeriodType.minutes());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,393,"assertEquals(false, type.equals(PeriodType.standard()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,669,"ssertEquals(true, type.hashCode() == PeriodType.getPreciseYearWeekType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,670,"ssertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,671,"ssertEquals(""PreciseYearWeekType"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,672,"ssertEquals(""PeriodType[PreciseYearWeekType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,395,"assertEquals(true, type.hashCode() == PeriodType.minutes().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,396,"assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,674,"ssertSame(type, type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,675,"ssertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,676,"ssertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,680,ublic void testPreciseYearMonthType() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,681,eriodType type = PeriodType.getPreciseYearMonthType();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,682,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,683,"ssertEquals(true, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,684,"ssertEquals(false, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,685,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,686,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,687,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,688,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,689,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,690,"ssertEquals(true, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,691,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,401,public void testSeconds() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,402,PeriodType type = PeriodType.seconds();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,403,"assertEquals(1, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,404,"assertEquals(DurationFieldType.seconds(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,405,"assertEquals(""Seconds"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,406,"assertEquals(""PeriodType[Seconds]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,693,"ssertEquals(true, type == PeriodType.getPreciseYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,694,"ssertEquals(false, type.equals(PeriodType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,408,"assertEquals(true, type == PeriodType.seconds());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,409,"assertEquals(false, type.equals(PeriodType.standard()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,696,"ssertEquals(true, type.hashCode() == PeriodType.getPreciseYearMonthType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,697,"ssertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,698,"ssertEquals(""PreciseYearMonthType"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,699,"ssertEquals(""PeriodType[PreciseYearMonthType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,411,"assertEquals(true, type.hashCode() == PeriodType.seconds().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,412,"assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,701,"ssertSame(type, type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,702,"ssertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,703,"ssertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,707,ublic void testPreciseAllType() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,708,eriodType type = PeriodType.getPreciseAllType();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,709,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,710,"ssertEquals(true, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,711,"ssertEquals(true, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,712,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,713,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,714,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,715,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,716,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,717,"ssertEquals(true, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,718,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,417,public void testMillis() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,418,PeriodType type = PeriodType.millis();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,419,"assertEquals(1, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,420,"assertEquals(DurationFieldType.millis(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,421,"assertEquals(""Millis"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,422,"assertEquals(""PeriodType[Millis]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,720,"ssertEquals(true, type == PeriodType.getPreciseAllType());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,721,"ssertEquals(false, type.equals(PeriodType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,424,"assertEquals(true, type == PeriodType.millis());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,425,"assertEquals(false, type.equals(PeriodType.standard()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,723,"ssertEquals(true, type.hashCode() == PeriodType.getPreciseAllType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,724,"ssertEquals(false, type.hashCode() == PeriodType.getMillisType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,725,"ssertEquals(""PreciseAllType"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,726,"ssertEquals(""PeriodType[PreciseAllType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,427,"assertEquals(true, type.hashCode() == PeriodType.millis().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,428,"assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,728,"ssertSame(type, type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,729,"ssertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,730,"ssertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,735,eriodType type = PeriodType.getPreciseAllType().withYearsRemoved();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,736,"ssertEquals(false, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,737,"ssertEquals(true, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,738,"ssertEquals(true, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,739,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,740,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,741,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,742,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,743,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,744,"ssertEquals(true, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,745,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,434,PeriodType type = PeriodType.standard().withYearsRemoved();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,435,"assertEquals(7, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,436,"assertEquals(DurationFieldType.months(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,437,"assertEquals(DurationFieldType.weeks(), type.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,438,"assertEquals(DurationFieldType.days(), type.getFieldType(2));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,439,"assertEquals(DurationFieldType.hours(), type.getFieldType(3));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,440,"assertEquals(DurationFieldType.minutes(), type.getFieldType(4));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,441,"assertEquals(DurationFieldType.seconds(), type.getFieldType(5));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,442,"assertEquals(DurationFieldType.millis(), type.getFieldType(6));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,747,"ssertEquals(true, type.equals(PeriodType.getPreciseAllType().withYearsRemoved()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,748,"ssertEquals(false, type.equals(PeriodType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,444,"assertEquals(true, type.equals(PeriodType.standard().withYearsRemoved()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,445,"assertEquals(false, type.equals(PeriodType.millis()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,750,"ssertEquals(true, type.hashCode() == PeriodType.getPreciseAllType().withYearsRemoved().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,751,"ssertEquals(false, type.hashCode() == PeriodType.getMillisType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,752,"ssertEquals(""MaskedYears[PreciseAllType]"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,753,"ssertEquals(""PeriodType[MaskedYears[PreciseAllType]]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,447,"assertEquals(true, type.hashCode() == PeriodType.standard().withYearsRemoved().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,448,"assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,449,"assertEquals(""StandardNoYears"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,450,"assertEquals(""PeriodType[StandardNoYears]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,759,eriodType type = PeriodType.getPreciseAllType().withMonthsRemoved();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,760,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,761,"ssertEquals(false, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,762,"ssertEquals(true, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,763,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,764,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,765,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,766,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,767,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,768,"ssertEquals(true, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,769,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,456,PeriodType type = PeriodType.standard().withMonthsRemoved();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,457,"assertEquals(7, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,458,"assertEquals(DurationFieldType.years(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,459,"assertEquals(DurationFieldType.weeks(), type.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,460,"assertEquals(DurationFieldType.days(), type.getFieldType(2));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,461,"assertEquals(DurationFieldType.hours(), type.getFieldType(3));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,462,"assertEquals(DurationFieldType.minutes(), type.getFieldType(4));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,463,"assertEquals(DurationFieldType.seconds(), type.getFieldType(5));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,464,"assertEquals(DurationFieldType.millis(), type.getFieldType(6));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,771,"ssertEquals(true, type.equals(PeriodType.getPreciseAllType().withMonthsRemoved()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,772,"ssertEquals(false, type.equals(PeriodType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,466,"assertEquals(true, type.equals(PeriodType.standard().withMonthsRemoved()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,467,"assertEquals(false, type.equals(PeriodType.millis()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,774,"ssertEquals(true, type.hashCode() == PeriodType.getPreciseAllType().withMonthsRemoved().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,775,"ssertEquals(false, type.hashCode() == PeriodType.getMillisType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,776,"ssertEquals(""MaskedMonths[PreciseAllType]"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,777,"ssertEquals(""PeriodType[MaskedMonths[PreciseAllType]]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,469,"assertEquals(true, type.hashCode() == PeriodType.standard().withMonthsRemoved().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,470,"assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,471,"assertEquals(""StandardNoMonths"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,472,"assertEquals(""PeriodType[StandardNoMonths]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,783,eriodType type = PeriodType.getPreciseAllType().withWeeksRemoved();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,784,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,785,"ssertEquals(true, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,786,"ssertEquals(false, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,787,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,788,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,789,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,790,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,791,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,792,"ssertEquals(true, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,793,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,478,PeriodType type = PeriodType.standard().withWeeksRemoved();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,479,"assertEquals(7, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,480,"assertEquals(DurationFieldType.years(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,481,"assertEquals(DurationFieldType.months(), type.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,482,"assertEquals(DurationFieldType.days(), type.getFieldType(2));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,483,"assertEquals(DurationFieldType.hours(), type.getFieldType(3));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,484,"assertEquals(DurationFieldType.minutes(), type.getFieldType(4));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,485,"assertEquals(DurationFieldType.seconds(), type.getFieldType(5));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,486,"assertEquals(DurationFieldType.millis(), type.getFieldType(6));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,795,"ssertEquals(true, type.equals(PeriodType.getPreciseAllType().withWeeksRemoved()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,796,"ssertEquals(false, type.equals(PeriodType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,488,"assertEquals(true, type.equals(PeriodType.standard().withWeeksRemoved()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,489,"assertEquals(false, type.equals(PeriodType.millis()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,798,"ssertEquals(true, type.hashCode() == PeriodType.getPreciseAllType().withWeeksRemoved().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,799,"ssertEquals(false, type.hashCode() == PeriodType.getMillisType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,800,"ssertEquals(""MaskedWeeks[PreciseAllType]"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,801,"ssertEquals(""PeriodType[MaskedWeeks[PreciseAllType]]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,491,"assertEquals(true, type.hashCode() == PeriodType.standard().withWeeksRemoved().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,492,"assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,493,"assertEquals(""StandardNoWeeks"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,494,"assertEquals(""PeriodType[StandardNoWeeks]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,807,eriodType type = PeriodType.getPreciseAllType().withDaysRemoved();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,808,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,809,"ssertEquals(true, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,810,"ssertEquals(true, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,811,"ssertEquals(false, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,812,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,813,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,814,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,815,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,816,"ssertEquals(true, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,817,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,500,PeriodType type = PeriodType.standard().withDaysRemoved();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,501,"assertEquals(7, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,502,"assertEquals(DurationFieldType.years(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,503,"assertEquals(DurationFieldType.months(), type.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,504,"assertEquals(DurationFieldType.weeks(), type.getFieldType(2));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,505,"assertEquals(DurationFieldType.hours(), type.getFieldType(3));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,506,"assertEquals(DurationFieldType.minutes(), type.getFieldType(4));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,507,"assertEquals(DurationFieldType.seconds(), type.getFieldType(5));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,508,"assertEquals(DurationFieldType.millis(), type.getFieldType(6));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,819,"ssertEquals(true, type.equals(PeriodType.getPreciseAllType().withDaysRemoved()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,820,"ssertEquals(false, type.equals(PeriodType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,510,"assertEquals(true, type.equals(PeriodType.standard().withDaysRemoved()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,511,"assertEquals(false, type.equals(PeriodType.millis()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,822,"ssertEquals(true, type.hashCode() == PeriodType.getPreciseAllType().withDaysRemoved().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,823,"ssertEquals(false, type.hashCode() == PeriodType.getMillisType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,824,"ssertEquals(""MaskedDays[PreciseAllType]"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,825,"ssertEquals(""PeriodType[MaskedDays[PreciseAllType]]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,513,"assertEquals(true, type.hashCode() == PeriodType.standard().withDaysRemoved().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,514,"assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,515,"assertEquals(""StandardNoDays"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,516,"assertEquals(""PeriodType[StandardNoDays]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,831,eriodType type = PeriodType.getPreciseAllType().withHoursRemoved();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,832,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,833,"ssertEquals(true, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,834,"ssertEquals(true, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,835,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,836,"ssertEquals(false, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,837,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,838,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,839,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,840,"ssertEquals(true, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,841,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,522,PeriodType type = PeriodType.standard().withHoursRemoved();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,523,"assertEquals(7, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,524,"assertEquals(DurationFieldType.years(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,525,"assertEquals(DurationFieldType.months(), type.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,526,"assertEquals(DurationFieldType.weeks(), type.getFieldType(2));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,527,"assertEquals(DurationFieldType.days(), type.getFieldType(3));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,528,"assertEquals(DurationFieldType.minutes(), type.getFieldType(4));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,529,"assertEquals(DurationFieldType.seconds(), type.getFieldType(5));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,530,"assertEquals(DurationFieldType.millis(), type.getFieldType(6));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,843,"ssertEquals(true, type.equals(PeriodType.getPreciseAllType().withHoursRemoved()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,844,"ssertEquals(false, type.equals(PeriodType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,532,"assertEquals(true, type.equals(PeriodType.standard().withHoursRemoved()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,533,"assertEquals(false, type.equals(PeriodType.millis()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,846,"ssertEquals(true, type.hashCode() == PeriodType.getPreciseAllType().withHoursRemoved().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,847,"ssertEquals(false, type.hashCode() == PeriodType.getMillisType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,848,"ssertEquals(""MaskedHours[PreciseAllType]"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,849,"ssertEquals(""PeriodType[MaskedHours[PreciseAllType]]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,535,"assertEquals(true, type.hashCode() == PeriodType.standard().withHoursRemoved().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,536,"assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,537,"assertEquals(""StandardNoHours"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,538,"assertEquals(""PeriodType[StandardNoHours]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,855,eriodType type = PeriodType.getPreciseAllType().withMinutesRemoved();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,856,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,857,"ssertEquals(true, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,858,"ssertEquals(true, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,859,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,860,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,861,"ssertEquals(false, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,862,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,863,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,864,"ssertEquals(true, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,865,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,544,PeriodType type = PeriodType.standard().withMinutesRemoved();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,545,"assertEquals(7, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,546,"assertEquals(DurationFieldType.years(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,547,"assertEquals(DurationFieldType.months(), type.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,548,"assertEquals(DurationFieldType.weeks(), type.getFieldType(2));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,549,"assertEquals(DurationFieldType.days(), type.getFieldType(3));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,550,"assertEquals(DurationFieldType.hours(), type.getFieldType(4));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,551,"assertEquals(DurationFieldType.seconds(), type.getFieldType(5));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,552,"assertEquals(DurationFieldType.millis(), type.getFieldType(6));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,867,"ssertEquals(true, type.equals(PeriodType.getPreciseAllType().withMinutesRemoved()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,868,"ssertEquals(false, type.equals(PeriodType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,554,"assertEquals(true, type.equals(PeriodType.standard().withMinutesRemoved()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,555,"assertEquals(false, type.equals(PeriodType.millis()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,870,"ssertEquals(true, type.hashCode() == PeriodType.getPreciseAllType().withMinutesRemoved().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,871,"ssertEquals(false, type.hashCode() == PeriodType.getMillisType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,872,"ssertEquals(""MaskedMinutes[PreciseAllType]"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,873,"ssertEquals(""PeriodType[MaskedMinutes[PreciseAllType]]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,557,"assertEquals(true, type.hashCode() == PeriodType.standard().withMinutesRemoved().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,558,"assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,559,"assertEquals(""StandardNoMinutes"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,560,"assertEquals(""PeriodType[StandardNoMinutes]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,879,eriodType type = PeriodType.getPreciseAllType().withSecondsRemoved();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,880,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,881,"ssertEquals(true, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,882,"ssertEquals(true, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,883,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,884,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,885,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,886,"ssertEquals(false, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,887,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,888,"ssertEquals(true, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,889,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,566,PeriodType type = PeriodType.standard().withSecondsRemoved();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,567,"assertEquals(7, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,568,"assertEquals(DurationFieldType.years(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,569,"assertEquals(DurationFieldType.months(), type.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,570,"assertEquals(DurationFieldType.weeks(), type.getFieldType(2));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,571,"assertEquals(DurationFieldType.days(), type.getFieldType(3));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,572,"assertEquals(DurationFieldType.hours(), type.getFieldType(4));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,573,"assertEquals(DurationFieldType.minutes(), type.getFieldType(5));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,574,"assertEquals(DurationFieldType.millis(), type.getFieldType(6));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,891,"ssertEquals(true, type.equals(PeriodType.getPreciseAllType().withSecondsRemoved()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,892,"ssertEquals(false, type.equals(PeriodType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,576,"assertEquals(true, type.equals(PeriodType.standard().withSecondsRemoved()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,577,"assertEquals(false, type.equals(PeriodType.millis()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,894,"ssertEquals(true, type.hashCode() == PeriodType.getPreciseAllType().withSecondsRemoved().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,895,"ssertEquals(false, type.hashCode() == PeriodType.getMillisType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,896,"ssertEquals(""MaskedSeconds[PreciseAllType]"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,897,"ssertEquals(""PeriodType[MaskedSeconds[PreciseAllType]]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,579,"assertEquals(true, type.hashCode() == PeriodType.standard().withSecondsRemoved().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,580,"assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,581,"assertEquals(""StandardNoSeconds"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,582,"assertEquals(""PeriodType[StandardNoSeconds]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,903,eriodType type = PeriodType.getPreciseAllType().withMillisRemoved();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,904,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,905,"ssertEquals(true, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,906,"ssertEquals(true, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,907,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,908,"ssertEquals(true, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,909,"ssertEquals(true, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,910,"ssertEquals(true, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,911,"ssertEquals(false, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,912,"ssertEquals(true, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,913,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,588,PeriodType type = PeriodType.standard().withMillisRemoved();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,589,"assertEquals(7, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,590,"assertEquals(DurationFieldType.years(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,591,"assertEquals(DurationFieldType.months(), type.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,592,"assertEquals(DurationFieldType.weeks(), type.getFieldType(2));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,593,"assertEquals(DurationFieldType.days(), type.getFieldType(3));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,594,"assertEquals(DurationFieldType.hours(), type.getFieldType(4));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,595,"assertEquals(DurationFieldType.minutes(), type.getFieldType(5));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,596,"assertEquals(DurationFieldType.seconds(), type.getFieldType(6));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,915,"ssertEquals(true, type.equals(PeriodType.getPreciseAllType().withMillisRemoved()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,916,"ssertEquals(false, type.equals(PeriodType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,598,"assertEquals(true, type.equals(PeriodType.standard().withMillisRemoved()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,599,"assertEquals(false, type.equals(PeriodType.millis()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,918,"ssertEquals(true, type.hashCode() == PeriodType.getPreciseAllType().withMillisRemoved().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,919,"ssertEquals(false, type.hashCode() == PeriodType.getMillisType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,920,"ssertEquals(""MaskedMillis[PreciseAllType]"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,921,"ssertEquals(""PeriodType[MaskedMillis[PreciseAllType]]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,601,"assertEquals(true, type.hashCode() == PeriodType.standard().withMillisRemoved().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,602,"assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,603,"assertEquals(""StandardNoMillis"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,604,"assertEquals(""PeriodType[StandardNoMillis]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,927,eriodType type = PeriodType.getPreciseAllType().withHoursRemoved().withMinutesRemoved().withSecondsRemoved();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,928,"ssertEquals(true, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,929,"ssertEquals(true, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,930,"ssertEquals(true, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,931,"ssertEquals(true, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,932,"ssertEquals(false, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,933,"ssertEquals(false, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,934,"ssertEquals(false, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,935,"ssertEquals(true, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,936,"ssertEquals(true, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,937,"ssertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,610,PeriodType type = PeriodType.standard().withHoursRemoved().withMinutesRemoved().withSecondsRemoved();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,611,"assertEquals(5, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,612,"assertEquals(DurationFieldType.years(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,613,"assertEquals(DurationFieldType.months(), type.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,614,"assertEquals(DurationFieldType.weeks(), type.getFieldType(2));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,615,"assertEquals(DurationFieldType.days(), type.getFieldType(3));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,616,"assertEquals(DurationFieldType.millis(), type.getFieldType(4));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,939,"ssertEquals(true, type.equals(PeriodType.getPreciseAllType().withHoursRemoved().withMinutesRemoved().withSecondsRemoved()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,940,"ssertEquals(false, type.equals(PeriodType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,618,"assertEquals(true, type.equals(PeriodType.standard().withHoursRemoved().withMinutesRemoved().withSecondsRemoved()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,619,"assertEquals(false, type.equals(PeriodType.millis()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,942,"ssertEquals(true, type.hashCode() == PeriodType.getPreciseAllType().withHoursRemoved().withMinutesRemoved().withSecondsRemoved().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,943,"ssertEquals(false, type.hashCode() == PeriodType.getMillisType().hashCode());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,944,"ssertEquals(""MaskedHoursMinutesSeconds[PreciseAllType]"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,945,"ssertEquals(""PeriodType[MaskedHoursMinutesSeconds[PreciseAllType]]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,621,"assertEquals(true, type.hashCode() == PeriodType.standard().withHoursRemoved().withMinutesRemoved().withSecondsRemoved().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,622,"assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,623,"assertEquals(""StandardNoHoursNoMinutesNoSeconds"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,624,"assertEquals(""PeriodType[StandardNoHoursNoMinutesNoSeconds]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,950,ublic void testMaskWithChronology() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,951,eriodType type = PeriodType.getAllType().withYearsRemoved();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,952,"ssertEquals(type, type.withChronology(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,953,"ssertEquals(type, type.withChronology(ISOChronology.getInstance()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,955,eriodType type2 = type.withChronology(CopticChronology.getInstanceUTC());
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,956,"ssertEquals(CopticChronology.getInstanceUTC(), type2.getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,957,"ssertEquals(false, type2.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,958,"ssertEquals(true, type2.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,959,"ssertEquals(true, type2.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,960,"ssertEquals(true, type2.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,961,"ssertEquals(true, type2.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,962,"ssertEquals(true, type2.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,963,"ssertEquals(true, type2.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,964,"ssertEquals(true, type2.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,969,eriodType type = PeriodType.getPreciseAllType().withYearsRemoved();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,630,PeriodType type = PeriodType.standard().withYearsRemoved();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,973,ype = PeriodType.getPreciseAllType().withMonthsRemoved();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,634,type = PeriodType.standard().withMonthsRemoved();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,977,ype = PeriodType.getPreciseAllType().withWeeksRemoved();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,638,type = PeriodType.standard().withWeeksRemoved();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,981,ype = PeriodType.getPreciseAllType().withDaysRemoved();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,642,type = PeriodType.standard().withDaysRemoved();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,985,ype = PeriodType.getPreciseAllType().withHoursRemoved();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,646,type = PeriodType.standard().withHoursRemoved();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,989,ype = PeriodType.getPreciseAllType().withMinutesRemoved();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,650,type = PeriodType.standard().withMinutesRemoved();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,993,ype = PeriodType.getPreciseAllType().withSecondsRemoved();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,654,type = PeriodType.standard().withSecondsRemoved();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,997,ype = PeriodType.getPreciseAllType().withMillisRemoved();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,658,type = PeriodType.standard().withMillisRemoved();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1004,eriodType type = PeriodType.getDayHourType();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,665,PeriodType type = PeriodType.dayTime();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1008,ype = PeriodType.getDayHourType();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,669,type = PeriodType.dayTime();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1012,ype = PeriodType.getDayHourType();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,673,type = PeriodType.dayTime();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1016,ype = PeriodType.getMillisType();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,677,type = PeriodType.millis();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1020,ype = PeriodType.getMillisType();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,681,type = PeriodType.millis();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1024,ype = PeriodType.getMillisType();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,685,type = PeriodType.millis();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1028,ype = PeriodType.getMillisType();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,689,type = PeriodType.millis();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1034,ublic void testMaskNullName() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1035,eriodType type = new MockPeriodTypeWithFields().withYearsRemoved();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1036,"ssertEquals(""MaskedYears[]"", type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1037,"ssertEquals(""PeriodType[MaskedYears[]]"", type.toString());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1042,eriodType type = new MockPeriodType();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,696,PeriodType type = PeriodType.dayTime().withMillisRemoved();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1047,ublic void testAbstract() throws Exception {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1048,"ssertEquals(true, Modifier.isPublic(PeriodType.class.getModifiers()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1049,"ssertEquals(true, Modifier.isAbstract(PeriodType.class.getModifiers()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1051,eriodType type = new MockPeriodType();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1052,"ssertEquals(false, type.years().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1053,"ssertEquals(false, type.months().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1054,"ssertEquals(false, type.weeks().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1055,"ssertEquals(false, type.days().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1056,"ssertEquals(false, type.hours().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1057,"ssertEquals(false, type.minutes().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1058,"ssertEquals(false, type.seconds().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1059,"ssertEquals(false, type.millis().isSupported());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1060,"ssertEquals(false, type.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1061,"ssertEquals(null, type.getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1062,"ssertEquals(true, type.equals(type));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1063,"ssertEquals(true, type.equals(new MockPeriodType()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1064,"ssertEquals(false, type.equals(PeriodType.getAllType()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1065,"ssertEquals(false, type.equals(null));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1066,"ssertEquals(false, type.equals(""six""));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1067,"ssertEquals(null, type.getName());"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1068,"ssertEquals(""PeriodType[]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,701,public void testIsSupported() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,702,PeriodType type = PeriodType.dayTime().withMillisRemoved();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,703,"assertEquals(false, type.isSupported(DurationFieldType.years()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,704,"assertEquals(false, type.isSupported(DurationFieldType.months()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,705,"assertEquals(false, type.isSupported(DurationFieldType.weeks()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,706,"assertEquals(true, type.isSupported(DurationFieldType.days()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,707,"assertEquals(true, type.isSupported(DurationFieldType.hours()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,708,"assertEquals(true, type.isSupported(DurationFieldType.minutes()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,709,"assertEquals(true, type.isSupported(DurationFieldType.seconds()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,710,"assertEquals(false, type.isSupported(DurationFieldType.millis()));"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1071,tatic class MockPeriodType extends PeriodType {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1072,ublic String getName() {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1073,eturn null;
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1075,ublic Chronology getChronology() {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1076,eturn null;
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1078,ublic PeriodType withChronology(Chronology chrono) {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1079,eturn null;
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1081,ublic boolean isPrecise() {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1082,eturn false;
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1086,tatic class MockPeriodTypeWithFields extends PeriodType {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1087,ublic String getName() {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1088,eturn null;
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1090,ublic Chronology getChronology() {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1091,eturn null;
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1093,ublic DurationField years() {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1094,eturn ISOChronology.getInstanceUTC().years();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1096,ublic DurationField months() {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1097,eturn ISOChronology.getInstanceUTC().months();
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1099,ublic PeriodType withChronology(Chronology chrono) {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1100,eturn null;
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1102,ublic boolean isPrecise() {
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,1103,eturn false;
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,714,public void testIndexOf() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,715,PeriodType type = PeriodType.dayTime().withMillisRemoved();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,716,"assertEquals(-1, type.indexOf(DurationFieldType.years()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,717,"assertEquals(-1, type.indexOf(DurationFieldType.months()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,718,"assertEquals(-1, type.indexOf(DurationFieldType.weeks()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,719,"assertEquals(0, type.indexOf(DurationFieldType.days()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,720,"assertEquals(1, type.indexOf(DurationFieldType.hours()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,721,"assertEquals(2, type.indexOf(DurationFieldType.minutes()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,722,"assertEquals(3, type.indexOf(DurationFieldType.seconds()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,723,"assertEquals(-1, type.indexOf(DurationFieldType.millis()));"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,152,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,155,ublic void testGetIsPrecise() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,156,eriod test = new Period(123L);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,157,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,158,"est = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,159,"ssertEquals(false, test.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,152,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,195,"ssertEquals(false, test1.equals(new Period(123L, PeriodType.getDayHourType())));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,188,"assertEquals(false, test1.equals(new Period(123L, PeriodType.dayTime())));"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,200,"uper(value, null);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,193,"super(value, null, null);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,256,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,257,"xpected = ISOChronology.getInstanceUTC().years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,258,"xpected = ISOChronology.getInstanceUTC().months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,259,"xpected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,260,"xpected = ISOChronology.getInstanceUTC().days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,261,"xpected = ISOChronology.getInstanceUTC().hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,262,"xpected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,263,"xpected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,264,"xpected = ISOChronology.getInstanceUTC().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,266,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,267,"ong added = test.addTo(TEST_TIME_NOW, -2);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,268,"ssertEquals(expected, added);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,271,ublic void testAddTo4() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,278,ublic void testAddTo5() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,255,public void testAddTo4() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,303,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,304,"xpected = ISOChronology.getInstance().years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,305,"xpected = ISOChronology.getInstance().months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,306,"xpected = ISOChronology.getInstance().weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,307,"xpected = ISOChronology.getInstance().days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,308,"xpected = ISOChronology.getInstance().hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,309,"xpected = ISOChronology.getInstance().minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,310,"xpected = ISOChronology.getInstance().seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,311,"xpected = ISOChronology.getInstance().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,313,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,314,"ong added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstance());  // local specified so use it"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,315,"ssertEquals(expected, added);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,318,ublic void testAddToWithChronology3() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,329,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,330,"ong added = test.addTo(TEST_TIME_NOW, -2, null);  // no chrono specified so drop back to duration (UTC)"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,290,"Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,291,"long added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstanceUTC());  // local specified so use it"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,292,"assertEquals(expected, added);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,295,public void testAddToWithChronology3() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,296,long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,297,"expected = ISOChronology.getInstance().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,298,"expected = ISOChronology.getInstance().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,299,"expected = ISOChronology.getInstance().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,300,"expected = ISOChronology.getInstance().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,301,"expected = ISOChronology.getInstance().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,302,"expected = ISOChronology.getInstance().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,303,"expected = ISOChronology.getInstance().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,304,"expected = ISOChronology.getInstance().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,306,"Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,307,"long added = test.addTo(TEST_TIME_NOW, -2, null);  // no chrono specified so use default"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,347,"ateTime added = test.addTo(new Instant(), 1);  // Instant has no time zone, uses duration's zone (local)"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,324,"DateTime added = test.addTo(new Instant(), 1);  // Instant has no time zone, use default"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,353,ong expected = TEST_TIME_NOW;
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,354,"xpected = ISOChronology.getInstanceUTC().years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,355,"xpected = ISOChronology.getInstanceUTC().months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,356,"xpected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,357,"xpected = ISOChronology.getInstanceUTC().days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,358,"xpected = ISOChronology.getInstanceUTC().hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,359,"xpected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,360,"xpected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,361,"xpected = ISOChronology.getInstanceUTC().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,363,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,364,"ateTime added = test.addTo(new Instant(), -2);  // Instant has no time zone, uses duration's zone (UTC)"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,365,"ssertEquals(expected, added.getMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,366,"ssertEquals(ISOChronology.getInstance(), added.getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,369,ublic void testAddToRI3() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,380,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,381,"ateTime added = test.addTo(new DateTime(), -2);  // DateTime has local time zone"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,340,"Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,341,"DateTime added = test.addTo(new Instant(), -2);  // Instant has no time zone, use default"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,346,public void testAddToRI3() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,347,long expected = TEST_TIME_NOW;
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,348,"expected = ISOChronology.getInstanceUTC().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,349,"expected = ISOChronology.getInstanceUTC().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,350,"expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,351,"expected = ISOChronology.getInstanceUTC().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,352,"expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,353,"expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,354,"expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,355,"expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,357,"Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,358,"DateTime added = test.addTo(new DateTime(ISOChronology.getInstanceUTC()), -2);  // DateTime has UTC time zone"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,359,"assertEquals(expected, added.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,360,"assertEquals(ISOChronology.getInstanceUTC(), added.getChronology());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,397,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,374,"Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,405,"xpected = ISOChronology.getInstanceUTC().years().add(expected, -2);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,406,"xpected = ISOChronology.getInstanceUTC().months().add(expected, -4);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,407,"xpected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,408,"xpected = ISOChronology.getInstanceUTC().days().add(expected, -8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,409,"xpected = ISOChronology.getInstanceUTC().hours().add(expected, -10);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,410,"xpected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,411,"xpected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,412,"xpected = ISOChronology.getInstanceUTC().millis().add(expected, -16);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,382,"expected = ISOChronology.getInstance().years().add(expected, -2);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,383,"expected = ISOChronology.getInstance().months().add(expected, -4);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,384,"expected = ISOChronology.getInstance().weeks().add(expected, -6);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,385,"expected = ISOChronology.getInstance().days().add(expected, -8);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,386,"expected = ISOChronology.getInstance().hours().add(expected, -10);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,387,"expected = ISOChronology.getInstance().minutes().add(expected, -12);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,388,"expected = ISOChronology.getInstance().seconds().add(expected, -14);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,389,"expected = ISOChronology.getInstance().millis().add(expected, -16);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,414,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,415,"ateTime added = test.addTo(null, -2);  // null has no time zone, uses duration's zone (UTC)"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,391,"Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,392,"DateTime added = test.addTo(null, -2);  // null has no time zone, use default"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,449,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,426,"Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,489,ublic void testToDurationMillis() {
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,466,public void testToDurationMillisFrom() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,491,"ssertEquals(123L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,493,"est = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,494,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,495,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,496,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,497, catch (IllegalStateException ex) {}
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,468,"assertEquals(123L, test.toDurationMillisFrom(0L, null));"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,502,"ssertEquals(new Duration(123L), test.toDuration());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,504,"est = new Period(1, 2, 3, 4, 5, 6, 7, 8);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,505,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,506,est.toDuration();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,507,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,508, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,512,ublic void testWithPeriodTypeRetainDuration1() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,513,eriod test = new Period(123L);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,514,eriod result = test.withPeriodTypeRetainDuration(PeriodType.getAllType());
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,515,"ssertSame(test, result);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,518,ublic void testWithPeriodTypeRetainDuration2() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,519,eriod test = new Period(3123L);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,520,eriod result = test.withPeriodTypeRetainDuration(PeriodType.getDayHourType());
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,521,"ssertEquals(3, result.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,522,"ssertEquals(123, result.getMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,523,"ssertEquals(3123L, result.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,524,"ssertEquals(PeriodType.getDayHourType(), result.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,527,ublic void testWithPeriodTypeRetainDuration3() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,528,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,529,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,530,est.withPeriodTypeRetainDuration(PeriodType.getDayHourType());
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,531,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,532, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,535,ublic void testWithPeriodTypeRetainDuration4() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,536,eriod test = new Period(3123L);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,537,eriod result = test.withPeriodTypeRetainDuration(null);
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,538,"ssertEquals(3, result.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,539,"ssertEquals(123, result.getMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,540,"ssertEquals(3123L, result.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,541,"ssertEquals(PeriodType.getAllType(), result.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,473,"assertEquals(new Duration(123L), test.toDurationFrom(new Instant(0L)));"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,547,eriod result = test.withPeriodType(PeriodType.getAllType());
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,479,Period result = test.withPeriodType(PeriodType.standard());
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,553,eriod result = test.withPeriodType(PeriodType.getDayHourType());
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,485,Period result = test.withPeriodType(PeriodType.dayTime());
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,556,"ssertEquals(3123L, result.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,557,"ssertEquals(PeriodType.getDayHourType(), result.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,488,"assertEquals(PeriodType.dayTime(), result.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,561,"eriod test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,492,"Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,563,est.withPeriodType(PeriodType.getDayHourType());
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,494,test.withPeriodType(PeriodType.dayTime());
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,573,"ssertEquals(3123L, result.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,574,"ssertEquals(PeriodType.getAllType(), result.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,504,"assertEquals(PeriodType.standard(), result.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,578,"eriod test = new Period(1, 2, 0, 4, 5, 6, 7, 8, PeriodType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,579,eriod result = test.withPeriodType(PeriodType.getYearMonthType());
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,580,"ssertEquals(PeriodType.getYearMonthType(), result.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,508,"Period test = new Period(1, 2, 0, 4, 5, 6, 7, 8, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,509,Period result = test.withPeriodType(PeriodType.yearMonthDayTime());
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,510,"assertEquals(PeriodType.yearMonthDayTime(), result.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,592,ublic void testWithFieldsNormalized1() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,593,"eriod test = new Period(1, 2, 3, 4, 5, 6, 61, 8, PeriodType.getPreciseAllType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,594,eriod result = test.withFieldsNormalized();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,595,"ssertEquals(1, result.getYears());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,596,"ssertEquals(2, result.getMonths());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,597,"ssertEquals(3, result.getWeeks());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,598,"ssertEquals(4, result.getDays());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,599,"ssertEquals(5, result.getHours());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,600,"ssertEquals(7, result.getMinutes());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,601,"ssertEquals(1, result.getSeconds());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,602,"ssertEquals(8, result.getMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,605,ublic void testWithFieldsNormalized2() {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,606,"eriod test = new Period(1, 2, 3, 4, 5, 6, 61, 8, PeriodType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,607,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,608,est.withFieldsNormalized();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,609,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,610, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,142,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,142,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,151,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,152,"ssertEquals(length, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,161,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,159,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,170,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,171,"ssertEquals(length, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,181,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,177,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,191,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,192,"ssertEquals(length, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,201,"eriod test = new Period(length, null);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,202,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,195,"Period test = new Period(length, (PeriodType) null);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,196,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,211,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,212,"ssertEquals(length, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,220,"eriod test = new Period(length, PeriodType.getMillisType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,221,"ssertEquals(PeriodType.getMillisType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,212,"Period test = new Period(length, PeriodType.millis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,213,"assertEquals(PeriodType.millis(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,230,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,231,"ssertEquals(length, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,239,"eriod test = new Period(length, PeriodType.getDayHourType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,240,"ssertEquals(PeriodType.getDayHourType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,229,"Period test = new Period(length, PeriodType.dayTime());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,230,"assertEquals(PeriodType.dayTime(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,249,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,250,"ssertEquals(length, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,258,"eriod test = new Period(length, PeriodType.getAllType().withMillisRemoved());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,259,"ssertEquals(PeriodType.getAllType().withMillisRemoved(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,246,"Period test = new Period(length, PeriodType.standard().withMillisRemoved());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,247,"assertEquals(PeriodType.standard().withMillisRemoved(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,268,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,269,"ssertEquals(length - 8, test.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,259,public void testConstructor_long_Chronology1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,260,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,261,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,262,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,263,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,264,"Period test = new Period(length, Chronology.getISO());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,265,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,266,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,267,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,268,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,269,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,270,"assertEquals((4 * 24) + 5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,271,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,272,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,273,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,276,public void testConstructor_long_Chronology2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,277,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,278,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,279,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,280,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,281,"Period test = new Period(length, Chronology.getISOUTC());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,282,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,283,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,284,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,285,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,286,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,287,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,288,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,289,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,290,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,293,public void testConstructor_long_Chronology3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,294,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,295,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,296,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,297,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,298,"Period test = new Period(length, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,299,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,300,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,301,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,302,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,303,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,304,"assertEquals((4 * 24) + 5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,305,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,306,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,307,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,311,public void testConstructor_long_PeriodType_Chronology1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,312,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,313,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,314,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,315,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,316,"Period test = new Period(length, PeriodType.time().withMillisRemoved(), Chronology.getISO());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,317,"assertEquals(PeriodType.time().withMillisRemoved(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,318,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,319,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,320,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,321,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,322,"assertEquals((4 * 24) + 5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,323,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,324,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,325,"assertEquals(0, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,328,public void testConstructor_long_PeriodType_Chronology2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,329,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,330,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,331,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,332,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,333,"Period test = new Period(length, PeriodType.standard(), Chronology.getISOUTC());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,334,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,335,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,336,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,337,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,338,"assertEquals(4, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,339,"assertEquals(5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,340,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,341,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,342,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,345,public void testConstructor_long_PeriodType_Chronology3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,346,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,347,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,348,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,349,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,350,"Period test = new Period(length, PeriodType.standard(), (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,351,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,352,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,353,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,354,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,355,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,356,"assertEquals((4 * 24) + 5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,357,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,358,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,359,"assertEquals(8, test.getMillis());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,362,public void testConstructor_long_PeriodType_Chronology4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,363,long length = 4 * DateTimeConstants.MILLIS_PER_DAY +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,364,5 * DateTimeConstants.MILLIS_PER_HOUR +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,365,6 * DateTimeConstants.MILLIS_PER_MINUTE +
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,366,7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,367,"Period test = new Period(length, (PeriodType) null, (Chronology) null);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,368,"assertEquals(PeriodType.standard(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,369,"assertEquals(0, test.getYears());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,370,"assertEquals(0, test.getMonths());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,371,"assertEquals(0, test.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,372,"assertEquals(0, test.getDays());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,373,"assertEquals((4 * 24) + 5, test.getHours());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,374,"assertEquals(6, test.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,375,"assertEquals(7, test.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,376,"assertEquals(8, test.getMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,278,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,385,"assertEquals(PeriodType.time(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,287,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,288,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,289, * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,290," * DateTimeConstants.MILLIS_PER_SECOND + 8, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,299,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,402,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,308,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,309,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,310,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,311,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,312, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,321,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,419,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,330,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,331,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,332,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,333,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,334, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,338,"eriod test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.getDayHourType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,339,"ssertEquals(PeriodType.getDayHourType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,431,"Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.dayTime());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,432,"assertEquals(PeriodType.dayTime(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,348,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,349,ssertEquals(
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,350, * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,351," * DateTimeConstants.MILLIS_PER_SECOND + 8, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,356,"ew Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getDayHourType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,445,"new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.dayTime());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,366,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,455,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,375,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,376,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,377,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,378,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,379, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,386,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,470,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,395,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,396,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,397,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,398,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,399, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,406,"eriod test = new Period(dt1.getMillis(), dt2.getMillis(), null);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,407,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,485,"Period test = new Period(dt1.getMillis(), dt2.getMillis(), (PeriodType) null);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,486,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,416,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,417,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,418,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,419,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,420, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,426,"eriod test = new Period(dt1.getMillis(), dt2.getMillis(), PeriodType.getDayHourType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,427,"ssertEquals(PeriodType.getDayHourType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,500,"Period test = new Period(dt1.getMillis(), dt2.getMillis(), PeriodType.dayTime());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,501,"assertEquals(PeriodType.dayTime(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,436,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,437,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,438,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,439,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,440, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,446,"eriod test = new Period(dt1.getMillis(), dt2.getMillis(), PeriodType.getAllType().withMillisRemoved());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,447,"ssertEquals(PeriodType.getAllType().withMillisRemoved(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,515,"Period test = new Period(dt1.getMillis(), dt2.getMillis(), PeriodType.standard().withMillisRemoved());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,516,"assertEquals(PeriodType.standard().withMillisRemoved(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,456,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,457,"ssertEquals(dt2.getMillis() - dt1.getMillis() - 1, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,463,"eriod test = new Period(dt1.getMillis(), dt2.getMillis(), PeriodType.getYearWeekType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,530,"Period test = new Period(dt1.getMillis(), dt2.getMillis(), PeriodType.yearWeekDayTime());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,465,"ssertEquals(PeriodType.getYearWeekType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,532,"assertEquals(PeriodType.yearWeekDayTime(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,481,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,548,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,490,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,491,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,492,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,493,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,494, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,501,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,563,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,510,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,511,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,512,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,513,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,514, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,521,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,578,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,530,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,531,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,532,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,533,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,534, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,541,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,593,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,550,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,551,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,552,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,553,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,554, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,561,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,608,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,570,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,571,"ssertEquals(0L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,579,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,624,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,588,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,589,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,590,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,591,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,592, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,598,"eriod test = new Period(dt1, dt2, PeriodType.getDayHourType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,599,"ssertEquals(PeriodType.getDayHourType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,638,"Period test = new Period(dt1, dt2, PeriodType.dayTime());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,639,"assertEquals(PeriodType.dayTime(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,608,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,609,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,610,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,611,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,612, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,618,"eriod test = new Period(dt1, dt2, PeriodType.getAllType().withMillisRemoved());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,619,"ssertEquals(PeriodType.getAllType().withMillisRemoved(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,653,"Period test = new Period(dt1, dt2, PeriodType.standard().withMillisRemoved());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,654,"assertEquals(PeriodType.standard().withMillisRemoved(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,628,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,629,"ssertEquals(dt2.getMillis() - dt1.getMillis() - 1, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,635,"eriod test = new Period(dt1, dt2, PeriodType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,636,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,668,"Period test = new Period(dt1, dt2, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,669,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,645,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,646,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,647,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,648,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,649, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,655,"eriod test = new Period(dt1, dt2, PeriodType.getAllType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,656,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,683,"Period test = new Period(dt1, dt2, PeriodType.standard());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,684,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,665,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,666,"ssertEquals(0L, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,675,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,701,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,684,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,685,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,686,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,687,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,688, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,693,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,714,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,702,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,703,"ssertEquals(0, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,707,"eriod test = new Period(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.getDayHourType()));"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,708,"ssertEquals(PeriodType.getDayHourType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,726,"Period test = new Period(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()));"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,727,"assertEquals(PeriodType.dayTime(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,717,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,718,ssertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,719," * DateTimeConstants.MILLIS_PER_SECOND + 4, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,723,"eriod base = new Period(1, 1, 0, 1, 1, 1, 1, 1, PeriodType.getAllType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,739,"Period base = new Period(1, 1, 0, 1, 1, 1, 1, 1, PeriodType.standard());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,725,"ssertEquals(PeriodType.getAllType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,741,"assertEquals(PeriodType.standard(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,734,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,735,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,736,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,737,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,738, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,746,"eriod test = new Period(""P1Y2M3D"", PeriodType.getYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,747,"ssertEquals(PeriodType.getYearMonthType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,757,"Period test = new Period(""P1Y2M3D"", PeriodType.yearMonthDayTime());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,758,"assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,756,"ssertEquals(false, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,757,ry {
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,758,est.toDurationMillis();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,759,ail();
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,760, catch (IllegalStateException ex) {}
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,764,"eriod test = new Period((Object) null, PeriodType.getYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,765,"ssertEquals(PeriodType.getYearMonthType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,770,"Period test = new Period((Object) null, PeriodType.yearMonthDayTime());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,771,"assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,774,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,775,"ssertEquals(0, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,779,"eriod test = new Period(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.getDayHourType()), PeriodType.getYearMonthType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,780,"ssertEquals(PeriodType.getYearMonthType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,783,"Period test = new Period(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()), PeriodType.yearMonthDayTime());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,784,"assertEquals(PeriodType.yearMonthDayTime(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,789,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,790,ssertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,791," * DateTimeConstants.MILLIS_PER_SECOND + 4, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,795,"eriod test = new Period(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.getDayHourType()), null);"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,796,"ssertEquals(PeriodType.getDayHourType(), test.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,796,"Period test = new Period(new Period(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.dayTime()), (PeriodType) null);"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,797,"assertEquals(PeriodType.dayTime(), test.getPeriodType());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,805,"ssertEquals(true, test.isPrecise());"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,806,ssertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,807," * DateTimeConstants.MILLIS_PER_SECOND + 4, test.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,362,rivate static int DURATION_SIZE = 6;
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,362,private static int DURATION_SIZE = 5;
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,371," = ConverterManager.getInstance().getDurationConverter(new Period(1, 2, 3, 4, 5, 6, 7, 8));"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,372,"ssertEquals(ReadablePeriod.class, c.getSupportedType());"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,553,"ublic void setInto(ReadWritablePeriod duration, Object object) {}"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,554,"ublic PeriodType getPeriodType(Object object, boolean tmm) {return null;}"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,550,"public void setInto(ReadWritablePeriod duration, Object object, Chronology c) {}"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,551,public PeriodType getPeriodType(Object object) {return null;}
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,570,"ublic void setInto(ReadWritablePeriod duration, Object object) {}"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,571,"ublic PeriodType getPeriodType(Object object, boolean tmm) {return null;}"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,567,"public void setInto(ReadWritablePeriod duration, Object object, Chronology c) {}"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,568,public PeriodType getPeriodType(Object object) {return null;}
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,620,"ublic void setInto(ReadWritablePeriod duration, Object object) {}"
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,621,"ublic PeriodType getPeriodType(Object object, boolean tmm) {return null;}"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,617,"public void setInto(ReadWritablePeriod duration, Object object, Chronology c) {}"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,618,public PeriodType getPeriodType(Object object) {return null;}
False,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,777,"ssertEquals(""ConverterManager[6 instant,6 duration,5 period,2 interval]"", ConverterManager.getInstance().toString());"
True,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,JodaTime/src/test/org/joda/time/convert/TestConverterManager.java,774,"assertEquals(""ConverterManager[6 instant,5 duration,5 period,2 interval]"", ConverterManager.getInstance().toString());"
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,65,mport org.joda.time.PeriodType;
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,66,mport org.joda.time.MutablePeriod;
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,155,ublic void testGetPeriodType_Object() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,156,"ssertEquals(PeriodType.getAllType(),"
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,157,"ongConverter.INSTANCE.getPeriodType(new Long(123L), false));"
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,158,"ssertEquals(PeriodType.getPreciseAllType(),"
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,159,"ongConverter.INSTANCE.getPeriodType(new Long(123L), true));"
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,162,ublic void testSetInto_Object() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,163,utablePeriod m = new MutablePeriod(PeriodType.getMillisType());
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,164,"ongConverter.INSTANCE.setInto(m, new Long(123L));"
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,165,"ssertEquals(123L, m.toDurationMillis());"
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,173,"ssertEquals(PeriodType.getAllType(),"
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,174,"ullConverter.INSTANCE.getPeriodType(null, false));"
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,175,"ssertEquals(PeriodType.getPreciseAllType(),"
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,176,"ullConverter.INSTANCE.getPeriodType(null, true));"
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,173,"assertEquals(PeriodType.standard(),"
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,174,NullConverter.INSTANCE.getPeriodType(null));
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,180,utablePeriod m = new MutablePeriod(PeriodType.getMillisType());
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,181,"ullConverter.INSTANCE.setInto(m, null);"
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,182,"ssertEquals(0L, m.toDurationMillis());"
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,178,MutablePeriod m = new MutablePeriod(PeriodType.millis());
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,179,"NullConverter.INSTANCE.setInto(m, null, null);"
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,180,"assertEquals(0L, m.getMillis());"
False,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,129,"ssertEquals(PeriodType.getPreciseAllType(),"
False,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,130,"eadableDurationConverter.INSTANCE.getPeriodType(new Duration(123L), false));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,131,"ssertEquals(PeriodType.getPreciseAllType(),"
False,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,132,"eadableDurationConverter.INSTANCE.getPeriodType(new Duration(123L), true));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,129,"assertEquals(PeriodType.standard(),"
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,130,ReadableDurationConverter.INSTANCE.getPeriodType(new Duration(123L)));
False,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,136,utablePeriod m = new MutablePeriod(PeriodType.getYearMonthType());
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,134,MutablePeriod m = new MutablePeriod(PeriodType.yearMonthDayTime());
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,138,"), null);"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,131,"ssertEquals(PeriodType.getAllType(),"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,132,"eadableIntervalConverter.INSTANCE.getPeriodType(i, false));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,133,"ssertEquals(PeriodType.getPreciseAllType(),"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,134,"eadableIntervalConverter.INSTANCE.getPeriodType(i, true));"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,131,"assertEquals(PeriodType.standard(),"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,132,ReadableIntervalConverter.INSTANCE.getPeriodType(i));
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,139,utablePeriod m = new MutablePeriod(PeriodType.getMillisType());
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,140,"eadableIntervalConverter.INSTANCE.setInto(m, i);"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,137,MutablePeriod m = new MutablePeriod(PeriodType.millis());
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,138,"ReadableIntervalConverter.INSTANCE.setInto(m, i, null);"
False,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,122,ublic void testGetPeriodMillis_Object() throws Exception {
False,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,123,"ssertEquals(123L, ReadablePeriodConverter.INSTANCE.getDurationMillis(new Period(123L)));"
False,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,128,"ssertEquals(PeriodType.getAllType(),"
False,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,129,"eadablePeriodConverter.INSTANCE.getPeriodType(new Period(123L), false));"
False,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,130,"ssertEquals(PeriodType.getPreciseAllType(),"
False,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,131,"eadablePeriodConverter.INSTANCE.getPeriodType(new Period(123L), true));"
False,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,132,"ssertEquals(PeriodType.getPreciseAllType(),"
False,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,133,"eadablePeriodConverter.INSTANCE.getPeriodType(new Period(123L, PeriodType.getAllType()), true));"
False,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,134,"ssertEquals(PeriodType.getPreciseYearDayType(),"
False,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,135,"eadablePeriodConverter.INSTANCE.getPeriodType(new Period(123L, PeriodType.getPreciseYearDayType()), true));"
True,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,123,"assertEquals(PeriodType.standard(),"
True,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,124,"ReadablePeriodConverter.INSTANCE.getPeriodType(new Period(123L, PeriodType.standard())));"
True,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,125,"assertEquals(PeriodType.yearMonthDayTime(),"
True,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,126,"ReadablePeriodConverter.INSTANCE.getPeriodType(new Period(123L, PeriodType.yearMonthDayTime())));"
False,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,139,utablePeriod m = new MutablePeriod(PeriodType.getYearMonthType());
False,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,140,"eadablePeriodConverter.INSTANCE.setInto(m, new Period(0, 0, 0, 3, 0, 4, 0, 5));"
True,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,130,MutablePeriod m = new MutablePeriod(PeriodType.yearMonthDayTime());
True,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,131,"ReadablePeriodConverter.INSTANCE.setInto(m, new Period(0, 0, 0, 3, 0, 4, 0, 5), null);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,66,mport org.joda.time.DateTimeConstants;
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,318,"ong millis = StringConverter.INSTANCE.getDurationMillis(""P2Y6M9D"");"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,319,ong len = (2L * 365L + 6L * 30L + 9L) * DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,320,"ssertEquals(len, millis);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,317,"long millis = StringConverter.INSTANCE.getDurationMillis(""PT12.345S"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,318,"assertEquals(12345, millis);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,320,"millis = StringConverter.INSTANCE.getDurationMillis(""pt12.345s"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,321,"assertEquals(12345, millis);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,323,"millis = StringConverter.INSTANCE.getDurationMillis(""pt12s"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,324,"assertEquals(12000, millis);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,326,"millis = StringConverter.INSTANCE.getDurationMillis(""pt12.s"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,327,"assertEquals(12000, millis);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,329,"millis = StringConverter.INSTANCE.getDurationMillis(""pt-12.32s"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,330,"assertEquals(-12320, millis);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,332,"millis = StringConverter.INSTANCE.getDurationMillis(""pt12.3456s"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,333,"assertEquals(12345, millis);"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,341,try {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,342,"StringConverter.INSTANCE.getDurationMillis(""PTS"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,343,fail();
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,344,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,345,try {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,346,"StringConverter.INSTANCE.getDurationMillis(""XT0S"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,347,fail();
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,348,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,349,try {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,350,"StringConverter.INSTANCE.getDurationMillis(""PX0S"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,351,fail();
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,352,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,353,try {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,354,"StringConverter.INSTANCE.getDurationMillis(""PT0X"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,355,fail();
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,356,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,357,try {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,358,"StringConverter.INSTANCE.getDurationMillis(""PTXS"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,359,fail();
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,360,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,361,try {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,362,"StringConverter.INSTANCE.getDurationMillis(""PT0.0.0S"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,363,fail();
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,364,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,365,try {
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,366,"StringConverter.INSTANCE.getDurationMillis(""PT0-00S"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,367,fail();
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,368,} catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,332,"ssertEquals(PeriodType.getAllType(),"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,333,"tringConverter.INSTANCE.getPeriodType(""P2Y6M9D"", false));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,334,"ssertEquals(PeriodType.getPreciseAllType(),"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,335,"tringConverter.INSTANCE.getPeriodType(""P2Y6M9D"", true));"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,373,"assertEquals(PeriodType.standard(),"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,374,"StringConverter.INSTANCE.getPeriodType(""P2Y6M9D""));"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,339,utablePeriod m = new MutablePeriod(PeriodType.getYearMonthType());
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,340,"tringConverter.INSTANCE.setInto(m, ""P2Y6M9DT12H24M48S"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,378,MutablePeriod m = new MutablePeriod(PeriodType.yearMonthDayTime());
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,379,"StringConverter.INSTANCE.setInto(m, ""P2Y6M9DT12H24M48S"", null);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,351,utablePeriod m = new MutablePeriod(PeriodType.getYearWeekType());
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,352,"tringConverter.INSTANCE.setInto(m, ""P2Y4W3DT12H24M48S"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,390,MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime());
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,391,"StringConverter.INSTANCE.setInto(m, ""P2Y4W3DT12H24M48S"", null);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,363,"utablePeriod m = new MutablePeriod(1, 0, 1, 1, 1, 1, 1, 1, PeriodType.getYearWeekType());"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,364,"tringConverter.INSTANCE.setInto(m, ""P2Y4W3D"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,402,"MutablePeriod m = new MutablePeriod(1, 0, 1, 1, 1, 1, 1, 1, PeriodType.yearWeekDayTime());"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,403,"StringConverter.INSTANCE.setInto(m, ""P2Y4W3D"", null);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,377,"tringConverter.INSTANCE.setInto(m, """");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,416,"StringConverter.INSTANCE.setInto(m, """", null);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,382,"tringConverter.INSTANCE.setInto(m, ""PXY"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,421,"StringConverter.INSTANCE.setInto(m, ""PXY"", null);"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,387,"tringConverter.INSTANCE.setInto(m, ""PT0SXY"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,426,"StringConverter.INSTANCE.setInto(m, ""PT0SXY"", null);"
False,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,77,"rivate static final Period YEAR_DAY_PERIOD = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.getYearDayType());"
False,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,78,"rivate static final Period EMPTY_YEAR_DAY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0, PeriodType.getYearDayType());"
True,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,77,"private static final Period YEAR_DAY_PERIOD = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());"
True,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,78,"private static final Period EMPTY_YEAR_DAY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0, PeriodType.yearDayTime());"
False,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,139," = new Period(0, PeriodType.getAllType().withMillisRemoved().withSecondsRemoved());"
True,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,139,"p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());"
False,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,157," = new Period(0, PeriodType.getAllType().withMillisRemoved().withSecondsRemoved());"
True,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,157,"p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());"
False,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,175," = new Period(0, PeriodType.getAllType().withMillisRemoved().withSecondsRemoved());"
True,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,175,"p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());"
False,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,193," = new Period(0, PeriodType.getAllType().withMillisRemoved().withSecondsRemoved());"
True,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,193,"p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());"
False,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,211," = new Period(0, PeriodType.getAllType().withMillisRemoved().withSecondsRemoved());"
True,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,211,"p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,77,"rivate static final Period YEAR_DAY_PERIOD = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.getYearDayType());"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,78,"rivate static final Period EMPTY_YEAR_DAY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0, PeriodType.getYearDayType());"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,77,"private static final Period YEAR_DAY_PERIOD = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,78,"private static final Period EMPTY_YEAR_DAY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0, PeriodType.yearDayTime());"

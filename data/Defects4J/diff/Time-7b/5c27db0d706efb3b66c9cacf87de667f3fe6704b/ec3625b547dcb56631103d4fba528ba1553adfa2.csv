is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,18,mport java.lang.reflect.InvocationTargetException;
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,19,mport java.lang.reflect.Method;
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,21,mport java.util.Date;
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,24,mport java.util.TimeZone;
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,51,** The method to call as TimeZone.getOffset is only from JDK 1.4. */
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,52,rivate static final Method OFFSET_METHOD;
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,53,tatic {
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,54,ethod m = null;
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,55,ry {
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,56," = TimeZone.class.getDeclaredMethod(""getOffset"", new Class[] {Long.TYPE});"
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,57, catch (SecurityException ex) {
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,58,/ ignore
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,59, catch (NoSuchMethodException ex) {
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,60,ry {
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,61," = TimeZone.class.getDeclaredMethod(""getOffsets"", new Class[] {Long.TYPE, int[].class});"
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,62,.setAccessible(true);
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,63, catch (SecurityException e) {
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,64,/ ignore
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,65, catch (NoSuchMethodException e) {
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,66,/ ignore
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,69,FFSET_METHOD = m;
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,268, Get the date time as a <code>java.util.Date</code>.
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,269, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,270," Note that as from version 1.2, this method goes to extra effort to"
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,271, maintain the field values on the created Date object.
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,272, This means that the differences in timezone data between Joda-Time
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,273, and each JDK version are now handled correctly.
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,275, @return a Date initialised with this datetime
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,277,ublic Date toDate() {
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,278,ong millis = getMillis();
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,279,"illis = fixMillisForTimeZone(millis, TimeZone.getDefault());"
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,280,eturn new Date(millis);
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,284, Get the date time as a <code>java.util.Calendar</code>.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,242,"* Get the date time as a <code>java.util.Calendar</code>, assigning"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,243,* exactly the same millisecond instant.
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,288," Note that as from version 1.2, this method goes to extra effort to"
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,289, maintain the field values on the created Calendar object.
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,290, This means that the differences in timezone data between Joda-Time
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,291, and each JDK version are now handled correctly.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,247,* The JDK and Joda-Time both have time zone implementations and these
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,248,* differ in accuracy. Joda-Time's implementation is generally more up to
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,249,* date and thus more accurate - for example JDK1.3 has no historical data.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,250,* The effect of this is that the field values of the <code>Calendar</code>
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,251,"* may differ from those of this object, even though the milliseond value"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,252,* is the same. Most of the time this just means that the JDK field values
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,253,"* are wrong, as our time zone information is more up to date."
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,302,al.setTime(convertToDate(cal));
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,264,cal.setTime(toDate());
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,307, Get the date time as a <code>java.util.GregorianCalendar</code>.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,269,"* Get the date time as a <code>java.util.GregorianCalendar</code>,"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,270,* assigning exactly the same millisecond instant.
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,309," Note that as from version 1.2, this method goes to extra effort to"
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,310, maintain the field values on the created Calendar object.
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,311, This means that the differences in timezone data between Joda-Time
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,312, and each JDK version are now handled correctly.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,272,* The JDK and Joda-Time both have time zone implementations and these
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,273,* differ in accuracy. Joda-Time's implementation is generally more up to
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,274,* date and thus more accurate - for example JDK1.3 has no historical data.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,275,* The effect of this is that the field values of the <code>Calendar</code>
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,276,"* may differ from those of this object, even though the milliseond value"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,277,* is the same. Most of the time this just means that the JDK field values
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,278,"* are wrong, as our time zone information is more up to date."
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,319,al.setTime(convertToDate(cal));
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,285,cal.setTime(toDate());
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,323,rivate Date convertToDate(Calendar cal) {
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,324,ong millis = getMillis();
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,325,"illis = fixMillisForTimeZone(millis, cal.getTimeZone());"
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,326,eturn new Date(millis);
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,329,"rivate long fixMillisForTimeZone(long millis, TimeZone zone) {"
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,330,f (OFFSET_METHOD == null) {
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,331,eturn millis;
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,333,nteger val;
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,334,ry {
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,335,"f (""getOffset"".equals(OFFSET_METHOD.getName())) {"
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,336,al = (Integer) OFFSET_METHOD.invoke(
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,337,"one, new Object[] {new Long(millis)});"
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,338, else {
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,339,al = (Integer) OFFSET_METHOD.invoke(
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,340,"one, new Object[] {new Long(millis), null});"
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,342, catch (IllegalAccessException ex) {
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,343,eturn millis;
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,344, catch (InvocationTargetException ex) {
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,345,eturn millis;
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,348,ong millisLocal = millis - val.intValue();
False,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,349,eturn millisLocal + getZone().getOffsetFromLocal(millisLocal);
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,226,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,227,* The <code>Date</code> object created has exactly the same millisecond
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,228,* instant as this object.
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,122,ong millisLocal = calendar.getTime().getTime() +
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,123,alendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,124,ateTimeZone tz = DateTimeZone.forTimeZone(calendar.getTimeZone());
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,125,eturn millisLocal - tz.getOffsetFromLocal(millisLocal);
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,122,return calendar.getTime().getTime();
False,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,21,mport org.joda.time.DateTimeZone;
False,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,57,ong millisLocal = date.getTime() - date.getTimezoneOffset() * 60000;
False,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,58,eturn millisLocal - DateTimeZone.getDefault().getOffsetFromLocal(millisLocal);
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,56,return date.getTime();

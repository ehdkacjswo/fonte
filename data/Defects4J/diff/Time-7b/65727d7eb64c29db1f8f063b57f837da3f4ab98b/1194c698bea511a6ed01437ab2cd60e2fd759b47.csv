is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/main/java/org/joda/time/LocalDate.java,JodaTime/src/main/java/org/joda/time/LocalDate.java,108,rivate long iLocalMillis;
True,JodaTime/src/main/java/org/joda/time/LocalDate.java,JodaTime/src/main/java/org/joda/time/LocalDate.java,108,private final long iLocalMillis;
False,JodaTime/src/main/java/org/joda/time/LocalDate.java,JodaTime/src/main/java/org/joda/time/LocalDate.java,110,rivate Chronology iChronology;
True,JodaTime/src/main/java/org/joda/time/LocalDate.java,JodaTime/src/main/java/org/joda/time/LocalDate.java,110,private final Chronology iChronology;
True,JodaTime/src/main/java/org/joda/time/LocalDate.java,JodaTime/src/main/java/org/joda/time/LocalDate.java,404,* Handle broken serialization from other tools.
True,JodaTime/src/main/java/org/joda/time/LocalDate.java,JodaTime/src/main/java/org/joda/time/LocalDate.java,405,"* @return the resolved object, not null"
True,JodaTime/src/main/java/org/joda/time/LocalDate.java,JodaTime/src/main/java/org/joda/time/LocalDate.java,407,private Object readResolve() {
True,JodaTime/src/main/java/org/joda/time/LocalDate.java,JodaTime/src/main/java/org/joda/time/LocalDate.java,408,if (DateTimeZone.UTC.equals(iChronology.getZone()) == false) {
True,JodaTime/src/main/java/org/joda/time/LocalDate.java,JodaTime/src/main/java/org/joda/time/LocalDate.java,409,"return new LocalDate(iLocalMillis, iChronology.withUTC());"
True,JodaTime/src/main/java/org/joda/time/LocalDate.java,JodaTime/src/main/java/org/joda/time/LocalDate.java,411,return this;
False,JodaTime/src/main/java/org/joda/time/LocalDateTime.java,JodaTime/src/main/java/org/joda/time/LocalDateTime.java,96,rivate long iLocalMillis;
True,JodaTime/src/main/java/org/joda/time/LocalDateTime.java,JodaTime/src/main/java/org/joda/time/LocalDateTime.java,96,private final long iLocalMillis;
False,JodaTime/src/main/java/org/joda/time/LocalDateTime.java,JodaTime/src/main/java/org/joda/time/LocalDateTime.java,98,rivate Chronology iChronology;
True,JodaTime/src/main/java/org/joda/time/LocalDateTime.java,JodaTime/src/main/java/org/joda/time/LocalDateTime.java,98,private final Chronology iChronology;
True,JodaTime/src/main/java/org/joda/time/LocalDateTime.java,JodaTime/src/main/java/org/joda/time/LocalDateTime.java,456,* Handle broken serialization from other tools.
True,JodaTime/src/main/java/org/joda/time/LocalDateTime.java,JodaTime/src/main/java/org/joda/time/LocalDateTime.java,457,"* @return the resolved object, not null"
True,JodaTime/src/main/java/org/joda/time/LocalDateTime.java,JodaTime/src/main/java/org/joda/time/LocalDateTime.java,459,private Object readResolve() {
True,JodaTime/src/main/java/org/joda/time/LocalDateTime.java,JodaTime/src/main/java/org/joda/time/LocalDateTime.java,460,if (DateTimeZone.UTC.equals(iChronology.getZone()) == false) {
True,JodaTime/src/main/java/org/joda/time/LocalDateTime.java,JodaTime/src/main/java/org/joda/time/LocalDateTime.java,461,"return new LocalDateTime(iLocalMillis, iChronology.withUTC());"
True,JodaTime/src/main/java/org/joda/time/LocalDateTime.java,JodaTime/src/main/java/org/joda/time/LocalDateTime.java,463,return this;
False,JodaTime/src/main/java/org/joda/time/LocalTime.java,JodaTime/src/main/java/org/joda/time/LocalTime.java,104,rivate long iLocalMillis;
True,JodaTime/src/main/java/org/joda/time/LocalTime.java,JodaTime/src/main/java/org/joda/time/LocalTime.java,104,private final long iLocalMillis;
False,JodaTime/src/main/java/org/joda/time/LocalTime.java,JodaTime/src/main/java/org/joda/time/LocalTime.java,106,rivate Chronology iChronology;
True,JodaTime/src/main/java/org/joda/time/LocalTime.java,JodaTime/src/main/java/org/joda/time/LocalTime.java,106,private final Chronology iChronology;
True,JodaTime/src/main/java/org/joda/time/LocalTime.java,JodaTime/src/main/java/org/joda/time/LocalTime.java,464,* Handle broken serialization from other tools.
True,JodaTime/src/main/java/org/joda/time/LocalTime.java,JodaTime/src/main/java/org/joda/time/LocalTime.java,465,"* @return the resolved object, not null"
True,JodaTime/src/main/java/org/joda/time/LocalTime.java,JodaTime/src/main/java/org/joda/time/LocalTime.java,467,private Object readResolve() {
True,JodaTime/src/main/java/org/joda/time/LocalTime.java,JodaTime/src/main/java/org/joda/time/LocalTime.java,468,if (DateTimeZone.UTC.equals(iChronology.getZone()) == false) {
True,JodaTime/src/main/java/org/joda/time/LocalTime.java,JodaTime/src/main/java/org/joda/time/LocalTime.java,469,"return new LocalTime(iLocalMillis, iChronology.withUTC());"
True,JodaTime/src/main/java/org/joda/time/LocalTime.java,JodaTime/src/main/java/org/joda/time/LocalTime.java,471,return this;
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,JodaTime/src/main/java/org/joda/time/MonthDay.java,327,* Handle broken serialization from other tools.
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,JodaTime/src/main/java/org/joda/time/MonthDay.java,328,"* @return the resolved object, not null"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,JodaTime/src/main/java/org/joda/time/MonthDay.java,330,private Object readResolve() {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,JodaTime/src/main/java/org/joda/time/MonthDay.java,331,if (DateTimeZone.UTC.equals(getChronology().getZone()) == false) {
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,JodaTime/src/main/java/org/joda/time/MonthDay.java,332,"return new MonthDay(this, getChronology().withUTC());"
True,JodaTime/src/main/java/org/joda/time/MonthDay.java,JodaTime/src/main/java/org/joda/time/MonthDay.java,334,return this;
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,JodaTime/src/main/java/org/joda/time/YearMonth.java,319,* Handle broken serialization from other tools.
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,JodaTime/src/main/java/org/joda/time/YearMonth.java,320,"* @return the resolved object, not null"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,JodaTime/src/main/java/org/joda/time/YearMonth.java,322,private Object readResolve() {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,JodaTime/src/main/java/org/joda/time/YearMonth.java,323,if (DateTimeZone.UTC.equals(getChronology().getZone()) == false) {
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,JodaTime/src/main/java/org/joda/time/YearMonth.java,324,"return new YearMonth(this, getChronology().withUTC());"
True,JodaTime/src/main/java/org/joda/time/YearMonth.java,JodaTime/src/main/java/org/joda/time/YearMonth.java,326,return this;
False,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,21,mport java.io.FileNotFoundException;
False,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,297,ry {
False,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,298,"is = new FileInputStream(""src/test/resources/"" + filename + ""2.dat"");"
False,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,299,is = new ObjectInputStream(fis);
False,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,300,bj = ois.readObject();
False,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,301,is.close();
False,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,302,f (same) {
False,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,303,"ssertSame(test, obj);"
False,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,304, else {
False,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,305,"ssertEquals(test, obj);"
False,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,307, catch (FileNotFoundException ex) {
False,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,308,/ ignore
True,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,295,//        try {
True,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,296,"//            fis = new FileInputStream(""src/test/resources/"" + filename + ""2.dat"");"
True,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,297,//            ois = new ObjectInputStream(fis);
True,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,298,//            obj = ois.readObject();
True,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,299,//            ois.close();
True,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,300,//            if (same) {
True,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,301,"//                assertSame(test, obj);"
True,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,302,//            } else {
True,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,303,"//                assertEquals(test, obj);"
True,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,305,//        } catch (FileNotFoundException ex) {
True,JodaTime/src/test/java/org/joda/time/TestSerialization.java,JodaTime/src/test/java/org/joda/time/TestSerialization.java,306,//            // ignore

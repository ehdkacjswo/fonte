is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,93,suite.addTest(TestSerialization.suite());
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,2,*  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,16,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,18,import java.io.ByteArrayInputStream;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,19,import java.io.ByteArrayOutputStream;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,20,import java.io.FileInputStream;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,21,import java.io.ObjectInputStream;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,22,import java.io.ObjectOutputStream;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,23,import java.io.Serializable;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,24,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,25,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,27,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,28,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,30,import org.joda.time.chrono.CopticChronology;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,31,import org.joda.time.chrono.GJChronology;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,32,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,35,* This class is a Junit unit test for serialization.
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,37,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,39,public class TestSerialization extends TestCase {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,40,// Test in 2002/03 as time zones are more well known
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,41,// (before the late 90's they were all over the place)
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,43,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,44,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,45,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,47,long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,48,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,49,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,50,366 + 365;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,51,long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,52,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,53,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,54,366 + 365 + 365;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,56,// 2002-06-09
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,57,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,58,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,60,// 2002-04-05
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,61,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,62,(y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,63,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,64,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,66,// 2003-05-06
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,67,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,68,(y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,69,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,70,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,72,private DateTimeZone originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,73,private TimeZone originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,74,private Locale originalLocale = null;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,76,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,77,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,80,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,81,return new TestSuite(TestSerialization.class);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,84,public TestSerialization(String name) {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,85,super(name);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,88,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,89,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,90,originalDateTimeZone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,91,originalTimeZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,92,originalLocale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,93,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,94,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,95,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,98,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,99,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,100,DateTimeZone.setDefault(originalDateTimeZone);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,101,TimeZone.setDefault(originalTimeZone);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,102,Locale.setDefault(originalLocale);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,103,originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,104,originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,105,originalLocale = null;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,109,public void testTest() {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,110,"assertEquals(""2002-06-09T00:00:00.000Z"", new Instant(TEST_TIME_NOW).toString());"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,111,"assertEquals(""2002-04-05T12:24:00.000Z"", new Instant(TEST_TIME1).toString());"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,112,"assertEquals(""2003-05-06T14:28:00.000Z"", new Instant(TEST_TIME2).toString());"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,116,public void testSerializedInstant() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,117,Instant test = new Instant();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,118,"loadAndCompare(test, ""Instant.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,119,inlineCompare(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,122,public void testSerializedDateTime() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,123,DateTime test = new DateTime();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,124,"loadAndCompare(test, ""DateTime.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,125,inlineCompare(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,128,public void testSerializedMutableDateTime() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,129,MutableDateTime test = new MutableDateTime();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,130,"loadAndCompare(test, ""MutableDateTime.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,131,inlineCompare(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,134,public void testSerializedDateMidnight() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,135,DateMidnight test = new DateMidnight();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,136,"loadAndCompare(test, ""DateMidnight.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,137,inlineCompare(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,140,public void testSerializedYearMonthDay() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,141,YearMonthDay test = new YearMonthDay();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,142,"loadAndCompare(test, ""YearMonthDay.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,143,inlineCompare(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,146,public void testSerializedTimeOfDay() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,147,TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,148,"loadAndCompare(test, ""TimeOfDay.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,149,inlineCompare(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,152,public void testSerializedDateTimeZoneUTC() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,153,DateTimeZone test = DateTimeZone.UTC;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,154,"loadAndCompare(test, ""DateTimeZoneUTC.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,155,inlineCompare(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,158,public void testSerializedDateTimeZone() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,159,DateTimeZone test = PARIS;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,160,"loadAndCompare(test, ""DateTimeZone.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,161,inlineCompare(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,164,public void testSerializedCopticChronology() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,165,CopticChronology test = CopticChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,166,"loadAndCompare(test, ""CopticChronology.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,167,inlineCompare(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,170,public void testSerializedISOChronology() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,171,ISOChronology test = ISOChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,172,"loadAndCompare(test, ""ISOChronology.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,173,inlineCompare(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,176,public void testSerializedGJChronology() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,177,GJChronology test = GJChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,178,"loadAndCompare(test, ""GJChronology.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,179,inlineCompare(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,182,"private void loadAndCompare(Serializable test, String filename) throws Exception {"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,183,"FileInputStream fis = new FileInputStream(""src/testdata/"" + filename);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,184,ObjectInputStream ois = new ObjectInputStream(fis);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,185,Object obj = ois.readObject();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,186,ois.close();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,187,"assertEquals(test, obj);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,190,public void inlineCompare(Serializable test) throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,191,ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,192,ObjectOutputStream oos = new ObjectOutputStream(baos);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,193,oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,194,oos.close();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,196,ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,197,ObjectInputStream ois = new ObjectInputStream(bais);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,198,Object obj = ois.readObject();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,199,ois.close();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,201,"assertEquals(test, obj);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,205,//    public void testStoreSerializedInstant() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,206,//        Instant test = new Instant();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,207,"//        store(test, ""Instant.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,210,//    public void testStoreSerializedDateTime() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,211,//        DateTime test = new DateTime();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,212,"//        store(test, ""DateTime.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,215,//    public void testStoreSerializedMutableDateTime() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,216,//        MutableDateTime test = new MutableDateTime();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,217,"//        store(test, ""MutableDateTime.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,220,//    public void testStoreSerializedDateMidnight() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,221,//        DateMidnight test = new DateMidnight();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,222,"//        store(test, ""DateMidnight.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,225,//    public void testStoreSerializedYearMonthDay() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,226,//        YearMonthDay test = new YearMonthDay();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,227,"//        store(test, ""YearMonthDay.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,230,//    public void testStoreSerializedTimeOfDay() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,231,//        TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,232,"//        store(test, ""TimeOfDay.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,235,//    public void testStoreSerializedDateTimeZoneUTC() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,236,//        DateTimeZone test = DateTimeZone.UTC;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,237,"//        store(test, ""DateTimeZoneUTC.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,240,//    public void testStoreSerializedDateTimeZone() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,241,//        DateTimeZone test = PARIS;
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,242,"//        store(test, ""DateTimeZone.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,245,//    public void testStoreSerializedCopticChronology() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,246,//        CopticChronology test = CopticChronology.getInstance(LONDON);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,247,"//        store(test, ""CopticChronology.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,250,//    public void testStoreSerializedISOChronology() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,251,//        ISOChronology test = ISOChronology.getInstance(PARIS);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,252,"//        store(test, ""ISOChronology.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,255,//    public void testStoreSerializedGJChronology() throws Exception {
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,256,//        GJChronology test = GJChronology.getInstance(TOKYO);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,257,"//        store(test, ""GJChronology.dat"");"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,260,"//    private void store(Serializable test, String filename) throws Exception {"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,261,"//        FileOutputStream fos = new FileOutputStream(""src/testdata/"" + filename);"
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,262,//        ObjectOutputStream oos = new ObjectOutputStream(fos);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,263,//        oos.writeObject(test);
True,JodaTime/src/test/org/joda/time/TestSerialization.java,JodaTime/src/test/org/joda/time/TestSerialization.java,264,//        oos.close();

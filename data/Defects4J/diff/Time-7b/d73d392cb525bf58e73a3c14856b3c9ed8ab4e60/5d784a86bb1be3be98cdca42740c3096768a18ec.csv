is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,126, The returned object will be a new instance of the same implementation
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,127," type. Only the time zone of the chronology will change, the millis are"
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,128, kept. Immutable subclasses may return <code>this</code> if appropriate.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,126,* This method is useful for finding the local time in another timezone.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,127,"* For example, if this instant holds 12:30 in Europe/London, the result"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,128,* from this method with Europe/Paris would be 13:30.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,129,* <p>
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,130,* The returned object will be a new instance of the same implementation type.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,131,"* This method changes alters the time zone, and does not change the"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,132,"* millisecond instant, with the effect that the field values usually change."
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,133,* Immutable implementations may return <code>this</code> if appropriate.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,132, @see #withDateTimeZoneMoved
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,137,* @see #withDateTimeZoneRetainFields
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,149, The returned object will be a new instance of the same implementation
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,150, type. Moving the time zone alters the millisecond value of this instant
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,151, such that it is relative to the new time zone. Immutable subclasses may
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,152, return <code>this</code> if appropriate.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,154,* This method is useful for finding the millisecond time in another timezone.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,155,"* For example, if this instant holds 12:30 in Europe/London (ie. 12:30Z),"
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,156,* the result from this method with Europe/Paris would be 12:30 (ie. 11:30Z).
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,157,* <p>
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,158,* The returned object will be a new instance of the same implementation type.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,159,* This method changes alters the time zone and the millisecond instant to keep
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,160,* the field values the same.
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,161,* Immutable implementations may return <code>this</code> if appropriate.
False,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,158,ublic ReadableInstant withDateTimeZoneMoved(DateTimeZone newDateTimeZone) {
True,JodaTime/src/java/org/joda/time/AbstractInstant.java,JodaTime/src/java/org/joda/time/AbstractInstant.java,167,public ReadableInstant withDateTimeZoneRetainFields(DateTimeZone newDateTimeZone) {
False,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,319,ublic void moveDateTimeZone(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/MutableDateOnly.java,JodaTime/src/java/org/joda/time/MutableDateOnly.java,319,public void setDateTimeZoneRetainFields(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,429," Sets the time zone of the datetime, which changes the"
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,429,"* Sets the time zone of the datetime, changing the chronology and field values."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,430,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,431,* Changing the zone using this method retains the millisecond instant.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,432,* The millisecond instant is adjusted in the new zone to compensate.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,436, @see #moveDateTimeZone
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,440,* @see #setDateTimeZoneRetainFields
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,443," Moves the time zone of the datetime, which changes the"
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,444, chronology. Moving the time zone alters the millisecond value of this
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,445, instant such that it is relative to the new time zone.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,447,"* Sets the time zone of the datetime, changing the chronology and millisecond."
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,448,* <p>
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,449,* Changing the zone using this method retains the field values.
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,450,* The millisecond instant is adjusted in the new zone to compensate.
False,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,452,ublic void moveDateTimeZone(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/MutableDateTime.java,JodaTime/src/java/org/joda/time/MutableDateTime.java,457,public void setDateTimeZoneRetainFields(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,325,ublic void moveDateTimeZone(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,JodaTime/src/java/org/joda/time/MutableTimeOnly.java,325,public void setDateTimeZoneRetainFields(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,56,/ Import for @link support
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,57,mport org.joda.time.convert.ConverterManager;
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,84, The recognised object types are defined in {@link ConverterManager} and
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,81,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,82,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,102," Sets the time zone of the datetime via the chronology, which has no"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,103, effect if not applicable. Setting the time zone does not affect the
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,104, millisecond value of this instant.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,100,"* Sets the time zone of the datetime, changing the chronology and field values."
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,101,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,102,* Changing the zone using this method retains the millisecond instant.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,103,* The millisecond instant is adjusted in the new zone to compensate.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,105,* chronology. Setting the time zone does not affect the millisecond value
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,106,* of this instant.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,107,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,108,"* If the chronology already has this time zone, no change occurs."
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,107, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,108, @see #moveDateTimeZone
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,111,* @see #setDateTimeZoneRetainFields
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,113," Moves the time zone of the datetime via the chronology, which has no"
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,114, effect if not applicable. Moving the time zone alters the millisecond
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,115, value of this instant such that it is relative to the new time zone.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,116,"* Sets the time zone of the datetime, changing the chronology and millisecond."
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,117,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,118,* Changing the zone using this method retains the field values.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,119,* The millisecond instant is adjusted in the new zone to compensate.
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,120,* <p>
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,121,"* If the chronology already has this time zone, no change occurs."
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,118, @throws IllegalArgumentException if the value is invalid
False,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,121,oid moveDateTimeZone(DateTimeZone zone);
True,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,JodaTime/src/java/org/joda/time/ReadWritableInstant.java,126,void setDateTimeZoneRetainFields(DateTimeZone zone);
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,174, The returned object will be a new instance of the same implementation
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,175," type. Only the time zone of the chronology will change, the millis are"
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,176, kept. Immutable implementations may return <code>this</code> if
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,177, appropriate.
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,174,* This method is useful for finding the local time in another timezone.
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,175,"* For example, if this instant holds 12:30 in Europe/London, the result"
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,176,* from this method with Europe/Paris would be 13:30.
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,177,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,178,* The returned object will be a new instance of the same implementation type.
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,179,"* This method changes alters the time zone, and does not change the"
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,180,"* millisecond instant, with the effect that the field values usually change."
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,181,* Immutable implementations may return <code>this</code> if appropriate.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,181, @see #withDateTimeZoneMoved
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,185,* @see #withDateTimeZoneRetainFields
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,189, The returned object will be a new instance of the same implementation
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,190, type. Moving the time zone alters the millisecond value of this instant
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,191, such that it is relative to the new time zone. Immutable implementations
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,192, may return <code>this</code> if appropriate.
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,193,* This method is useful for finding the millisecond time in another timezone.
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,194,"* For example, if this instant holds 12:30 in Europe/London (ie. 12:30Z),"
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,195,* the result from this method with Europe/Paris would be 12:30 (ie. 11:30Z).
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,196,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,197,* The returned object will be a new instance of the same implementation type.
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,198,* This method changes alters the time zone and the millisecond instant to keep
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,199,* the field values the same.
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,200,* Immutable implementations may return <code>this</code> if appropriate.
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,198,eadableInstant withDateTimeZoneMoved(DateTimeZone newDateTimeZone);
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,206,ReadableInstant withDateTimeZoneRetainFields(DateTimeZone newDateTimeZone);
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,189,dt.moveDateTimeZone(zone);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,189,mdt.setDateTimeZoneRetainFields(zone);
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,196,dt.moveDateTimeZone(zone);
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,196,mdt.setDateTimeZoneRetainFields(zone);

is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,58,import org.joda.time.partial.PartialInstant;
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,71,ublic interface DateTimeField {
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,73,public abstract class DateTimeField {
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,82,tring getName();
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,84,public abstract String getName();
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,89,oolean isSupported();
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,91,public abstract boolean isSupported();
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,98,oolean isLenient();
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,100,public abstract boolean isLenient();
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,108,nt get(long instant);
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,110,public abstract int get(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,118,"tring getAsText(long instant, Locale locale);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,120,"public abstract String getAsText(long instant, Locale locale);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,126,tring getAsText(long instant);
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,128,public String getAsText(long instant) {
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,129,"return getAsText(instant, null);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,133,"* Get the human-readable, text value of this field from a partial instant."
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,134,"* If the specified locale is null, the default locale is used."
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,136,* @param partial  the partial instant to query
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,137,"* @param fieldValue  the field value of this field, provided for performance"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,138,"* @param locale  the locale to use for selecting a text symbol, null for default"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,139,* @return the text value of the field
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,141,"public abstract String getAsText(PartialInstant partial, int fieldValue, Locale locale);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,144,"* Get the human-readable, text value of this field from a partial instant."
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,145,"* If the specified locale is null, the default locale is used."
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,147,* @param partial  the partial instant to query
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,148,"* @param locale  the locale to use for selecting a text symbol, null for default"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,149,* @return the text value of the field
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,151,"public String getAsText(PartialInstant partial, Locale locale) {"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,152,"return getAsText(partial, partial.get(this), locale);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,136,"tring getAsShortText(long instant, Locale locale);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,163,"public abstract String getAsShortText(long instant, Locale locale);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,145,tring getAsShortText(long instant);
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,172,public String getAsShortText(long instant) {
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,173,"return getAsShortText(instant, null);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,177,"* Get the human-readable, short text value of this field from a partial instant."
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,178,"* If the specified locale is null, the default locale is used."
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,180,* @param partial  the partial instant to query
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,181,"* @param fieldValue  the field value of this field, provided for performance"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,182,"* @param locale  the locale to use for selecting a text symbol, null for default"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,183,* @return the text value of the field
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,185,"public abstract String getAsShortText(PartialInstant partial, int fieldValue, Locale locale);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,188,"* Get the human-readable, short text value of this field from a partial instant."
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,189,"* If the specified locale is null, the default locale is used."
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,191,* @param partial  the partial instant to query
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,192,"* @param locale  the locale to use for selecting a text symbol, null for default"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,193,* @return the text value of the field
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,195,"public String getAsShortText(PartialInstant partial, Locale locale) {"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,196,"return getAsShortText(partial, partial.get(this), locale);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,168,"ong add(long instant, int value);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,220,"public abstract long add(long instant, int value);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,180,"ong add(long instant, long value);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,232,"public abstract long add(long instant, long value);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,203,"ong addWrapped(long instant, int value) ;"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,255,"public abstract long addWrapped(long instant, int value) ;"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,224,"nt getDifference(long minuendInstant, long subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,276,"public abstract int getDifference(long minuendInstant, long subtrahendInstant);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,245,"ong getDifferenceAsLong(long minuendInstant, long subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,297,"public abstract long getDifferenceAsLong(long minuendInstant, long subtrahendInstant);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,258,"ong set(long instant, int value);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,310,"public abstract long set(long instant, int value);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,271,"ong set(long instant, String text, Locale locale);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,323,"public abstract long set(long instant, String text, Locale locale);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,282,"ong set(long instant, String text);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,334,"public long set(long instant, String text) {"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,335,"return set(instant, text, null);"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,293,urationField getDurationField();
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,347,public abstract DurationField getDurationField();
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,301,urationField getRangeDurationField();
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,355,public abstract DurationField getRangeDurationField();
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,311,oolean isLeap(long instant);
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,365,public abstract boolean isLeap(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,319,nt getLeapAmount(long instant);
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,373,public abstract int getLeapAmount(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,325,urationField getLeapDurationField();
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,379,public abstract DurationField getLeapDurationField();
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,333,nt getMinimumValue();
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,387,public abstract int getMinimumValue();
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,341,nt getMinimumValue(long instant);
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,395,public abstract int getMinimumValue(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,349,nt getMaximumValue();
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,403,public abstract int getMaximumValue();
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,357,nt getMaximumValue(long instant);
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,411,public abstract int getMaximumValue(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,365,nt getMaximumTextLength(Locale locale);
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,419,public abstract int getMaximumTextLength(Locale locale);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,373,nt getMaximumShortTextLength(Locale locale);
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,427,public abstract int getMaximumShortTextLength(Locale locale);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,389,ong roundFloor(long instant);
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,443,public abstract long roundFloor(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,403,ong roundCeiling(long instant);
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,457,public abstract long roundCeiling(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,414,ong roundHalfFloor(long instant);
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,468,public abstract long roundHalfFloor(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,425,ong roundHalfCeiling(long instant);
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,479,public abstract long roundHalfCeiling(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,440,ong roundHalfEven(long instant);
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,494,public abstract long roundHalfEven(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,454,ong remainder(long instant);
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,508,public abstract long remainder(long instant);
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,461,tring toString();
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,515,public abstract String toString();
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,843,"ublic String getAsText(long millis, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,844,eturn GJLocaleSymbols.forLocale(locale).halfdayValueToText(get(millis));
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,843,"protected String getAsText(int fieldValue, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java,844,return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);
False,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,73,tatic final long serialVersionUID = -9175876774456816364L;
True,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,73,/** Serialization version */
True,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,74,private static final long serialVersionUID = -9175876774456816364L;
False,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,169," @see org.joda.time.DateTimeField#getAsShortText(long, Locale)"
False,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,171,"ublic String getAsShortText(long instant, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,172,"eturn ""BE"";"
False,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,176, @see org.joda.time.DateTimeField#getMaximumShortTextLength(Locale)
False,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,178,ublic int getMaximumShortTextLength(Locale locale) {
False,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,179,eturn 2;
False,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,183," @see org.joda.time.DateTimeField#getAsShortText(long, Locale)"
False,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,185,"ublic String getAsText(long instant, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,169,"protected String getAsText(int fieldValue, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BuddhistEraDateTimeField.java,190, @see org.joda.time.DateTimeField#getMaximumShortTextLength(Locale)
False,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,72,tatic final long serialVersionUID = 4090856468123006167L;
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,72,/** Serialization version */
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,73,private static final long serialVersionUID = 4090856468123006167L;
False,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,168," @see org.joda.time.DateTimeField#getAsShortText(long, Locale)"
False,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,170,"ublic String getAsShortText(long instant, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,171,"eturn ""AM"";"
False,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,175, @see org.joda.time.DateTimeField#getMaximumShortTextLength(Locale)
False,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,177,ublic int getMaximumShortTextLength(Locale locale) {
False,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,178,eturn 2;
False,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,182," @see org.joda.time.DateTimeField#getAsShortText(long, Locale)"
False,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,184,"ublic String getAsText(long instant, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,168,"protected String getAsText(int fieldValue, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java,189, @see org.joda.time.DateTimeField#getMaximumShortTextLength(Locale)
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,73,tatic final long serialVersionUID = -3857947176719041436L;
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,73,/** Serialization version */
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,74,private static final long serialVersionUID = -3857947176719041436L;
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,98, @param instant  the time instant in millis to query
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,99,* @param fieldValue  the field value to query
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,102,"ublic String getAsText(long instant, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,103,eturn GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(get(instant));
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,103,"protected String getAsText(int fieldValue, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,104,return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,113,"ublic String getAsShortText(long instant, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,114,eturn GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(get(instant));
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,114,"protected String getAsShortText(int fieldValue, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java,115,return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);
False,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,74,tatic final long serialVersionUID = 4240986525305515528L;
True,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,74,/** Serialization version */
True,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,75,private static final long serialVersionUID = 4240986525305515528L;
False,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,103,"ublic String getAsText(long instant, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,104,eturn GJLocaleSymbols.forLocale(locale).eraValueToText(get(instant));
True,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,104,"protected String getAsText(int fieldValue, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java,105,return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);
False,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,59,mport org.joda.time.DateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,61,mport org.joda.time.field.ImpreciseDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,61,import org.joda.time.field.ImpreciseDateTimeField;
False,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,75,tatic final long serialVersionUID = -4748157875845286249L;
True,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,74,/** Serialization version */
True,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,75,private static final long serialVersionUID = -4748157875845286249L;
False,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,106,"ublic String getAsText(long instant, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,107,eturn GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(get(instant));
True,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,106,"protected String getAsText(int fieldValue, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,107,return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);
False,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,110,"ublic String getAsShortText(long instant, Locale locale) {"
False,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,111,eturn GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(get(instant));
True,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,110,"protected String getAsShortText(int fieldValue, Locale locale) {"
True,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java,111,return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,61,import org.joda.time.partial.PartialInstant;
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,76,"ublic abstract class AbstractDateTimeField implements DateTimeField, Serializable {"
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,78,public abstract class AbstractDateTimeField extends DateTimeField implements Serializable {
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,78,tatic final long serialVersionUID = -4388055220581798589L;
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,80,/** Serialization version */
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,81,private static final long serialVersionUID = -4388055220581798589L;
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,119, The default implementation returns Integer.toString(get(instant)).
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,120, <p>
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,121, Note: subclasses that override this method should also override
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,122, getMaximumTextLength.
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,123,* The default implementation returns getAsText(get(instant)).
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,130,eturn Integer.toString(get(instant));
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,131,return getAsText(get(instant));
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,134," Get the human-readable, text value of this field from the milliseconds."
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,135," This implementation returns getAsText(instant, null)."
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,137, @param instant  the milliseconds from 1970-01-01T00:00:00Z to query
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,135,"* Get the human-readable, text value of this field from a partial instant."
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,136,"* If the specified locale is null, the default locale is used."
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,137,* <p>
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,138,* The default implementation returns getAsText(fieldValue).
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,140,* @param partial  the partial instant to query
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,141,"* @param fieldValue  the field value of this field, provided for performance"
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,142,"* @param locale  the locale to use for selecting a text symbol, null for default"
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,140,ublic final String getAsText(long instant) {
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,141,"eturn getAsText(instant, null);"
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,145,"public String getAsText(PartialInstant partial, int fieldValue, Locale locale) {"
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,146,return getAsText(fieldValue);
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,145," Get the human-readable, short text value of this field from the"
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,146," milliseconds.  If the specified locale is null, the default locale is"
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,147, used.
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,150,"* Get the human-readable, text value of this field from the field value."
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,151,"* If the specified locale is null, the default locale is used."
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,149," The default implementation returns getAsText(instant, locale)."
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,153,* The default implementation returns Integer.toString(get(instant)).
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,152, getMaximumShortTextLength.
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,156,* getMaximumTextLength.
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,155," @param locale the locale to use for selecting a text symbol, null for"
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,156, default
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,157, @return the short text value of the field
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,159,"* @param locale the locale to use for selecting a text symbol, null for default"
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,160,* @return the text value of the field
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,162,"protected String getAsText(int fieldValue, Locale locale) {"
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,163,return Integer.toString(fieldValue);
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,168,"* Get the human-readable, short text value of this field from the milliseconds."
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,169,"* If the specified locale is null, the default locale is used."
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,170,* <p>
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,171,* The default implementation returns getAsShortText(get(instant)).
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,173,* @param instant  the milliseconds from 1970-01-01T00:00:00Z to query
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,174,"* @param locale the locale to use for selecting a text symbol, null for default"
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,175,* @return the text value of the field
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,160,"eturn getAsText(instant, locale);"
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,178,return getAsShortText(get(instant));
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,164," Get the human-readable, short text value of this field from the"
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,165," milliseconds.  This implementation returns getAsShortText(instant, null)."
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,182,"* Get the human-readable, short text value of this field from a partial instant."
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,183,"* If the specified locale is null, the default locale is used."
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,184,* <p>
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,185,* The default implementation returns getAsShortText(fieldValue).
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,187,* @param partial  the partial instant to query
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,188,"* @param fieldValue  the field value of this field, provided for performance"
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,189,"* @param locale  the locale to use for selecting a text symbol, null for default"
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,190,* @return the text value of the field
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,192,"public String getAsShortText(PartialInstant partial, int fieldValue, Locale locale) {"
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,193,return getAsShortText(fieldValue);
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,197,"* Get the human-readable, short text value of this field from the field value."
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,198,"* If the specified locale is null, the default locale is used."
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,199,* <p>
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,200,"* The default implementation returns getAsText(fieldValue, locale)."
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,201,* <p>
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,202,* Note: subclasses that override this method should also override
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,203,* getMaximumShortTextLength.
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,168, @return the short text value of the field
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,206,"* @param locale the locale to use for selecting a text symbol, null for default"
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,207,* @return the text value of the field
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,170,ublic final String getAsShortText(long instant) {
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,171,"eturn getAsShortText(instant, null);"
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,209,"protected String getAsShortText(int fieldValue, Locale locale) {"
True,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,210,"return getAsText(fieldValue, locale);"
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,329," Sets a value in the milliseconds supplied from a human-readable, text"
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,330," value. This implementation returns set(instant, text, null)."
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,332, @param instant  the milliseconds from 1970-01-01T00:00:00Z to set in
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,333, @param text  the text value to set
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,334, @return the updated milliseconds
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,335, @throws IllegalArgumentException if the text value is invalid
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,337,"ublic final long set(long instant, String text) {"
False,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,JodaTime/src/java/org/joda/time/field/AbstractDateTimeField.java,338,"eturn set(instant, text, null);"
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,60,import org.joda.time.partial.PartialInstant;
False,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,72,"ublic class DelegatedDateTimeField implements DateTimeField, Serializable {"
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,73,public class DelegatedDateTimeField extends DateTimeField implements Serializable {
False,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,74,tatic final long serialVersionUID = -4730164440214502503L;
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,75,/** Serialization version */
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,76,private static final long serialVersionUID = -4730164440214502503L;
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,129,"public String getAsText(PartialInstant partial, int fieldValue, Locale locale) {"
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,130,"return iField.getAsText(partial, fieldValue, locale);"
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,133,"public String getAsText(PartialInstant partial, Locale locale) {"
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,134,"return iField.getAsText(partial, locale);"
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,145,"public String getAsShortText(PartialInstant partial, int fieldValue, Locale locale) {"
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,146,"return iField.getAsShortText(partial, fieldValue, locale);"
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,149,"public String getAsShortText(PartialInstant partial, Locale locale) {"
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,150,"return iField.getAsShortText(partial, locale);"
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,61,import org.joda.time.partial.PartialInstant;
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,69,"ublic final class UnsupportedDateTimeField implements DateTimeField, Serializable {"
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,70,public final class UnsupportedDateTimeField extends DateTimeField implements Serializable {
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,71,tatic final long serialVersionUID = -1934618396111902255L;
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,72,/** Serialilzation version */
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,73,private static final long serialVersionUID = -1934618396111902255L;
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,163,ublic String getAsText(long instant) {
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,165,"public String getAsText(PartialInstant partial, int fieldValue, Locale locale) {"
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,181,ublic String getAsShortText(long instant) {
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,183,"public String getAsShortText(PartialInstant partial, int fieldValue, Locale locale) {"
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,249, Always throws UnsupportedOperationException
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,251, @throws UnsupportedOperationException
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,253,"ublic long set(long instant, String text) {"
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,254,hrow unsupported();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,10,* are met:
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,54,package org.joda.time.partial;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,56,import java.util.Locale;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,58,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,59,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,60,import org.joda.time.ReadableInstant;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,63,* AbstractPartialFieldProperty is a base class for binding a
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,64,* PartialInstant to a DateTimeField.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,65,* <p>
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,66,* It allows the date and time manipulation code to be field based yet
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,67,* still easy to use.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,69,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,70,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,71,* @since 1.0
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,73,public abstract class AbstractPartialFieldProperty {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,76,* Constructor.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,78,protected AbstractPartialFieldProperty() {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,79,super();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,84,* Gets the field being used.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,86,* @return the field
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,88,public abstract DateTimeField getField();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,91,* Gets the name of the field.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,93,* @return the field name
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,95,public String getName() {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,96,return getField().getName();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,100,* Gets the partial instant being used.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,102,* @return the partial instant
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,104,public abstract PartialInstant getPartialInstant();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,108,* Gets a value from the partial instant.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,110,* @return the current value
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,112,public abstract int get();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,115,* Gets a text value from the partial instant.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,117,* @param locale  optional locale to use for selecting a text symbol
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,118,* @return the current text value
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,119,* @see DateTimeField#getAsText
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,121,public String getAsText(Locale locale) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,122,"return getField().getAsText(getPartialInstant(), get(), locale);"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,126,* Gets a text value from the partial instant.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,128,* @return the current text value
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,129,* @see DateTimeField#getAsText
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,131,public final String getAsText() {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,132,return getAsText(null);
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,136,* Gets a short text value from the partial instant.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,138,* @param locale  optional locale to use for selecting a text symbol
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,139,* @return the current text value
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,140,* @see DateTimeField#getAsShortText
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,142,public String getAsShortText(Locale locale) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,143,"return getField().getAsShortText(getPartialInstant(), get(), locale);"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,147,* Gets a short text value from the partial instant.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,149,* @return the current text value
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,150,* @see DateTimeField#getAsShortText
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,152,public final String getAsShortText() {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,153,return getAsShortText(null);
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,158,"* Returns the duration per unit value of this field. For example, if this"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,159,"* field represents ""hour of day"", then the duration is an hour."
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,161,"* @return the duration of this field, or UnsupportedDurationField"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,163,public DurationField getDurationField() {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,164,return getField().getDurationField();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,168,"* Returns the range duration of this field. For example, if this field"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,169,"* represents ""hour of day"", then the range duration is a day."
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,171,"* @return the range duration of this field, or null if field has no range"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,173,public DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,174,return getField().getRangeDurationField();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,177,// TODO
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,179,//     * Gets whether this field is leap.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,181,//     * @return true if a leap field
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,182,//     * @see DateTimeField#isLeap
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,184,//    public boolean isLeap() {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,185,"//        return getField().isLeap(getPartialInstant(), get());"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,189,//     * Gets the amount by which this field is leap.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,191,//     * @return the amount by which the field is leap
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,192,//     * @see DateTimeField#getLeapAmount
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,194,//    public int getLeapAmount() {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,195,"//        return getField().getLeapAmount(getPartialInstant(), get());"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,199,"* If this field were to leap, then it would be in units described by the"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,200,"* returned duration. If this field doesn't ever leap, null is returned."
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,202,public DurationField getLeapDurationField() {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,203,return getField().getLeapDurationField();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,207,// TODO
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,209,//     * Gets the minimum value for the field ignoring the current time.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,211,//     * @return the minimum value
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,212,//     * @see DateTimeField#getMinimumValue
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,214,//    public int getMinimumValueOverall() {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,215,//        return getField().getMinimumValue();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,219,//     * Gets the minimum value for the field.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,221,//     * @return the minimum value
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,222,//     * @see DateTimeField#getMinimumValue
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,224,//    public int getMinimumValue() {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,225,"//        return getField().getMinimumValue(getPartialInstant(), get());"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,229,//     * Gets the maximum value for the field ignoring the current time.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,231,//     * @return the maximum value
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,232,//     * @see DateTimeField#getMaximumValue
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,234,//    public int getMaximumValueOverall() {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,235,//        return getField().getMaximumValue();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,239,//     * Gets the maximum value for the field.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,241,//     * @return the maximum value
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,242,//     * @see DateTimeField#getMaximumValue
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,244,//    public int getMaximumValue() {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,245,"//        return getField().getMaximumValue(getPartialInstant(), get());"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,249,* Gets the maximum text length for the field.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,251,* @param locale  optional locale to use for selecting a text symbol
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,252,* @return the maximum length
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,253,* @see DateTimeField#getMaximumTextLength
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,255,public int getMaximumTextLength(Locale locale) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,256,return getField().getMaximumTextLength(locale);
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,260,* Gets the maximum short text length for the field.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,262,* @param locale  optional locale to use for selecting a text symbol
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,263,* @return the maximum length
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,264,* @see DateTimeField#getMaximumShortTextLength
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,266,public int getMaximumShortTextLength(Locale locale) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,267,return getField().getMaximumShortTextLength(locale);
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,272,* Compare this field to the same field on another instant.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,273,* <p>
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,274,* The {@link #get()} method is used to obtain the value to compare for
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,275,* this instant and the {@link ReadableInstant#get(DateTimeField)} method
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,276,* is used for the specified instant.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,278,* @param instant  the instant to compare to
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,279,"* @return negative value if this is less, 0 if equal, or positive value if greater"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,280,* @throws IllegalArgumentException if the instant is null
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,282,public int compareTo(ReadableInstant instant) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,283,if (instant == null) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,284,"throw new IllegalArgumentException(""The instant must not be null"");"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,286,int thisValue = get();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,287,int otherValue = instant.get(getField());
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,288,if (thisValue < otherValue) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,289,return -1;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,290,} else if (thisValue > otherValue) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,291,return 1;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,292,} else {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,293,return 0;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,298,* Compare this field to the same field on another partial instant.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,299,* <p>
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,300,* The {@link #get()} method is used to obtain the value to compare for
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,301,* this instant and the {@link PartialInstant#get(DateTimeField)} method
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,302,* is used for the specified instant.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,304,* @param instant  the instant to compare to
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,305,"* @return negative value if this is less, 0 if equal, or positive value if greater"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,306,* @throws IllegalArgumentException if the instant is null
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,307,* @throws IllegalArgumentException if the field of this property cannot be queried
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,308,*  on the specified instant
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,310,public int compareTo(PartialInstant instant) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,311,if (instant == null) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,312,"throw new IllegalArgumentException(""The instant must not be null"");"
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,314,int thisValue = get();
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,315,int otherValue = instant.get(getField());
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,316,if (thisValue < otherValue) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,317,return -1;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,318,} else if (thisValue > otherValue) {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,319,return 1;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,320,} else {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,321,return 0;
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,327,* Output a debugging string.
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,329,* @return debugging string
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,331,public String toString() {
True,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java,332,"return ""Property["" + getName() + ""]"";"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,10,* are met:
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,54,package org.joda.time.partial;
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,56,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,57,import org.joda.time.DateTime;
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,58,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,59,import org.joda.time.ReadableInstant;
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,62,* Defines an instant that does not support every datetime field.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,63,* <p>
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,64,* A PartialInstant supports a set of fields and cannot be compared to a
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,65,* full complete instant. Methods are provided to resolve the partial instant
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,66,* into a full instant by 'filling in the gaps'.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,68,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,70,public interface PartialInstant {
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,73,* Gets an array of the fields that this partial instant supports.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,74,* <p>
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,75,"* The fields are returned largest to smallest, for example Hour, Minute, Second."
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,77,"* @return the fields supported, largest to smallest"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,79,DateTimeField[] getSupportedFields();
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,82,* Gets the chronology of the partial which is never null.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,83,* <p>
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,84,* The {@link Chronology} is the calculation engine behind the partial and
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,85,* provides conversion and validation of the fields in a particular calendar system.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,87,* @return the chronology
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,89,Chronology getChronology();
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,92,* Get the value of one of the fields of a datetime.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,93,* <p>
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,94,* The field specified must be one of those that is supported by the partial instant.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,96,* @param field  a DateTimeField instance that is supported by this partial
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,97,* @return the value of that field
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,98,* @throws IllegalArgumentException if the field is null or not supported
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,100,int get(DateTimeField field);
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,103,* Checks whether the field specified is supported by this partial instant.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,105,"* @param field  the field to check, may be null which returns false"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,106,* @return true if the field is supported
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,108,boolean isSupported(DateTimeField field);
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,111,* Resolves this partial against another complete instant to create a new
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,112,* full instant specifying values as milliseconds since 1970-01-01T00:00:00Z.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,113,* <p>
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,114,"* For example, if this partial represents a time, then the result of this method"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,115,* will be the date from the specified base plus the time from this instant.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,117,* @param baseMillis  source of missing fields
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,118,* @return the combined instant in milliseconds
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,120,long resolve(long baseMillis);
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,123,* Resolves this partial against another complete instant to create a new
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,124,* full instant. The combination is performed using the chronology of the
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,125,* specified instant.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,126,* <p>
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,127,"* For example, if this partial represents a time, then the result of this method"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,128,* will be the date from the specified base plus the time from this instant.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,130,"* @param base  the instant that provides the missing fields, null means now"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,131,* @return the combined datetime
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,133,DateTime resolveDateTime(ReadableInstant base);
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,136,//     * Compares this object with the specified object for equality based
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,137,"//     * on the millisecond instant, the Chronology, and the limiting fields."
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,138,//     * <p>
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,139,//     * To compare two instants for absolute time (ie. UTC milliseconds ignoring
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,140,"//     * the chronology), use {@link #isEqual(ReadableInstant)} or"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,141,//     * {@link #compareTo(Object)}.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,143,//     * @param readableInstant  a readable instant to check against
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,144,"//     * @return true if millisecond and chronology are equal, false if"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,145,//     *  not or the instant is null or of an incorrect type
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,147,//    boolean equals(Object readableInstant);
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,150,//     * Gets a hash code for the instant that is compatable with the
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,151,//     * equals method.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,153,//     * @return a suitable hash code
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,155,//    int hashCode();
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,159,"* Get the value as a String in a recognisable ISO8601 format, only"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,160,* displaying supported fields.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,161,* <p>
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,162,* The string output is in ISO8601 format to enable the String
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,163,* constructor to correctly parse it.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,165,* @return the value as an ISO8601 string
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,167,String toString();
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,10,* are met:
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,54,package org.joda.time.partial;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,56,import java.util.Arrays;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,58,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,59,import org.joda.time.DateTime;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,60,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,61,import org.joda.time.DateTimeUtils;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,62,import org.joda.time.ReadableInstant;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,63,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,64,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,65,import org.joda.time.convert.InstantConverter;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,68,"* TimeOfDay is an immutable partial instant supporting the hour, minute, second"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,69,* and millisecond fields.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,70,* <p>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,71,* Each individual field can be queried in two ways:
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,72,* <ul>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,73,* <li><code>getHourOfDay()</code>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,74,* <li><code>hourOfDay().get()</code>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,75,* </ul>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,76,* The second technique also provides access to other useful methods on the
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,77,* field:
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,78,* <ul>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,79,* <li>numeric value
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,80,* <li>text value
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,81,* <li>short text value
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,82,* <li>maximum value
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,83,* <li>minimum value
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,84,* </ul>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,85,* <p>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,86,"* TimeOfDay is thread-safe and immutable, provided that the Chronology is as well."
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,87,* All standard Chronology classes supplied are thread-safe and immutable.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,89,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,90,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,91,* @since 1.0
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,93,public final class TimeOfDay implements PartialInstant {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,95,/** The index of the hourOfDay field in the field array */
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,96,private static final int HOUR_OF_DAY = 0;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,97,/** The index of the minuteOfHour field in the field array */
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,98,private static final int MINUTE_OF_HOUR = 1;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,99,/** The index of the secondOfMinute field in the field array */
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,100,private static final int SECOND_OF_MINUTE = 2;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,101,/** The index of the millisOfSecond field in the field array */
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,102,private static final int MILLIS_OF_SECOND = 3;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,104,// TODO: Is chronology needed here?
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,105,/** The chronology in use */
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,106,private final Chronology iChronology;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,107,/** The fields supported by this partial instant */
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,108,private final DateTimeField[] iFields;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,109,/** The values of each field in this partial instant */
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,110,private final int[] iValues;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,112,// TODO serialize
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,114,// Constructors
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,117,"* Constructs a TimeOfDay with the current time, using ISOChronology in"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,118,* the default zone to extract the fields.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,120,public TimeOfDay() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,121,"this(DateTimeUtils.currentTimeMillis(), null);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,125,"* Constructs a TimeOfDay with the current time, using the specified chronology"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,126,* and zone to extract the fields.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,128,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,130,public TimeOfDay(Chronology chronology) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,131,"this(DateTimeUtils.currentTimeMillis(), chronology);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,135,* Constructs a TimeOfDay extracting the partial fields from the specified
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,136,* milliseconds using the ISOChronology in the default zone.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,138,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,140,public TimeOfDay(long instant) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,141,"this(instant, null);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,145,* Constructs a TimeOfDay extracting the partial fields from the specified
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,146,* milliseconds using the chronology provided.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,148,* @param instant  the milliseconds from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,149,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,151,"public TimeOfDay(long instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,152,super();
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,153,if (chronology == null) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,154,chronology = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,156,iChronology = chronology;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,157,iFields = initFields(chronology);
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,158,iValues = initValues(instant);
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,162,* Constructs a TimeOfDay from an Object that represents a time.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,163,* <p>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,164,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,165,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,166,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,168,"* @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,169,* @throws IllegalArgumentException if the date is null
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,171,public TimeOfDay(Object instant) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,172,super();
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,173,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,174,Chronology chronology = converter.getChronology(instant);
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,175,if (chronology == null) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,176,chronology = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,178,iChronology = chronology;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,179,iFields = initFields(chronology);
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,180,iValues = initValues(converter.getInstantMillis(instant));
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,184,"* Constructs a TimeOfDay from an Object that represents a time, using the"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,185,* specified chronology.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,186,* <p>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,187,* The recognised object types are defined in
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,188,* {@link org.joda.time.convert.ConverterManager ConverterManager} and
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,189,"* include ReadableInstant, String, Calendar and Date."
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,191,"* @param instant  the datetime object, must not be null"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,192,"* @param chronology  the chronology, null means ISOChronology"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,193,* @throws IllegalArgumentException if the date is null
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,195,"public TimeOfDay(Object instant, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,196,super();
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,197,InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,198,"Chronology original = converter.getChronology(instant, chronology);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,199,if (chronology == null) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,200,chronology = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,202,iChronology = chronology;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,203,iFields = initFields(chronology);
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,204,"iValues = initValues(converter.getInstantMillis(instant, chronology));"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,208,* Constructs a TimeOfDay with specified time field values using
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,209,* <code>ISOChronology</code> in the default zone.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,211,* @param hourOfDay  the hour of the day
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,212,* @param minuteOfHour  the minute of the hour
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,213,* @param secondOfMinute  the second of the minute
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,214,* @param millisOfSecond  the millisecond of the second
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,216,"public TimeOfDay(int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) {"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,217,"this(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, null);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,221,* Constructs a TimeOfDay with specified time field values and chronology.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,224,* @param hourOfDay  the hour of the day
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,225,* @param minuteOfHour  the minute of the hour
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,226,* @param secondOfMinute  the second of the minute
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,227,* @param millisOfSecond  the millisecond of the second
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,228,"* @param chronology  the chronology, null means ISOChronology in the default zone"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,230,"public TimeOfDay(int hourOfDay, int minuteOfHour,"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,231,"int secondOfMinute, int millisOfSecond, Chronology chronology) {"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,232,super();
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,233,if (chronology == null) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,234,chronology = ISOChronology.getInstance();
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,236,iChronology = chronology;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,237,iFields = initFields(chronology);
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,238,// TODO: Validate
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,239,"iValues = new int[] {hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond};"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,243,"* Constructs a TimeOfDay with specified fields, values and chronology."
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,245,* @param partial  the partial to base this new instance on
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,246,* @param values  the new set of values
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,248,"TimeOfDay(TimeOfDay partial, int[] values) {"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,249,super();
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,250,iChronology = partial.iChronology;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,251,iFields = partial.iFields;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,252,iValues = values;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,256,* Initialize the array of fields.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,258,* @param chrono  the chronology to use
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,260,private DateTimeField[] initFields(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,261,return new DateTimeField[] {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,262,"chrono.hourOfDay(),"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,263,"chrono.minuteOfHour(),"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,264,"chrono.secondOfMinute(),"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,265,"chrono.millisOfSecond(),"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,270,* Initialize the array of values.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,272,* @param instant  the instant to use
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,274,private int[] initValues(long instant) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,275,return new int[] {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,276,"iFields[0].get(instant),"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,277,"iFields[1].get(instant),"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,278,"iFields[2].get(instant),"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,279,"iFields[3].get(instant),"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,285,* Gets the field at the specifed index.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,287,* @param index  the index
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,288,* @return the field
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,290,protected DateTimeField getField(int index) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,291,return iFields[index];
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,295,* Gets the value of the field at the specifed index.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,297,* @param index  the index
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,298,* @return the value
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,300,protected int getValue(int index) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,301,return iValues[index];
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,306,* Gets an array of the fields that this partial instant supports.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,307,* <p>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,308,"* The fields are returned largest to smallest, for example Hour, Minute, Second."
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,310,"* @return the fields supported, largest to smallest"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,312,public DateTimeField[] getSupportedFields() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,313,return (DateTimeField[]) iFields.clone();
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,317,* Gets the chronology of the partial which is never null.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,318,* <p>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,319,* The {@link Chronology} is the calculation engine behind the partial and
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,320,* provides conversion and validation of the fields in a particular calendar system.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,322,* @return the chronology
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,324,public Chronology getChronology() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,325,return iChronology;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,329,* Get the value of one of the fields of a datetime.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,330,* <p>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,331,* The field specified must be one of those that is supported by the partial instant.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,333,* @param field  a DateTimeField instance that is supported by this partial
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,334,* @return the value of that field
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,335,* @throws IllegalArgumentException if the field is null or not supported
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,337,public int get(DateTimeField field) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,338,for (int i = 0; i < iFields.length; i++) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,339,if (iFields[i] == field) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,340,return iValues[i];
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,343,"throw new IllegalArgumentException(""Field '"" + field + ""' is not supported by TimeOfDay"");"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,347,* Checks whether the field specified is supported by this partial instant.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,349,"* @param field  the field to check, may be null which returns false"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,350,* @return true if the field is supported
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,352,public boolean isSupported(DateTimeField field) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,353,for (int i = 0; i < iFields.length; i++) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,354,if (iFields[i] == field) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,355,return true;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,358,return false;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,363,* Resolves this partial against another complete instant to create a new
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,364,* full instant specifying values as milliseconds since 1970-01-01T00:00:00Z.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,365,* <p>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,366,"* For example, if this partial represents a time, then the result of this method"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,367,* will be the date from the specified base plus the time from this instant.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,369,* @param baseMillis  source of missing fields
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,370,* @return the combined instant in milliseconds
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,372,public long resolve(long baseMillis) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,373,long millis = baseMillis;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,374,for (int i = 0; i < iFields.length; i++) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,375,"millis = iFields[i].set(millis, iValues[i]);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,377,return millis;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,381,* Resolves this partial against another complete instant to create a new
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,382,* full instant. The combination is performed using the chronology of the
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,383,* specified instant.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,384,* <p>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,385,"* For example, if this partial represents a time, then the result of this method"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,386,* will be the date from the specified base plus the time from this instant.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,388,"* @param base  the instant that provides the missing fields, null means now"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,389,* @return the combined datetime
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,391,public DateTime resolveDateTime(ReadableInstant base) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,392,if (base == null) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,393,base = new DateTime();
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,395,Chronology chrono = base.getChronology();
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,396,long millis = base.getMillis();
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,397,"millis = chrono.hourOfDay().set(millis, getValue(HOUR_OF_DAY));"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,398,"millis = chrono.minuteOfHour().set(millis, getValue(MINUTE_OF_HOUR));"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,399,"millis = chrono.secondOfMinute().set(millis, getValue(SECOND_OF_MINUTE));"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,400,"millis = chrono.millisOfSecond().set(millis, getValue(MILLIS_OF_SECOND));"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,401,"return new DateTime(millis, chrono);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,406,* Get the hour of day (0-23) field value.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,408,* @return the hour of day
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,410,public int getHourOfDay() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,411,return getValue(HOUR_OF_DAY);
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,415,* Get the minute of hour field value.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,417,* @return the minute of hour
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,419,public int getMinuteOfHour() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,420,return getValue(MINUTE_OF_HOUR);
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,424,* Get the second of minute field value.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,426,* @return the second of minute
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,428,public int getSecondOfMinute() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,429,return getValue(SECOND_OF_MINUTE);
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,433,* Get the millis of second field value.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,435,* @return the millis of second
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,437,public int getMillisOfSecond() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,438,return getValue(MILLIS_OF_SECOND);
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,443,* Get the hour of day (0-23) field property
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,445,* @return the hour of day property
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,447,public Property hourOfDay() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,448,"return new Property(this, HOUR_OF_DAY);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,452,* Get the minute of hour field property
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,454,* @return the minute of hour property
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,456,public Property minuteOfHour() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,457,"return new Property(this, MINUTE_OF_HOUR);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,461,* Get the second of minute field property
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,463,* @return the second of minute property
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,465,public Property secondOfMinute() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,466,"return new Property(this, SECOND_OF_MINUTE);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,470,* Get the millis of second property
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,472,* @return the millis of second property
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,474,public Property millisOfSecond() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,475,"return new Property(this, MILLIS_OF_SECOND);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,480,* Compares this TimeOfDay with another returning true if the fields and
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,481,* values are equal.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,483,* @param timeOfDay  an object to check against
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,484,* @return true if fields and values are equal
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,486,public boolean equals(Object timeOfDay) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,487,if (timeOfDay instanceof TimeOfDay == false) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,488,return false;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,490,TimeOfDay other = (TimeOfDay) timeOfDay;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,491,"return Arrays.equals(iValues, other.iValues) &&"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,492,"Arrays.equals(iFields, other.iFields);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,496,* Gets a hash code for the TimeOfDay that is compatible with the
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,497,* equals method.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,499,* @return a suitable hash code
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,501,public int hashCode() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,502,int total = 157;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,503,for (int i = 0; i < iValues.length; i++) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,504,total = 23 * total + getValue(i);
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,505,total += getField(i).hashCode();
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,507,return total;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,511,* Output the time in ISO8601 time only format (hh:mm:ss.SSS).
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,513,* @return ISO8601 time formatted string
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,515,public String toString() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,516,// TODO
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,517,"return """";"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,522,* The property class for TimeOfDay.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,524,public static class Property extends AbstractPartialFieldProperty {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,526,/** The instant */
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,527,private final TimeOfDay iInstant;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,528,/** The field index */
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,529,private final int iFieldIndex;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,532,* Constructs a property.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,534,* @param instant  the partial instant
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,535,* @param field  the field
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,536,* @param fieldIndex  the index in the instant
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,538,"Property(TimeOfDay instant, int fieldIndex) {"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,539,super();
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,540,iInstant = instant;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,541,iFieldIndex = fieldIndex;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,545,* Gets the field that this property uses.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,547,* @return the field
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,549,public DateTimeField getField() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,550,return iInstant.getField(iFieldIndex);
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,554,* Gets the instant that this property belongs to.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,556,* @return the partial instant
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,558,public PartialInstant getPartialInstant() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,559,return iInstant;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,563,* Gets the instant that this property belongs to.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,565,* @return the partial instant
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,567,public TimeOfDay getTimeOfDay() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,568,return iInstant;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,572,* Gets the value of the field that the partial instant is set to.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,574,* @return the field value
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,576,public int get() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,577,return iInstant.getValue(iFieldIndex);
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,581,// TODO
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,583,//         * Adds to this field in a copy of this TimeOfDay.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,584,//         * <p>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,585,//         * The TimeOnly attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,587,//         * @param value  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,588,//         * @return a copy of the TimeOnly with the field value changed
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,589,//         * @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,591,//        public TimeOfDay addToCopy(int value) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,592,"//            int[] newValues = getField().add(getInstant(), value);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,593,"//            return new TimeOfDay(getInstant(), newValues);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,597,"//         * Adds to this field, possibly wrapped, in a copy of this TimeOfDay."
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,598,//         * A wrapped operation only changes this field.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,599,//         * Thus 12:59:00 addWrapped one minute goes to 12:00:00.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,600,//         * <p>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,601,//         * The TimeOfDay attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,603,//         * @param value  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,604,//         * @return a copy of the TimeOfDay with the field value changed
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,605,//         * @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,607,//        public TimeOfDay addWrappedToCopy(int value) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,608,"//            int[] newValues = getField().addWrapped(getInstant(), value);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,609,"//            return new TimeOfDay(getInstant(), newValues);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,614,//         * Sets this field in a copy of the TimeOfDay.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,615,//         * <p>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,616,//         * The TimeOfDay attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,618,//         * @param value  the value to set the field in the copy to
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,619,//         * @return a copy of the TimeOfDay with the field value changed
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,620,//         * @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,622,//        public TimeOfDay setCopy(int value) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,623,"//            int[] newValues = getField().set(getInstant(), value);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,624,"//            return new TimeOfDay(getInstant(), newValues);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,628,//         * Sets this field in a copy of the TimeOfDay to a parsed text value.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,629,//         * <p>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,630,//         * The TimeOfDay attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,632,//         * @param text  the text value to set
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,633,//         * @param locale  optional locale to use for selecting a text symbol
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,634,//         * @return a copy of the TimeOfDay with the field value changed
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,635,//         * @throws IllegalArgumentException if the text value isn't valid
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,637,"//        public TimeOfDay setCopy(String text, Locale locale) {"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,638,"//            int[] newValues = getField().set(getInstant(), text, locale);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,639,"//            return new TimeOfDay(getInstant(), newValues);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,643,//         * Sets this field in a copy of the TimeOfDay to a parsed text value.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,644,//         * <p>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,645,//         * The TimeOfDay attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,646,//         * This operation is faster than converting a TimeOfDay to a MutableTimeOfDay
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,647,"//         * and back again when setting one field. When setting multiple fields,"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,648,//         * it is generally quicker to make the conversion to MutableTimeOfDay.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,650,//         * @param text  the text value to set
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,651,//         * @return a copy of the TimeOfDay with the field value changed
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,652,//         * @throws IllegalArgumentException if the text value isn't valid
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,654,//        public final TimeOfDay setCopy(String text) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,655,"//            return setCopy(text, null);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,660,//         * Rounds to the lowest whole unit of this field on a copy of this TimeOfDay.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,662,//         * @return a copy of the TimeOfDay with the field value changed
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,664,//        public TimeOfDay roundFloorCopy() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,665,//            TimeOfDay instant = iInstant;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,666,//            return (TimeOfDay) instant.withMillis(iField.roundFloor(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,670,//         * Rounds to the highest whole unit of this field on a copy of this TimeOfDay.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,672,//         * @return a copy of the TimeOfDay with the field value changed
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,674,//        public TimeOfDay roundCeilingCopy() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,675,//            TimeOfDay instant = iInstant;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,676,//            return (TimeOfDay) instant.withMillis(iField.roundCeiling(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,680,"//         * Rounds to the nearest whole unit of this field on a copy of this TimeOfDay,"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,681,//         * favoring the floor if halfway.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,683,//         * @return a copy of the TimeOfDay with the field value changed
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,685,//        public TimeOfDay roundHalfFloorCopy() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,686,//            TimeOfDay instant = iInstant;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,687,//            return (TimeOfDay) instant.withMillis(iField.roundHalfFloor(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,691,"//         * Rounds to the nearest whole unit of this field on a copy of this TimeOfDay,"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,692,//         * favoring the ceiling if halfway.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,694,//         * @return a copy of the TimeOfDay with the field value changed
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,696,//        public TimeOfDay roundHalfCeilingCopy() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,697,//            TimeOfDay instant = iInstant;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,698,//            return (TimeOfDay) instant.withMillis(iField.roundHalfCeiling(instant.getMillis()));
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,702,//         * Rounds to the nearest whole unit of this field on a copy of this TimeOfDay.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,703,"//         * If halfway, the ceiling is favored over the floor only if it makes this field's value even."
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,705,//         * @return a copy of the TimeOfDay with the field value changed
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,707,//        public TimeOfDay roundHalfEvenCopy() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,708,//            TimeOfDay instant = iInstant;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,709,//            return (TimeOfDay) instant.withMillis(iField.roundHalfEven(instant.getMillis()));
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,10,* are met:
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,18,*    distribution.
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,54,package org.joda.test.time.partial;
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,56,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,57,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,59,import org.joda.time.DateTime;
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,60,import org.joda.time.DateTimeConstants;
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,61,import org.joda.time.DateTimeField;
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,62,import org.joda.time.DateTimeUtils;
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,63,import org.joda.time.DateTimeZone;
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,64,import org.joda.time.chrono.ISOChronology;
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,65,import org.joda.time.chrono.JulianChronology;
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,66,import org.joda.time.partial.TimeOfDay;
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,69,* This class is a Junit unit test for TimeOfDay.
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,71,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,73,public class TestTimeOfDay extends TestCase {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,75,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,77,private long TEST_TIME =
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,78,10L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,79,+ 20L * DateTimeConstants.MILLIS_PER_MINUTE
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,80,+ 30L * DateTimeConstants.MILLIS_PER_SECOND
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,81,+ 40L;
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,83,private DateTimeZone zone = null;
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,85,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,86,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,89,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,90,return new TestSuite(TestTimeOfDay.class);
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,93,public TestTimeOfDay(String name) {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,94,super(name);
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,97,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,98,DateTimeUtils.setCurrentMillisFixed(TEST_TIME);
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,99,zone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,100,DateTimeZone.setDefault(DateTimeZone.UTC);
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,103,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,104,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,105,DateTimeZone.setDefault(zone);
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,106,zone = null;
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,111,* Test constructor ()
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,113,public void testConstructor() throws Throwable {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,114,TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,115,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,116,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,117,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,118,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,119,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,123,* Test constructor (Chronology)
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,125,public void testConstructor_Chronology() throws Throwable {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,126,TimeOfDay test = new TimeOfDay(JulianChronology.getInstance());
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,127,"assertEquals(JulianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,128,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,129,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,130,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,131,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,135,* Test constructor (long)
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,137,public void testConstructor_long() throws Throwable {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,138,TimeOfDay test = new TimeOfDay(TEST_TIME);
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,139,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,140,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,141,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,142,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,143,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,147,"* Test constructor (long, Chronology)"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,149,public void testConstructor_longChronology() throws Throwable {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,150,"TimeOfDay test = new TimeOfDay(TEST_TIME, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,151,"assertEquals(JulianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,152,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,153,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,154,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,155,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,159,* Test constructor (Object)
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,161,public void testConstructor_Object() throws Throwable {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,162,// TODO
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,166,"* Test constructor (Object, Chronology)"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,168,public void testConstructor_ObjectChronology() throws Throwable {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,169,// TODO
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,173,"* Test constructor (int, int, int, int)"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,175,public void testConstructor_intintintint() throws Throwable {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,176,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,177,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,178,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,179,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,180,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,181,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,185,"* Test constructor (int, int, int, int, Chronology)"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,187,public void testConstructor_intintintintChronology() throws Throwable {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,188,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40, JulianChronology.getInstance());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,189,"assertEquals(JulianChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,190,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,191,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,192,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,193,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,196,public void testGetField() {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,197,TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,198,"assertEquals(10, test.get(ISOChronology.getInstance().hourOfDay()));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,199,"assertEquals(20, test.get(ISOChronology.getInstance().minuteOfHour()));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,200,"assertEquals(30, test.get(ISOChronology.getInstance().secondOfMinute()));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,201,"assertEquals(40, test.get(ISOChronology.getInstance().millisOfSecond()));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,202,try {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,203,test.get(null);
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,204,fail();
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,205,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,206,try {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,207,test.get(ISOChronology.getInstance().dayOfMonth());
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,208,fail();
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,209,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,210,try {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,211,test.get(ISOChronology.getInstance(PARIS).hourOfDay());
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,212,fail();
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,213,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,214,// TODO: Should this fail or suceed - by succeeding it exposes out implementation
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,215,//        try {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,216,//            test.get(JulianChronology.getInstance().hourOfDay());
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,217,//            fail();
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,218,//        } catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,221,public void testGetSupportedFields() {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,222,TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,223,DateTimeField[] fields = test.getSupportedFields();
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,224,"assertSame(ISOChronology.getInstance().hourOfDay(), fields[0]);"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,225,"assertSame(ISOChronology.getInstance().minuteOfHour(), fields[1]);"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,226,"assertSame(ISOChronology.getInstance().secondOfMinute(), fields[2]);"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,227,"assertSame(ISOChronology.getInstance().millisOfSecond(), fields[3]);"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,230,public void testIsSupported() {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,231,TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,232,"assertEquals(true, test.isSupported(ISOChronology.getInstance().hourOfDay()));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,233,"assertEquals(true, test.isSupported(ISOChronology.getInstance().minuteOfHour()));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,234,"assertEquals(true, test.isSupported(ISOChronology.getInstance().secondOfMinute()));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,235,"assertEquals(true, test.isSupported(ISOChronology.getInstance().millisOfSecond()));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,236,"assertEquals(false, test.isSupported(ISOChronology.getInstance().dayOfMonth()));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,237,"assertEquals(false, test.isSupported(ISOChronology.getInstance(PARIS).hourOfDay()));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,240,public void testEqualsHashCode() {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,241,"TimeOfDay test1 = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,242,"TimeOfDay test2 = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,243,"assertEquals(true, test1.equals(test2));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,244,"assertEquals(true, test2.equals(test1));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,245,"assertEquals(true, test1.equals(test1));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,246,"assertEquals(true, test2.equals(test2));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,247,"assertEquals(test1.hashCode(), test2.hashCode());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,248,"assertEquals(test1.hashCode(), test1.hashCode());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,249,"assertEquals(test2.hashCode(), test2.hashCode());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,251,"TimeOfDay test3 = new TimeOfDay(11, 20, 30, 40);"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,252,"assertEquals(false, test1.equals(test3));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,253,"assertEquals(false, test2.equals(test3));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,254,"assertEquals(false, test3.equals(test1));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,255,"assertEquals(false, test3.equals(test2));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,256,assertTrue(test1.hashCode() != test3.hashCode());
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,257,assertTrue(test2.hashCode() != test3.hashCode());
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,260,public void testResolve_long() {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,261,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,262,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,263,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,264,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,265,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,266,DateTime dt = new DateTime(0L);
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,267,"assertEquals(""1970-01-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,269,DateTime result = new DateTime(test.resolve(dt.getMillis()));
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,270,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,271,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,272,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,273,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,274,"assertEquals(""1970-01-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,275,"assertEquals(""1970-01-01T10:20:30.040Z"", result.toString());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,278,public void testResolve_RI() {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,279,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,280,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,281,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,282,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,283,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,284,DateTime dt = new DateTime(0L);
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,285,"assertEquals(""1970-01-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,287,DateTime result = test.resolveDateTime(dt);
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,288,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,289,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,290,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,291,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,292,"assertEquals(""1970-01-01T00:00:00.000Z"", dt.toString());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,293,"assertEquals(""1970-01-01T10:20:30.040Z"", result.toString());"

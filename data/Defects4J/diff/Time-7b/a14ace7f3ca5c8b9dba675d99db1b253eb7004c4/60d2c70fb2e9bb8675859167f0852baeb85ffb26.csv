is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,199,* <p>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,200,"* Note that as from version 1.2, the default converters go to extra"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,201,* effort to maintain the field values of the input Date or Calendar.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,202,* This means that the differences in timezone data between Joda-Time
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,203,* and each JDK version are now handled correctly. If you just want to
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,204,* use the milliseconds value without conversion you must use
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,205,"* {@link #TimeOfDay(long, Chronology)}."
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,228,* <p>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,229,"* Note that as from version 1.2, the default converters go to extra"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,230,* effort to maintain the field values of the input Date or Calendar.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,231,* This means that the differences in timezone data between Joda-Time
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,232,* and each JDK version are now handled correctly. If you just want to
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,233,* use the milliseconds value without conversion you must use
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,234,"* {@link #TimeOfDay(long, Chronology)}."
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,269,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,270,"* Note that as from version 1.2, this method goes to extra effort to"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,271,* maintain the field values on the created Date object.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,272,* This means that the differences in timezone data between Joda-Time
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,273,* and each JDK version are now handled correctly.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,287,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,288,"* Note that as from version 1.2, this method goes to extra effort to"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,289,* maintain the field values on the created Calendar object.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,290,* This means that the differences in timezone data between Joda-Time
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,291,* and each JDK version are now handled correctly.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,308,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,309,"* Note that as from version 1.2, this method goes to extra effort to"
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,310,* maintain the field values on the created Calendar object.
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,311,* This means that the differences in timezone data between Joda-Time
True,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,JodaTime/src/java/org/joda/time/base/AbstractDateTime.java,312,* and each JDK version are now handled correctly.
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,124,* <p>
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,125,"* Note that as from version 1.2, the default converters go to extra"
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,126,* effort to maintain the field values of the input Date or Calendar.
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,127,* This means that the differences in timezone data between Joda-Time
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,128,* and each JDK version are now handled correctly.
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,18,import java.util.Calendar;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,20,import java.util.GregorianCalendar;
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,26,import org.joda.time.chrono.GJChronology;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,277,ublic void testConstructor_Object() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,280,public void testConstructor_Object1() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,281,"ssertEquals(1 + OFFSET, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,284,"// JDK1.3 has no historical time zone, so hour differs from JDK1.4"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,285,// This method is now defined to copy the fields from the Date
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,286,"assertEquals(date.getHours(), test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,287,"assertEquals(2, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,288,"assertEquals(3, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,289,"assertEquals(4, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,293,* Test constructor (Object)
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,295,public void testConstructor_Object2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,296,Calendar cal = new GregorianCalendar();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,297,cal.setTime(new Date(TEST_TIME1));
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,298,TimeOfDay test = new TimeOfDay(cal);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,299,"assertEquals(GJChronology.getInstanceUTC(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,300,"// JDK1.3 has no historical time zone, so hour differs from JDK1.4"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,301,// This method is now defined to copy the fields from the Date
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,302,"assertEquals(cal.get(Calendar.HOUR_OF_DAY), test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,320,"ssertEquals(1 + OFFSET, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,341,"// JDK1.3 has no historical time zone, so hour differs from JDK1.4"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,342,// This method is now defined to copy the fields from the Date
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,343,"assertEquals(date.getHours(), test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,361,"ssertEquals(1 + OFFSET, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,384,"// JDK1.3 has no historical time zone, so hour differs from JDK1.4"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,385,// This method is now defined to copy the fields from the Date
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,386,"assertEquals(date.getHours(), test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,31,import org.joda.time.DateTime;
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,97,"ssertEquals(123L, CalendarConverter.INSTANCE.getInstantMillis(cal, JULIAN));"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,98,"long millis = CalendarConverter.INSTANCE.getInstantMillis(cal, JULIAN);"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,99,long expected = 123L + cal.get(Calendar.DST_OFFSET) + cal.get(Calendar.ZONE_OFFSET);
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,100,expected = expected - DateTimeZone.getDefault().getOffsetFromLocal(expected);
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,101,"assertEquals(expected, millis);"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,102,"assertEquals(cal.get(Calendar.DAY_OF_MONTH), new DateTime(millis).getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,103,"assertEquals(cal.get(Calendar.HOUR_OF_DAY), new DateTime(millis).getHourOfDay());"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,104,"assertEquals(cal.get(Calendar.MINUTE), new DateTime(millis).getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,172,al.setTime(new Date(12345678L));
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,180,"cal.setTime(new Date(70, 2, 3, 4, 5, 6));"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,174,"nt[] expected = ISOChronology.getInstance().get(tod, 12345678L);"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,182,"int[] expected = new int[] {4, 5, 6, 0};"
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,23,import java.util.GregorianCalendar;
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,29,import org.joda.time.DateTime;
False,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,90,"ssertEquals(123L, DateConverter.INSTANCE.getInstantMillis(new Date(123L), JULIAN));"
False,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,91,"ssertEquals(123L, DateConverter.INSTANCE.getInstantMillis(new Date(123L), (Chronology) null));"
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,92,Date date = new Date(123L);
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,93,"long millis = DateConverter.INSTANCE.getInstantMillis(date, JULIAN);"
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,94,long expected = 123L - date.getTimezoneOffset() * 60000;
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,95,expected = expected - DateTimeZone.getDefault().getOffsetFromLocal(expected);
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,96,"assertEquals(expected, millis);"
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,97,"assertEquals(date.getDate(), new DateTime(millis).getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,98,"assertEquals(date.getHours(), new DateTime(millis).getHourOfDay());"
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,99,"assertEquals(date.getMinutes(), new DateTime(millis).getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,101,"assertEquals(expected, DateConverter.INSTANCE.getInstantMillis(date, (Chronology) null));"
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,117,"Date date = new Date(70, 2, 3, 4, 5, 6);"
False,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,108,"nt[] expected = CopticChronology.getInstance().get(tod, 12345678L);"
False,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,109,"nt[] actual = DateConverter.INSTANCE.getPartialValues(tod, new Date(12345678L), CopticChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,119,"int[] expected = new int[] {4, 5, 6, 0};"
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,120,"int[] actual = DateConverter.INSTANCE.getPartialValues(tod, date, ISOChronology.getInstance());"

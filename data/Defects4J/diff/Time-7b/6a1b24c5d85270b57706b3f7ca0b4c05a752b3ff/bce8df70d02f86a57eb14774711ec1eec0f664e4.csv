is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,2,  Copyright 2001-2010 Stephen Colebourne
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,2,*  Copyright 2001-2012 Stephen Colebourne
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,429,* Calculates the astronomical Julian Day for an instant.
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,430,* <p>
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,431,"* The <a href=""http://en.wikipedia.org/wiki/Julian_day"">Julian day</a> is a well-known"
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,432,* system of time measurement for scientific use by the astronomy community.
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,433,* It expresses the interval of time in days and fractions of a day since
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,434,"* January 1, 4713 BC (Julian) Greenwich noon."
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,435,* <p>
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,436,* Each day starts at midday (not midnight) and time is expressed as a fraction.
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,437,* Thus the fraction 0.25 is 18:00. equal to one quarter of the day from midday to midday.
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,438,* <p>
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,439,* Note that this method has nothing to do with the day-of-year.
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,441,* @param epochMillis  the epoch millis from 1970-01-01Z
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,442,* @return the astronomical Julian Day represented by the specified instant
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,443,* @since 2.2
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,445,public static final double toJulianDay(long epochMillis) {
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,446,// useful links
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,447,// http://en.wikipedia.org/wiki/Julian_day#cite_note-13 - Wikipedia
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,448,"// http://aa.usno.navy.mil/data/docs/JulianDate.php"" - USNO"
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,449,// http://users.zoominternet.net/~matto/Java/Julian%20Date%20Converter.htm - Julian Date Converter by Matt Oltersdorf
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,450,// http://ssd.jpl.nasa.gov/tc.cgi#top - CalTech
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,451,double epochDay = epochMillis / 86400000d;
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,452,return epochDay + 2440587.5d;
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,456,* Calculates the astronomical Julian Day Number for an instant.
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,457,* <p>
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,458,* The {@link #toJulianDay(long)} method calculates the astronomical Julian Day
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,459,* with a fraction based on days starting at midday.
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,460,* This method calculates the variant where days start at midnight.
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,461,"* JDN 0 is used for the date equivalent to Monday January 1, 4713 BC (Julian)."
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,462,* Thus these days start 12 hours before those of the fractional Julian Day.
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,463,* <p>
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,464,* Note that this method has nothing to do with the day-of-year.
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,466,* @param epochMillis  the epoch millis from 1970-01-01Z
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,467,* @return the astronomical Julian Day represented by the specified instant
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,468,* @since 2.2
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,470,public static final long toJulianDayNumber(long epochMillis) {
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,471,return (long) Math.floor(toJulianDay(epochMillis) + 0.5d);
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,475,* Creates a date-time from a Julian Day.
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,476,* <p>
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,477,* Returns the {@code DateTime} object equal to the specified Julian Day.
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,479,* @param julianDay  the Julian Day
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,480,* @return the epoch millis from 1970-01-01Z
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,481,* @since 2.2
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,483,public static final long fromJulianDay(double julianDay) {
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,484,double epochDay = julianDay - 2440587.5d;
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,485,return (long) (epochDay * 86400000d);
False,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,2,  Copyright 2001-2010 Stephen Colebourne
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,2,*  Copyright 2001-2012 Stephen Colebourne
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,36,import org.joda.time.chrono.JulianChronology;
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,473,public void test_julianDay() {
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,474,"DateTime base = new DateTime(1970, 1, 1, 0, 0, DateTimeZone.UTC);"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,476,"assertEquals(2440587.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,477,"assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis()));"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,478,"assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440587.5d));"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,480,base = base.plusHours(6);
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,481,"assertEquals(2440587.75d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,482,"assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis()));"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,483,"assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440587.75d));"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,485,base = base.plusHours(6);
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,486,"assertEquals(2440588d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,487,"assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis()));"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,488,"assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588d));"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,490,base = base.plusHours(6);
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,491,"assertEquals(2440588.25d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,492,"assertEquals(2440588, DateTimeUtils.toJulianDayNumber(base.getMillis()));"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,493,"assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588.25d));"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,495,base = base.plusHours(6);
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,496,"assertEquals(2440588.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,497,"assertEquals(2440589, DateTimeUtils.toJulianDayNumber(base.getMillis()));"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,498,"assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(2440588.5d));"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,500,"base = new DateTime(2012, 8, 31, 23, 50, DateTimeZone.UTC);"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,501,"assertEquals(2456171.4930555555, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,502,"assertEquals(2456171, DateTimeUtils.toJulianDayNumber(base.getMillis()));"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,504,"base = new DateTime(-4713, 1, 1, 12, 0, JulianChronology.getInstanceUTC());"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,505,"assertEquals(0d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,506,"assertEquals(0, DateTimeUtils.toJulianDayNumber(base.getMillis()));"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,507,"assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(0d));"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,509,"base = new DateTime(-4713, 1, 1, 0, 0, JulianChronology.getInstanceUTC());"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,510,"assertEquals(-0.5d, DateTimeUtils.toJulianDay(base.getMillis()), 0.0001d);"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,511,"assertEquals(0, DateTimeUtils.toJulianDayNumber(base.getMillis()));"
True,src/test/java/org/joda/time/TestDateTimeUtils.java,src/test/java/org/joda/time/TestDateTimeUtils.java,512,"assertEquals(base.getMillis(), DateTimeUtils.fromJulianDay(-0.5d));"

is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,68,rivate static final long FEB_29 = (31L + 29 - 1) * DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,302,ields.year = new BasicYearDateTimeField(this);
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,300,fields.year = new GJYearDateTimeField(this);
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,540, Sets the year.
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,542, @param instant  millis from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,543, @param year  the year to set
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,538,* @param instant millis from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,545,"ong setYear(long instant, int year) {"
True,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,540,"final long setYear(long instant, int year) {"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,759,"ong getYearDifference(long minuendInstant, long subtrahendInstant) {"
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,760,nt minuendYear = getYear(minuendInstant);
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,761,nt subtrahendYear = getYear(subtrahendInstant);
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,763,/ Inlined remainder method to avoid duplicate calls to get.
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,764,ong minuendRem = minuendInstant - getYearMillis(minuendYear);
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,765,ong subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,767,/ Balance leap year differences on remainders.
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,768,f (subtrahendRem >= FEB_29) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,769,f (isLeapYear(subtrahendYear)) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,770,f (!isLeapYear(minuendYear)) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,771,ubtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,773, else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,774,inuendRem -= DateTimeConstants.MILLIS_PER_DAY;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,778,nt difference = minuendYear - subtrahendYear;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,779,f (minuendRem < subtrahendRem) {
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,780,ifference--;
False,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java,782,eturn difference;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,204,"ong setYear(long instant, int year) {"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,205,"/ optimsed implementation of set, due to 30 day months"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,206,nt thisYear = getYear(instant);
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,207,"nt dayOfYear = getDayOfYear(instant, thisYear);"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,208,nt millisOfDay = getMillisOfDay(instant);
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,210,f (dayOfYear > 365) {
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,211,"/ Current year is leap, and day is leap."
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,212,f (!isLeapYear(year)) {
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,213,"/ Moving to a non-leap year, leap day doesn't exist."
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,214,ayOfYear--;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,218,"nstant = getYearMonthDayMillis(year, 1, dayOfYear);"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,219,nstant += millisOfDay;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,220,eturn instant;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,223,"ong getYearDifference(long minuendInstant, long subtrahendInstant) {"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,224,"/ optimsed implementation of getDifference, due to 30 day months"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,225,nt minuendYear = getYear(minuendInstant);
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,226,nt subtrahendYear = getYear(subtrahendInstant);
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,228,/ Inlined remainder method to avoid duplicate calls to get.
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,229,ong minuendRem = minuendInstant - getYearMillis(minuendYear);
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,230,ong subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,232,nt difference = minuendYear - subtrahendYear;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,233,f (minuendRem < subtrahendRem) {
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,234,ifference--;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,236,eturn difference;
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,318,ields.year = new BasicYearDateTimeField(this);
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,282,fields.year = new CopticYearDateTimeField(this);
False,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,24, A year field suitable for many calendars.
False,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,26, @author Guy Allard
False,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,27, @author Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,31,lass BasicYearDateTimeField extends ImpreciseDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,28,final class CopticYearDateTimeField extends ImpreciseDateTimeField {
False,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,33,** Serialization version. */
False,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,34,rivate static final long serialVersionUID = -98628754872287L;
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,30,private static final long serialVersionUID = 8990199361773280783L;
False,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,36,** The underlying basic chronology. */
False,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,37,rotected final BaseGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,32,private final BaseGJChronology iChronology;
False,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,40, Restricted constructor.
False,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,42, @param chronology  the chronology this field belogs to
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,35,* Restricted constructor
False,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,44,asicYearDateTimeField(BaseGJChronology chronology) {
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,37,CopticYearDateTimeField(BaseGJChronology chronology) {
False,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,61,nt thisYear = get(instant);
False,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,62,"nt newYear = FieldUtils.safeAdd(thisYear, years);"
False,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,63,"eturn set(instant, newYear);"
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,54,"return set(instant, get(instant) + years);"
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,72,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,73,if (minuendInstant < subtrahendInstant) {
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,74,"return -getDifference(subtrahendInstant, minuendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,77,int minuendYear = get(minuendInstant);
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,78,int subtrahendYear = get(subtrahendInstant);
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,80,// Inlined remainder method to avoid duplicate calls to get.
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,81,long minuendRem = minuendInstant - iChronology.getYearMillis(minuendYear);
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,82,long subtrahendRem = subtrahendInstant - iChronology.getYearMillis(subtrahendYear);
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,84,int difference = minuendYear - subtrahendYear;
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,85,if (minuendRem < subtrahendRem) {
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,86,difference--;
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,88,return difference;
False,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,84,"eturn iChronology.setYear(instant, year);"
False,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,87,"ublic long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
False,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,88,f (minuendInstant < subtrahendInstant) {
False,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,89,"eturn -iChronology.getYearDifference(subtrahendInstant, minuendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,95,BaseGJChronology chrono = iChronology;
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,97,int thisYear = chrono.getYear(instant);
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,98,"int dayOfYear = chrono.getDayOfYear(instant, thisYear);"
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,99,int millisOfDay = chrono.getMillisOfDay(instant);
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,101,if (dayOfYear > 365) {
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,102,"// Current year is leap, and day is leap."
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,103,if (!chrono.isLeapYear(year)) {
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,104,"// Moving to a non-leap year, leap day doesn't exist."
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,105,dayOfYear--;
False,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,91,"eturn iChronology.getYearDifference(minuendInstant, subtrahendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,109,"instant = chrono.getYearMonthDayMillis(year, 1, dayOfYear);"
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,110,instant += millisOfDay;
True,JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java,112,return instant;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,2,*  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,14,*  limitations under the License.
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,16,package org.joda.time.chrono;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,18,import org.joda.time.DateTimeConstants;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,19,import org.joda.time.DateTimeFieldType;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,20,import org.joda.time.DurationField;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,21,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,22,import org.joda.time.field.ImpreciseDateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,25,* Provides time calculations for the year component of time.
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,27,* @author Guy Allard
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,28,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,29,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,30,* @since 1.0
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,32,final class GJYearDateTimeField extends ImpreciseDateTimeField {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,34,private static final long serialVersionUID = -679076949530018869L;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,36,private static final long FEB_29 = (31L + 29 - 1) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,38,private final BaseGJChronology iChronology;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,41,* Restricted constructor
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,43,GJYearDateTimeField(BaseGJChronology chronology) {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,44,"super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());"
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,45,iChronology = chronology;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,48,public boolean isLenient() {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,49,return false;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,53,* Get the Year component of the specified time instant.
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,55,* @param instant  the time instant in millis to query.
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,56,* @return the year extracted from the input.
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,58,public int get(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,59,return iChronology.getYear(instant);
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,63,* Add the specified year to the specified time instant.
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,64,* The amount added may be negative.
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,66,* @param instant  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,67,* @param years  the years to add (can be negative).
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,68,* @return the updated time instant.
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,70,"public long add(long instant, int years) {"
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,71,if (years == 0) {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,72,return instant;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,74,int thisYear = get(instant);
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,75,int newYear = thisYear + years;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,76,"return set(instant, newYear);"
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,79,"public long add(long instant, long years) {"
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,80,"return add(instant, FieldUtils.safeToInt(years));"
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,84,* Add to the Year component of the specified time instant
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,85,* wrapping around within that component if necessary.
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,87,* @param instant  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,88,* @param years  the years to add (can be negative).
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,89,* @return the updated time instant.
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,91,"public long addWrapField(long instant, int years) {"
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,92,if (years == 0) {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,93,return instant;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,95,// Return newly calculated millis value
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,96,int thisYear = iChronology.getYear(instant);
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,97,int wrappedYear = FieldUtils.getWrappedValue
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,98,"(thisYear, years, iChronology.getMinYear(), iChronology.getMaxYear());"
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,99,"return set(instant, wrappedYear);"
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,102,"public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {"
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,103,if (minuendInstant < subtrahendInstant) {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,104,"return -getDifference(subtrahendInstant, minuendInstant);"
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,107,int minuendYear = get(minuendInstant);
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,108,int subtrahendYear = get(subtrahendInstant);
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,110,// Inlined remainder method to avoid duplicate calls to get.
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,111,long minuendRem = minuendInstant - iChronology.getYearMillis(minuendYear);
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,112,long subtrahendRem = subtrahendInstant - iChronology.getYearMillis(subtrahendYear);
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,114,// Balance leap year differences on remainders.
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,115,if (subtrahendRem >= FEB_29) {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,116,if (iChronology.isLeapYear(subtrahendYear)) {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,117,if (!iChronology.isLeapYear(minuendYear)) {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,118,subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,120,} else if (minuendRem >= FEB_29 && iChronology.isLeapYear(minuendYear)) {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,121,minuendRem -= DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,125,int difference = minuendYear - subtrahendYear;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,126,if (minuendRem < subtrahendRem) {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,127,difference--;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,129,return difference;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,133,* Set the Year component of the specified time instant.
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,135,* @param instant  the time instant in millis to update.
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,136,"* @param year  the year (-292269055,292278994) to update the time to."
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,137,* @return the updated time instant.
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,138,* @throws IllegalArgumentException  if year is invalid.
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,140,"public long set(long instant, int year) {"
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,141,FieldUtils.verifyValueBounds
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,142,"(this, year, iChronology.getMinYear(), iChronology.getMaxYear());"
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,143,"return iChronology.setYear(instant, year);"
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,146,public DurationField getRangeDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,147,return null;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,150,public boolean isLeap(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,151,return iChronology.isLeapYear(get(instant));
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,154,public int getLeapAmount(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,155,if (iChronology.isLeapYear(get(instant))) {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,156,return 1;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,157,} else {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,158,return 0;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,162,public DurationField getLeapDurationField() {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,163,return iChronology.days();
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,166,public int getMinimumValue() {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,167,return iChronology.getMinYear();
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,170,public int getMaximumValue() {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,171,return iChronology.getMaxYear();
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,174,public long roundFloor(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,175,return iChronology.getYearMillis(get(instant));
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,178,public long roundCeiling(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,179,int year = get(instant);
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,180,long yearStartMillis = iChronology.getYearMillis(year);
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,181,if (instant != yearStartMillis) {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,182,// Bump up to start of next year.
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,183,instant = iChronology.getYearMillis(year + 1);
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,185,return instant;
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,188,public long remainder(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,189,return instant - roundFloor(instant);
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,193,* Serialization singleton
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,195,private Object readResolve() {
True,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java,196,return iChronology.year();

is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,235,"* Adds a value (which may be negative) to the partial instant,"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,236,* throwing an exception if the maximum size of the instant is reached.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,237,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,238,"* The value will be added to this field, overflowing into larger fields"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,239,"* if necessary. Smaller fields should be unaffected, except where the"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,240,* result would be an invalid value for a smaller field. In this case the
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,241,* smaller field is adjusted to be in range.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,242,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,243,* Partial instants only contain some fields. This may result in a maximum
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,244,"* possible value, such as TimeOfDay being limited to 23:59:59:999. If this"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,245,* limit is breached by the add an exception is thrown.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,246,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,247,"* For example, in the ISO chronology:<br>"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,248,* 2000-08-20 add six months is 2000-02-20<br>
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,249,* 2000-08-20 add twenty months is 2000-04-20<br>
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,250,* 2000-08-20 add minus nine months is 2000-11-20<br>
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,251,* 2001-01-31 add one month  is 2001-02-28<br>
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,252,* 2001-01-31 add two months is 2001-03-31<br>
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,254,* @param instant  the partial instant
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,255,* @param fieldIndex  the index of this field in the instant
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,256,* @param values  the values of the partial instant which should be updated
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,257,"* @param valueToAdd  the value to add, in the units of the field"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,258,* @return the passed in values
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,259,* @throws IllegalArgumentException if the value is invalid or the maximum instant is reached
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,261,"public abstract int[] add(PartialInstant instant, int fieldIndex, int[] values, int valueToAdd);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,513,* Get the minimum value for this field using the partial instant and
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,514,* the specified values.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,516,* @param instant  the partial instant to query
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,517,* @param values  the values to use
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,518,"* @return the minimum value for this field, in the units of the field"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,520,"public abstract int getMinimumValue(PartialInstant instant, int[] values);"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,547,* Get the maximum value for this field using the partial instant and
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,548,* the specified values.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,550,* @param instant  the partial instant to query
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,551,* @param values  the values to use
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,552,"* @return the maximum value for this field, in the units of the field"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,554,"public abstract int getMaximumValue(PartialInstant instant, int[] values);"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,56,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,119,"public int getMaximumValue(PartialInstant instant, int[] values) {"
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,120,DateTimeField[] fields = instant.getFields();
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,121,for (int i = 0; i < fields.length; i++) {
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,122,if (fields[i] == iChronology.monthOfYear()) {
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,123,int month = values[i];
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,124,if (month <= 12) {
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,125,return 30;
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,127,for (int j = 0; j < fields.length; j++) {
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,128,if (fields[j] == iChronology.year()) {
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,129,int year = values[j];
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,130,return iChronology.isLeapYear(year) ? 6 : 5;
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,133,return 6;
True,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java,136,return 30;
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,56,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,123,"public int getMaximumValue(PartialInstant instant, int[] values) {"
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,124,DateTimeField[] fields = instant.getFields();
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,125,for (int i = 0; i < fields.length; i++) {
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,126,if (fields[i] == iChronology.monthOfYear()) {
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,127,int month = values[i];
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,128,for (int j = 0; j < fields.length; j++) {
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,129,if (fields[j] == iChronology.year()) {
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,130,int year = values[j];
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,131,"return iChronology.getDaysInYearMonth(year, month);"
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,134,return iChronology.getDaysInMonthMax(month);
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java,137,return 31;
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,56,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,118,"public int getMaximumValue(PartialInstant instant, int[] values) {"
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,119,DateTimeField[] fields = instant.getFields();
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,120,for (int i = 0; i < fields.length; i++) {
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,121,if (fields[i] == iChronology.year()) {
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,122,int year = values[i];
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,123,return iChronology.getDaysInYear(year);
True,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java,126,return 366;
True,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,57,import org.joda.time.DateTimeField;
True,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,138,"public int getMaximumValue(PartialInstant instant, int[] values) {"
True,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,139,DateTimeField[] fields = instant.getFields();
True,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,140,for (int i = 0; i < fields.length; i++) {
True,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,141,if (fields[i] == iChronology.weekyear()) {
True,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,142,int weekyear = values[i];
True,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,143,return iChronology.getWeeksInYear(weekyear);
True,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java,146,return 53;
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,254,"* Adds a value (which may be negative) to the partial instant,"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,255,* throwing an exception if the maximum size of the instant is reached.
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,256,* <p>
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,257,"* The value will be added to this field, overflowing into larger fields"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,258,"* if necessary. Smaller fields should be unaffected, except where the"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,259,* result would be an invalid value for a smaller field. In this case the
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,260,* smaller field is adjusted to be in range.
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,261,* <p>
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,262,* Partial instants only contain some fields. This may result in a maximum
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,263,"* possible value, such as TimeOfDay being limited to 23:59:59:999. If this"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,264,* limit is breached by the add an exception is thrown.
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,265,* <p>
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,266,"* For example, in the ISO chronology:<br>"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,267,* 2000-08-20 add six months is 2000-02-20<br>
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,268,* 2000-08-20 add twenty months is 2000-04-20<br>
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,269,* 2000-08-20 add minus nine months is 2000-11-20<br>
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,270,* 2001-01-31 add one month  is 2001-02-28<br>
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,271,* 2001-01-31 add two months is 2001-03-31<br>
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,273,* @param instant  the partial instant
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,274,* @param fieldIndex  the index of this field in the instant
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,275,* @param values  the values of the partial instant which should be updated
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,276,"* @param valueToAdd  the value to add, in the units of the field"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,277,* @return the passed in values
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,278,* @throws IllegalArgumentException if the value is invalid or the maximum instant is reached
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,280,"public int[] add(PartialInstant instant, int fieldIndex, int[] values, int valueToAdd) {"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,281,// there are more efficient algorithms than this (especially for time only fields)
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,282,"// trouble is when dealing with days and months, so we use this technique of"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,283,// adding/removing one from the larger field at a time
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,284,DateTimeField nextField = null;
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,286,while (valueToAdd > 0) {
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,287,"int max = getMaximumValue(instant, values);"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,288,long proposed = values[fieldIndex] + valueToAdd;
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,289,if (proposed <= max) {
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,290,values[fieldIndex] = (int) proposed;
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,291,return values;
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,293,if (nextField == null) {
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,294,if (fieldIndex == 0) {
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,295,"throw new IllegalArgumentException(""Maximum value exceeded for add"");"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,297,nextField = instant.getField(fieldIndex - 1);
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,298,if (getRangeDurationField() != nextField.getDurationField()) {
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,299,"throw new IllegalArgumentException(""Fields invalid for add"");"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,302,valueToAdd -= (max + 1) - values[fieldIndex];
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,303,"values = nextField.add(instant, fieldIndex - 1, values, 1);"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,304,"values[fieldIndex] = getMinimumValue(instant, values);"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,306,while (valueToAdd < 0) {
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,307,"int min = getMinimumValue(instant, values);"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,308,long proposed = values[fieldIndex] + valueToAdd;
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,309,if (proposed >= min) {
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,310,values[fieldIndex] = (int) proposed;
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,311,return values;
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,313,if (nextField == null) {
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,314,if (fieldIndex == 0) {
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,315,"throw new IllegalArgumentException(""Maximum value exceeded for add"");"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,317,nextField = instant.getField(fieldIndex - 1);
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,318,if (getRangeDurationField() != nextField.getDurationField()) {
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,319,"throw new IllegalArgumentException(""Fields invalid for add"");"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,322,valueToAdd -= (min - 1) - values[fieldIndex];
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,323,"values = nextField.add(instant, fieldIndex - 1, values, -1);"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,324,"values[fieldIndex] = getMaximumValue(instant, values);"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,326,return values;
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,540, Get the minimum value for this field evaluated at the specified time.
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,616,* Get the minimum value for this field evaluated at the specified instant.
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,628,* Get the minimum value for this field using the partial instant and
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,629,* the specified values.
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,630,* <p>
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,631,* This implementation returns the same as {@link #getMinimumValue(PartialInstant)}.
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,633,* @param instant  the partial instant to query
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,634,* @param values  the values to use
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,635,"* @return the minimum value for this field, in the units of the field"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,637,"public int getMinimumValue(PartialInstant instant, int[] values) {"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,638,return getMinimumValue(instant);
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,572, Get the maximum value for this field evaluated at the specified time.
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,662,* Get the maximum value for this field evaluated at the specified instant.
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,674,* Get the maximum value for this field using the partial instant and
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,675,* the specified values.
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,676,* <p>
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,677,* This implementation returns the same as {@link #getMaximumValue(PartialInstant)}.
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,679,* @param instant  the partial instant to query
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,680,* @param values  the values to use
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,681,"* @return the maximum value for this field, in the units of the field"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,683,"public int getMaximumValue(PartialInstant instant, int[] values) {"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,684,return getMaximumValue(instant);
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,172,"public int[] add(PartialInstant instant, int fieldIndex, int[] values, int valueToAdd) {"
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,173,"return iField.add(instant, fieldIndex, values, valueToAdd);"
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,244,"public int getMinimumValue(PartialInstant instant, int[] values) {"
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,245,"return iField.getMinimumValue(instant, values);"
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,260,"public int getMaximumValue(PartialInstant instant, int[] values) {"
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,261,"return iField.getMaximumValue(instant, values);"
True,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,166,* Always returns 1.
True,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,168,* @return the minimum value of 1
True,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,170,"public int getMinimumValue(PartialInstant instant, int[] values) {"
True,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,171,return 1;
True,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,205,"* Get the maximum value for the field, which is one more than the wrapped"
True,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,206,* field's maximum value.
True,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,208,* @return the maximum value
True,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,210,"public int getMaximumValue(PartialInstant instant, int[] values) {"
True,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java,211,"return getWrappedField().getMaximumValue(instant, values) + 1;"
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,206,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,208,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,210,"public int[] add(PartialInstant instant, int fieldIndex, int[] values, int valueToAdd) {"
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,211,throw unsupported();
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,360,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,362,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,364,"public int getMinimumValue(PartialInstant instant, int[] values) {"
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,365,throw unsupported();
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,396,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,398,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,400,"public int getMaximumValue(PartialInstant instant, int[] values) {"
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,401,throw unsupported();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,471,/ TODO
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,473,/         * Adds to this field in a copy of this TimeOfDay.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,474,/         * <p>
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,475,/         * The TimeOnly attached to this property is unchanged by this call.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,476,"/        * Instead, a new instance is returned."
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,478,/         * @param value  the value to add to the field in the copy
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,479,/         * @return a copy of the TimeOnly with the field value changed
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,480,/         * @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,482,/        public TimeOfDay addToCopy(int value) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,483,"/            int[] newValues = getField().add(getInstant(), value);"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,484,"/            return new TimeOfDay(getInstant(), newValues);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,472,* Adds to the value of this field in a copy of this TimeOfDay.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,473,* <p>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,474,* The value will be added to this field. If the value is too large to be
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,475,* added solely to this field then it will affect larger fields.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,476,* Smaller fields are unaffected.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,477,* <p>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,478,"* If the result would be too large, beyond 23:59:59:999, then an"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,479,* IllegalArgumentException is thrown.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,480,* <p>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,481,* The TimeOnly attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,482,"* Instead, a new instance is returned."
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,484,* @param valueToAdd  the value to add to the field in the copy
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,485,* @return a copy of the TimeOnly with the field value changed
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,486,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,488,public TimeOfDay addCopy(int valueToAdd) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,489,int[] newValues = iInstant.getValues();
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,490,"getField().add(iInstant, iFieldIndex, newValues, valueToAdd);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,491,"return new TimeOfDay(iInstant, newValues);"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,492, added solely to this field then it wraps. Larger fields are always
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,493," unaffected. Smaller fields should be unaffected, except where the"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,494, result would be an invalid value for a smaller field. In this case the
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,495, smaller field is adjusted to be in range.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,499,* added solely to this field then it wraps within this field.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,500,* Other fields are unaffected.
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,836,public void testPropertyAddHour() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,837,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,838,TimeOfDay copy = test.hourOfDay().addCopy(9);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,839,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,840,"check(copy, 19, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,842,copy = test.hourOfDay().addCopy(0);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,843,"check(copy, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,845,copy = test.hourOfDay().addCopy(13);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,846,"check(copy, 23, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,848,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,849,test.hourOfDay().addCopy(14);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,850,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,851,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,852,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,854,copy = test.hourOfDay().addCopy(-10);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,855,"check(copy, 0, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,857,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,858,test.hourOfDay().addCopy(-11);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,859,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,860,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,861,"check(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,838,imeOfDay updated = test.hourOfDay().addInFieldCopy(9);
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,839,"ssertEquals(19, updated.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,840,"ssertEquals(20, updated.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,841,"ssertEquals(30, updated.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,842,"ssertEquals(40, updated.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,843,pdated = updated.hourOfDay().addInFieldCopy(9);
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,844,"ssertEquals(4, updated.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,845,"ssertEquals(20, updated.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,846,"ssertEquals(30, updated.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,847,"ssertEquals(40, updated.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,866,TimeOfDay copy = test.hourOfDay().addInFieldCopy(9);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,867,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,868,"check(copy, 19, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,870,copy = test.hourOfDay().addInFieldCopy(0);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,871,"check(copy, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,873,copy = test.hourOfDay().addInFieldCopy(18);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,874,"check(copy, 4, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,876,copy = test.hourOfDay().addInFieldCopy(-15);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,877,"check(copy, 19, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,852,imeOfDay set = test.hourOfDay().setCopy(12);
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,853,"ssertEquals(12, set.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,854,"ssertEquals(20, set.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,855,"ssertEquals(30, set.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,856,"ssertEquals(40, set.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,882,TimeOfDay copy = test.hourOfDay().setCopy(12);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,883,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,884,"check(copy, 12, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,861,"imeOfDay set = test.hourOfDay().setCopy(""12"");"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,862,"ssertEquals(12, set.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,863,"ssertEquals(20, set.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,864,"ssertEquals(30, set.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,865,"ssertEquals(40, set.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,889,"TimeOfDay copy = test.hourOfDay().setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,890,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,891,"check(copy, 12, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,943,public void testPropertyAddMinute() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,944,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,945,TimeOfDay copy = test.minuteOfHour().addCopy(9);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,946,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,947,"check(copy, 10, 29, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,949,copy = test.minuteOfHour().addCopy(39);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,950,"check(copy, 10, 59, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,952,copy = test.minuteOfHour().addCopy(40);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,953,"check(copy, 11, 0, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,955,copy = test.minuteOfHour().addCopy(1 * 60 + 45);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,956,"check(copy, 12, 5, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,958,copy = test.minuteOfHour().addCopy(13 * 60 + 39);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,959,"check(copy, 23, 59, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,961,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,962,test.minuteOfHour().addCopy(13 * 60 + 40);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,963,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,964,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,965,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,967,copy = test.minuteOfHour().addCopy(-9);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,968,"check(copy, 10, 11, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,970,copy = test.minuteOfHour().addCopy(-19);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,971,"check(copy, 10, 1, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,973,copy = test.minuteOfHour().addCopy(-20);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,974,"check(copy, 10, 0, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,976,copy = test.minuteOfHour().addCopy(-21);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,977,"check(copy, 9, 59, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,979,copy = test.minuteOfHour().addCopy(-(10 * 60 + 20));
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,980,"check(copy, 0, 0, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,982,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,983,test.minuteOfHour().addCopy(-(10 * 60 + 21));
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,984,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,985,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,986,"check(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,919,imeOfDay updated = test.minuteOfHour().addInFieldCopy(9);
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,920,"ssertEquals(10, updated.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,921,"ssertEquals(29, updated.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,922,"ssertEquals(30, updated.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,923,"ssertEquals(40, updated.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,924,pdated = updated.minuteOfHour().addInFieldCopy(49);
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,925,"ssertEquals(10, updated.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,926,"ssertEquals(18, updated.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,927,"ssertEquals(30, updated.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,928,"ssertEquals(40, updated.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,991,TimeOfDay copy = test.minuteOfHour().addInFieldCopy(9);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,992,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,993,"check(copy, 10, 29, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,995,copy = test.minuteOfHour().addInFieldCopy(49);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,996,"check(copy, 10, 9, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,998,copy = test.minuteOfHour().addInFieldCopy(-47);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,999,"check(copy, 10, 33, 30, 40);"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,933,imeOfDay set = test.minuteOfHour().setCopy(12);
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,934,"ssertEquals(10, set.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,935,"ssertEquals(12, set.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,936,"ssertEquals(30, set.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,937,"ssertEquals(40, set.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1004,TimeOfDay copy = test.minuteOfHour().setCopy(12);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1005,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1006,"check(copy, 10, 12, 30, 40);"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,942,"imeOfDay set = test.minuteOfHour().setCopy(""12"");"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,943,"ssertEquals(10, set.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,944,"ssertEquals(12, set.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,945,"ssertEquals(30, set.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,946,"ssertEquals(40, set.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1011,"TimeOfDay copy = test.minuteOfHour().setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1012,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1013,"check(copy, 10, 12, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1065,public void testPropertyAddSecond() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1066,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1067,TimeOfDay copy = test.secondOfMinute().addCopy(9);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1068,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1069,"check(copy, 10, 20, 39, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1071,copy = test.secondOfMinute().addCopy(29);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1072,"check(copy, 10, 20, 59, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1074,copy = test.secondOfMinute().addCopy(30);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1075,"check(copy, 10, 21, 0, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1077,copy = test.secondOfMinute().addCopy(39 * 60 + 29);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1078,"check(copy, 10, 59, 59, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1080,copy = test.secondOfMinute().addCopy(39 * 60 + 30);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1081,"check(copy, 11, 0, 0, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1083,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1084,test.secondOfMinute().addCopy(13 * 60 * 60 + 39 * 60 + 30);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1085,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1086,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1087,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1089,copy = test.secondOfMinute().addCopy(-9);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1090,"check(copy, 10, 20, 21, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1092,copy = test.secondOfMinute().addCopy(-30);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1093,"check(copy, 10, 20, 0, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1095,copy = test.secondOfMinute().addCopy(-31);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1096,"check(copy, 10, 19, 59, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1098,copy = test.secondOfMinute().addCopy(-(10 * 60 * 60 + 20 * 60 + 30));
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1099,"check(copy, 0, 0, 0, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1101,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1102,test.secondOfMinute().addCopy(-(10 * 60 * 60 + 20 * 60 + 31));
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1103,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1104,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1105,"check(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1000,imeOfDay updated = test.secondOfMinute().addInFieldCopy(9);
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1001,"ssertEquals(10, updated.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1002,"ssertEquals(20, updated.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1003,"ssertEquals(39, updated.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1004,"ssertEquals(40, updated.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1005,pdated = updated.secondOfMinute().addInFieldCopy(49);
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1006,"ssertEquals(10, updated.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1007,"ssertEquals(20, updated.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1008,"ssertEquals(28, updated.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1009,"ssertEquals(40, updated.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1110,TimeOfDay copy = test.secondOfMinute().addInFieldCopy(9);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1111,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1112,"check(copy, 10, 20, 39, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1114,copy = test.secondOfMinute().addInFieldCopy(49);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1115,"check(copy, 10, 20, 19, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1117,copy = test.secondOfMinute().addInFieldCopy(-47);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1118,"check(copy, 10, 20, 43, 40);"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1014,imeOfDay set = test.secondOfMinute().setCopy(12);
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1015,"ssertEquals(10, set.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1016,"ssertEquals(20, set.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1017,"ssertEquals(12, set.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1018,"ssertEquals(40, set.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1123,TimeOfDay copy = test.secondOfMinute().setCopy(12);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1124,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1125,"check(copy, 10, 20, 12, 40);"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1023,"imeOfDay set = test.secondOfMinute().setCopy(""12"");"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1024,"ssertEquals(10, set.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1025,"ssertEquals(20, set.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1026,"ssertEquals(12, set.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1027,"ssertEquals(40, set.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1130,"TimeOfDay copy = test.secondOfMinute().setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1131,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1132,"check(copy, 10, 20, 12, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1184,public void testPropertyAddMilli() {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1185,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1186,TimeOfDay copy = test.millisOfSecond().addCopy(9);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1187,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1188,"check(copy, 10, 20, 30, 49);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1190,copy = test.millisOfSecond().addCopy(959);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1191,"check(copy, 10, 20, 30, 999);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1193,copy = test.millisOfSecond().addCopy(960);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1194,"check(copy, 10, 20, 31, 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1196,copy = test.millisOfSecond().addCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1197,"check(copy, 23, 59, 59, 999);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1199,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1200,test.millisOfSecond().addCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1201,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1202,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1203,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1205,copy = test.millisOfSecond().addCopy(-9);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1206,"check(copy, 10, 20, 30, 31);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1208,copy = test.millisOfSecond().addCopy(-40);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1209,"check(copy, 10, 20, 30, 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1211,copy = test.millisOfSecond().addCopy(-41);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1212,"check(copy, 10, 20, 29, 999);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1214,copy = test.millisOfSecond().addCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1215,"check(copy, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1217,try {
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1218,test.millisOfSecond().addCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1219,fail();
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1220,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1221,"check(test, 10, 20, 30, 40);"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1081,imeOfDay updated = test.millisOfSecond().addInFieldCopy(9);
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1082,"ssertEquals(10, updated.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1083,"ssertEquals(20, updated.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1084,"ssertEquals(30, updated.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1085,"ssertEquals(49, updated.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1086,pdated = updated.millisOfSecond().addInFieldCopy(990);
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1087,"ssertEquals(10, updated.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1088,"ssertEquals(20, updated.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1089,"ssertEquals(30, updated.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1090,"ssertEquals(39, updated.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1226,TimeOfDay copy = test.millisOfSecond().addInFieldCopy(9);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1227,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1228,"check(copy, 10, 20, 30, 49);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1230,copy = test.millisOfSecond().addInFieldCopy(995);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1231,"check(copy, 10, 20, 30, 35);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1233,copy = test.millisOfSecond().addInFieldCopy(-47);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1234,"check(copy, 10, 20, 30, 993);"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1095,imeOfDay set = test.millisOfSecond().setCopy(12);
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1096,"ssertEquals(10, set.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1097,"ssertEquals(20, set.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1098,"ssertEquals(30, set.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1099,"ssertEquals(12, set.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1239,TimeOfDay copy = test.millisOfSecond().setCopy(12);
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1240,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1241,"check(copy, 10, 20, 30, 12);"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1104,"imeOfDay set = test.millisOfSecond().setCopy(""12"");"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1105,"ssertEquals(10, set.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1106,"ssertEquals(20, set.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1107,"ssertEquals(30, set.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1108,"ssertEquals(12, set.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1246,"TimeOfDay copy = test.millisOfSecond().setCopy(""12"");"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1247,"check(test, 10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1248,"check(copy, 10, 20, 30, 12);"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1274,"private void check(TimeOfDay test, int hour, int min, int sec, int milli) {"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1275,"assertEquals(hour, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1276,"assertEquals(min, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1277,"assertEquals(sec, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java,1278,"assertEquals(milli, test.getMillisOfSecond());"

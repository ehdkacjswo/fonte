is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,96,rivate static final PeriodType MILLIS_TYPE;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,97,rivate static final PeriodType DAY_HOUR_TYPE;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,98,rivate static final PeriodType YEAR_DAY_TYPE;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,99,rivate static final PeriodType YEAR_WEEK_TYPE;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,100,rivate static final PeriodType YEAR_MONTH_TYPE;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,101,rivate static final PeriodType ALL_TYPE;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,102,rivate static final PeriodType UTC_DAY_HOUR_TYPE;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,103,rivate static final PeriodType UTC_YEAR_DAY_TYPE;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,104,rivate static final PeriodType UTC_YEAR_WEEK_TYPE;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,105,rivate static final PeriodType UTC_YEAR_MONTH_TYPE;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,106,rivate static final PeriodType UTC_ALL_TYPE;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,107,rivate static final PeriodType PRECISE_DAY_HOUR_TYPE;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,108,rivate static final PeriodType PRECISE_YEAR_DAY_TYPE;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,109,rivate static final PeriodType PRECISE_YEAR_WEEK_TYPE;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,110,rivate static final PeriodType PRECISE_YEAR_MONTH_TYPE;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,111,rivate static final PeriodType PRECISE_ALL_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,96,private static final PeriodType MILLIS;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,97,private static final PeriodType DAY_HOUR;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,98,private static final PeriodType YEAR_DAY;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,99,private static final PeriodType YEAR_WEEK;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,100,private static final PeriodType YEAR_MONTH;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,101,private static final PeriodType ALL;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,102,private static final PeriodType DAY_HOUR_UTC;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,103,private static final PeriodType YEAR_DAY_UTC;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,104,private static final PeriodType YEAR_WEEK_UTC;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,105,private static final PeriodType YEAR_MONTH_UTC;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,106,private static final PeriodType ALL_UTC;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,107,private static final PeriodType PRECISE_DAY_HOUR;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,108,private static final PeriodType PRECISE_YEAR_DAY;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,109,private static final PeriodType PRECISE_YEAR_WEEK;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,110,private static final PeriodType PRECISE_YEAR_MONTH;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,111,private static final PeriodType PRECISE_ALL;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,114,ILLIS_TYPE = new MillisType();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,115,AY_HOUR_TYPE = new DayHourType(ISOChronology.getInstance());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,116,EAR_DAY_TYPE = new YearDayType(ISOChronology.getInstance());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,117,EAR_WEEK_TYPE = new YearWeekType(ISOChronology.getInstance());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,118,EAR_MONTH_TYPE = new YearMonthType(ISOChronology.getInstance());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,119,LL_TYPE = new AllType(ISOChronology.getInstance());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,120,TC_DAY_HOUR_TYPE = new DayHourType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,121,TC_YEAR_DAY_TYPE = new YearDayType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,122,TC_YEAR_WEEK_TYPE = new YearWeekType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,123,TC_YEAR_MONTH_TYPE = new YearMonthType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,124,TC_ALL_TYPE = new AllType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,125,RECISE_DAY_HOUR_TYPE = new PreciseDayHourType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,126,RECISE_YEAR_DAY_TYPE = new PreciseYearDayType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,127,RECISE_YEAR_WEEK_TYPE = new PreciseYearWeekType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,128,RECISE_YEAR_MONTH_TYPE = new PreciseYearMonthType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,129,RECISE_ALL_TYPE = new PreciseAllType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,114,MILLIS = new MillisType();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,115,DAY_HOUR = new DayHourType(ISOChronology.getInstance());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,116,YEAR_DAY = new YearDayType(ISOChronology.getInstance());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,117,YEAR_WEEK = new YearWeekType(ISOChronology.getInstance());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,118,YEAR_MONTH = new YearMonthType(ISOChronology.getInstance());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,119,ALL = new AllType(ISOChronology.getInstance());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,120,DAY_HOUR_UTC = new DayHourType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,121,YEAR_DAY_UTC = new YearDayType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,122,YEAR_WEEK_UTC = new YearWeekType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,123,YEAR_MONTH_UTC = new YearMonthType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,124,ALL_UTC = new AllType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,125,PRECISE_DAY_HOUR = new PreciseDayHourType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,126,PRECISE_YEAR_DAY = new PreciseYearDayType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,127,PRECISE_YEAR_WEEK = new PreciseYearWeekType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,128,PRECISE_YEAR_MONTH = new PreciseYearMonthType(ISOChronology.getInstanceUTC());
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,129,PRECISE_ALL = new PreciseAllType(ISOChronology.getInstanceUTC());
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,138,eturn MILLIS_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,138,return MILLIS;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,146, <li>hours
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,147, <li>minutes
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,148, <li>seconds
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,149, <li>milliseconds
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,146,* <li>hours (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,147,* <li>minutes (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,148,* <li>seconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,149,* <li>milliseconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,153,eturn DAY_HOUR_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,153,return DAY_HOUR;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,157,* Returns a precise PeriodType using the ISOChronology in UTC of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,159,* <ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,160,"* <li>days (precise, fixed at 24 hours)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,161,* <li>hours (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,162,* <li>minutes (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,163,* <li>seconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,164,* <li>milliseconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,165,* </ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,167,public static PeriodType getDayHourTypeUTC() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,168,return DAY_HOUR_UTC;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,161, <li>hours
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,162, <li>minutes
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,163, <li>seconds
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,164, <li>milliseconds
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,176,* <li>hours (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,177,* <li>minutes (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,178,* <li>seconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,179,* <li>milliseconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,176,eturn getUTCDayHourType();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,191,return getDayHourTypeUTC();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,186, <li>months
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,187, <li>weeks
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,195,ublic static PeriodType getAllType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,196,eturn ALL_TYPE;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,200, Returns a PeriodType of:
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,202, <ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,203, <li>years
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,204, <li>months
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,205, <li>weeks
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,206, <li>days
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,207, <li>hours
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,208, <li>minutes
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,209, <li>seconds
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,210, <li>milliseconds
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,211, </ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,213, This factory method returns a PeriodType that calculates using any Chronology.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,215, @param chrono Chronology to use for calculations.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,217,ublic static PeriodType getAllType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,218,f (chrono == null || chrono.equals(ISOChronology.getInstance())) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,219,eturn getAllType();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,221,f (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,222,eturn getUTCAllType();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,224,eturn new AllType(chrono);
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,209,public static PeriodType getYearDayType() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,210,return YEAR_DAY;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,228, Returns a PeriodType using the ISOChronology in current time zone of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,214,* Returns a PeriodType using the ISOChronology in UTC of:
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,232, <li>days
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,218,"* <li>days (precise, fixed at 24 hours)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,239,ublic static PeriodType getYearDayType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,240,eturn YEAR_DAY_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,225,public static PeriodType getYearDayTypeUTC() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,226,return YEAR_DAY_UTC;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,249, <li>hours
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,250, <li>minutes
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,251, <li>seconds
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,252, <li>milliseconds
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,235,* <li>hours (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,236,* <li>minutes (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,237,* <li>seconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,238,* <li>milliseconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,264,eturn getUTCYearDayType();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,250,return getYearDayTypeUTC();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,273, <li>years
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,274, <li>months
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,260,* <li>years (weekyears)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,261,* <li>weeks
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,282,ublic static PeriodType getYearMonthType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,283,eturn YEAR_MONTH_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,269,public static PeriodType getYearWeekType() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,270,return YEAR_WEEK;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,287, Returns a PeriodType of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,274,* Returns a PeriodType using the ISOChronology in UTC of:
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,291, <li>months
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,292, <li>days
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,293, <li>hours
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,294, <li>minutes
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,295, <li>seconds
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,296, <li>milliseconds
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,297, </ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,299, This factory method returns a PeriodType that calculates using any Chronology.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,301, @param chrono Chronology to use for calculations.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,303,ublic static PeriodType getYearMonthType(Chronology chrono) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,304,f (chrono == null || chrono.equals(ISOChronology.getInstance())) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,305,eturn getYearMonthType();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,307,f (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,308,eturn getUTCYearMonthType();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,310,eturn new YearMonthType(chrono);
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,314, Returns a PeriodType using the ISOChronology in current time zone of:
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,316, <ul>
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,317, <li>years (weekyears)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,318, <li>weeks
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,319, <li>days
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,278,"* <li>weeks (precise, fixed at 7 days)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,279,"* <li>days (precise, fixed at 24 hours)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,326,ublic static PeriodType getYearWeekType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,327,eturn YEAR_WEEK_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,286,public static PeriodType getYearWeekTypeUTC() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,287,return YEAR_WEEK_UTC;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,352,eturn getUTCYearWeekType();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,312,return getYearWeekTypeUTC();
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,359, Returns a precise PeriodType using the ISOChronology in UTC of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,319,* Returns a PeriodType using the ISOChronology in current time zone of:
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,362," <li>days (precise, fixed at 24 hours)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,322,* <li>years
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,323,* <li>months
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,324,* <li>days
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,369,ublic static PeriodType getUTCDayHourType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,370,eturn UTC_DAY_HOUR_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,331,public static PeriodType getYearMonthType() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,332,return YEAR_MONTH;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,340,* <li>months
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,385,ublic static PeriodType getUTCYearDayType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,386,eturn UTC_YEAR_DAY_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,348,public static PeriodType getYearMonthTypeUTC() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,349,return YEAR_MONTH_UTC;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,390, Returns a PeriodType using the ISOChronology in UTC of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,353,* Returns a PeriodType of:
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,395," <li>days (precise, fixed at 24 hours)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,396, <li>hours (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,397, <li>minutes (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,398, <li>seconds (precise)
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,399, <li>milliseconds (precise)
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,358,* <li>days
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,359,* <li>hours
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,360,* <li>minutes
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,361,* <li>seconds
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,362,* <li>milliseconds
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,365,* This factory method returns a PeriodType that calculates using any Chronology.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,367,* @param chrono Chronology to use for calculations.
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,402,ublic static PeriodType getUTCYearMonthType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,403,eturn UTC_YEAR_MONTH_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,369,public static PeriodType getYearMonthType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,370,if (chrono == null || chrono.equals(ISOChronology.getInstance())) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,371,return getYearMonthType();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,373,if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,374,return getYearMonthTypeUTC();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,376,return new YearMonthType(chrono);
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,407, Returns a PeriodType using the ISOChronology in UTC of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,381,* Returns a PeriodType using the ISOChronology in current time zone of:
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,411," <li>weeks (precise, fixed at 7 days)"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,412," <li>days (precise, fixed at 24 hours)"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,385,* <li>months
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,386,* <li>weeks
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,387,* <li>days
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,419,ublic static PeriodType getUTCYearWeekType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,420,eturn UTC_YEAR_WEEK_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,394,public static PeriodType getAllType() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,395,return ALL;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,437,ublic static PeriodType getUTCAllType() {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,438,eturn UTC_ALL_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,412,public static PeriodType getAllTypeUTC() {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,413,return ALL_UTC;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,417,* Returns a PeriodType of:
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,419,* <ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,420,* <li>years
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,421,* <li>months
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,422,* <li>weeks
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,423,* <li>days
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,424,* <li>hours
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,425,* <li>minutes
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,426,* <li>seconds
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,427,* <li>milliseconds
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,428,* </ul>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,430,* This factory method returns a PeriodType that calculates using any Chronology.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,432,* @param chrono Chronology to use for calculations.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,434,public static PeriodType getAllType(Chronology chrono) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,435,if (chrono == null || chrono.equals(ISOChronology.getInstance())) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,436,return getAllType();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,438,if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,439,return getAllTypeUTC();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,441,return new AllType(chrono);
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,454,eturn PRECISE_DAY_HOUR_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,457,return PRECISE_DAY_HOUR;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,470,eturn PRECISE_YEAR_DAY_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,473,return PRECISE_YEAR_DAY;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,487,eturn PRECISE_YEAR_MONTH_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,490,return PRECISE_YEAR_MONTH;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,504,eturn PRECISE_YEAR_WEEK_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,507,return PRECISE_YEAR_WEEK;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,522,eturn PRECISE_ALL_TYPE;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,525,return PRECISE_ALL;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,894,eturn PeriodType.getYearWeekType(chrono);
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,897,return PeriodType.getYearDayType(chrono);
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,216,"eriod dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.getUTCAllType());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,216,"Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.getAllTypeUTC());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,293,"eriod dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.getUTCAllType());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,293,"Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.getAllTypeUTC());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,266,public void testYearDayType() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,267,PeriodType type = PeriodType.getYearDayType();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,268,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,269,"assertEquals(false, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,270,"assertEquals(false, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,271,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,272,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,273,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,274,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,275,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,276,"assertEquals(false, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,277,"assertEquals(ISOChronology.getInstance(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,278,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,279,"assertEquals(true, type == PeriodType.getYearDayType());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,280,"assertEquals(false, type.equals(PeriodType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,281,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,282,"assertEquals(true, type.hashCode() == PeriodType.getYearDayType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,283,"assertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,284,"assertEquals(""YearDayType"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,285,"assertEquals(""PeriodType[YearDayType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,286,assertSameAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,287,"assertSame(type, type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,288,"assertSame(type, type.withChronology(ISOChronology.getInstance()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,289,"assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,464,public void testDayHourTypeUTC() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,465,PeriodType type = PeriodType.getDayHourTypeUTC();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,466,"assertEquals(false, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,467,"assertEquals(false, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,468,"assertEquals(false, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,469,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,470,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,471,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,472,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,473,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,474,"assertEquals(true, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,475,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,476,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,477,"assertEquals(true, type == PeriodType.getDayHourTypeUTC());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,478,"assertEquals(false, type.equals(PeriodType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,479,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,480,"assertEquals(true, type.hashCode() == PeriodType.getDayHourTypeUTC().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,481,"assertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,482,"assertEquals(""DayHourType"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,483,"assertEquals(""PeriodType[DayHourType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,484,assertSameAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,485,"assertSame(type, type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,486,"assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,487,"assertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,491,public void testYearDayTypeUTC() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,492,PeriodType type = PeriodType.getYearDayTypeUTC();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,493,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,494,"assertEquals(false, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,495,"assertEquals(false, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,496,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,497,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,498,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,499,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,500,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,501,"assertEquals(false, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,502,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,503,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,504,"assertEquals(true, type == PeriodType.getYearDayTypeUTC());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,505,"assertEquals(false, type.equals(PeriodType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,506,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,507,"assertEquals(true, type.hashCode() == PeriodType.getYearDayTypeUTC().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,508,"assertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,509,"assertEquals(""YearDayType"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,510,"assertEquals(""PeriodType[YearDayType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,511,assertSameAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,512,"assertSame(type, type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,513,"assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,514,"assertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,518,public void testYearWeekTypeUTC() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,519,PeriodType type = PeriodType.getYearWeekTypeUTC();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,520,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,521,"assertEquals(false, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,522,"assertEquals(true, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,523,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,524,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,525,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,526,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,527,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,528,"assertEquals(false, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,529,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,530,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,531,"assertEquals(true, type == PeriodType.getYearWeekTypeUTC());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,532,"assertEquals(false, type.equals(PeriodType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,533,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,534,"assertEquals(true, type.hashCode() == PeriodType.getYearWeekTypeUTC().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,535,"assertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,536,"assertEquals(""YearWeekType"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,537,"assertEquals(""PeriodType[YearWeekType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,538,assertSameAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,539,"assertSame(type, type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,540,"assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,541,"assertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,545,public void testYearMonthTypeUTC() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,546,PeriodType type = PeriodType.getYearMonthTypeUTC();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,547,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,548,"assertEquals(true, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,549,"assertEquals(false, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,550,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,551,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,552,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,553,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,554,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,555,"assertEquals(false, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,556,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,557,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,558,"assertEquals(true, type == PeriodType.getYearMonthTypeUTC());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,559,"assertEquals(false, type.equals(PeriodType.getAllType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,560,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,561,"assertEquals(true, type.hashCode() == PeriodType.getYearMonthTypeUTC().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,562,"assertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,563,"assertEquals(""YearMonthType"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,564,"assertEquals(""PeriodType[YearMonthType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,565,assertSameAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,566,"assertSame(type, type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,567,"assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,568,"assertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,572,public void testAllTypeUTC() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,573,PeriodType type = PeriodType.getAllTypeUTC();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,574,"assertEquals(true, type.years().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,575,"assertEquals(true, type.months().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,576,"assertEquals(true, type.weeks().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,577,"assertEquals(true, type.days().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,578,"assertEquals(true, type.hours().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,579,"assertEquals(true, type.minutes().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,580,"assertEquals(true, type.seconds().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,581,"assertEquals(true, type.millis().isSupported());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,582,"assertEquals(false, type.isPrecise());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,583,"assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,584,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,585,"assertEquals(true, type == PeriodType.getAllTypeUTC());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,586,"assertEquals(false, type.equals(PeriodType.getMillisType()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,587,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,588,"assertEquals(true, type.hashCode() == PeriodType.getAllTypeUTC().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,589,"assertEquals(false, type.hashCode() == PeriodType.getMillisType().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,590,"assertEquals(""AllType"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,591,"assertEquals(""PeriodType[AllType]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,592,assertSameAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,593,"assertSame(type, type.withChronology(null));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,594,"assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,595,"assertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));"

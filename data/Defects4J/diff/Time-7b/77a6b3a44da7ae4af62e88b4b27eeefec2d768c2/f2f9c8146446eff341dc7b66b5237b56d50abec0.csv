is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,24,import java.util.GregorianCalendar;
False,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,200, @param calendar  the Calendar to extract fields from
False,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,201, @return the created LocalDate
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,201,"* @param calendar  the Calendar to extract fields from, not null"
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,202,"* @return the created local date, not null"
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,210,int era = calendar.get(Calendar.ERA);
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,211,int yearOfEra = calendar.get(Calendar.YEAR);
False,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,210,"alendar.get(Calendar.YEAR),"
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,213,"(era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),"
False,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,231, @param date  the Date to extract fields from
False,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,232, @return the created LocalDate
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,234,"* @param date  the Date to extract fields from, not null"
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,235,"* @return the created local date, not null"
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,244,if (date.getTime() < 0) {
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,245,// handle years in era BC
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,246,GregorianCalendar cal = new GregorianCalendar();
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,247,cal.setTime(date);
True,src/main/java/org/joda/time/LocalDate.java,src/main/java/org/joda/time/LocalDate.java,248,return fromCalendarFields(cal);
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,24,import java.util.GregorianCalendar;
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,189, @param calendar  the Calendar to extract fields from
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,190, @return the created LocalDateTime
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,190,"* @param calendar  the Calendar to extract fields from, not null"
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,191,"* @return the created local date-time, not null"
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,199,int era = calendar.get(Calendar.ERA);
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,200,int yearOfEra = calendar.get(Calendar.YEAR);
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,199,"alendar.get(Calendar.YEAR),"
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,202,"(era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),"
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,224, @param date  the Date to extract fields from
False,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,225, @return the created LocalDateTime
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,227,"* @param date  the Date to extract fields from, not null"
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,228,"* @return the created local date-time, not null"
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,237,if (date.getTime() < 0) {
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,238,// handle years in era BC
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,239,GregorianCalendar cal = new GregorianCalendar();
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,240,cal.setTime(date);
True,src/main/java/org/joda/time/LocalDateTime.java,src/main/java/org/joda/time/LocalDateTime.java,241,return fromCalendarFields(cal);
False,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,105,ublic void testFactory_FromCalendarFields() throws Exception {
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,105,public void testFactory_fromCalendarFields() throws Exception {
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,112,public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,113,"GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,114,"cal.set(Calendar.ERA, GregorianCalendar.BC);"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,115,"cal.set(Calendar.MILLISECOND, 7);"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,116,"LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,117,"assertEquals(expected, LocalDateTime.fromCalendarFields(cal));"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,120,public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,121,"GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,122,"cal.set(Calendar.ERA, GregorianCalendar.BC);"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,123,"cal.set(Calendar.MILLISECOND, 7);"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,124,"LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,125,"assertEquals(expected, LocalDateTime.fromCalendarFields(cal));"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,128,public void testFactory_fromCalendarFields_null() throws Exception {
False,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,117,ublic void testFactory_FromDateFields_after1970() throws Exception {
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,136,public void testFactory_fromDateFields_after1970() throws Exception {
False,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,122,ry {
False,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,123,ocalDateTime.fromDateFields((Date) null);
False,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,124,ail();
False,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,125, catch (IllegalArgumentException ex) {}
False,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,128,ublic void testFactory_FromDateFields_before1970() throws Exception {
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,143,public void testFactory_fromDateFields_before1970() throws Exception {
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,150,public void testFactory_fromDateFields_beforeYearZero1() throws Exception {
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,151,"GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,152,"cal.set(Calendar.ERA, GregorianCalendar.BC);"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,153,"cal.set(Calendar.MILLISECOND, 7);"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,154,"LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,155,"assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,158,public void testFactory_fromDateFields_beforeYearZero3() throws Exception {
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,159,"GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,160,"cal.set(Calendar.ERA, GregorianCalendar.BC);"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,161,"cal.set(Calendar.MILLISECOND, 7);"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,162,"LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,163,"assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));"
True,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,166,public void testFactory_fromDateFields_null() throws Exception {
False,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,97,ublic void testFactory_FromCalendarFields() throws Exception {
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,97,public void testFactory_fromCalendarFields() throws Exception {
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,104,public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,105,"GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,106,"cal.set(Calendar.ERA, GregorianCalendar.BC);"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,107,"cal.set(Calendar.MILLISECOND, 7);"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,108,"LocalDate expected = new LocalDate(0, 2, 3);"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,109,"assertEquals(expected, LocalDate.fromCalendarFields(cal));"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,112,public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,113,"GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,114,"cal.set(Calendar.ERA, GregorianCalendar.BC);"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,115,"cal.set(Calendar.MILLISECOND, 7);"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,116,"LocalDate expected = new LocalDate(-2, 2, 3);"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,117,"assertEquals(expected, LocalDate.fromCalendarFields(cal));"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,120,public void testFactory_fromCalendarFields_null() throws Exception {
False,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,109,ublic void testFactory_FromDateFields() throws Exception {
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,128,public void testFactory_fromDateFields_after1970() throws Exception {
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,135,public void testFactory_fromDateFields_before1970() throws Exception {
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,136,"GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6);"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,137,"cal.set(Calendar.MILLISECOND, 7);"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,138,"LocalDate expected = new LocalDate(1969, 2, 3);"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,139,"assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,142,public void testFactory_fromDateFields_beforeYearZero1() throws Exception {
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,143,"GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,144,"cal.set(Calendar.ERA, GregorianCalendar.BC);"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,145,"cal.set(Calendar.MILLISECOND, 7);"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,146,"LocalDate expected = new LocalDate(0, 2, 3);"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,147,"assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,150,public void testFactory_fromDateFields_beforeYearZero3() throws Exception {
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,151,"GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,152,"cal.set(Calendar.ERA, GregorianCalendar.BC);"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,153,"cal.set(Calendar.MILLISECOND, 7);"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,154,"LocalDate expected = new LocalDate(-2, 2, 3);"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,155,"assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));"
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,158,public void testFactory_fromDateFields_null() throws Exception {
True,src/test/java/org/joda/time/TestLocalDate_Constructors.java,src/test/java/org/joda/time/TestLocalDate_Constructors.java,431,"@SuppressWarnings(""deprecation"")"

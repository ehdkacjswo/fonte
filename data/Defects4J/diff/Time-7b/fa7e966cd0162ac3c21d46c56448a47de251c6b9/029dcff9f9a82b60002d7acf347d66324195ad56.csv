is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,65, existing converter. Similar methods exist for duration converters.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,65,* existing converter. Similar methods exist for duration and interval
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,66,* converters.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,89,* The default interval converters are:
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,90,* <ul>
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,91,* <li>ReadableInterval
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,92,* <li>String
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,93,* </ul>
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,115,private ConverterSet iIntervalConverters;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,139,iIntervalConverters = new ConverterSet(new Converter[] {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,140,"ReadableIntervalConverter.INSTANCE,"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,141,"StringConverter.INSTANCE,"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,311,* Gets the best converter for the object specified.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,313,* @param object  the object to convert
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,314,* @return the converter to use
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,315,* @throws IllegalArgumentException if no suitable converter
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,316,* @throws IllegalStateException if multiple converters match the type
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,317,* equally well
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,319,public IntervalConverter getIntervalConverter(Object object) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,320,IntervalConverter converter =
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,321,(IntervalConverter)iIntervalConverters.select(object == null ? null : object.getClass());
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,322,if (converter != null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,323,return converter;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,325,"throw new IllegalArgumentException(""No interval converter found for type: "" +"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,326,"(object == null ? ""null"" : object.getClass().getName()));"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,331,* Gets a copy of the list of converters.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,333,"* @return the converters, a copy of the real data, never null"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,335,public IntervalConverter[] getIntervalConverters() {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,336,ConverterSet set = iIntervalConverters;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,337,IntervalConverter[] converters = new IntervalConverter[set.size()];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,338,set.copyInto(converters);
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,339,return converters;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,343,* Adds a converter to the set of converters. If a matching converter is
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,344,"* already in the set, the given converter replaces it. If the converter is"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,345,"* exactly the same as one already in the set, no changes are made."
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,346,* <p>
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,347,* The order in which converters are added is not relevent. The best
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,348,* converter is selected by examining the object hierarchy.
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,350,"* @param converter  the converter to add, null ignored"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,351,"* @return replaced converter, or null"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,353,public IntervalConverter addIntervalConverter(IntervalConverter converter) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,354,if (converter == null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,355,return null;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,357,IntervalConverter[] removed = new IntervalConverter[1];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,358,"iIntervalConverters = iIntervalConverters.add(converter, removed);"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,359,return removed[0];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,363,* Removes a converter from the set of converters. If the converter was
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,364,"* not in the set, no changes are made."
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,366,"* @param converter  the converter to remove, null ignored"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,367,"* @return replaced converter, or null"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,369,public IntervalConverter removeIntervalConverter(IntervalConverter converter) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,370,if (converter == null) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,371,return null;
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,373,IntervalConverter[] removed = new IntervalConverter[1];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,374,"iIntervalConverters = iIntervalConverters.remove(converter, removed);"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,375,return removed[0];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,379,"* Removes a converter from the set of converters, by index."
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,381,* @param index  the index to remove
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,382,"* @return replaced converter, or null"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,383,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,385,public IntervalConverter removeIntervalConverter(int index) {
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,386,IntervalConverter[] removed = new IntervalConverter[1];
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,387,"iIntervalConverters = iIntervalConverters.remove(index, removed);"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,388,return removed[0];
False,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,303,"DurationConverters.size() + "" duration converters]"";"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,398,"iDurationConverters.size() + "" duration converters,"" +"
True,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,JodaTime/src/java/org/joda/time/convert/ConverterManager.java,399,"iIntervalConverters.size() + "" interval converters]"";"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,5,* Copyright (c) 2001-03 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,10,* are met:
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,54,package org.joda.time.convert;
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,56,import org.joda.time.ReadWritableInterval;
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,59,* IntervalConverter defines how an object is converted to an interval.
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,61,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,62,* @since 1.0
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,64,public interface IntervalConverter extends Converter {
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,67,* Extracts interval endpoint values from an object of this converter's
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,68,"* type, and sets them into the given ReadWritableInterval."
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,70,* @param interval interval to get modified
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,71,"* @param object  the object to convert, must not be null"
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,72,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,JodaTime/src/java/org/joda/time/convert/IntervalConverter.java,74,"void setInto(ReadWritableInterval interval, Object object);"
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,56,import org.joda.time.DurationType;
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,59,import org.joda.time.ReadWritableInterval;
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,65,lass ReadableIntervalConverter implements DurationConverter {
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,67,"class ReadableIntervalConverter implements IntervalConverter, DurationConverter {"
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,98,* Selects a suitable duration type for the given object.
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,100,"* @param object  the object to examine, must not be null"
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,101,"* @return the duration type, never null"
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,102,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,104,public DurationType getDurationType(Object object) {
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,105,return ((ReadableInterval) object).getDuration().getDurationType();
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,108,"public void setInto(ReadWritableInterval writableInterval, Object object) {"
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,109,ReadableInterval interval = (ReadableInterval) object;
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,110,writableInterval.setStartMillis(interval.getStartMillis());
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,111,writableInterval.setEndMillis(interval.getEndMillis());
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,58,import org.joda.time.DurationType;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,59,import org.joda.time.MutableDuration;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,60,import org.joda.time.ReadableDuration;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,61,import org.joda.time.ReadableInstant;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,63,import org.joda.time.ReadWritableInterval;
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,72,"lass StringConverter extends AbstractConverter implements InstantConverter, DurationConverter {"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,77,class StringConverter extends AbstractConverter
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,78,"implements InstantConverter, DurationConverter, IntervalConverter {"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,161,* Selects a suitable duration type for the given object.
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,163,"* @param object  the object to examine, must not be null"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,164,"* @return the duration type, never null"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,165,* @throws ClassCastException if the object is invalid
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,167,public DurationType getDurationType(Object object) {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,168,String str = (String) object;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,169,if (str.indexOf('W') >= 0) {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,170,return DurationType.getYearWeekType();
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,172,return DurationType.getYearMonthType();
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,175,"public void setInto(ReadWritableInterval writableInterval, Object object) {"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,176,String str = (String) object;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,178,int separator = str.indexOf('/');
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,179,if (separator < 0) {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,180,"throw new IllegalArgumentException(""Format requires a '/' separator: "" + str);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,183,"String leftStr = str.substring(0, separator);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,184,if (leftStr.length() <= 0) {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,185,throw new IllegalArgumentException();
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,187,String rightStr = str.substring(separator + 1);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,188,if (rightStr.length() <= 0) {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,189,throw new IllegalArgumentException();
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,192,long startInstant;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,193,ReadableDuration duration;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,195,char c = leftStr.charAt(0);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,196,if (c == 'P' || c == 'p') {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,197,startInstant = 0;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,198,duration = ISODurationFormat.getInstance().standard()
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,199,".parseDuration(getDurationType(leftStr), leftStr);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,200,} else {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,201,startInstant = ISODateTimeFormat.getInstanceUTC().dateTimeParser().parseMillis(leftStr);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,202,duration = null;
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,205,c = rightStr.charAt(0);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,206,if (c == 'P' || c == 'p') {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,207,if (duration != null) {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,208,"throw new IllegalArgumentException(""Interval composed of two durations: "" + str);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,210,duration = ISODurationFormat.getInstance().standard()
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,211,".parseDuration(getDurationType(rightStr), rightStr);"
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,212,writableInterval.setStartMillis(startInstant);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,213,writableInterval.setDurationAfterStart(duration);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,214,} else {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,215,long endInstant = ISODateTimeFormat.getInstanceUTC().dateTimeParser().parseMillis(rightStr);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,216,writableInterval.setEndMillis(endInstant);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,217,if (duration == null) {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,218,writableInterval.setStartMillis(startInstant);
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,219,} else {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,220,writableInterval.setDurationBeforeEnd(duration);

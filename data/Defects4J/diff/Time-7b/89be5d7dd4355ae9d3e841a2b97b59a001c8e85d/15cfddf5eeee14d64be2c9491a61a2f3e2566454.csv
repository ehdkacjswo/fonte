is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,88,"/** An interval over all time, as represented by milliseconds. */"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,89,"public static final Interval ALWAYS = new Interval(Long.MIN_VALUE, Long.MAX_VALUE);"
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,72,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,73,* Methods that are passed an interval as a parameter will treat <code>null</code>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,74,* as a zero length interval at the current instant in time.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,148, @param interval  the time interval to compare to
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,151,"* @param interval  the time interval to compare to, null means now"
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,150, @throws IllegalArgumentException if the interval is null
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,160, @param interval  the time interval to compare to
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,162,"* @param interval  the time interval to compare to, null means now"
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,162, @throws IllegalArgumentException if the interval is null
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,179,* Is this time interval entirely after the specified interval.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,180,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,181,* Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,183,"* @param interval  the interval to compare to, null means now"
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,184,* @return true if this time interval is after the interval specified
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,186,boolean isAfter(ReadableInterval interval);
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,199,* Is this time interval entirely before the specified interval.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,200,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,201,* Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,203,"* @param interval  the interval to compare to, null means now"
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,204,* @return true if this time interval is before the interval specified
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,206,boolean isBefore(ReadableInterval interval);
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,190,eturn contains(DateTimeUtils.currentTimeMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,190,return containsNow();
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,200, @param interval  the time interval to compare to
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,200,"* @param interval  the time interval to compare to, null means now"
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,202, @throws IllegalArgumentException if the interval is null
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,206,"hrow new IllegalArgumentException(""The time interval must not be null"");"
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,205,return containsNow();
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,221, @param interval  the time interval to compare to
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,220,"* @param interval  the time interval to compare to, null means now"
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,223, @throws IllegalArgumentException if the interval is null
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,227,"hrow new IllegalArgumentException(""The time interval must not be null"");"
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,225,return containsNow();
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,271,eturn isBefore(DateTimeUtils.currentTimeMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,269,return isBeforeNow();
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,275,* Is this time interval entirely before the specified instant.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,276,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,277,* Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,279,"* @param instant  the instant to compare to, null means now"
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,280,* @return true if this time interval is before the interval specified
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,282,public boolean isBefore(ReadableInterval interval) {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,283,if (interval == null) {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,284,return isBeforeNow();
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,286,return isBefore(interval.getStartMillis());
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,310,eturn isAfter(DateTimeUtils.currentTimeMillis());
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,324,return isAfterNow();
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,330,* Is this time interval entirely after the specified interval.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,331,* <p>
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,332,* Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,334,"* @param instant  the instant to compare to, null means now"
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,335,* @return true if this time interval is after the interval specified
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,337,public boolean isAfter(ReadableInterval interval) {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,338,if (interval == null) {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,339,return isAfterNow();
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,341,return isAfter(interval.getEndMillis());
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,275,ry {
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,276,est.contains((ReadableInterval) null);
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,277,ail();
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,278, catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,275,"assertEquals(true, test.contains((ReadableInterval) null));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,300,ry {
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,301,est.overlaps((ReadableInterval) null);
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,302,ail();
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,303, catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,297,"assertEquals(true, test.overlaps((ReadableInterval) null));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,341,"ssertEquals(false, test.isBefore(null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,335,"assertEquals(false, test.isBefore((ReadableInstant) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,338,public void testIsBefore_RInterval() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,339,"Interval test = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,341,"assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1 - 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,342,"assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,343,"assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1 + 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,345,"assertEquals(false, test.isBefore(new Interval(TEST_TIME2 - 1, Long.MAX_VALUE)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,346,"assertEquals(true, test.isBefore(new Interval(TEST_TIME2, Long.MAX_VALUE)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,347,"assertEquals(true, test.isBefore(new Interval(TEST_TIME2 + 1, Long.MAX_VALUE)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,349,"assertEquals(false, test.isBefore((ReadableInterval) null));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,379,"ssertEquals(false, test.isAfter(null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,387,"assertEquals(false, test.isAfter((ReadableInstant) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,390,public void testIsAfter_RInterval() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,391,"Interval test = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,393,"assertEquals(true, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1 - 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,394,"assertEquals(false, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,395,"assertEquals(false, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1 + 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,397,"assertEquals(false, test.isAfter(new Interval(TEST_TIME2 - 1, Long.MAX_VALUE)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,398,"assertEquals(false, test.isAfter(new Interval(TEST_TIME2, Long.MAX_VALUE)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,399,"assertEquals(false, test.isAfter(new Interval(TEST_TIME2 + 1, Long.MAX_VALUE)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,401,"assertEquals(false, test.isAfter((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,515,public void testAlways() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,516,Interval test = Interval.ALWAYS;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,517,"assertEquals(Long.MIN_VALUE, test.getStartMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,518,"assertEquals(Long.MAX_VALUE, test.getEndMillis());"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,604,ublic boolean isBefore(long millisInstant) {
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,605,eturn false;
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,607,ublic boolean isBeforeNow() {
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,608,eturn false;
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,613,ublic boolean isAfter(long millisInstant) {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,607,public boolean isBefore(ReadableInterval interval) {
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,616,ublic boolean isAfterNow() {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,610,public boolean isAfter(ReadableInstant instant) {
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,619,ublic boolean isAfter(ReadableInstant instant) {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,613,public boolean isAfter(ReadableInterval interval) {
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,275,ry {
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,276,est.contains((ReadableInterval) null);
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,277,ail();
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,278, catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,275,"assertEquals(true, test.contains((ReadableInterval) null));"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,300,ry {
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,301,est.overlaps((ReadableInterval) null);
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,302,ail();
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,303, catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,297,"assertEquals(true, test.overlaps((ReadableInterval) null));"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,341,"ssertEquals(false, test.isBefore(null));"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,335,"assertEquals(false, test.isBefore((ReadableInstant) null));"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,338,public void testIsBefore_RInterval() {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,339,"MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,341,"assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1 - 1)));"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,342,"assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1)));"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,343,"assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1 + 1)));"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,345,"assertEquals(false, test.isBefore(new Interval(TEST_TIME2 - 1, Long.MAX_VALUE)));"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,346,"assertEquals(true, test.isBefore(new Interval(TEST_TIME2, Long.MAX_VALUE)));"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,347,"assertEquals(true, test.isBefore(new Interval(TEST_TIME2 + 1, Long.MAX_VALUE)));"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,349,"assertEquals(false, test.isBefore((ReadableInterval) null));"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,379,"ssertEquals(false, test.isAfter(null));"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,387,"assertEquals(false, test.isAfter((ReadableInstant) null));"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,390,public void testIsAfter_RInterval() {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,391,"MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,393,"assertEquals(true, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1 - 1)));"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,394,"assertEquals(false, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1)));"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,395,"assertEquals(false, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1 + 1)));"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,397,"assertEquals(false, test.isAfter(new Interval(TEST_TIME2 - 1, Long.MAX_VALUE)));"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,398,"assertEquals(false, test.isAfter(new Interval(TEST_TIME2, Long.MAX_VALUE)));"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,399,"assertEquals(false, test.isAfter(new Interval(TEST_TIME2 + 1, Long.MAX_VALUE)));"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,401,"assertEquals(false, test.isAfter((ReadableInterval) null));"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,614,ublic boolean isBefore(long millisInstant) {
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,615,eturn false;
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,617,ublic boolean isBeforeNow() {
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,618,eturn false;
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,623,ublic boolean isAfter(long millisInstant) {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,617,public boolean isBefore(ReadableInterval interval) {
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,626,ublic boolean isAfterNow() {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,620,public boolean isAfter(ReadableInstant instant) {
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,629,ublic boolean isAfter(ReadableInstant instant) {
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,623,public boolean isAfter(ReadableInterval interval) {

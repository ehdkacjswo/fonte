is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,260, The String formats are described by {@link ISODateTimeFormat#dateElementParser()}.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,260,* The String formats are described by {@link ISODateTimeFormat#localDateParser()}.
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,280, The String formats are described by {@link ISODateTimeFormat#dateElementParser()}.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,280,* The String formats are described by {@link ISODateTimeFormat#localDateParser()}.
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,291,"nt[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.dateElementParser());"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,291,"int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateParser());"
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,305, The String formats are described by {@link ISODateTimeFormat#dateElementParser()}.
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,305,* The String formats are described by {@link ISODateTimeFormat#localDateParser()}.
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,316,"nt[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.dateElementParser());"
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,316,"int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateParser());"
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,254, The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,254,* The String formats are described by {@link ISODateTimeFormat#localDateOptionalTimeParser()}.
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,274, The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,274,* The String formats are described by {@link ISODateTimeFormat#localDateOptionalTimeParser()}.
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,285,"nt[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.dateOptionalTimeParser());"
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,285,"int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser());"
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,299, The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,299,* The String formats are described by {@link ISODateTimeFormat#localDateOptionalTimeParser()}.
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,310,"nt[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.dateOptionalTimeParser());"
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,310,"int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser());"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,289, The String formats are described by {@link ISODateTimeFormat#timeParser()}.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,289,* The String formats are described by {@link ISODateTimeFormat#localTimeParser()}.
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,309, The String formats are described by {@link ISODateTimeFormat#timeParser()}.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,309,* The String formats are described by {@link ISODateTimeFormat#localTimeParser()}.
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,320,"nt[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.timeParser());"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,320,"int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localTimeParser());"
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,334, The String formats are described by {@link ISODateTimeFormat#timeParser()}.
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,334,* The String formats are described by {@link ISODateTimeFormat#localTimeParser()}.
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,345,"nt[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.timeParser());"
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,345,"int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localTimeParser());"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,132,"ltp, // local time parser"
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,133,otp; // date optional time parser
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,134,"dotp, // date optional time parser"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,135,ldotp; // local date optional time parser
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,533, Returns a generic ISO date parser. It accepts formats described by
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,534, the following syntax:
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,535,* Returns a generic ISO date parser for parsing dates with a possible zone.
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,536,* It accepts formats described by the following syntax:
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,548,DateTimeParser tOffset = new DateTimeFormatterBuilder()
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,549,.appendLiteral('T')
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,550,.append(offsetElement()).toParser();
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,548,appendOptional
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,549,new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,550,appendLiteral('T')
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,551,append(offsetElement())
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,552,toParser())
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,553,.appendOptional(tOffset)
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,559, Returns a generic ISO date parser. It accepts formats described by
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,560, the following syntax:
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,560,* Returns a generic ISO date parser for parsing local dates.
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,561,* It accepts formats described by the following syntax:
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,562,* <pre>
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,563,* date-element      = std-date-element | ord-date-element | week-date-element
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,564,* std-date-element  = yyyy ['-' MM ['-' dd]]
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,565,* ord-date-element  = yyyy ['-' DDD]
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,566,* week-date-element = xxxx '-W' ww ['-' e]
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,567,* </pre>
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,568,* @since 1.3
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,570,public static DateTimeFormatter localDateParser() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,571,return dateElementParser();
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,575,* Returns a generic ISO date parser for parsing dates.
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,576,* It accepts formats described by the following syntax:
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,596, Returns a generic ISO time parser. It accepts formats described by
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,597, the following syntax:
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,612,* Returns a generic ISO time parser for parsing times with a possible zone.
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,613,* It accepts formats described by the following syntax:
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,610,appendOptional
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,611,new DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,612,appendLiteral('T')
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,613,toParser())
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,626,.appendOptional(literalTElement().getParser())
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,635,* Returns a generic ISO time parser for parsing local times.
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,636,* It accepts formats described by the following syntax:
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,637,* <pre>
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,638,* time           = ['T'] time-element
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,639,* time-element   = HH [minute-element] | [fraction]
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,640,* minute-element = ':' mm [second-element] | [fraction]
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,641,* second-element = ':' ss [fraction]
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,642,"* fraction       = ('.' | ',') digit+"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,643,* </pre>
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,644,* @since 1.3
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,646,public static DateTimeFormatter localTimeParser() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,647,if (ltp == null) {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,648,ltp = new DateTimeFormatterBuilder()
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,649,.appendOptional(literalTElement().getParser())
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,650,.append(timeElementParser())
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,651,.toFormatter();
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,653,return ltp;
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,688, datetime          = time | (date-element [time | ('T' offset)])
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,723,* datetime          = time | date-opt-time
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,725,* date-opt-time     = date-element ['T' [time-element] [offset]]
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,712,"append(null, new DateTimeParser[] {"
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,713,"ime,"
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,714,ew DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,715,append(dateElementParser())
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,716,"append(null, new DateTimeParser[] {"
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,717,"ime,"
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,718,ew DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,719,appendLiteral('T')
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,720,append(offsetElement())
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,721,"toParser(),"
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,722,ull
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,724,toParser()
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,747,".append(null, new DateTimeParser[] {time, dateOptionalTimeParser().getParser()})"
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,733, the time is optional. It accepts formats described by the following syntax:
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,755,* the time is optional. This parser can parse zoned datetimes.
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,756,* It accepts formats described by the following syntax:
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,735, datetime          = date-element ['T' time-element [offset]])
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,758,* date-opt-time     = date-element ['T' [time-element] [offset]]
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,744," offset            = 'Z' | (('+' | '-') HH [':' mm [':' ss [('.' | ',') SSS]]])"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,768,* @since 1.3
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,772,DateTimeParser timeOrOffset = new DateTimeFormatterBuilder()
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,773,.appendLiteral('T')
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,774,.appendOptional(timeElementParser().getParser())
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,775,.appendOptional(offsetElement().getParser())
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,776,.toParser();
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,751,appendOptional(
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,752,ew DateTimeFormatterBuilder()
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,753,appendLiteral('T')
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,754,append(timeElementParser())
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,755,appendOptional(offsetElement().getParser())
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,756,toParser())
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,779,.appendOptional(timeOrOffset)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,786,* Returns a generic ISO datetime parser where the date is mandatory and
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,787,* the time is optional. This parser only parses local datetimes.
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,788,* It accepts formats described by the following syntax:
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,789,* <pre>
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,790,* datetime          = date-element ['T' time-element]
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,791,* date-element      = std-date-element | ord-date-element | week-date-element
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,792,* std-date-element  = yyyy ['-' MM ['-' dd]]
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,793,* ord-date-element  = yyyy ['-' DDD]
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,794,* week-date-element = xxxx '-W' ww ['-' e]
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,795,* time-element      = HH [minute-element] | [fraction]
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,796,* minute-element    = ':' mm [second-element] | [fraction]
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,797,* second-element    = ':' ss [fraction]
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,798,"* fraction          = ('.' | ',') digit+"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,799,* </pre>
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,800,* @since 1.3
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,802,public static DateTimeFormatter localDateOptionalTimeParser() {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,803,if (ldotp == null) {
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,804,DateTimeParser time = new DateTimeFormatterBuilder()
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,805,.appendLiteral('T')
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,806,.append(timeElementParser())
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,807,.toParser();
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,808,ldotp = new DateTimeFormatterBuilder()
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,809,.append(dateElementParser())
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,810,.appendOptional(time)
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,811,.toFormatter();
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,813,return ldotp;
False,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,268,public void testConstructor_ObjectString1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,269,"DateTime test = new DateTime(""1972-12-03"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,270,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,271,"assertEquals(1972, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,272,"assertEquals(12, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,273,"assertEquals(3, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,274,"assertEquals(0, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,275,"assertEquals(0, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,276,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,277,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,280,public void testConstructor_ObjectString2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,281,"DateTime test = new DateTime(""2006-06-03T+14:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,282,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,283,"assertEquals(2006, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,284,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,285,"assertEquals(2, test.getDayOfMonth());  // timezone"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,286,"assertEquals(11, test.getHourOfDay());  // test zone is +1, so shift back (14 - 1) hours from midnight"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,287,"assertEquals(0, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,288,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,289,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,292,public void testConstructor_ObjectString3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,293,"DateTime test = new DateTime(""1972-12-03T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,294,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,295,"assertEquals(1972, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,296,"assertEquals(12, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,297,"assertEquals(3, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,298,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,299,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,300,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,301,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,304,public void testConstructor_ObjectString4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,305,"DateTime test = new DateTime(""2006-06-03T10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,306,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,307,"assertEquals(2006, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,308,"assertEquals(6, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,309,"assertEquals(2, test.getDayOfMonth());  // timezone"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,310,"assertEquals(21, test.getHourOfDay());  // test zone is +1, so shift back (14 - 1) hours from 10am"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,311,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,312,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,313,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,316,public void testConstructor_ObjectString5() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,317,"DateTime test = new DateTime(""T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,318,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,319,"assertEquals(1970, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,320,"assertEquals(1, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,321,"assertEquals(1, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,322,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,323,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,324,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,325,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,328,public void testConstructor_ObjectString6() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,329,"DateTime test = new DateTime(""T10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,330,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,331,"assertEquals(1969, test.getYear());  // timezone"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,332,"assertEquals(12, test.getMonthOfYear());  // timezone"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,333,"assertEquals(31, test.getDayOfMonth());  // timezone"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,334,"assertEquals(21, test.getHourOfDay());  // test zone is +1, so shift back (14 - 1) hours from 10am"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,335,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,336,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,337,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,340,public void testConstructor_ObjectString7() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,341,"DateTime test = new DateTime(""10"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,342,"assertEquals(ISOChronology.getInstance(), test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,343,"assertEquals(10, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,344,"assertEquals(1, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,345,"assertEquals(1, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,346,"assertEquals(0, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,347,"assertEquals(0, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,348,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,349,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,352,public void testConstructor_ObjectStringEx1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,353,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,354,"new DateTime(""10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,355,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,356,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,357,// expected
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,361,public void testConstructor_ObjectStringEx2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,362,try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,363,"new DateTime(""10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,364,fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,365,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,366,// expected
False,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,364,ublic void testConstructor_ObjectString5() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,365,"ocalDateTime test = new LocalDateTime(""1972-04-06T10:20:30.040+06:00"");"
False,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,366,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,367,"ssertEquals(1972, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,368,"ssertEquals(4, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,369,"ssertEquals(6, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,370,"ssertEquals(10 + OFFSET_MOSCOW - 6, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,371,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,372,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,373,"ssertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,364,public void testConstructor_ObjectStringEx1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,365,try {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,366,"new LocalDateTime(""1970-04-06T+14:00"");"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,367,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,368,} catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,376,ublic void testConstructor_ObjectStringEx1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,371,public void testConstructor_ObjectStringEx2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,372,try {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,373,"new LocalDateTime(""1970-04-06T10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,374,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,375,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,378,public void testConstructor_ObjectStringEx3() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,383,ublic void testConstructor_ObjectStringEx2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,385,public void testConstructor_ObjectStringEx4() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,390,ublic void testConstructor_ObjectStringEx3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,392,public void testConstructor_ObjectStringEx5() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,392,"ew LocalDateTime(""1970-04-06T+14:00"");"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,394,"new LocalDateTime(""10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,395,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,396,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,399,public void testConstructor_ObjectStringEx6() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,400,try {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java,401,"new LocalDateTime(""10:20:30.040+14:00"");"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,26,mport org.joda.time.chrono.CopticChronology;
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,39,rivate static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,260,public void testConstructor_ObjectString3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,261,"LocalDate test = new LocalDate(""1972-02"");"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,262,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,263,"assertEquals(1972, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,264,"assertEquals(2, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,265,"assertEquals(1, test.getDayOfMonth());"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,264,"ew LocalDate(""1970-04-06T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,270,"new LocalDate(""1970-04-06T+14:00"");"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,271,"ew LocalDate(""1970-04-06T10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,277,"new LocalDate(""1970-04-06T10:20:30.040"");"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,278,"ew LocalDate(""T10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,284,"new LocalDate(""1970-04-06T10:20:30.040+14:00"");"
False,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,285,"ew LocalDate(""1970-04-06T+14:00"");"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,291,"new LocalDate(""T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,292,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,293,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,296,public void testConstructor_ObjectStringEx5() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,297,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,298,"new LocalDate(""T10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,299,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,300,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,303,public void testConstructor_ObjectStringEx6() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,304,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,305,"new LocalDate(""10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,306,fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,307,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,310,public void testConstructor_ObjectStringEx7() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,311,try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java,312,"new LocalDate(""10:20:30.040+14:00"");"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,330,"ocalTime test = new LocalTime(""10:20:30.040+04:00"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,330,"LocalTime test = new LocalTime(""T10:20:30.040"");"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,332,"ssertEquals(10 + OFFSET_LONDON - 4, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,332,"assertEquals(10, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,339,"ocalTime test = new LocalTime(""T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,339,"LocalTime test = new LocalTime(""10:20"");"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,343,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,344,"ssertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,343,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,344,"assertEquals(0, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,348,"ocalTime test = new LocalTime(""T10:20:30.040+04:00"");"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,349,"ssertEquals(ISO_UTC, test.getChronology());"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,350,"ssertEquals(10 + OFFSET_LONDON - 4, test.getHourOfDay());"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,351,"ssertEquals(20, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,352,"ssertEquals(30, test.getSecondOfMinute());"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,353,"ssertEquals(40, test.getMillisOfSecond());"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,356,ublic void testConstructor_ObjectString5() throws Throwable {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,357,"ocalTime test = new LocalTime(""10:20"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,348,"LocalTime test = new LocalTime(""10"");"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,360,"ssertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,351,"assertEquals(0, test.getMinuteOfHour());"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,374,"ew LocalTime(""1970-04-06T10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,365,"new LocalTime(""1970-04-06T+14:00"");"
False,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,381,"ew LocalTime(""1970-04-06T+14:00"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,372,"new LocalTime(""1970-04-06T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,373,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,374,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,377,public void testConstructor_ObjectStringEx4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,378,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,379,"new LocalTime(""1970-04-06T10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,380,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,381,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,384,public void testConstructor_ObjectStringEx5() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,385,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,386,"new LocalTime(""T10:20:30.040+04:00"");"
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,387,fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,388,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,391,public void testConstructor_ObjectStringEx6() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,392,try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java,393,"new LocalTime(""10:20:30.040+04:00"");"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,353,public void testConstructor_ObjectString1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,354,"TimeOfDay test = new TimeOfDay(""10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,355,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,356,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,357,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,358,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,359,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,362,public void testConstructor_ObjectString2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,363,"TimeOfDay test = new TimeOfDay(""10:20:30.040+04:00"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,364,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,365,"assertEquals(10 + OFFSET - 4, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,366,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,367,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,368,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,371,public void testConstructor_ObjectString3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,372,"TimeOfDay test = new TimeOfDay(""T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,373,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,374,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,375,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,376,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,377,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,380,public void testConstructor_ObjectString4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,381,"TimeOfDay test = new TimeOfDay(""T10:20:30.040+04:00"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,382,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,383,"assertEquals(10 + OFFSET - 4, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,384,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,385,"assertEquals(30, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,386,"assertEquals(40, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,389,public void testConstructor_ObjectString5() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,390,"TimeOfDay test = new TimeOfDay(""10:20"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,391,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,392,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,393,"assertEquals(20, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,394,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,395,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,398,public void testConstructor_ObjectString6() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,399,"TimeOfDay test = new TimeOfDay(""10"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,400,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,401,"assertEquals(10, test.getHourOfDay());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,402,"assertEquals(0, test.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,403,"assertEquals(0, test.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,404,"assertEquals(0, test.getMillisOfSecond());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,407,public void testConstructor_ObjectStringEx1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,408,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,409,"new TimeOfDay(""1970-04-06"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,410,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,411,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,414,public void testConstructor_ObjectStringEx2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,415,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,416,"new TimeOfDay(""1970-04-06T+14:00"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,417,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,418,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,421,public void testConstructor_ObjectStringEx3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,422,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,423,"new TimeOfDay(""1970-04-06T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,424,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,425,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,428,public void testConstructor_ObjectStringEx4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,429,try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,430,"new TimeOfDay(""1970-04-06T10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,431,fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,432,} catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,2,*  Copyright 2001-2006 Stephen Colebourne
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,236, Test constructor (Object)
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,248, Test constructor (Object=null)
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,252,public void testConstructor_ObjectString1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,253,"YearMonthDay test = new YearMonthDay(""1972-12-03"");"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,254,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,255,"assertEquals(1972, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,256,"assertEquals(12, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,257,"assertEquals(3, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,260,public void testConstructor_ObjectString2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,261,"YearMonthDay test = new YearMonthDay(""1972-12-03T+14:00"");"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,262,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,263,"assertEquals(1972, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,264,"assertEquals(12, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,265,"assertEquals(2, test.getDayOfMonth());  // timezone"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,268,public void testConstructor_ObjectString3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,269,"YearMonthDay test = new YearMonthDay(""1972-12-03T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,270,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,271,"assertEquals(1972, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,272,"assertEquals(12, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,273,"assertEquals(3, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,276,public void testConstructor_ObjectString4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,277,"YearMonthDay test = new YearMonthDay(""1972-12-03T10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,278,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,279,"assertEquals(1972, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,280,"assertEquals(12, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,281,"assertEquals(2, test.getDayOfMonth());  // timezone"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,284,public void testConstructor_ObjectString5() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,285,"YearMonthDay test = new YearMonthDay(""10"");"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,286,"assertEquals(ISO_UTC, test.getChronology());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,287,"assertEquals(10, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,288,"assertEquals(1, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,289,"assertEquals(1, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,292,public void testConstructor_ObjectStringEx1() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,293,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,294,"new YearMonthDay(""T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,295,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,296,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,297,// expected
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,301,public void testConstructor_ObjectStringEx2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,302,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,303,"new YearMonthDay(""T10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,304,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,305,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,306,// expected
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,310,public void testConstructor_ObjectStringEx3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,311,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,312,"new YearMonthDay(""10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,313,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,314,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,315,// expected
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,319,public void testConstructor_ObjectStringEx4() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,320,try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,321,"new YearMonthDay(""10:20:30.040+14:00"");"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,322,fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,323,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,324,// expected
False,JodaTime/src/test/org/joda/time/format/TestAll.java,JodaTime/src/test/org/joda/time/format/TestAll.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/format/TestAll.java,JodaTime/src/test/org/joda/time/format/TestAll.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/format/TestAll.java,JodaTime/src/test/org/joda/time/format/TestAll.java,43,suite.addTest(TestISODateTimeFormatParsing.suite());
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,2,*  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,5,*  you may not use this file except in compliance with the License.
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,6,*  You may obtain a copy of the License at
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,13,*  See the License for the specific language governing permissions and
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,14,*  limitations under the License.
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,16,package org.joda.time.format;
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,18,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,19,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,21,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,22,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,24,import org.joda.time.DateTime;
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,25,import org.joda.time.DateTimeConstants;
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,26,import org.joda.time.DateTimeUtils;
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,27,import org.joda.time.DateTimeZone;
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,28,import org.joda.time.Period;
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,29,import org.joda.time.PeriodType;
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,32,* This class is a Junit unit test for ISODateTimeFormat parsing.
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,34,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,36,public class TestISODateTimeFormatParsing extends TestCase {
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,38,private DateTimeZone originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,39,private TimeZone originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,40,private Locale originalLocale = null;
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,42,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,43,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,46,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,47,return new TestSuite(TestISODateTimeFormatParsing.class);
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,50,public TestISODateTimeFormatParsing(String name) {
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,51,super(name);
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,54,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,55,originalDateTimeZone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,56,originalTimeZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,57,originalLocale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,58,"DateTimeZone.setDefault(DateTimeZone.forID(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,59,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,60,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,63,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,64,DateTimeZone.setDefault(originalDateTimeZone);
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,65,TimeZone.setDefault(originalTimeZone);
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,66,Locale.setDefault(originalLocale);
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,67,originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,68,originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,69,originalLocale = null;
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,73,public void test_dateParser() {
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,74,DateTimeFormatter parser = ISODateTimeFormat.dateParser();
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,75,"assertParse(parser, true, ""2006-06-09"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,76,"assertParse(parser, true, ""2006-W27-3"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,77,"assertParse(parser, true, ""2006-123"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,78,"assertParse(parser, true, ""2006-06-09T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,79,"assertParse(parser, true, ""2006-W27-3T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,80,"assertParse(parser, true, ""2006-123T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,82,"assertParse(parser, false, ""2006-06-09T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,83,"assertParse(parser, false, ""2006-W27-3T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,84,"assertParse(parser, false, ""2006-123T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,85,"assertParse(parser, false, ""2006-06-09T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,86,"assertParse(parser, false, ""2006-W27-3T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,87,"assertParse(parser, false, ""2006-123T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,89,"assertParse(parser, false, ""T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,90,"assertParse(parser, false, ""T10.5"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,91,"assertParse(parser, false, ""T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,92,"assertParse(parser, false, ""T10.5+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,94,"assertParse(parser, false, ""10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,95,"assertParse(parser, false, ""10.5"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,96,"assertParse(parser, false, ""10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,97,"assertParse(parser, false, ""10.5+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,101,public void test_localDateParser() {
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,102,DateTimeFormatter parser = ISODateTimeFormat.localDateParser();
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,103,"assertParse(parser, true, ""2006-06-09"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,104,"assertParse(parser, true, ""2006-W27-3"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,105,"assertParse(parser, true, ""2006-123"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,106,"assertParse(parser, false, ""2006-06-09T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,107,"assertParse(parser, false, ""2006-W27-3T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,108,"assertParse(parser, false, ""2006-123T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,110,"assertParse(parser, false, ""2006-06-09T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,111,"assertParse(parser, false, ""2006-W27-3T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,112,"assertParse(parser, false, ""2006-123T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,113,"assertParse(parser, false, ""2006-06-09T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,114,"assertParse(parser, false, ""2006-W27-3T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,115,"assertParse(parser, false, ""2006-123T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,117,"assertParse(parser, false, ""T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,118,"assertParse(parser, false, ""T10.5"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,119,"assertParse(parser, false, ""T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,120,"assertParse(parser, false, ""T10.5+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,122,"assertParse(parser, false, ""10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,123,"assertParse(parser, false, ""10.5"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,124,"assertParse(parser, false, ""10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,125,"assertParse(parser, false, ""10.5+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,129,public void test_dateElementParser() {
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,130,DateTimeFormatter parser = ISODateTimeFormat.dateElementParser();
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,131,"assertParse(parser, true, ""2006-06-09"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,132,"assertParse(parser, true, ""2006-W27-3"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,133,"assertParse(parser, true, ""2006-123"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,134,"assertParse(parser, false, ""2006-06-09T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,135,"assertParse(parser, false, ""2006-W27-3T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,136,"assertParse(parser, false, ""2006-123T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,138,"assertParse(parser, false, ""2006-06-09T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,139,"assertParse(parser, false, ""2006-W27-3T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,140,"assertParse(parser, false, ""2006-123T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,141,"assertParse(parser, false, ""2006-06-09T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,142,"assertParse(parser, false, ""2006-W27-3T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,143,"assertParse(parser, false, ""2006-123T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,145,"assertParse(parser, false, ""T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,146,"assertParse(parser, false, ""T10.5"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,147,"assertParse(parser, false, ""T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,148,"assertParse(parser, false, ""T10.5+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,150,"assertParse(parser, false, ""10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,151,"assertParse(parser, false, ""10.5"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,152,"assertParse(parser, false, ""10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,153,"assertParse(parser, false, ""10.5+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,157,public void test_timeParser() {
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,158,DateTimeFormatter parser = ISODateTimeFormat.timeParser();
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,159,"assertParse(parser, false, ""2006-06-09"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,160,"assertParse(parser, false, ""2006-W27-3"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,161,"assertParse(parser, false, ""2006-123"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,162,"assertParse(parser, false, ""2006-06-09T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,163,"assertParse(parser, false, ""2006-W27-3T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,164,"assertParse(parser, false, ""2006-123T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,166,"assertParse(parser, false, ""2006-06-09T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,167,"assertParse(parser, false, ""2006-W27-3T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,168,"assertParse(parser, false, ""2006-123T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,169,"assertParse(parser, false, ""2006-06-09T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,170,"assertParse(parser, false, ""2006-W27-3T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,171,"assertParse(parser, false, ""2006-123T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,173,"assertParse(parser, true, ""T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,174,"assertParse(parser, true, ""T10.5"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,175,"assertParse(parser, true, ""T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,176,"assertParse(parser, true, ""T10.5+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,178,"assertParse(parser, true, ""10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,179,"assertParse(parser, true, ""10.5"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,180,"assertParse(parser, true, ""10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,181,"assertParse(parser, true, ""10.5+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,185,public void test_localTimeParser() {
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,186,DateTimeFormatter parser = ISODateTimeFormat.localTimeParser();
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,187,"assertParse(parser, false, ""2006-06-09"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,188,"assertParse(parser, false, ""2006-W27-3"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,189,"assertParse(parser, false, ""2006-123"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,190,"assertParse(parser, false, ""2006-06-09T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,191,"assertParse(parser, false, ""2006-W27-3T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,192,"assertParse(parser, false, ""2006-123T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,194,"assertParse(parser, false, ""2006-06-09T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,195,"assertParse(parser, false, ""2006-W27-3T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,196,"assertParse(parser, false, ""2006-123T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,197,"assertParse(parser, false, ""2006-06-09T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,198,"assertParse(parser, false, ""2006-W27-3T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,199,"assertParse(parser, false, ""2006-123T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,201,"assertParse(parser, true, ""T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,202,"assertParse(parser, true, ""T10.5"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,203,"assertParse(parser, false, ""T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,204,"assertParse(parser, false, ""T10.5+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,206,"assertParse(parser, true, ""10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,207,"assertParse(parser, true, ""10.5"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,208,"assertParse(parser, false, ""10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,209,"assertParse(parser, false, ""10.5+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,213,public void test_timeElementParser() {
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,214,DateTimeFormatter parser = ISODateTimeFormat.timeElementParser();
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,215,"assertParse(parser, false, ""2006-06-09"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,216,"assertParse(parser, false, ""2006-W27-3"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,217,"assertParse(parser, false, ""2006-123"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,218,"assertParse(parser, false, ""2006-06-09T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,219,"assertParse(parser, false, ""2006-W27-3T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,220,"assertParse(parser, false, ""2006-123T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,222,"assertParse(parser, false, ""2006-06-09T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,223,"assertParse(parser, false, ""2006-W27-3T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,224,"assertParse(parser, false, ""2006-123T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,225,"assertParse(parser, false, ""2006-06-09T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,226,"assertParse(parser, false, ""2006-W27-3T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,227,"assertParse(parser, false, ""2006-123T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,229,"assertParse(parser, false, ""T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,230,"assertParse(parser, false, ""T10.5"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,231,"assertParse(parser, false, ""T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,232,"assertParse(parser, false, ""T10.5+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,234,"assertParse(parser, true, ""10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,235,"assertParse(parser, true, ""10.5"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,236,"assertParse(parser, false, ""10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,237,"assertParse(parser, false, ""10.5+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,241,public void test_dateTimeParser() {
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,242,DateTimeFormatter parser = ISODateTimeFormat.dateTimeParser();
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,243,"assertParse(parser, true, ""2006-06-09"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,244,"assertParse(parser, true, ""2006-W27-3"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,245,"assertParse(parser, true, ""2006-123"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,246,"assertParse(parser, true, ""2006-06-09T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,247,"assertParse(parser, true, ""2006-W27-3T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,248,"assertParse(parser, true, ""2006-123T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,250,"assertParse(parser, true, ""2006-06-09T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,251,"assertParse(parser, true, ""2006-W27-3T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,252,"assertParse(parser, true, ""2006-123T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,253,"assertParse(parser, true, ""2006-06-09T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,254,"assertParse(parser, true, ""2006-W27-3T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,255,"assertParse(parser, true, ""2006-123T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,257,"assertParse(parser, true, ""T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,258,"assertParse(parser, true, ""T10.5"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,259,"assertParse(parser, true, ""T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,260,"assertParse(parser, true, ""T10.5+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,262,"assertParse(parser, false, ""10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,263,"assertParse(parser, false, ""10.5"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,264,"assertParse(parser, false, ""10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,265,"assertParse(parser, false, ""10.5+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,269,public void test_dateOptionalTimeParser() {
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,270,DateTimeFormatter parser = ISODateTimeFormat.dateOptionalTimeParser();
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,271,"assertParse(parser, true, ""2006-06-09"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,272,"assertParse(parser, true, ""2006-W27-3"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,273,"assertParse(parser, true, ""2006-123"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,274,"assertParse(parser, true, ""2006-06-09T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,275,"assertParse(parser, true, ""2006-W27-3T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,276,"assertParse(parser, true, ""2006-123T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,278,"assertParse(parser, true, ""2006-06-09T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,279,"assertParse(parser, true, ""2006-W27-3T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,280,"assertParse(parser, true, ""2006-123T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,281,"assertParse(parser, true, ""2006-06-09T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,282,"assertParse(parser, true, ""2006-W27-3T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,283,"assertParse(parser, true, ""2006-123T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,285,"assertParse(parser, false, ""T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,286,"assertParse(parser, false, ""T10.5"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,287,"assertParse(parser, false, ""T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,288,"assertParse(parser, false, ""T10.5+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,290,"assertParse(parser, false, ""10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,291,"assertParse(parser, false, ""10.5"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,292,"assertParse(parser, false, ""10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,293,"assertParse(parser, false, ""10.5+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,297,public void test_localDateOptionalTimeParser() {
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,298,DateTimeFormatter parser = ISODateTimeFormat.localDateOptionalTimeParser();
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,299,"assertParse(parser, true, ""2006-06-09"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,300,"assertParse(parser, true, ""2006-W27-3"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,301,"assertParse(parser, true, ""2006-123"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,302,"assertParse(parser, false, ""2006-06-09T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,303,"assertParse(parser, false, ""2006-W27-3T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,304,"assertParse(parser, false, ""2006-123T+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,306,"assertParse(parser, true, ""2006-06-09T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,307,"assertParse(parser, true, ""2006-W27-3T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,308,"assertParse(parser, true, ""2006-123T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,309,"assertParse(parser, false, ""2006-06-09T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,310,"assertParse(parser, false, ""2006-W27-3T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,311,"assertParse(parser, false, ""2006-123T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,313,"assertParse(parser, false, ""T10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,314,"assertParse(parser, false, ""T10.5"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,315,"assertParse(parser, false, ""T10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,316,"assertParse(parser, false, ""T10.5+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,318,"assertParse(parser, false, ""10:20:30.040"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,319,"assertParse(parser, false, ""10.5"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,320,"assertParse(parser, false, ""10:20:30.040+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,321,"assertParse(parser, false, ""10.5+02:00"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,325,"private void assertParse(DateTimeFormatter parser, boolean expected, String str) {"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,326,if (expected) {
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,327,parser.parseMillis(str);
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,328,} else {
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,329,try {
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,330,parser.parseMillis(str);
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,331,fail();
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,332,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java,333,// expected

is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,20,import org.joda.time.DateTimeUtils;
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,22,import org.joda.time.ReadablePartial;
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,203,"public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {"
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,204,// overridden as superclass algorithm can't handle
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,205,// 2004-02-29 + 48 months -> 2008-02-29 type dates
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,206,if (valueToAdd == 0) {
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,207,return values;
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,209,if (DateTimeUtils.isContiguous(partial)) {
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,210,long instant = 0L;
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,211,"for (int i = 0, isize = partial.size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,212,"instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);"
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,214,"instant = add(instant, valueToAdd);"
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,215,"return iChronology.get(partial, instant);"
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,216,} else {
True,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java,217,"return super.add(partial, fieldIndex, values, valueToAdd);"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,640,"public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,641,// overridden as superclass algorithm can't handle
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,642,// 2004-02-29 + 48 months -> 2008-02-29 type dates
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,643,if (valueToAdd == 0) {
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,644,return values;
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,646,if (DateTimeUtils.isContiguous(partial)) {
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,647,long instant = 0L;
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,648,"for (int i = 0, isize = partial.size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,649,"instant = partial.getFieldType(i).getField(GJChronology.this).set(instant, values[i]);"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,651,"instant = add(instant, valueToAdd);"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,652,"return GJChronology.this.get(partial, instant);"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,653,} else {
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,654,"return super.add(partial, fieldIndex, values, valueToAdd);"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,786,eturn iGregorianField.getMaximumValue(partial);
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,804,"long instant = GJChronology.getInstanceUTC().set(partial, 0L);"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,805,return getMaximumValue(instant);
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,790,"eturn iGregorianField.getMaximumValue(partial, values);"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,809,Chronology chrono = GJChronology.getInstanceUTC();
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,810,long instant = 0L;
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,811,"for (int i = 0, isize = partial.size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,812,DateTimeField field = partial.getFieldType(i).getField(chrono);
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,813,if (values[i] <= field.getMaximumValue(instant)) {
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,814,"instant = field.set(instant, values[i]);"
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,817,return getMaximumValue(instant);
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,319,f (getRangeDurationField() != nextField.getDurationField()) {
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,319,if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,339,f (getRangeDurationField() != nextField.getDurationField()) {
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,339,if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,402,f (getRangeDurationField() != nextField.getDurationField()) {
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,402,if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,424,f (getRangeDurationField() != nextField.getDurationField()) {
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,424,if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,30,"rivate static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,484,"rivate void check(YearMonthDay test, int hour, int min, int sec) {"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,485,"ssertEquals(hour, test.getYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,486,"ssertEquals(min, test.getMonthOfYear());"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,487,"ssertEquals(sec, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,482,"private void check(YearMonthDay test, int year, int month, int day) {"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,483,"assertEquals(year, test.getYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,484,"assertEquals(month, test.getMonthOfYear());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,485,"assertEquals(day, test.getDayOfMonth());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,24,import org.joda.time.DateMidnight;
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,33,import org.joda.time.TimeOfDay;
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,414,public void testYearEndAddDays() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,415,"testAdd(""1582-11-05"", DurationFieldType.days(), 28, ""1582-12-03"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,416,"testAdd(""1582-12-05"", DurationFieldType.days(), 28, ""1583-01-02"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,418,"testAdd(""2005-11-05"", DurationFieldType.days(), 28, ""2005-12-03"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,419,"testAdd(""2005-12-05"", DurationFieldType.days(), 28, ""2006-01-02"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,444,if (type == DurationFieldType.years() ||
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,445,type == DurationFieldType.months() ||
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,446,type == DurationFieldType.days()) {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,447,"YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,448,"YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,449,"assertEquals(ymdEnd, ymdStart.withFieldAdded(type, amt));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,450,"assertEquals(ymdStart, ymdEnd.withFieldAdded(type, -amt));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,454,public void testTimeOfDayAdd() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,455,"TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,456,"TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,457,"assertEquals(end, start.plusHours(22));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,458,"assertEquals(start, end.minusHours(22));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,459,"assertEquals(end, start.plusMinutes(22 * 60));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,460,"assertEquals(start, end.minusMinutes(22 * 60));"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,463,public void testMaximumValue() {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,464,"DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,465,while (dt.getYear() < 1590) {
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,466,dt = dt.plusDays(1);
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,467,YearMonthDay ymd = dt.toYearMonthDay();
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,468,"assertEquals(dt.year().getMaximumValue(), ymd.year().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,469,"assertEquals(dt.monthOfYear().getMaximumValue(), ymd.monthOfYear().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,470,"assertEquals(dt.dayOfMonth().getMaximumValue(), ymd.dayOfMonth().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,24,import org.joda.time.DateMidnight;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,27,import org.joda.time.DateTimeFieldType;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,30,import org.joda.time.DurationField;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,31,import org.joda.time.DurationFieldType;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,33,import org.joda.time.Partial;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,34,import org.joda.time.TimeOfDay;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,35,import org.joda.time.YearMonthDay;
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,323,public void testCutoverAddYears() {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,324,"testAdd(""1582-01-01"", DurationFieldType.years(), 1, ""1583-01-01"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,325,"testAdd(""1582-02-15"", DurationFieldType.years(), 1, ""1583-02-15"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,326,"testAdd(""1582-02-28"", DurationFieldType.years(), 1, ""1583-02-28"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,327,"testAdd(""1582-03-01"", DurationFieldType.years(), 1, ""1583-03-01"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,328,"testAdd(""1582-09-30"", DurationFieldType.years(), 1, ""1583-09-30"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,329,"testAdd(""1582-10-01"", DurationFieldType.years(), 1, ""1583-10-01"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,330,"testAdd(""1582-10-04"", DurationFieldType.years(), 1, ""1583-10-04"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,331,"testAdd(""1582-10-15"", DurationFieldType.years(), 1, ""1583-10-15"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,332,"testAdd(""1582-10-16"", DurationFieldType.years(), 1, ""1583-10-16"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,333,"testAdd(""1580-01-01"", DurationFieldType.years(), 4, ""1584-01-01"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,334,"testAdd(""1580-02-29"", DurationFieldType.years(), 4, ""1584-02-29"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,335,"testAdd(""1580-10-01"", DurationFieldType.years(), 4, ""1584-10-01"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,336,"testAdd(""1580-10-10"", DurationFieldType.years(), 4, ""1584-10-10"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,337,"testAdd(""1580-10-15"", DurationFieldType.years(), 4, ""1584-10-15"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,338,"testAdd(""1580-12-31"", DurationFieldType.years(), 4, ""1584-12-31"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,341,public void testAddMonths() {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,342,"testAdd(""1582-01-01"", DurationFieldType.months(), 1, ""1582-02-01"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,343,"testAdd(""1582-01-01"", DurationFieldType.months(), 6, ""1582-07-01"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,344,"testAdd(""1582-01-01"", DurationFieldType.months(), 12, ""1583-01-01"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,345,"testAdd(""1582-11-15"", DurationFieldType.months(), 1, ""1582-12-15"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,346,"testAdd(""1582-09-04"", DurationFieldType.months(), 2, ""1582-11-04"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,347,"testAdd(""1582-09-05"", DurationFieldType.months(), 2, ""1582-11-05"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,348,"testAdd(""1582-09-10"", DurationFieldType.months(), 2, ""1582-11-10"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,349,"testAdd(""1582-09-15"", DurationFieldType.months(), 2, ""1582-11-15"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,350,"testAdd(""1580-01-01"", DurationFieldType.months(), 48, ""1584-01-01"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,351,"testAdd(""1580-02-29"", DurationFieldType.months(), 48, ""1584-02-29"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,352,"testAdd(""1580-10-01"", DurationFieldType.months(), 48, ""1584-10-01"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,353,"testAdd(""1580-10-10"", DurationFieldType.months(), 48, ""1584-10-10"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,354,"testAdd(""1580-10-15"", DurationFieldType.months(), 48, ""1584-10-15"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,355,"testAdd(""1580-12-31"", DurationFieldType.months(), 48, ""1584-12-31"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,358,"private void testAdd(String start, DurationFieldType type, int amt, String end) {"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,359,"DateTime dtStart = new DateTime(start, ISOChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,360,"DateTime dtEnd = new DateTime(end, ISOChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,361,"assertEquals(dtEnd, dtStart.withFieldAdded(type, amt));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,362,"assertEquals(dtStart, dtEnd.withFieldAdded(type, -amt));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,364,DurationField field = type.getField(ISOChronology.getInstanceUTC());
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,365,"int diff = field.getDifference(dtEnd.getMillis(), dtStart.getMillis());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,366,"assertEquals(amt, diff);"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,368,if (type == DurationFieldType.years() ||
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,369,type == DurationFieldType.months() ||
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,370,type == DurationFieldType.days()) {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,371,"YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,372,"YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,373,"assertEquals(ymdEnd, ymdStart.withFieldAdded(type, amt));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,374,"assertEquals(ymdStart, ymdEnd.withFieldAdded(type, -amt));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,378,public void testTimeOfDayAdd() {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,379,"TimeOfDay start = new TimeOfDay(12, 30);"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,380,"TimeOfDay end = new TimeOfDay(10, 30);"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,381,"assertEquals(end, start.plusHours(22));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,382,"assertEquals(start, end.minusHours(22));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,383,"assertEquals(end, start.plusMinutes(22 * 60));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,384,"assertEquals(start, end.minusMinutes(22 * 60));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,387,public void testPartialDayOfYearAdd() {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,388,"Partial start = new Partial().with(DateTimeFieldType.year(), 2000).with(DateTimeFieldType.dayOfYear(), 366);"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,389,"Partial end = new Partial().with(DateTimeFieldType.year(), 2004).with(DateTimeFieldType.dayOfYear(), 366);"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,390,"assertEquals(end, start.withFieldAdded(DurationFieldType.days(), 365 + 365 + 365 + 366));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,391,"assertEquals(start, end.withFieldAdded(DurationFieldType.days(), -(365 + 365 + 365 + 366)));"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,394,public void testMaximumValue() {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,395,"DateMidnight dt = new DateMidnight(1570, 1, 1);"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,396,while (dt.getYear() < 1590) {
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,397,dt = dt.plusDays(1);
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,398,YearMonthDay ymd = dt.toYearMonthDay();
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,399,"assertEquals(dt.year().getMaximumValue(), ymd.year().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,400,"assertEquals(dt.monthOfYear().getMaximumValue(), ymd.monthOfYear().getMaximumValue());"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,401,"assertEquals(dt.dayOfMonth().getMaximumValue(), ymd.dayOfMonth().getMaximumValue());"

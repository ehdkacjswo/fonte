is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,92,private String iMessage;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,112,iMessage = super.getMessage();
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,133,iMessage = super.getMessage();
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,154,iMessage = super.getMessage();
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,172,iMessage = super.getMessage();
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,190,iMessage = super.getMessage();
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,208,iMessage = super.getMessage();
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,288,public String getMessage() {
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,289,return iMessage;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,293,* Provide additional detail by prepending a message to the existing
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,294,* message. A colon is separator is automatically inserted between the
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,295,* messages.
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,297,public void prependMessage(String message) {
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,298,if (iMessage == null) {
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,299,iMessage = message;
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,300,} else if (message != null) {
True,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,JodaTime/src/java/org/joda/time/IllegalFieldValueException.java,301,"iMessage = message + "": "" + iMessage;"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,606,"ateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,606,DateTimeParserBucket bucket = new DateTimeParserBucket
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,607,"(instantLocal, chrono, iLocale, iPivotYear);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,608,nstant.setMillis(bucket.computeMillis());
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,609,"instant.setMillis(bucket.computeMillis(false, text));"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,638,eturn bucket.computeMillis(true);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,639,"return bucket.computeMillis(true, text);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,671,ong millis = bucket.computeMillis(true);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,672,"long millis = bucket.computeMillis(true, text);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,710,ong millis = bucket.computeMillis(true);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,711,"long millis = bucket.computeMillis(true, text);"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,27,import org.joda.time.IllegalFieldValueException;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,278,eturn computeMillis(false);
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,279,"return computeMillis(false, null);"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,291,"return computeMillis(resetFields, null);"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,295,* Computes the parsed datetime by setting the saved fields.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,296,"* This method is idempotent, but it is not thread-safe."
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,298,"* @param resetFields false by default, but when true, unsaved field values are cleared"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,299,"* @param text optional text being parsed, to be included in any error message"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,300,* @return milliseconds since 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,301,* @throws IllegalArgumentException if any field is out of range
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,303,"public long computeMillis(boolean resetFields, String text) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,299,or (int i=0; i<count; i++) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,300,"illis = savedFields[i].set(millis, resetFields);"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,313,try {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,314,for (int i=0; i<count; i++) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,315,"millis = savedFields[i].set(millis, resetFields);"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,317,} catch (IllegalFieldValueException e) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,318,if (text != null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,319,"e.prependMessage(""Cannot parse \"""" + text + '""');"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,321,throw e;
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,309,hrow new IllegalArgumentException
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,310,"""Illegal instant due to time zone offset transition"");"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,330,String message =
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,331,"""Illegal instant due to time zone offset transition ("" + iZone + ')';"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,332,if (text != null) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,333,"message = ""Cannot parse \"""" + text + ""\"": "" + message;"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,335,throw new IllegalArgumentException(message);

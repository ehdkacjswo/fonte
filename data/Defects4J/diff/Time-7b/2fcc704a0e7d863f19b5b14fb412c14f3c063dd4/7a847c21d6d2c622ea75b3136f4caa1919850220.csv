is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,2,  Copyright 2001-2012 Stephen Colebourne
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,969, @throws IllegalArgumentException if the zone has no equivalent local time
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,969,* @throws IllegalInstantException if the zone has no equivalent local time
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,996,"hrow new IllegalArgumentException(""Illegal instant due to time zone offset transition: "" +"
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,997,"ateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(instantLocal)) +"
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,998," ("" + getID() + "")"");"
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,996,"throw new IllegalInstantException(instantLocal, getID());"
False,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,1151, catch (IllegalArgumentException ex) {
True,src/main/java/org/joda/time/DateTimeZone.java,src/main/java/org/joda/time/DateTimeZone.java,1149,} catch (IllegalInstantException ex) {
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,4,"*  Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,5,*  you may not use this file except in compliance with the License.
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,6,*  You may obtain a copy of the License at
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,10,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,11,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,12,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,13,*  See the License for the specific language governing permissions and
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,14,*  limitations under the License.
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,16,package org.joda.time;
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,18,import org.joda.time.format.DateTimeFormat;
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,21,* Exception thrown when attempting to create an instant or date-time that cannot exist.
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,22,* <p>
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,23,* Classes like {@code DateTime} only store valid date-times.
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,24,* One of the cases where validity is important is handling daylight savings time (DST).
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,25,"* In many places DST is used, where the local clock moves forward by an hour in spring and back by an hour in autumn/fall."
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,26,"* This means that in spring, there is a ""gap"" where a local time does not exist."
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,27,* <p>
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,28,"* This exception refers to this gap, and it means that your application tried to create"
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,29,* a date-time inside the gap - a time that did not exist.
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,30,"* Since Joda-Time objects must be valid, this is not allowed."
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,31,* <p>
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,32,* Possible solutions may be as follows:<br />
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,33,"* Use <code>LocalDateTime</code>, as all local date-times are valid.<br />"
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,34,"* When converting a <code>LocalDate</code> to a <code>DateTime</code>, then use <code>toDateTimeAsStartOfDay()</code>"
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,35,* as this handles and manages any gaps.<br />
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,36,"* When parsing, use <code>parseLocalDateTime()</code> if the string being parsed has no time-zone."
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,38,* @author Stephen Colebourne
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,39,* @since 2.2
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,41,public class IllegalInstantException extends IllegalArgumentException {
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,43,/** Serialization lock. */
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,44,private static final long serialVersionUID = 2858712538216L;
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,48,* Constructor.
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,50,* @param message  the message
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,52,public IllegalInstantException(String message) {
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,53,super(message);
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,57,* Constructor.
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,59,* @param instantLocal  the local instant
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,60,"* @param zoneId  the time-zone ID, may be null"
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,62,"public IllegalInstantException(long instantLocal, String zoneId) {"
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,63,"super(createMessage(instantLocal, zoneId));"
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,66,"private static String createMessage(long instantLocal, String zoneId) {"
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,67,"String localDateTime = DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(instantLocal));"
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,68,"String zone = (zoneId != null ? "" ("" + zoneId + "")"" : """");"
True,src/main/java/org/joda/time/IllegalInstantException.java,src/main/java/org/joda/time/IllegalInstantException.java,69,"return ""Illegal instant due to time zone offset transition (daylight savings time 'gap'): "" + localDateTime + zone;"
False,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,2,  Copyright 2001-2009 Stephen Colebourne
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,27,mport org.joda.time.Instant;
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,27,import org.joda.time.IllegalInstantException;
False,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,31,mport org.joda.time.format.DateTimeFormat;
False,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,135, @param instant instant from 1970-01-01T00:00:00 local time
False,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,136, @return instant from 1970-01-01T00:00:00Z
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,134,* @param localInstant  the instant from 1970-01-01T00:00:00 local time
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,135,* @return the instant from 1970-01-01T00:00:00Z
False,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,138,rivate long localToUTC(long instant) {
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,137,private long localToUTC(long localInstant) {
False,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,140,nt offset = zone.getOffsetFromLocal(instant);
False,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,141,nstant -= offset;
False,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,142,f (offset != zone.getOffset(instant)) {
False,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,143,hrow new IllegalArgumentException
False,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,144,"""Illegal instant due to time zone offset transition: "" +"
False,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,145,"ateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(instant)));"
False,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,147,eturn instant;
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,139,int offset = zone.getOffsetFromLocal(localInstant);
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,140,localInstant -= offset;
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,141,if (offset != zone.getOffset(localInstant)) {
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,142,"throw new IllegalInstantException(localInstant, zone.getID());"
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,144,return localInstant;
False,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,469,"hrow new IllegalFieldValueException(iField.getType(), Integer.valueOf(value),"
False,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,470,"Illegal instant due to time zone offset transition: "" +"
False,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,471,"ateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(localInstant)) +"
False,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,472," ("" + iZone.getID() + "")"");"
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,466,"IllegalInstantException cause = new IllegalInstantException(localInstant,  iZone.getID());"
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,467,"IllegalFieldValueException ex = new IllegalFieldValueException(iField.getType(), Integer.valueOf(value), cause.getMessage());"
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,468,ex.initCause(cause);
True,src/main/java/org/joda/time/chrono/ZonedChronology.java,src/main/java/org/joda/time/chrono/ZonedChronology.java,469,throw ex;
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,2,  Copyright 2001-2011 Stephen Colebourne
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,2,*  Copyright 2001-2013 Stephen Colebourne
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,29,import org.joda.time.IllegalInstantException;
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,385,tring message =
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,386,"Illegal instant due to time zone offset transition ("" + iZone + ')';"
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,386,"String message = ""Illegal instant due to time zone offset transition ("" + iZone + ')';"
False,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,390,hrow new IllegalArgumentException(message);
True,src/main/java/org/joda/time/format/DateTimeParserBucket.java,src/main/java/org/joda/time/format/DateTimeParserBucket.java,390,throw new IllegalInstantException(message);
False,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,2,  Copyright 2001-2012 Stephen Colebourne
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,2,*  Copyright 2001-2013 Stephen Colebourne
False,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,227, catch (IllegalArgumentException ex) {
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,227,} catch (IllegalInstantException ex) {
False,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,236, catch (IllegalArgumentException ex) {
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,236,} catch (IllegalInstantException ex) {
False,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,256, catch (IllegalArgumentException ex) {
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,256,} catch (IllegalInstantException ex) {
False,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,443, catch (IllegalArgumentException ex) {
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,443,} catch (IllegalInstantException ex) {
False,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,452, catch (IllegalArgumentException ex) {
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,452,} catch (IllegalInstantException ex) {
False,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,471, catch (IllegalArgumentException ex) {
True,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,src/test/java/org/joda/time/TestDateTimeZoneCutover.java,471,} catch (IllegalInstantException ex) {

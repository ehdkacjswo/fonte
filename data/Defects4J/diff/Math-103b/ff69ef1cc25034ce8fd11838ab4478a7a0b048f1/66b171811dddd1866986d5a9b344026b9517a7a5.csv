is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,46, Find a zero in the given interval.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,47, <p>
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,48, Throws <code>ConvergenceException</code> if the values of the function
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,49, at the endpoints of the interval have the same sign.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,46,* Find a zero in the given interval with an initial guess.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,47,* <p>Throws <code>IllegalArgumentException</code> if the values of the
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,48,* function at the three points have the same sign (note that it is
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,49,* allowed to have endpoints with the same signe if the initial point has
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,50,* opposite sign function-wise).</p>
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,53, @param initial the start value to use (ignored).
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,54,* @param initial the start value to use (must be set to x0 if no
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,55,* initial point is known).
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,55, @throws MaxIterationsExceededException the maximum iteration count is exceeded
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,57,* @throws MaxIterationsExceededException the maximum iteration count
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,58,* is exceeded
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,62,* (even if it <em>is</em> a root)
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,63,"eturn solve(min, max);"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,67,if (((initial - min) * (max -initial)) < 0) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,68,"throw new IllegalArgumentException(""Initial guess is not in search"""
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,69,"+ "" interval."" + ""  Initial: "" + initial"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,70,"+  ""  Endpoints: ["" + min + "","" + max + ""]"");"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,73,// return the initial guess if it is good enough
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,74,double yInitial = f.value(initial);
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,75,if (Math.abs(yInitial) <= functionValueAccuracy) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,76,"setResult(initial, 0);"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,77,return result;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,80,// return the first endpoint if it is good enough
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,81,double yMin = f.value(min);
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,82,if (Math.abs(yMin) <= functionValueAccuracy) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,83,"setResult(yMin, 0);"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,84,return result;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,87,// reduce interval if min and initial bracket the root
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,88,if (yInitial * yMin < 0) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,89,"return solve(min, yMin, initial, yInitial, min, yMin);"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,92,// return the second endpoint if it is good enough
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,93,double yMax = f.value(max);
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,94,if (Math.abs(yMax) <= functionValueAccuracy) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,95,"setResult(yMax, 0);"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,96,return result;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,99,// reduce interval if initial and max bracket the root
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,100,if (yInitial * yMax < 0) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,101,"return solve(initial, yInitial, max, yMax, initial, yInitial);"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,104,// full Brent algorithm starting with provided initial guess
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,105,"return solve(min, yMin, max, yMax, initial, yInitial);"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,88,/ Index 0 is the old approximation for the root.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,89,/ Index 1 is the last calculated approximation  for the root.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,90,/ Index 2 is a bracket for the root with respect to x1.
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,91,ouble x0 = min;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,92,ouble x1 = max;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,93,ouble y0;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,94,ouble y1;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,95,0 = f.value(x0);
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,96,1 = f.value(x1);
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,131,double yMin = f.value(min);
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,132,double yMax = f.value(max);
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,99,f (y0 * y1 >= 0) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,135,if (yMin * yMax >= 0) {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,103,"  Values: ["" + y0 + "","" + y1 + ""]"");"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,139,"""  Values: ["" + yMin + "","" + yMax + ""]"");"
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,106,ouble x2 = x0;
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,107,ouble y2 = y0;
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,142,// solve using only the first endpoint as initial guess
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,143,"return solve(min, yMin, max, yMax, min, yMin);"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,148,* Find a zero starting search according to the three provided points.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,149,* @param x0 old approximation for the root
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,150,* @param y0 function value at the approximation for the root
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,151,* @param x1 last calculated approximation for the root
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,152,* @param y1 function value at the last calculated approximation
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,153,* for the root
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,154,* @param x2 bracket point (must be set to x0 if no bracket point is
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,155,"* known, this will force starting with linear interpolation)"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,156,* @param y3 function value at the bracket point.
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,157,* @return the value where the function is zero
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,158,* @throws MaxIterationsExceededException if the maximum iteration count
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,159,* is exceeded
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,160,* @throws FunctionEvaluationException if an error occurs evaluating
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,161,* the function
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,163,"private double solve(double x0, double y0,"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,164,"double x1, double y1,"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,165,"double x2, double y2)"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,166,"throws MaxIterationsExceededException, FunctionEvaluationException {"
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,174,// use the bracket point if is better than last approximation
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,288,public void testInitialGuess() throws MathException {
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,290,MonitoredFunction f = new MonitoredFunction(new QuinticFunction());
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,291,UnivariateRealSolver solver = new BrentSolver(f);
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,292,double result;
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,294,// no guess
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,295,"result = solver.solve(0.6, 7.0);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,296,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,297,int referenceCallsCount = f.getCallsCount();
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,298,assertTrue(referenceCallsCount >= 13);
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,300,"// invalid guess (it *is* a root, but outside of the range)"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,301,try {
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,302,"result = solver.solve(0.6, 7.0, 0.0);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,303,"fail(""an IllegalArgumentException was expected"");"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,304,} catch (IllegalArgumentException iae) {
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,305,// expected behaviour
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,306,} catch (Exception e) {
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,307,"fail(""wrong exception caught: "" + e.getMessage());"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,310,// bad guess
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,311,f.setCallsCount(0);
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,312,"result = solver.solve(0.6, 7.0, 0.61);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,313,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,314,assertTrue(f.getCallsCount() > referenceCallsCount);
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,316,// good guess
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,317,f.setCallsCount(0);
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,318,"result = solver.solve(0.6, 7.0, 0.999999);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,319,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,320,assertTrue(f.getCallsCount() < referenceCallsCount);
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,322,// perfect guess
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,323,f.setCallsCount(0);
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,324,"result = solver.solve(0.6, 7.0, 1.0);"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,325,"assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,326,"assertEquals(0, solver.getIterationCount());"
True,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,src/test/org/apache/commons/math/analysis/BrentSolverTest.java,327,"assertEquals(1, f.getCallsCount());"
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,17,package org.apache.commons.math.analysis;
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,19,import org.apache.commons.math.FunctionEvaluationException;
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,22,* Wrapper class for counting functions calls.
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,24,"* @version $Revision: 480442 $ $Date: 2006-11-29 08:21:22 +0100 (mer., 29 nov. 2006) $"
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,26,public class MonitoredFunction implements UnivariateRealFunction {
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,28,public MonitoredFunction(UnivariateRealFunction f) {
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,29,callsCount = 0;
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,30,this.f = f;
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,33,public void setCallsCount(int callsCount) {
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,34,this.callsCount = callsCount;
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,37,public int getCallsCount() {
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,38,return callsCount;
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,41,public double value(double x) throws FunctionEvaluationException {
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,42,++callsCount;
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,43,return f.value(x);
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,46,private int callsCount;
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,47,private UnivariateRealFunction f;

is_addition,old_file_path,new_file_path,line_num,content
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,2,"* The Apache Software License, Version 1.1"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,5,* reserved.
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,8,"* modification, are permitted provided that the following conditions"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,9,* are met:
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,16,*    the documentation and/or other materials provided with the
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,17,*    distribution.
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,20,"*    any, must include the following acknowledgement:"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,21,"*       ""This product includes software developed by the"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,28,*    from this software without prior written permission. For written
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,29,"*    permission, please contact apache@apache.org."
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,33,*    permission of the Apache Software Foundation.
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,46,* SUCH DAMAGE.
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,49,* This software consists of voluntary contributions made by many
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,51,"* information on the Apache Software Foundation, please see"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,52,* <http://www.apache.org/>.
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,55,package org.apache.commons.math.linear;
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,59,"* Solves a linear equitation with symmetrical, positiv definit"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,60,* coefficient matrix by Cholesky decomposition.
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,61,* <p>
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,62,"* For every symmetric, positiv definit matrix <code>M</code> there is a"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,63,* lower triangular matrix <code>L</code> so that <code>L*L^T=M</code>.
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,64,* <code>L</code> is called the <i>Cholesky decomposition</i> of <code>M</code>.
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,65,* For any constant vector <code>c</code> it can be used to solve
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,66,* the linear equitation <code>M*x=L*(L^T*x)=c</code>.<br>
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,67,* Compared to the LU-decompoistion the Cholesky methods requires only half
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,68,* the number of operations.
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,69,* <p>
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,70,"* @author Stefan Koeberle, 11/2003"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,72,public class CholeskySolver {
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,74,private double numericalZero = 10E-12;
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,76,/** The lower triangular matrix */
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,77,private RealMatrixImpl decompMatrix;
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,81,* Creates a new instance of CholeskySolver
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,83,public CholeskySolver() {
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,84,}//constructor CholeskySolver
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,88,* Every double <code>d</code> satisfying
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,89,* <code>java.lang.Math.abs(d) <= numericalZero</code>
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,90,* is considered equal to <code>0.0d.</code>
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,92,public void setNumericalZero(double numericalZero) {
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,93,this.numericalZero = numericalZero;
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,94,}//setNumericalZero
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,97,* See <code>setNumericalZero</code>
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,99,public double getNumericalZero() {
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,100,return numericalZero;
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,101,}//getNumericalZero
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,105,"* Calculates the Cholesky-decomposition of the symmetrical, positiv definit"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,106,* matrix <code>M</code>.
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,107,* <p>
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,108,* The decomposition matrix is internally stored.
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,109,* <p>
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,110,* @throws IllegalArgumentException   if <code>M</code> ist not square or
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,111,*                                    not positiv definit
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,113,public void decompose(RealMatrix m)
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,114,throws IllegalArgumentException {
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,116,decompMatrix = null;
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,117,double[][] mval = m.getData();
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,118,int numRows = m.getRowDimension();
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,119,int numCols = m.getColumnDimension();
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,120,if (numRows != numCols)
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,121,"throw new IllegalArgumentException(""matrix is not square"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,122,double[][] decomp = new double[numRows][numCols];
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,123,double sum;
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,125,//for all columns
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,126,for (int col=0; col<numCols; col++) {
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,128,//diagonal element
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,129,sum = mval[col][col];
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,130,for (int k=0; k<col; k++)
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,131,sum = sum - decomp[col][k]*decomp[col][k];
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,132,if (sum <= numericalZero) {
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,133,throw new IllegalArgumentException(
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,134,"""Matrix is not positiv definit"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,136,decomp[col][col] += Math.sqrt(sum);
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,138,//column below diagonal
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,139,for (int row=col+1; row<numRows; row++) {
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,140,sum = mval[row][col];
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,141,for (int k=0; k<col; k++)
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,142,sum = sum - decomp[col][k]*decomp[row][k];
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,143,decomp[row][col] = sum/decomp[col][col];
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,144,}//for
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,146,}//for all columns
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,148,decompMatrix = new RealMatrixImpl(decomp);
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,150,}//decompose
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,154,* Returns the last calculated decomposition matrix.
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,155,* <p>
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,156,* Caution: Every call of this Method will return the same object.
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,157,* Decomposing another matrix will generate a new one.
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,159,public RealMatrixImpl getDecomposition() {
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,160,return decompMatrix;
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,161,}//getDecomposition
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,165,* Returns the solution for a linear system with constant vector <code>c</code>.
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,166,* <p>
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,167,"* This method solves a linear system <code>M*x=c</code> for a symmetrical,"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,168,* positiv definit coefficient matrix <code>M</code>. Before using this
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,169,* method the matrix <code>M</code> must have been decomposed.
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,170,* <p>
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,171,* @throws IllegalStateException    if this methode is called before
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,172,*                                  a matrix was decomposed
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,173,* @throws IllegalArgumentException if the dimension of <code>c</code> doesn't
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,174,*                                  match the row dimension of <code>M</code>
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,176,public double[] solve(double[] c)
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,177,"throws IllegalStateException, IllegalArgumentException {"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,179,if (decompMatrix == null) {
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,180,"throw new IllegalStateException(""no decomposed matrix available"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,181,}//if
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,182,if (decompMatrix.getColumnDimension() != c.length)
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,183,"throw new IllegalArgumentException(""matrix dimension mismatch"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,185,double[][] decomp = decompMatrix.getData();
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,186,double[] x = new double[decomp.length];
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,187,double sum;
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,189,//forward elimination
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,190,for (int i=0; i<x.length; i++) {
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,191,sum = c[i];
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,192,for (int k=0; k<i; k++)
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,193,sum = sum - decomp[i][k]*x[k];
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,194,x[i] = sum / decomp[i][i];
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,195,}//forward elimination
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,197,//backward elimination
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,198,for (int i=x.length-1; i>=0; i--) {
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,199,sum = x[i];
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,200,for (int k=i+1; k<x.length; k++)
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,201,sum = sum - decomp[k][i]*x[k];
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,202,x[i] = sum / decomp[i][i];
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,203,}//backward elimination
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,205,return x;
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,206,}//solve
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,210,"* Returns the solution for a linear system with a symmetrical,"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,211,* positiv definit coefficient matrix <code>M</code> and
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,212,* constant vector <code>c</code>.
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,213,* <p>
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,214,"* As a side effect, the Cholesky-decomposition <code>L*L^T=M</code> is"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,215,* calculated and internally stored.
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,216,* <p>
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,217,* This is a convenience method for <code><pre>
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,218,*   solver.decompose(m);
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,219,*   solver.solve(c);
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,220,* </pre></code>
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,221,"* @throws IllegalArgumentException if M ist not square, not positive definit"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,222,*                                  or the dimensions of <code>M</code> and
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,223,*                                  <code>c</code> don't match.
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,225,"public double[] solve(RealMatrix m, double[] c)"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,226,throws IllegalArgumentException {
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,227,decompose(m);
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,228,return solve(c);
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,229,}//solve
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,233,* Returns the determinant of the a matrix <code>M</code>.
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,234,* <p>
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,235,* Before using this  method the matrix <code>M</code> must
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,236,* have been decomposed.
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,237,* <p>
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,238,* @throws IllegalStateException  if this method is called before
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,239,*                                a matrix was decomposed
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,241,public double getDeterminant() {
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,243,if (decompMatrix == null) {
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,244,"throw new IllegalStateException(""no decomposed matrix available"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,245,}//if
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,247,double[][] data = decompMatrix.getData();
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,248,double res = 1.0d;
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,249,for (int i=0; i<data.length; i++) {
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,250,res *= data[i][i];
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,251,}//for
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,252,res = res*res;
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,254,return res;
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,255,}//getDeterminant
True,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,src/experimental/org/apache/commons/math/linear/CholeskySolver.java,257,}//class CholeskySolver
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,2,"* The Apache Software License, Version 1.1"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,5,* reserved.
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,9,* are met:
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,16,*    the documentation and/or other materials provided with the
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,17,*    distribution.
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,20,"*    any, must include the following acknowledgement:"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,21,"*       ""This product includes software developed by the"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,28,*    from this software without prior written permission. For written
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,29,"*    permission, please contact apache@apache.org."
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,32,"*    nor may ""Apache"" appear in their name without prior written"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,33,*    permission of the Apache Software Foundation.
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,46,* SUCH DAMAGE.
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,49,* This software consists of voluntary contributions made by many
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,52,* <http://www.apache.org/>.
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,55,package org.apache.commons.math.linear;
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,57,import junit.framework.Test;
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,58,import junit.framework.TestCase;
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,59,import junit.framework.TestSuite;
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,60,import junit.textui.TestRunner;
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,63,* Test cases for the {@link CholeskySolver} class.
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,64,* <p>
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,65,"* @author Stefan Koeberle, 11/2003"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,67,public class CholeskySolverTest
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,68,extends TestCase {
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,70,private double[][] m1 = {{1}};
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,71,private double m1Det = 1.0d;
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,73,"private double[][] m2 = {{1, 0} ,"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,74,"{0, 2}};"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,75,private double m2Det = 2.0d;
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,77,"private double[][] m3 = {{1, 0, 0},"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,78,"{0, 2, 0},"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,79,"{0, 0, 3}};"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,80,private double m3Det = 6.0d;
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,82,"private double[][] m4 = {{1, 0, 0},"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,83,"{2, 3, 0},"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,84,"{4, 5, 6}};"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,85,private double m4Det = 18.0d;
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,87,"private double[][] m5 = {{ 1,  0,  0,  0,  0},"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,88,"{-2,  3,  0,  0,  0},"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,89,"{ 4, -5,  6,  0,  0},"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,90,"{ 7,  8, -9, 10,  0},"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,91,"{11, 12, 13, 14, 15}};"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,92,private double m5Det = 2700.0d;
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,95,"private double[][] m6 = {{1, 0,  0},"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,96,"{2, 0,  0},"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,97,"{4, 5,  6}};"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,99,"private double[][] m7 = {{1, 2, 3},"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,100,"{4, 5, 6}};"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,103,* Creates a new instance of CholeskySolverTest
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,105,public CholeskySolverTest(String nameOfTest) {
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,106,super(nameOfTest);
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,107,}//constructor CholeskySolverTest
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,109,public void setUp()
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,110,throws java.lang.Exception {
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,111,super.setUp();
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,112,}//setUp
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,115,public void tearDown()
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,116,throws java.lang.Exception {
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,117,super.tearDown();
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,118,}//tearDown
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,120,public static Test suite() {
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,121,TestSuite suite = new TestSuite(CholeskySolverTest.class);
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,122,"suite.setName(""CholeskySolver Tests"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,123,return suite;
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,124,}//suite
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,128,* tests CholeskySolver.setNumericalZero()
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,130,public void testNumericalZero() {
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,131,CholeskySolver solver = new CholeskySolver();
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,132,double numericalZero = 77.77d;
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,133,solver.setNumericalZero(numericalZero);
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,134,"assertEquals(solver.getNumericalZero(), numericalZero, 0.0d);"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,136,try {
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,137,solver.decompose(
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,138,"new RealMatrixImpl(new double[][]{{numericalZero/2, 0},"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,139,"{0, numericalZero/2}}));"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,140,"fail(""testing numericalZero"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,141,} catch (IllegalArgumentException e) {}
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,143,}//testNumericalZero
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,147,* tests CholeskySolver.decompose(...)
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,149,public void testDecompose() {
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,151,//The following decompositions should succeed.
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,152,"testDecompose(m1, ""Decomposing matrix m1"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,153,"testDecompose(m2, ""Decomposing matrix m2"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,154,"testDecompose(m3, ""Decomposing matrix m3"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,155,"testDecompose(m4, ""Decomposing matrix m4"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,156,"testDecompose(m5, ""Decomposing matrix m5"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,158,//The following decompositions will fail. An IllegalArgumentException
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,159,//should be thrown.
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,160,try {
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,161,"testDecompose(m6, ""Decomposing matrix m6"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,162,"fail(""Decomposing matrix m6"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,163,} catch (IllegalArgumentException e) {}
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,165,try {
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,166,CholeskySolver solver = new CholeskySolver();
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,167,solver.decompose(new RealMatrixImpl(m7));
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,168,"fail(""Decomposing matrix m7"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,169,} catch (IllegalArgumentException e) {}
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,171,}//testDecomposition
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,175,* tests CholeskySolver.solve(...)
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,177,public void testSolve() {
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,179,"//If there's no matrix, there's no linear euqitation to solve ..."
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,180,try {
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,181,CholeskySolver solver = new CholeskySolver();
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,182,"solver.solve(new double[] {1,2,3});"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,183,"fail(""solving a liniar equitation with a missing matrix should fail"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,184,} catch (IllegalStateException e) {}
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,186,//The following operations should succeed.
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,187,"testSolve(m1, ""Solving matrix m1"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,188,"testSolve(m2, ""Solving matrix m2"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,189,"testSolve(m3, ""Solving matrix m3"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,190,"testSolve(m4, ""Solving matrix m4"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,191,"testSolve(m5, ""Solving matrix m5"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,193,//The following operations will fail. An IllegalArgumentException
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,194,//should be thrown.
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,195,try {
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,196,"testSolve(m6, ""Solving matrix m6"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,197,"fail(""Solving matrix m6"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,198,} catch (IllegalArgumentException e) {}
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,200,try {
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,201,CholeskySolver solver = new CholeskySolver();
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,202,"solver.solve(new RealMatrixImpl(m3), new double[] {1, 2, 3, 4});"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,203,"fail(""Solving matrix m3[3x3], v[4]"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,204,} catch (IllegalArgumentException e) {}
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,206,}//testDecomposition
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,210,* tests CholeskySolver.getDeterminant(...)
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,212,public void testGetDeterminant() {
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,214,"//Since no matrix was decomposed, there's no determinant."
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,215,try {
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,216,CholeskySolver solver = new CholeskySolver();
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,217,solver.getDeterminant();
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,218,"fail(""Calculating determinant of missing matrix should fail"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,219,} catch (IllegalStateException e) {}
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,221,//These test will suceed.
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,222,"testGetDeterminant(m1, m1Det, ""Calculating determinant of m1"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,223,"testGetDeterminant(m2, m2Det, ""Calculating determinant of m2"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,224,"testGetDeterminant(m3, m3Det, ""Calculating determinant of m3"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,225,"testGetDeterminant(m4, m4Det, ""Calculating determinant of m4"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,226,"testGetDeterminant(m5, m5Det, ""Calculating determinant of m5"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,227,}//test
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,231,* Generates the matrix
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,232,* <code>m = lowerTriangularMatrix * lowerTriangularMatrix^T</code>.
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,233,* If alle diagonalelements of <code>lowerTriangularMatrix</code> are
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,234,"* positiv, <code>m</code> will be positiv definit."
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,235,* Decomposing <code>m</code> should result in
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,236,* <code>lowerTriangularMatrix</code> again. So there's a simple test ...
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,238,"private void testDecompose(double[][] lowerTriangularMatrix, String message)"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,239,throws IllegalArgumentException {
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,241,RealMatrix triangularMatrix = new RealMatrixImpl(lowerTriangularMatrix);
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,242,RealMatrix pdMatrix =
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,243,triangularMatrix.multiply(triangularMatrix.transpose());
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,245,CholeskySolver solver = new CholeskySolver();
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,246,solver.decompose(pdMatrix);
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,248,"assertTrue(message,"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,249,"areEqual(triangularMatrix, solver.getDecomposition(), 1.0E-10));"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,251,}//testDecompose
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,255,* Similar to <code> private testDecompose(...)</code>.
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,257,"private void testSolve(double[][] lowerTriangularMatrix, String message)  {"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,259,RealMatrix triangularMatrix =
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,260,new RealMatrixImpl(lowerTriangularMatrix);
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,261,RealMatrixImpl pdMatrix =
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,262,(RealMatrixImpl) triangularMatrix.multiply(triangularMatrix.transpose());
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,263,CholeskySolver solver =
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,264,new CholeskySolver();
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,266,double[] c = new double[lowerTriangularMatrix.length];
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,267,for (int i=0; i<c.length; i++)
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,268,for (int j=0; j<lowerTriangularMatrix[0].length; j++)
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,269,c[i] += lowerTriangularMatrix[i][j];
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,271,solver.decompose(pdMatrix);
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,272,RealMatrix x = new RealMatrixImpl(solver.solve(c));
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,274,"assertTrue(message,"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,275,"areEqual(pdMatrix.multiply(x),  new RealMatrixImpl(c), 1.0E-10));"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,276,}//testSolve
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,280,* Similar to <code> private testDecompose(...)</code>.
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,282,"private void testGetDeterminant(double[][] lowerTriangularMatrix,"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,283,"double determinant,"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,284,String message)
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,285,throws IllegalArgumentException {
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,287,RealMatrix triangularMatrix = new RealMatrixImpl(lowerTriangularMatrix);
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,288,RealMatrix pdMatrix =
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,289,triangularMatrix.multiply(triangularMatrix.transpose());
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,290,double pdDeterminant = determinant * determinant;
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,292,CholeskySolver solver = new CholeskySolver();
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,293,solver.decompose(pdMatrix);
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,294,"assertEquals(message, solver.getDeterminant(), pdDeterminant, 1.0E-10);"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,295,}//testGetDeterminant
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,299,* Are <code>m1</code> and <code>m2</code> equal?
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,301,"private static boolean areEqual(RealMatrix m1, RealMatrix m2, double delta) {"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,303,double[][] mv1 = m1.getData();
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,304,double[][] mv2 = m2.getData();
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,306,if (mv1.length != mv1.length  ||
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,307,mv1[0].length != mv2[0].length)
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,308,return false;
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,310,for (int i=0; i<mv1.length; i++)
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,311,for (int j=0; j<mv1[0].length; j++)
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,312,if (Math.abs(mv1[i][j] -mv2[i][j]) > delta)
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,313,return false;
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,315,return true;
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,316,}//isEqual
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,320,* Executes all tests of this class
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,322,public static void main(String[] args) {
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,323,"System.out.println(""Start"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,324,TestRunner runner = new TestRunner();
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,325,runner.doRun(CholeskySolverTest.suite());
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,326,"System.out.println(""End"");"
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,327,}//main
True,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java,329,}//class CholeskySolverTest

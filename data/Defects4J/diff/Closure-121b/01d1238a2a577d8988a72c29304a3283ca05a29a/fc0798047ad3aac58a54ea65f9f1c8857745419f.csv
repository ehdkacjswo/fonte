is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,180,eturn (lValueType.toMaybeFunctionType()).getInstanceType();
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,180,return ((FunctionType) lValueType).getInstanceType();
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,208,eturn (type.toMaybeFunctionType()).getInstanceType();
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,208,return ((FunctionType) type).getInstanceType();
False,src/com/google/javascript/jscomp/CheckMissingReturn.java,src/com/google/javascript/jscomp/CheckMissingReturn.java,152,unctionType scopeType = JSType.toMaybeFunctionType(scope.getJSType());
True,src/com/google/javascript/jscomp/CheckMissingReturn.java,src/com/google/javascript/jscomp/CheckMissingReturn.java,152,JSType scopeType = scope.getJSType();
False,src/com/google/javascript/jscomp/CheckMissingReturn.java,src/com/google/javascript/jscomp/CheckMissingReturn.java,154,f (scopeType == null) {
True,src/com/google/javascript/jscomp/CheckMissingReturn.java,src/com/google/javascript/jscomp/CheckMissingReturn.java,154,if (!(scopeType instanceof FunctionType)) {
False,src/com/google/javascript/jscomp/CheckMissingReturn.java,src/com/google/javascript/jscomp/CheckMissingReturn.java,162,SType returnType = scopeType.getReturnType();
True,src/com/google/javascript/jscomp/CheckMissingReturn.java,src/com/google/javascript/jscomp/CheckMissingReturn.java,162,JSType returnType = ((FunctionType) scopeType).getReturnType();
False,src/com/google/javascript/jscomp/CheckPropertyOrder.java,src/com/google/javascript/jscomp/CheckPropertyOrder.java,30,mport com.google.javascript.rhino.jstype.JSType;
False,src/com/google/javascript/jscomp/CheckPropertyOrder.java,src/com/google/javascript/jscomp/CheckPropertyOrder.java,109,unctionType funcType = JSType.toMaybeFunctionType(func.getJSType());
True,src/com/google/javascript/jscomp/CheckPropertyOrder.java,src/com/google/javascript/jscomp/CheckPropertyOrder.java,108,FunctionType funcType = (FunctionType) func.getJSType();
False,src/com/google/javascript/jscomp/ConcreteType.java,src/com/google/javascript/jscomp/ConcreteType.java,26,mport com.google.javascript.rhino.jstype.JSType;
False,src/com/google/javascript/jscomp/ConcreteType.java,src/com/google/javascript/jscomp/ConcreteType.java,362,eturn JSType.toMaybeFunctionType(declaration.getJSType());
True,src/com/google/javascript/jscomp/ConcreteType.java,src/com/google/javascript/jscomp/ConcreteType.java,361,return (FunctionType) declaration.getJSType();
False,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,364,unctionType type = JSType.toMaybeFunctionType(functionNode.getJSType());
True,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java,364,FunctionType type = (FunctionType) functionNode.getJSType();
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,37,import com.google.javascript.rhino.jstype.EnumElementType;
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,333, else if (type.isEnumElementType()) {
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,334,ddInvalidatingType(type.toMaybeEnumElementType().getPrimitiveType());
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,334,} else if (type instanceof EnumElementType) {
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,335,addInvalidatingType(((EnumElementType) type).getPrimitiveType());
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,773, else if (type.isEnumElementType()) {
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,774,} else if (type instanceof EnumElementType) {
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,775,ype.toMaybeEnumElementType().getPrimitiveType());
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,776,((EnumElementType) type).getPrimitiveType());
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,825,f (type == null) {
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,826,eturn null;
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,829,f (type.isEnumElementType()) {
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,826,if (type instanceof EnumElementType) {
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,831,"ield, type.toMaybeEnumElementType().getPrimitiveType());"
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,828,"field, ((EnumElementType) type).getPrimitiveType());"
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,901,f (objType.isFunctionType()) {
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,902,onstructor = objType.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,898,if (objType instanceof FunctionType) {
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,899,constructor = (FunctionType) objType;
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,1009, else if (jsType.isEnumElementType()) {
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,1006,} else if (jsType instanceof EnumElementType) {
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,1011,"Type, jsType.toMaybeEnumElementType().getPrimitiveType(), prop);"
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,1008,"cType, ((EnumElementType) jsType).getPrimitiveType(), prop);"
False,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,224,unctionType functionType =
False,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,225,SType.toMaybeFunctionType(function.getJSType());
True,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,224,FunctionType functionType = (FunctionType) function.getJSType();
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,444,unctionType ownerFnType = JSType.toMaybeFunctionType(ownerType);
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,444,FunctionType ownerFnType = ownerType instanceof FunctionType ?
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,445,(FunctionType) ownerType : null;
True,src/com/google/javascript/jscomp/InferJSDocInfo.java,src/com/google/javascript/jscomp/InferJSDocInfo.java,25,import com.google.javascript.rhino.jstype.FunctionType;
False,src/com/google/javascript/jscomp/InferJSDocInfo.java,src/com/google/javascript/jscomp/InferJSDocInfo.java,212,bjType.toMaybeFunctionType(objType).getInstanceType().setJSDocInfo(
True,src/com/google/javascript/jscomp/InferJSDocInfo.java,src/com/google/javascript/jscomp/InferJSDocInfo.java,213,((FunctionType) objType).getInstanceType().setJSDocInfo(
False,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,384,f (type.isConstructor()) {
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,384,if (type.isFunctionType() && type.isConstructor()) {
False,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,386,"ame, type.toMaybeFunctionType(),"
False,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,387,", parent, parent.getParent(), rValue);"
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,386,"name, (FunctionType) type, n, parent, parent.getParent(), rValue);"
False,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,411,f (constructor != null && constructor.isConstructor()) {
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,410,if (constructor instanceof FunctionType && constructor.isConstructor()) {
False,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,413,lassType = constructor.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,412,classType = (FunctionType) constructor;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2166,unctionType fntype = valueType.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2166,FunctionType fntype = ((FunctionType) valueType);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2175,unctionType fntype = valueType.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2175,FunctionType fntype = ((FunctionType) valueType);
False,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,613,unctionType functionType = JSType.toMaybeFunctionType(jstype);
False,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,614,f (functionType != null) {
True,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,613,if (jstype != null && jstype.isFunctionType()) {
True,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,src/com/google/javascript/jscomp/PureFunctionIdentifier.java,614,FunctionType functionType = (FunctionType) jstype;
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,121,unctionType funType = n.getJSType().toMaybeFunctionType();
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,122,f (funType != null && !funType.isConstructor()) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,121,FunctionType funType = (FunctionType) n.getJSType();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,122,if (!funType.isConstructor()) {
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,237,unctionType funType = JSType.toMaybeFunctionType(n.getJSType());
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,237,FunctionType funType = (FunctionType) n.getJSType();
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,280,unctionType funType = function.getJSType().toMaybeFunctionType();
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,280,FunctionType funType = (FunctionType) function.getJSType();
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,29,import com.google.javascript.rhino.jstype.FunctionType;
False,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,381,f (nodeType != null && nodeType.isFunctionType()) {
False,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,382,hisType = nodeType.toMaybeFunctionType().getTypeOfThis();
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,382,if (nodeType != null && nodeType instanceof FunctionType) {
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,383,thisType = ((FunctionType) nodeType).getTypeOfThis();
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,422,f (rightType != null && rightType.isFunctionType()) {
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,423,argetType = rightType.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,422,if (rightType instanceof FunctionType) {
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,423,targetType = (FunctionType) rightType;
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,492,unctionType funcTarget = JSType.toMaybeFunctionType(target);
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,493,f (funcTarget != null && funcTarget.hasInstanceType()) {
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,494,eturn funcTarget.getInstanceType();
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,492,if (target instanceof FunctionType) {
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,493,FunctionType funcTarget = (FunctionType) target;
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,494,if (funcTarget.hasInstanceType()) {
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,495,return funcTarget.getInstanceType();
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,519,unctionType funcTarget = target.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,521,FunctionType funcTarget = (FunctionType) target;
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,545,unctionType funcTarget = target.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,547,FunctionType funcTarget = (FunctionType) target;
False,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,563,unctionType funcTarget = target.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/SemanticReverseAbstractInterpreter.java,565,FunctionType funcTarget = (FunctionType) target;
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,676,SType lhsType = lhs.getJSType();
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,677,f (lhsType == null) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,676,if (lhs.getJSType() == null
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,677,|| !(lhs.getJSType() instanceof FunctionType)) {
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,680,unctionType funType =
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,681,hsType.restrictByNotNullOrUndefined().toMaybeFunctionType();
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,682,f (funType == null) {
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,683,reak;
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,685,oncreteType retType = createType(funType.getReturnType());
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,680,ConcreteType retType = createType(((FunctionType)
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,681,lhs.getJSType().restrictByNotNullOrUndefined())
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,682,.getReturnType());
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,875, else if (!(recvType.isFunctionType())) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,872,} else if (!(recvType instanceof FunctionType)) {
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,885,recvType.toMaybeFunctionType()).getParameters() != null) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,882,((FunctionType) recvType).getParameters() != null) {
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,890,recvType.toMaybeFunctionType()).getParameters().iterator();
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,887,((FunctionType) recvType).getParameters().iterator();
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,896,f (arg.getJSType() != null && arg.getJSType().isFunctionType()) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,893,if (arg.getJSType() instanceof FunctionType) {
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,899,"rg.getJSType().toMaybeFunctionType().getTypeOfThis(),"
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,896,"((FunctionType) arg.getJSType()).getTypeOfThis(),"
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,917, else if (paramType.isFunctionType()) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,914,} else if (paramType instanceof FunctionType) {
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,919,"rg, thisType, paramType.toMaybeFunctionType()));"
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,916,"arg, thisType, (FunctionType) paramType));"
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,973,unctionType callType = propType.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,970,FunctionType callType = null;
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,971,if (propType instanceof FunctionType) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,972,callType = (FunctionType) propType;
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1014,f (getConcreteFunction(jsType.toMaybeFunctionType()) != null) {
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1015,eturn getConcreteFunction(jsType.toMaybeFunctionType());
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1014,if (getConcreteFunction((FunctionType) jsType) != null) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1015,return getConcreteFunction((FunctionType) jsType);
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1248,"unctionFromJSType.put(decl.getJSType().toMaybeFunctionType(), funType);"
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1248,"functionFromJSType.put((FunctionType) decl.getJSType(), funType);"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,27,import static com.google.javascript.rhino.jstype.JSTypeNative.U2U_CONSTRUCTOR_TYPE;
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,431,final TypeCheck outerThis = this;
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,433,final FunctionType functionType = (FunctionType) n.getJSType();
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,879,f (objectJsType != null && objectJsType.isFunctionType()) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,880,unctionType functionType = objectJsType.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,882,if (objectJsType instanceof FunctionType) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,883,FunctionType functionType = (FunctionType) objectJsType;
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,898,SType jsType = getJSType(object2);
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,899,f (jsType.isFunctionType()) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,900,unctionType functionType = jsType.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,901,JSType jsType = object2.getJSType();
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,902,if (jsType instanceof FunctionType) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,903,FunctionType functionType = (FunctionType) jsType;
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1408,SType type = getJSType(constructor).restrictByNotNullOrUndefined();
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1409,f (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1410,unctionType fnType = type.toMaybeFunctionType();
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1411,f (fnType != null) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1412,"isitParameterList(t, n, fnType);"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1413,"nsureTyped(t, n, fnType.getInstanceType());"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1414, else {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1415,"nsureTyped(t, n);"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1411,FunctionType type = getFunctionType(constructor);
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1412,if (type != null && type.isConstructor()) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1413,"visitParameterList(t, n, type);"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1414,"ensureTyped(t, n, type.getInstanceType());"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1479,unctionType functionType = JSType.toMaybeFunctionType(n.getJSType());
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1477,FunctionType functionType = (FunctionType) n.getJSType();
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1561,f (childType.isFunctionType()) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1562,unctionType functionType = childType.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1559,if (childType instanceof FunctionType) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1560,FunctionType functionType = (FunctionType) childType;
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1658,f (jsType.isFunctionType()) {
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1659,unctionType functionType = jsType.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1656,if (jsType instanceof FunctionType) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1657,FunctionType functionType = (FunctionType) jsType;
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1811,* Gets the type of the node or {@code null} if the node's type is not a
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1812,* function.
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1814,private FunctionType getFunctionType(Node n) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1815,JSType type = getJSType(n).restrictByNotNullOrUndefined();
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1816,if (type.isUnknownType()) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1817,return typeRegistry.getNativeFunctionType(U2U_CONSTRUCTOR_TYPE);
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1818,} else if (type instanceof FunctionType) {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1819,return (FunctionType) type;
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1820,} else {
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1821,return null;
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1851,ype.isFunctionType() ||
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1864,type instanceof FunctionType ||
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,802,f (functionType.isFunctionType()) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,803,unctionType fnType = functionType.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,802,if (functionType instanceof FunctionType) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,803,FunctionType fnType = (FunctionType) functionType;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,884,SType iParameterType = getJSType(iParameter);
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,884,JSType iParameterType = iParameter.getJSType();
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,889,f (iParameterType.isFunctionType()) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,890,unctionType iParameterFnType = iParameterType.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,889,if (iParameterType instanceof FunctionType) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,890,FunctionType iParameterFnType = (FunctionType) iParameterType;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,893,ArgumentType.isFunctionType() &&
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,893,iArgumentType instanceof FunctionType &&
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,940,f (jParameterType.isFunctionType()) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,941,unctionType jParameterFnType = jParameterType.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,940,if (jParameterType instanceof FunctionType) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,941,FunctionType jParameterFnType = (FunctionType) jParameterType;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,952,ArgumentType.isFunctionType()) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,952,jArgumentType instanceof FunctionType) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,958,unctionType jArgumentFnType = jArgumentType.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,958,FunctionType jArgumentFnType = (FunctionType) jArgumentType;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1009, else {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1010,unctionType ct = constructorType.toMaybeFunctionType();
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1011,f (ct == null && constructorType instanceof FunctionType) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1012,"/ If constructorType is a NoObjectType, then toMaybeFunctionType will"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1013,/ return null. But NoObjectType implements the FunctionType
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1014,"/ interface, precisely because it can validly construct objects."
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1015,t = (FunctionType) constructorType;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1017,f (ct != null && ct.isConstructor()) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1009,} else if (constructorType instanceof FunctionType) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1010,FunctionType ct = (FunctionType) constructorType;
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1011,if (ct.isConstructor()) {
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,637,f (found.isFunctionType() &&
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,638,equired.isFunctionType()) {
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,639,unctionType fnTypeA = found.toMaybeFunctionType();
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,640,unctionType fnTypeB = required.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,637,if (found instanceof FunctionType &&
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,638,required instanceof FunctionType) {
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,639,FunctionType fnTypeA = ((FunctionType) found);
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,640,FunctionType fnTypeB = ((FunctionType) required);
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,724, else if (type.isFunctionType()) {
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,724,} else if (type instanceof FunctionType) {
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,64,f (type == null) {
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,65,"eturn """";"
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,66, else if (type.isFunctionType()) {
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,64,if (type instanceof FunctionType) {
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,68, else if (!type.isUnknownType()
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,66,} else if (type != null && !type.isUnknownType()
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,90,unctionType funType = type.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,88,FunctionType funType = (FunctionType) fnNode.getJSType();
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,212,f (type != null && type.isFunctionType()) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,213,unctionType fnType = type.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,212,if (type != null && type instanceof FunctionType) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,213,FunctionType fnType = (FunctionType) type;
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,806,f (var != null && var.getType() != null &&
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,807,ar.getType().isFunctionType()) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,808,unctionType aliasedType  = var.getType().toMaybeFunctionType();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,806,if (var != null && var.getType() instanceof FunctionType) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,807,FunctionType aliasedType  = (FunctionType) var.getType();
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,835,unctionType = type.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,834,functionType = (FunctionType) type;
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,905,f (propType != null && propType.isFunctionType()) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,906,eturn propType.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,904,if (propType instanceof FunctionType) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,905,return (FunctionType) propType;
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,913,f (propType != null && propType.isFunctionType()) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,914,eturn propType.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,912,if (propType instanceof FunctionType) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,913,return (FunctionType) propType;
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1108,unctionType fnType = JSType.toMaybeFunctionType(type);
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1109,f (fnType != null &&
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1107,if (type instanceof FunctionType &&
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1110,FunctionType fnType = (FunctionType) type;
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1146,& type != null
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1147,& type.isFunctionType()
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1145,&& type instanceof FunctionType
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1154,setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1152,.setPrototypeBasedOn(((FunctionType) type).getInstanceType());
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1187,"SType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1185,"(FunctionType) rValue.getJSType(), info, lValue)) {"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1234,eturn JSType.toMaybeFunctionType(o);
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1232,return o instanceof FunctionType ? ((FunctionType) o) : null;
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1466,unctionType ownerType =
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1467,SType.toMaybeFunctionType(getObjectSlot(ownerName));
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1468,f (ownerType != null) {
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1469,SType ownerTypeOfThis = ownerType.getTypeOfThis();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1464,ObjectType ownerType = getObjectSlot(ownerName);
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1465,if (ownerType instanceof FunctionType) {
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1466,JSType ownerTypeOfThis = ((FunctionType) ownerType).getTypeOfThis();
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1475,"efineSlot(n, parent, getNativeType(BOOLEAN_TYPE), true);"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1472,"defineSlot(n, parent, getNativeType(BOOLEAN_TYPE),"
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1473,true);
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1745,unctionType functionType =
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1746,SType.toMaybeFunctionType(functionNode.getJSType());
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1743,FunctionType functionType = (FunctionType) functionNode.getJSType();
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,86,ublic EnumElementType toMaybeEnumElementType() {
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,87,eturn this;
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,86,public boolean isEnumElementType() {
True,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,87,return true;
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,192,ublic FunctionType toMaybeFunctionType() {
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,193,eturn this;
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,192,public boolean isFunctionType() {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,193,return true;
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,566,unctionType other = that.toMaybeFunctionType();
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,566,FunctionType other = null;
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,567,if (that instanceof FunctionType) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,568,other = (FunctionType) that;
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,729,unctionType that =
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,730,SType.toMaybeFunctionType(otherType.toMaybeFunctionType());
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,731,f (that == null) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,732,if (!(otherType instanceof FunctionType)) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,733,return false;
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,735,FunctionType that = (FunctionType) otherType;
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,736,if (!that.isFunctionType()) {
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,834,unctionType other = that.toMaybeFunctionType();
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,835,f (other.isInterface()) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,839,if (((FunctionType) that).isInterface()) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,854,FunctionType other = (FunctionType) that;
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,1014,ubTypes.set(
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,1015,", JSType.toMaybeFunctionType(subTypes.get(i).resolve(t, scope)));"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,1019,"subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,258,** Returns true if toMaybeFunctionType returns a non-null FunctionType. */
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,259,ublic final boolean isFunctionType() {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,260,eturn toMaybeFunctionType() != null;
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,264," Downcasts this to a FunctionType, or returns null if this is not"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,265, a function.
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,267," For the purposes of this function, we define a MaybeFunctionType as any"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,268, type in the sub-lattice
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,269, { x | LEAST_FUNCTION_TYPE <= x <= GREATEST_FUNCTION_TYPE }
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,270, This definition excludes bottom types like NoType and NoObjectType.
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,272," This definition is somewhat arbitrary and axiomatic, but this is the"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,273, definition that makes the most sense for the most callers.
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,275,ublic FunctionType toMaybeFunctionType() {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,276,eturn null;
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,280, Null-safe version of toMaybeFunctionType().
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,282,ublic static FunctionType toMaybeFunctionType(JSType type) {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,283,eturn type == null ? null : type.toMaybeFunctionType();
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,286,ublic final boolean isEnumElementType() {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,287,eturn toMaybeEnumElementType() != null;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,258,public boolean isFunctionType() {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,259,return false;
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,291," Downcasts this to an EnumElementType, or returns null if this is not an EnumElementType."
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,293,ublic EnumElementType toMaybeEnumElementType() {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,294,eturn null;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,262,public boolean isEnumElementType() {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,263,return false;
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,339, Does not necessarily mean this is an {@link InstanceObjectType}.
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,684,f (thisType.isEnumElementType()) {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,685,SType inf = thisType.toMaybeEnumElementType().meet(thatType);
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,652,if (thisType instanceof EnumElementType) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,653,JSType inf = ((EnumElementType) thisType).meet(thatType);
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,689, else if (thatType.isEnumElementType()) {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,690,SType inf = thatType.toMaybeEnumElementType().meet(thisType);
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,657,} else if (thatType instanceof EnumElementType) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,658,JSType inf = ((EnumElementType) thatType).meet(thisType);
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,261,f (value != null && (value.isConstructor() || value.isInterface())) {
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,262,unctionType functionType = value.toMaybeFunctionType();
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,261,if ((value instanceof FunctionType) &&
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,262,(value.isConstructor() || value.isInterface())) {
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,263,FunctionType functionType = (FunctionType) value;
False,src/com/google/javascript/rhino/jstype/NoObjectType.java,src/com/google/javascript/rhino/jstype/NoObjectType.java,84,ublic FunctionType toMaybeFunctionType() {
False,src/com/google/javascript/rhino/jstype/NoObjectType.java,src/com/google/javascript/rhino/jstype/NoObjectType.java,85,eturn null;
True,src/com/google/javascript/rhino/jstype/NoObjectType.java,src/com/google/javascript/rhino/jstype/NoObjectType.java,84,public boolean isFunctionType() {
True,src/com/google/javascript/rhino/jstype/NoObjectType.java,src/com/google/javascript/rhino/jstype/NoObjectType.java,85,return false;
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,165,@Override
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,166,public boolean isEnumElementType() {
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,167,return referencedType.isEnumElementType();
False,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,195,Override
False,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,196,ublic FunctionType toMaybeFunctionType() {
False,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,197,eturn referencedType.toMaybeFunctionType();
False,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,200,Override
False,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,201,ublic EnumElementType toMaybeEnumElementType() {
False,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,202,eturn referencedType.toMaybeEnumElementType();

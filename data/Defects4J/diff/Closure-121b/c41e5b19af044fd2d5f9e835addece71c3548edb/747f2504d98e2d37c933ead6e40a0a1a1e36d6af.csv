is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,20,import com.google.common.collect.Sets;
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,21,import com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec;
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,23,import com.google.javascript.jscomp.NodeTraversal.Callback;
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,28,import java.util.Set;
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,39,*   <li> Remove calls to assertion functions (like goog.asserts.assert).
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,40,"*        If the return value of the assertion function is used, then"
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,41,*        the first argument (the asserted value) will be directly inlined.
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,42,"*        Otherwise, the entire call will be removed. It is well-known that"
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,43,"*        this is not provably safe, much like the equivalent assert"
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,44,*        statement in Java.</li>
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,57,private final boolean removeAbstractMethods;
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,58,private final boolean removeAssertionCalls;
False,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,49, nodes
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,62,* nodes.
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,68,* List of assertion functions.
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,70,private final List<Node> assertionCalls = Lists.newArrayList();
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,141,@Override
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,159,* Identifies all assertion calls.
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,161,private class FindAssertionCalls extends AbstractPostOrderCallback {
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,162,Set<String> assertionNames = Sets.newHashSet();
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,164,FindAssertionCalls() {
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,165,for (AssertionFunctionSpec spec :
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,166,compiler.getCodingConvention().getAssertionFunctions()) {
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,167,assertionNames.add(spec.getFunctionName());
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,172,@Override
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,173,"public void visit(NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,174,if (n.getType() == Token.CALL) {
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,175,String fnName = n.getFirstChild().getQualifiedName();
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,176,if (assertionNames.contains(fnName)) {
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,177,assertionCalls.add(n);
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,188,* @param removeAbstractMethods Remove declarations of abstract methods.
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,189,* @param removeAssertionCalls Remove calls to goog.assert functions.
False,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,147,losureCodeRemoval(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,191,"ClosureCodeRemoval(AbstractCompiler compiler, boolean removeAbstractMethods,"
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,192,boolean removeAssertionCalls) {
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,194,this.removeAbstractMethods = removeAbstractMethods;
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,195,this.removeAssertionCalls = removeAssertionCalls;
False,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,153,"odeTraversal.traverse(compiler, root, new FindAbstractMethods());"
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,200,List<Callback> passes = Lists.newArrayList();
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,201,if (removeAbstractMethods) {
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,202,passes.add(new FindAbstractMethods());
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,204,if (removeAssertionCalls) {
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,205,passes.add(new FindAssertionCalls());
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,207,"CombinedCompilerPass.traverse(compiler, root, passes);"
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,213,for (Node call : assertionCalls) {
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,214,"// If the assertion is an expression, just strip the whole thing."
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,215,Node parent = call.getParent();
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,216,if (NodeUtil.isExpressionNode(parent)) {
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,217,parent.getParent().removeChild(parent);
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,218,} else {
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,219,"// Otherwise, replace the assertion with its first argument,"
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,220,// which is the return value of the assertion.
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,221,parent.replaceChild(
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,222,"call, call.getFirstChild().getNext().detachFromParent());"
True,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,src/com/google/javascript/jscomp/ClosureCodeRemoval.java,224,compiler.reportCodeChange();
True,src/com/google/javascript/jscomp/CombinedCompilerPass.java,src/com/google/javascript/jscomp/CombinedCompilerPass.java,19,import com.google.common.collect.Lists;
True,src/com/google/javascript/jscomp/CombinedCompilerPass.java,src/com/google/javascript/jscomp/CombinedCompilerPass.java,24,import java.util.List;
True,src/com/google/javascript/jscomp/CombinedCompilerPass.java,src/com/google/javascript/jscomp/CombinedCompilerPass.java,61,"this(compiler, Lists.<Callback>newArrayList(callbacks));"
True,src/com/google/javascript/jscomp/CombinedCompilerPass.java,src/com/google/javascript/jscomp/CombinedCompilerPass.java,64,CombinedCompilerPass(
True,src/com/google/javascript/jscomp/CombinedCompilerPass.java,src/com/google/javascript/jscomp/CombinedCompilerPass.java,65,"AbstractCompiler compiler, List<Callback> callbacks) {"
False,src/com/google/javascript/jscomp/CombinedCompilerPass.java,src/com/google/javascript/jscomp/CombinedCompilerPass.java,59,his.callbacks = new CallbackWrapper[callbacks.length];
False,src/com/google/javascript/jscomp/CombinedCompilerPass.java,src/com/google/javascript/jscomp/CombinedCompilerPass.java,60,or (int i = 0; i < callbacks.length; i++) {
False,src/com/google/javascript/jscomp/CombinedCompilerPass.java,src/com/google/javascript/jscomp/CombinedCompilerPass.java,61,his.callbacks[i] = new CallbackWrapper(callbacks[i]);
True,src/com/google/javascript/jscomp/CombinedCompilerPass.java,src/com/google/javascript/jscomp/CombinedCompilerPass.java,67,this.callbacks = new CallbackWrapper[callbacks.size()];
True,src/com/google/javascript/jscomp/CombinedCompilerPass.java,src/com/google/javascript/jscomp/CombinedCompilerPass.java,68,for (int i = 0; i < callbacks.size(); i++) {
True,src/com/google/javascript/jscomp/CombinedCompilerPass.java,src/com/google/javascript/jscomp/CombinedCompilerPass.java,69,this.callbacks[i] = new CallbackWrapper(callbacks.get(i));
True,src/com/google/javascript/jscomp/CombinedCompilerPass.java,src/com/google/javascript/jscomp/CombinedCompilerPass.java,73,"static void traverse(AbstractCompiler compiler, Node root,"
True,src/com/google/javascript/jscomp/CombinedCompilerPass.java,src/com/google/javascript/jscomp/CombinedCompilerPass.java,74,List<Callback> callbacks) {
True,src/com/google/javascript/jscomp/CombinedCompilerPass.java,src/com/google/javascript/jscomp/CombinedCompilerPass.java,75,if (callbacks.size() == 1) {
True,src/com/google/javascript/jscomp/CombinedCompilerPass.java,src/com/google/javascript/jscomp/CombinedCompilerPass.java,76,"NodeTraversal.traverse(compiler, root, callbacks.get(0));"
True,src/com/google/javascript/jscomp/CombinedCompilerPass.java,src/com/google/javascript/jscomp/CombinedCompilerPass.java,77,} else {
True,src/com/google/javascript/jscomp/CombinedCompilerPass.java,src/com/google/javascript/jscomp/CombinedCompilerPass.java,78,"(new CombinedCompilerPass(compiler, callbacks)).process(null, root);"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1216,eturn new ClosureCodeRemoval(compiler);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1216,// TODO(nicksantos): add flags.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1217,"return new ClosureCodeRemoval(compiler, true, false);"
True,test/com/google/javascript/jscomp/ClosureCodeRemovalTest.java,test/com/google/javascript/jscomp/ClosureCodeRemovalTest.java,69,public void testAssertionRemoval1() {
True,test/com/google/javascript/jscomp/ClosureCodeRemovalTest.java,test/com/google/javascript/jscomp/ClosureCodeRemovalTest.java,70,"test(""var x = goog.asserts.assert(y(), 'message');"", ""var x = y();"");"
True,test/com/google/javascript/jscomp/ClosureCodeRemovalTest.java,test/com/google/javascript/jscomp/ClosureCodeRemovalTest.java,73,public void testAssertionRemoval2() {
True,test/com/google/javascript/jscomp/ClosureCodeRemovalTest.java,test/com/google/javascript/jscomp/ClosureCodeRemovalTest.java,74,"test(""goog.asserts.assert(y(), 'message');"", """");"
False,test/com/google/javascript/jscomp/ClosureCodeRemovalTest.java,test/com/google/javascript/jscomp/ClosureCodeRemovalTest.java,71,eturn new ClosureCodeRemoval(compiler);
True,test/com/google/javascript/jscomp/ClosureCodeRemovalTest.java,test/com/google/javascript/jscomp/ClosureCodeRemovalTest.java,79,"return new ClosureCodeRemoval(compiler, true, true);"

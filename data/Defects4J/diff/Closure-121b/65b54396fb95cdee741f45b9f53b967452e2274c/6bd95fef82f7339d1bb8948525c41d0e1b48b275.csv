is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,46,import java.util.HashSet;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,151,static final DiagnosticType SAME_INTERFACE_MULTIPLE_IMPLEMENTS =
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,152,DiagnosticType.warning(
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,153,"""JSC_SAME_INTERFACE_MULTIPLE_IMPLEMENTS"","
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,154,"""Cannot @implement the same interface more than once\n"" +"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,155,"""Repeated interface: {0}"");"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,370,Set<JSType> baseInterfaces = new HashSet<JSType>();
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,376,// Disallow implementing the same base (not templatized) interface
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,377,// type more than once.
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,378,JSType baseInterface = maybeInterType;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,379,if (baseInterface.toMaybeTemplatizedType() != null) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,380,baseInterface =
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,381,baseInterface.toMaybeTemplatizedType().getReferencedType();
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,383,if (baseInterfaces.contains(baseInterface)) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,384,"reportWarning(SAME_INTERFACE_MULTIPLE_IMPLEMENTS,"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,385,baseInterface.toString());
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,386,} else {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,387,baseInterfaces.add(baseInterface);
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,52,import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,43,import com.google.javascript.rhino.jstype.TemplateTypeMapReplacer;
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,534,typeOfThis.extendTemplateTypeMap(type.getTemplateTypeMap());
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1261,f (thisType.isTemplatizedType() && thatType.isTemplatizedType()) {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1262,SType rawThisType = thisType.toMaybeTemplatizedType().getReferencedType();
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1263,SType rawThatType = thatType.toMaybeTemplatizedType().getReferencedType();
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1264,f (!rawThisType.isSubtype(rawThatType)) {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1265,eturn false;
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1268,emplateTypeMap thisTypeParams = thisType.getTemplateTypeMap();
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1269,emplateTypeMap thatTypeParams = thatType.getTemplateTypeMap();
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1271,f (thisTypeParams.checkEquivalenceHelper(
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1272,"hatTypeParams, EquivalenceMethod.INVARIANT)) {"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1273,eturn true;
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1274, else if (isExemptFromTemplateTypeInvariance(thatType)) {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1275,/ Only array and object qualify and they are compatible if their
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1276,/ elmenet types are related.
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1277,emplateType key = thisType.registry.getObjectElementKey();
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1278,SType thisElement = thisTypeParams.getTemplateType(key);
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1279,SType thatElement = thatTypeParams.getTemplateType(key);
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1281,eturn thisElement.isSubtype(thatElement)
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1282,| thatElement.isSubtype(thisElement);
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1283, else {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1284,eturn false;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1261,// TemplateTypeMaps. This check only returns false if the TemplateTypeMaps
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1262,// are not equivalent.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1263,TemplateTypeMap thisTypeParams = thisType.getTemplateTypeMap();
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1264,TemplateTypeMap thatTypeParams = thatType.getTemplateTypeMap();
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1265,boolean templateMatch = true;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1266,if (isExemptFromTemplateTypeInvariance(thatType)) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1267,// Array and Object are exempt from template type invariance; their
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1268,// template types maps are considered a match only if the ObjectElementKey
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1269,// values are subtypes/supertypes of one another.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1270,TemplateType key = thisType.registry.getObjectElementKey();
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1271,JSType thisElement = thisTypeParams.getTemplateType(key);
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1272,JSType thatElement = thatTypeParams.getTemplateType(key);
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1274,templateMatch = thisElement.isSubtype(thatElement)
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1275,|| thatElement.isSubtype(thisElement);
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1276,} else {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1277,templateMatch = thisTypeParams.checkEquivalenceHelper(
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1278,"thatTypeParams, EquivalenceMethod.INVARIANT);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1280,if (!templateMatch) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1281,return false;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1284,// Templatized types. The above check guarantees TemplateTypeMap
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1285,// equivalence; check if the base type is a subtype.
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,46,import java.util.Arrays;
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,55,// The TemplateType keys of the map.
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,57,"// The JSType values, which are index-aligned with their corresponding keys."
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,58,// These values are left as specified in the TemplateTypeMap constructor; they
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,59,"// may refer to TemplateTypes that are keys in this TemplateTypeMap, requiring"
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,60,"// iterative type resolution to find their true, resolved type."
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,62,"// The JSType values, which are index-aligned with their corresponding keys."
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,63,// These values have been iteratively type-resolved using this TemplateTypeMap
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,64,// instance. These fully-resolved values are necessary for determining the
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,65,// equivalence of two TemplateTypeMap instances.
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,66,private final ImmutableList<JSType> resolvedTemplateValues;
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,82,// Iteratively resolve any JSType values that refer to the TemplateType keys
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,83,// of this TemplateTypeMap.
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,84,TemplateTypeMapReplacer replacer = new TemplateTypeMapReplacer(
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,85,"registry, this);"
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,86,ImmutableList.Builder<JSType> builder = ImmutableList.builder();
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,87,for (JSType templateValue : this.templateValues) {
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,88,builder.add(templateValue.visit(replacer));
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,90,this.resolvedTemplateValues = builder.build();
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,121,eturn getTemplateTypeInternal(key) != null;
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,142,return getTemplateTypeIndex(key) != -1;
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,129,SType templateType = getTemplateTypeInternal(key);
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,130,eturn (templateType == null) ?
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,131,egistry.getNativeType(JSTypeNative.UNKNOWN_TYPE) : templateType;
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,150,int index = getTemplateTypeIndex(key);
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,151,return (index == -1) ? registry.getNativeType(JSTypeNative.UNKNOWN_TYPE) :
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,152,templateValues.get(index);
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,144, Returns the JSType value associated with the specified template key. If no
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,145," JSType value is associated, returns null."
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,165,* Returns the index of the JSType value associated with the specified
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,166,"* template key. If no JSType value is associated, returns -1."
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,147,rivate JSType getTemplateTypeInternal(TemplateType key) {
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,148,nt index = 0;
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,149,or (TemplateType item : templateKeys) {
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,150,/ Note: match by identity.
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,151,f (item == key) {
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,152,reak;
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,168,private int getTemplateTypeIndex(TemplateType key) {
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,169,"int maxIndex = Math.min(templateKeys.size(), templateValues.size());"
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,170,for (int i = maxIndex - 1; i >= 0; i--) {
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,171,if (templateKeys.get(i) == key) {
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,172,return i;
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,154,ndex++;
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,156,f (index < 0 || index >= templateValues.size()) {
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,157,eturn null;
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,159,eturn templateValues.get(index);
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,175,return -1;
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,178,private JSType getResolvedTemplateType(TemplateType key) {
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,179,int index = getTemplateTypeIndex(key);
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,180,return (index == -1) ? registry.getNativeType(JSTypeNative.UNKNOWN_TYPE) :
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,181,resolvedTemplateValues.get(index);
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,185,* An enum tracking the three different equivalence match states for a
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,186,* template key-value pair.
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,188,private enum EquivalenceMatch {
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,189,"NO_KEY_MATCH, VALUE_MISMATCH, VALUE_MATCH"
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,168,nt thisNumKeys = templateKeys.size();
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,169,nt thatNumKeys = that.getTemplateKeys().size();
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,171,"or (int i = 0; i < Math.min(thisNumKeys, thatNumKeys); i++) {"
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,172,SType thisTemplateType = getTemplateType(templateKeys.get(i));
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,173,SType thatTemplateType = that.getTemplateType(
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,174,hat.getTemplateKeys().get(i));
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,175,f (!thisTemplateType.checkEquivalenceHelper(
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,176,"hatTemplateType, eqMethod)) {"
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,198,ImmutableList<TemplateType> thisKeys = getTemplateKeys();
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,199,ImmutableList<TemplateType> thatKeys = that.getTemplateKeys();
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,201,EquivalenceMatch[] thatMatches = new EquivalenceMatch[thatKeys.size()];
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,202,"Arrays.fill(thatMatches, EquivalenceMatch.NO_KEY_MATCH);"
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,204,for (int i = 0; i < thisKeys.size(); i++) {
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,205,TemplateType thisKey = thisKeys.get(i);
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,206,JSType thisType = getResolvedTemplateType(thisKey);
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,207,EquivalenceMatch thisMatch = EquivalenceMatch.NO_KEY_MATCH;
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,209,for (int j = 0; j < thatKeys.size(); j++) {
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,210,TemplateType thatKey = thatKeys.get(j);
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,211,JSType thatType = that.getResolvedTemplateType(thatKey);
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,213,// Cross-compare every key-value pair in this TemplateTypeMap with
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,214,// those in that TemplateTypeMap. Update the Equivalence match for both
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,215,// key-value pairs involved.
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,216,if (thisKey == thatKey) {
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,217,EquivalenceMatch newMatchType = EquivalenceMatch.VALUE_MISMATCH;
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,218,"if (thisType.checkEquivalenceHelper(thatType, eqMethod)) {"
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,219,newMatchType = EquivalenceMatch.VALUE_MATCH;
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,222,if (thisMatch != EquivalenceMatch.VALUE_MATCH) {
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,223,thisMatch = newMatchType;
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,225,if (thatMatches[j] != EquivalenceMatch.VALUE_MATCH) {
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,226,thatMatches[j] = newMatchType;
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,231,"if (failedEquivalenceCheck(thisMatch, eqMethod)) {"
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,181,eturn thisNumKeys == thatNumKeys ||
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,182,qMethod == EquivalenceMethod.INVARIANT;
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,236,for (int i = 0; i < thatMatches.length; i++) {
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,237,"if (failedEquivalenceCheck(thatMatches[i], eqMethod)) {"
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,238,return false;
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,242,return true;
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,246,* Determines if the specified EquivalenceMatch is considered a failing
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,247,"* condition for an equivalence check, given the EquivalenceMethod used for"
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,248,* the check.
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,250,private boolean failedEquivalenceCheck(
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,251,"EquivalenceMatch eqMatch, EquivalenceMethod eqMethod) {"
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,252,return eqMatch == EquivalenceMatch.VALUE_MISMATCH ||
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,253,(eqMatch == EquivalenceMatch.NO_KEY_MATCH &&
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,254,eqMethod != EquivalenceMethod.INVARIANT);
False,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,2, Copyright 2013 The Closure Compiler Authors.
False,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,5, you may not use this file except in compliance with the License.
False,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,6, You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,3,* ***** BEGIN LICENSE BLOCK *****
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,4,* Version: MPL 1.1/GPL 2.0
False,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,8,     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,6,* The contents of this file are subject to the Mozilla Public License Version
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,7,"* 1.1 (the ""License""); you may not use this file except in compliance with"
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,8,* the License. You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,9,* http://www.mozilla.org/MPL/
False,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,13, See the License for the specific language governing permissions and
False,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,14, limitations under the License.
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,11,"* Software distributed under the License is distributed on an ""AS IS"" basis,"
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,12,"* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License"
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,13,* for the specific language governing rights and limitations under the
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,14,* License.
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,16,"* The Original Code is Rhino code, released"
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,17,"* May 6, 1999."
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,19,* The Initial Developer of the Original Code is
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,20,* Netscape Communications Corporation.
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,21,* Portions created by the Initial Developer are Copyright (C) 1997-1999
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,22,* the Initial Developer. All Rights Reserved.
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,24,* Contributor(s):
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,25,*   Bob Jervis
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,26,*   Google Inc.
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,28,"* Alternatively, the contents of this file may be used under the terms of"
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,29,"* the GNU General Public License Version 2 or later (the ""GPL""), in which"
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,30,* case the provisions of the GPL are applicable instead of those above. If
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,31,* you wish to allow use of your version of this file only under the terms of
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,32,* the GPL and not to allow others to use your version of this file under the
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,33,"* MPL, indicate your decision by deleting the provisions above and replacing"
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,34,* them with the notice and other provisions required by the GPL. If you do
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,35,"* not delete the provisions above, a recipient may use your version of this"
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,36,* file under either the MPL or the GPL.
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,38,* ***** END LICENSE BLOCK ***** */
False,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,17,ackage com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,40,package com.google.javascript.rhino.jstype;
False,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,37,emplateTypeMapReplacer(
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java,60,public TemplateTypeMapReplacer(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3854,public void testBadImplementsDuplicateInterface1() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3855,// verify that the same base (not templatized) interface cannot be
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3856,// @implemented more than once.
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3857,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3858,"""/** @interface \n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3859,""" * @template T\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3860,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3861,"""function Foo() {}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3862,"""/** @constructor \n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3863,""" * @implements {Foo.<?>}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3864,""" * @implements {Foo}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3865,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3866,"""function A() {}\n"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3867,"""Cannot @implement the same interface more than once\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3868,"""Repeated interface: Foo"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3871,public void testBadImplementsDuplicateInterface2() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3872,// verify that the same base (not templatized) interface cannot be
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3873,// @implemented more than once.
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3874,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3875,"""/** @interface \n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3876,""" * @template T\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3877,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3878,"""function Foo() {}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3879,"""/** @constructor \n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3880,""" * @implements {Foo.<string>}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3881,""" * @implements {Foo.<number>}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3882,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3883,"""function A() {}\n"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3884,"""Cannot @implement the same interface more than once\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,3885,"""Repeated interface: Foo"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10829,public void testTemplateType11() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10830,// verify that assignment/subtype relationships work when extending
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10831,// templatized types.
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10832,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10833,"""/** @constructor \n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10834,""" * @template T\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10835,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10836,"""function Foo() {}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10838,"""/** @constructor \n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10839,""" * @extends {Foo.<string>}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10840,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10841,"""function A() {}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10843,"""/** @constructor \n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10844,""" * @extends {Foo.<number>}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10845,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10846,"""function B() {}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10848,"""/** @type {!Foo.<string>} */ var a = new A();\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10849,"""/** @type {!Foo.<string>} */ var b = new B();"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10850,"""initializing variable\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10851,"""found   : B\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10852,"""required: Foo.<string>"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10855,public void testTemplateType12() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10856,// verify that assignment/subtype relationships work when implementing
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10857,// templatized types.
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10858,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10859,"""/** @interface \n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10860,""" * @template T\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10861,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10862,"""function Foo() {}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10864,"""/** @constructor \n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10865,""" * @implements {Foo.<string>}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10866,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10867,"""function A() {}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10869,"""/** @constructor \n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10870,""" * @implements {Foo.<number>}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10871,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10872,"""function B() {}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10874,"""/** @type {!Foo.<string>} */ var a = new A();\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10875,"""/** @type {!Foo.<string>} */ var b = new B();"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10876,"""initializing variable\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10877,"""found   : B\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10878,"""required: Foo.<string>"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10881,public void testTemplateType13() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10882,// verify that assignment/subtype relationships work when extending
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10883,// templatized types.
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10884,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10885,"""/** @constructor \n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10886,""" * @template T\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10887,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10888,"""function Foo() {}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10890,"""/** @constructor \n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10891,""" * @template T\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10892,""" * @extends {Foo.<T>}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10893,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10894,"""function A() {}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10896,"""var a1 = new A();\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10897,"""var a2 = /** @type {!A.<string>} */ (new A());\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10898,"""var a3 = /** @type {!A.<number>} */ (new A());\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10899,"""/** @type {!Foo.<string>} */ var f1 = a1;\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10900,"""/** @type {!Foo.<string>} */ var f2 = a2;\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10901,"""/** @type {!Foo.<string>} */ var f3 = a3;"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10902,"""initializing variable\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10903,"""found   : A.<number>\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10904,"""required: Foo.<string>"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10907,public void testTemplateType14() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10908,// verify that assignment/subtype relationships work when implementing
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10909,// templatized types.
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10910,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10911,"""/** @interface \n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10912,""" * @template T\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10913,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10914,"""function Foo() {}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10916,"""/** @constructor \n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10917,""" * @template T\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10918,""" * @implements {Foo.<T>}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10919,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10920,"""function A() {}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10922,"""var a1 = new A();\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10923,"""var a2 = /** @type {!A.<string>} */ (new A());\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10924,"""var a3 = /** @type {!A.<number>} */ (new A());\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10925,"""/** @type {!Foo.<string>} */ var f1 = a1;\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10926,"""/** @type {!Foo.<string>} */ var f2 = a2;\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10927,"""/** @type {!Foo.<string>} */ var f3 = a3;"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10928,"""initializing variable\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10929,"""found   : A.<number>\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,10930,"""required: Foo.<string>"");"

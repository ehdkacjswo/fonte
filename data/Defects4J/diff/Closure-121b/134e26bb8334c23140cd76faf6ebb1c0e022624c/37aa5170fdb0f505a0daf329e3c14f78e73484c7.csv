is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,2,* Copyright 2008 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,21,import java.util.List;
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,24,* An implementation of a {@link WarningsGuard} that can modify the
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,25,"* {@link CheckLevel} based on the file that caused the warning, and whether"
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,26,* this file matches a set of paths (specified either as include or exclude
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,27,* of path name parts).
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,29,* <p>For example:
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,30,* <pre>
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,31,* List<String> paths = new ArrayList<String>();
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,32,"* paths.add(""foo"");"
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,33,* WarningsGuard guard =
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,34,"*     ByPathWarningsGuard.forPath(paths, CheckLevel.ERROR, 1);"
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,35,* </pre>
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,37,"* This guard will convert any warning that came from a file that contains ""foo"""
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,38,* in its path to an error.
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,41,public class ByPathWarningsGuard extends WarningsGuard {
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,42,private static final long serialVersionUID = 1L;
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,44,private final List<String> paths;
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,45,private final boolean include;
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,46,private final int priority;
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,47,private CheckLevel level;
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,50,* Constructs a new instance. The priority is determined by the
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,51,"* {@link CheckLevel}: ERROR have Priority.STRICT, and OFF have priority"
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,52,* FILTER_BY_PATH.
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,54,* Use {@link #forPath} or {@link #exceptPath} to actually create a new
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,55,* instance.
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,57,private ByPathWarningsGuard(
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,58,"List<String> paths, boolean include, CheckLevel level) {"
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,59,Preconditions.checkArgument(paths != null);
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,60,Preconditions.checkArgument(
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,61,level == CheckLevel.OFF || level == CheckLevel.ERROR);
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,62,this.paths = paths;
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,63,this.include = include;
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,64,this.level = level;
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,65,this.priority = level == CheckLevel.ERROR ?
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,66,WarningsGuard.Priority.STRICT.value :
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,67,WarningsGuard.Priority.FILTER_BY_PATH.value;
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,71,* @param paths Paths for matching.
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,72,* @param level The {@link CheckLevel} to apply on affected files.
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,73,* @return a new {@link ByPathWarningsGuard} that would affect any file in the
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,74,*     given set of paths.
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,76,public static ByPathWarningsGuard forPath(
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,77,"List<String> paths, CheckLevel level) {"
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,78,"return new ByPathWarningsGuard(paths, true, level);"
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,82,* @param paths Paths for matching.
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,83,* @param level The {@link CheckLevel} to apply on affected files.
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,84,* @return a new {@link ByPathWarningsGuard} that would affect any file not
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,85,*     in the given set of paths.
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,87,public static ByPathWarningsGuard exceptPath(
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,88,"List<String> paths, CheckLevel level) {"
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,89,"return new ByPathWarningsGuard(paths, false, level);"
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,92,@Override
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,93,public CheckLevel level(JSError error) {
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,94,final String errorPath = error.sourceName;
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,95,CheckLevel defaultLevel = error.getDefaultLevel();
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,96,if (defaultLevel != CheckLevel.ERROR && errorPath != null) {
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,97,boolean inPath = false;
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,98,for (String path : paths) {
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,99,inPath |= errorPath.contains(path);
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,101,if (inPath == include) {
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,102,return level;
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,105,return null;
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,108,@Override
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,109,protected int getPriority() {
True,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,src/com/google/javascript/jscomp/ByPathWarningsGuard.java,110,return priority;
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,20,import com.google.common.collect.Lists;
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,22,import java.util.List;
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,39,rivate final String[] paths;
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,40,rivate final ShowType showType;
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,42,private final ByPathWarningsGuard warningsGuard;
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,57,his.paths = paths;
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,58,his.showType = showType;
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,59,List<String> pathList = Lists.newArrayList(paths);
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,60,if (showType == ShowType.INCLUDE) {
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,61,"warningsGuard = ByPathWarningsGuard.exceptPath(pathList, CheckLevel.OFF);"
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,62,} else {
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,63,"warningsGuard = ByPathWarningsGuard.forPath(pathList, CheckLevel.OFF);"
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,63,inal String errorPath = error.sourceName;
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,64,f (error.getDefaultLevel() != CheckLevel.ERROR && errorPath != null) {
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,65,oolean inPath = false;
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,66,or (String path : paths) {
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,67,nPath |= errorPath.contains(path);
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,69,f (inPath ^ (showType == ShowType.INCLUDE)) {
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,70,eturn CheckLevel.OFF;
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,73,eturn null;
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,69,return warningsGuard.level(error);
False,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,78,eturn WarningsGuard.Priority.FILTER_BY_PATH.value; // applied first
True,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java,74,return warningsGuard.getPriority();

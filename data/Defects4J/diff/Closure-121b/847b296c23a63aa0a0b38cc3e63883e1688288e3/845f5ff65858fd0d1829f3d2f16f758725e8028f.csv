is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,20,import com.google.common.base.Charsets;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,36,import java.nio.charset.Charset;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,213,"@FlagSpec(help = ""Input charset for all files."")"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,214,"static final Flag<String> FLAG_charset = Flag.value("""");"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,220,private static Charset inputCharset;
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,266,inal protected void setRunOptions(B options) throws IOException {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,273,final protected void setRunOptions(B options)
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,274,"throws IOException, FlagUsageException {"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,297,inputCharset = getInputCharset();
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,341,nputs.add(JSSourceFile.fromFile(filename));
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,351,"JSSourceFile newFile = JSSourceFile.fromFile(filename, inputCharset);"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,352,inputs.add(newFile);
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,594,"f (!options.jsOutputFile.equals("""")) {"
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,595,ut = new PrintStream(options.jsOutputFile);
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,605,// Let the outputCharset be the same as the input charset... except if
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,606,"// we're reading in UTF-8 by default.  By tradition, we've always"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,607,"// output ASCII to avoid various hiccups with different browsers,"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,608,// proxies and firewalls.
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,609,if (inputCharset == Charsets.UTF_8) {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,610,options.outputCharset = Charsets.US_ASCII;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,611,} else {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,612,options.outputCharset = inputCharset;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,615,if (!options.jsOutputFile.isEmpty()) {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,616,"out = new PrintStream(options.jsOutputFile, inputCharset.name());"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,729,"* Query the flag for the charset, and return a Charset object representing"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,730,* the selection.  Keep this in a separate function
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,731,* so it can be called both in static and normal methods.
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,733,* @return Charset to use when reading inputs
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,734,* @throws FlagUsageException if flag is not a valid Charset name.
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,736,private static Charset getInputCharset() throws FlagUsageException {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,737,if (!FLAG_charset.get().isEmpty()) {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,738,if (!Charset.isSupported(FLAG_charset.get())) {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,739,throw new FlagUsageException(FLAG_charset.get() +
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,740,""" is not a valid charset name."");"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,742,return Charset.forName(FLAG_charset.get());
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,744,return Charsets.UTF_8;
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,772,f (sourceMapPath.contains(File.separator)) {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,812,"if (sourceMapPath.contains(""/"") || sourceMapPath.contains(""\\"")) {"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,19,import com.google.common.base.Charsets;
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,26,import java.nio.charset.Charset;
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,27,import java.nio.charset.CharsetEncoder;
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,37,odeGenerator(CodeConsumer consumer) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,40,private final CharsetEncoder outputCharsetEncoder;
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,42,"CodeGenerator(CodeConsumer consumer, Charset outputCharset) {"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,44,if (outputCharset == null || outputCharset == Charsets.US_ASCII) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,45,"// If we want our default (pretending to be UTF-8, but escaping anything"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,46,"// outside of straight ASCII), then don't use the encoder, but"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,47,// just special-case the code.  This keeps the normal path through
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,48,// the code identical to how it's been for years.
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,49,this.outputCharsetEncoder = null;
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,50,} else {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,51,this.outputCharsetEncoder = outputCharset.newEncoder();
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,55,CodeGenerator(CodeConsumer consumer) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,56,"this(consumer, null);"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,224,tring regexp = regexpEscape(first.getString());
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,242,"String regexp = regexpEscape(first.getString(), outputCharsetEncoder);"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,498,dd(jsString(n.getString()));
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,516,"add(jsString(n.getString(), outputCharsetEncoder));"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,733,tatic String jsString(String s) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,751,"static String jsString(String s, CharsetEncoder outputCharsetEncoder) {"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,758,"eturn strEscape(s, quote, doublequote, singlequote, ""\\\\"");"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,776,"return strEscape(s, quote, doublequote, singlequote, ""\\\\"","
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,777,outputCharsetEncoder);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,781,"static String regexpEscape(String s, CharsetEncoder outputCharsetEncoder) {"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,782,"return strEscape(s, '/', ""\"""", ""'"", ""\\"", outputCharsetEncoder);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,785,"/* If the user doesn't want to specify an output charset encoder, assume"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,786,they want Latin/ASCII characters only.
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,763,"eturn strEscape(s, '/', ""\"""", ""'"", ""\\"");"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,789,"return regexpEscape(s, null);"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,770,tring backslashEscape) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,796,"String backslashEscape,"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,797,CharsetEncoder outputCharsetEncoder) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,801,/ Please keep in sync with the same code in identifierEscape().
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,802,f (c > 0x1F && c < 0x7F) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,803,/ Non-control ASCII characters are safe to transmit
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,804,b.append(c);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,828,"// If we're given an outputCharsetEncoder, then check if the"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,829,//  character can be represented in this character set.
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,830,if (outputCharsetEncoder != null) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,831,if (outputCharsetEncoder.canEncode(c)) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,832,sb.append(c);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,833,} else {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,834,// Unicode-escape the character.
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,835,"StringUtil.appendHexJavaScriptRepresentation(sb, c);"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,806,"/ Other characters can be misinterpreted by some js parsers,"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,807,"/ or perhaps mangled by proxies along the way,"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,808,/ so we play it safe and unicode escape them.
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,809,"tringUtil.appendHexJavaScriptRepresentation(sb, c);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,838,// No charsetEncoder provided - pass straight latin characters
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,839,"// through, and escape the rest.  Doing the explicit character"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,840,// check is measurably faster than using the CharsetEncoder.
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,841,if (c > 0x1f && c <= 0x7f) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,842,sb.append(c);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,843,} else {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,844,"// Other characters can be misinterpreted by some js parsers,"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,845,"// or perhaps mangled by proxies along the way,"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,846,// so we play it safe and unicode escape them.
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,847,"StringUtil.appendHexJavaScriptRepresentation(sb, c);"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,827,/ See comments for the same code in strEscape(). Please keep in sync.
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,866,// Identifiers should always go to Latin1/ ASCII characters because
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,867,// different browser's rules for valid identifier characters are
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,868,// crazy.
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,22,import java.nio.charset.Charset;
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,485,"// Specify a charset to use when outputting source code.  If null,"
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,486,// then just output ASCII.
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,487,private Charset outputCharset = null;
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,546,Builder setOutputCharset(Charset outCharset) {
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,547,this.outputCharset = outCharset;
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,548,return this;
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,558,ourceMap);
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,567,"sourceMap, outputCharset);"
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,573,ourceMap sourceMap) {
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,582,"SourceMap sourceMap,"
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,583,Charset outputCharset) {
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,582, new TypedCodeGenerator(cp)
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,583, new CodeGenerator(cp);
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,592,"? new TypedCodeGenerator(cp, outputCharset)"
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,593,": new CodeGenerator(cp, outputCharset);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,545,if (options_.devMode == DevMode.START_AND_END) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,546,runSanityCheck();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,658,rivate void maybeSanityCheck(String passName) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,662,private void maybeSanityCheck() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,660,"anityCheck.create(this).process(null, jsRoot);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,664,runSanityCheck();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,668,private void runSanityCheck() {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,669,"sanityCheck.create(this).process(null, jsRoot);"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,728,aybeSanityCheck(passToCheck);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,736,maybeSanityCheck();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,972,"anityCheck.create(this).process(null, n);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,980,runSanityCheck();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1206,builder.setOutputCharset(options_.outputCharset);
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,27,import java.nio.charset.Charset;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,532,"* Charset to use when generating code.  If null, then output ASCII."
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,534,public Charset outputCharset;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,854,* At the start and at the end of all optimizations.
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,856,"START_AND_END,"
False,src/com/google/javascript/jscomp/CompilerRunner.java,src/com/google/javascript/jscomp/CompilerRunner.java,66,rivate static final Flag<Boolean> FLAG_use_only_custom_externs
True,src/com/google/javascript/jscomp/CompilerRunner.java,src/com/google/javascript/jscomp/CompilerRunner.java,66,static final Flag<Boolean> FLAG_use_only_custom_externs
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,20,import com.google.common.collect.HashMultimap;
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,22,mport com.google.common.collect.Multimaps;
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,127,"rivate final Multimap<Node, Node> finallyMap = Multimaps.newHashMultimap();"
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,126,"private final Multimap<Node, Node> finallyMap = HashMultimap.create();"
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,19,import com.google.common.collect.HashMultimap;
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,23,mport com.google.common.collect.Multimaps;
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,31,mport com.google.javascript.jscomp.graph.UnionFind;
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,32,import com.google.javascript.jscomp.graph.UnionFind;
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,46,mport java.util.logging.Logger;
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,49,import java.util.logging.Logger;
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,542,"ultimap<String, Collection<T>> ret = Multimaps.newHashMultimap();"
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,542,"Multimap<String, Collection<T>> ret = HashMultimap.create();"
True,src/com/google/javascript/jscomp/FunctionRewriter.java,src/com/google/javascript/jscomp/FunctionRewriter.java,19,import com.google.common.collect.HashMultimap;
False,src/com/google/javascript/jscomp/FunctionRewriter.java,src/com/google/javascript/jscomp/FunctionRewriter.java,21,mport com.google.common.collect.Multimaps;
False,src/com/google/javascript/jscomp/FunctionRewriter.java,src/com/google/javascript/jscomp/FunctionRewriter.java,65,"ultimap<Reducer, Reduction> reductionMap = Multimaps.newHashMultimap();"
True,src/com/google/javascript/jscomp/FunctionRewriter.java,src/com/google/javascript/jscomp/FunctionRewriter.java,65,"Multimap<Reducer, Reduction> reductionMap = HashMultimap.create();"
True,src/com/google/javascript/jscomp/JSSourceFile.java,src/com/google/javascript/jscomp/JSSourceFile.java,21,import com.google.common.base.Charsets;
True,src/com/google/javascript/jscomp/JSSourceFile.java,src/com/google/javascript/jscomp/JSSourceFile.java,26,import java.nio.charset.Charset;
True,src/com/google/javascript/jscomp/JSSourceFile.java,src/com/google/javascript/jscomp/JSSourceFile.java,38,"public static JSSourceFile fromFile(String fileName, Charset charSet) {"
True,src/com/google/javascript/jscomp/JSSourceFile.java,src/com/google/javascript/jscomp/JSSourceFile.java,39,"return new JSSourceFile(SourceFile.fromFile(fileName, charSet));"
False,src/com/google/javascript/jscomp/JSSourceFile.java,src/com/google/javascript/jscomp/JSSourceFile.java,37,eturn new JSSourceFile(SourceFile.fromFile(fileName));
True,src/com/google/javascript/jscomp/JSSourceFile.java,src/com/google/javascript/jscomp/JSSourceFile.java,43,"return new JSSourceFile(SourceFile.fromFile(fileName, Charsets.UTF_8));"
True,src/com/google/javascript/jscomp/JSSourceFile.java,src/com/google/javascript/jscomp/JSSourceFile.java,46,"public static JSSourceFile fromFile(File file, Charset charSet) {"
True,src/com/google/javascript/jscomp/JSSourceFile.java,src/com/google/javascript/jscomp/JSSourceFile.java,47,"return new JSSourceFile(SourceFile.fromFile(file, charSet));"
False,src/com/google/javascript/jscomp/JSSourceFile.java,src/com/google/javascript/jscomp/JSSourceFile.java,41,eturn new JSSourceFile(SourceFile.fromFile(file));
True,src/com/google/javascript/jscomp/JSSourceFile.java,src/com/google/javascript/jscomp/JSSourceFile.java,51,"return new JSSourceFile(SourceFile.fromFile(file, Charsets.UTF_8));"
True,src/com/google/javascript/jscomp/MethodCheck.java,src/com/google/javascript/jscomp/MethodCheck.java,19,import com.google.common.collect.HashMultimap;
False,src/com/google/javascript/jscomp/MethodCheck.java,src/com/google/javascript/jscomp/MethodCheck.java,20,mport com.google.common.collect.Multimaps;
False,src/com/google/javascript/jscomp/MethodCheck.java,src/com/google/javascript/jscomp/MethodCheck.java,50,ultimaps.newHashMultimap();
True,src/com/google/javascript/jscomp/MethodCheck.java,src/com/google/javascript/jscomp/MethodCheck.java,49,HashMultimap.create();
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,19,import com.google.common.collect.HashMultimap;
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,21,mport com.google.common.collect.Multimaps;
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,49,ultimaps.newHashMultimap();
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,49,HashMultimap.create();
True,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,20,import com.google.common.collect.HashMultimap;
False,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,23,mport com.google.common.collect.Multimaps;
False,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,28,mport com.google.javascript.jscomp.graph.LinkedDirectedGraph;
True,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,29,import com.google.javascript.jscomp.graph.LinkedDirectedGraph;
False,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,69,eferenceMap = Multimaps.newHashMultimap();
True,src/com/google/javascript/jscomp/NameReferenceGraph.java,src/com/google/javascript/jscomp/NameReferenceGraph.java,69,referenceMap = HashMultimap.create();
False,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,19,mport javax.annotation.Nullable;
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,21,import com.google.common.collect.HashMultimap;
False,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,23,mport com.google.common.collect.Multimaps;
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,39,import javax.annotation.Nullable;
False,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,58,ultimaps.newHashMultimap();
True,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java,59,HashMultimap.create();
True,src/com/google/javascript/jscomp/SimpleDefinitionFinder.java,src/com/google/javascript/jscomp/SimpleDefinitionFinder.java,20,import com.google.common.collect.HashMultimap;
False,src/com/google/javascript/jscomp/SimpleDefinitionFinder.java,src/com/google/javascript/jscomp/SimpleDefinitionFinder.java,22,mport com.google.common.collect.Multimaps;
False,src/com/google/javascript/jscomp/SimpleDefinitionFinder.java,src/com/google/javascript/jscomp/SimpleDefinitionFinder.java,54,his.nameDefinitionMultimap = Multimaps.newHashMultimap();
False,src/com/google/javascript/jscomp/SimpleDefinitionFinder.java,src/com/google/javascript/jscomp/SimpleDefinitionFinder.java,55,his.nameUseSiteMultimap = Multimaps.newHashMultimap();
True,src/com/google/javascript/jscomp/SimpleDefinitionFinder.java,src/com/google/javascript/jscomp/SimpleDefinitionFinder.java,54,this.nameDefinitionMultimap = HashMultimap.create();
True,src/com/google/javascript/jscomp/SimpleDefinitionFinder.java,src/com/google/javascript/jscomp/SimpleDefinitionFinder.java,55,this.nameUseSiteMultimap = HashMultimap.create();
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,30,import java.nio.charset.Charset;
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,208,"public static SourceFile fromFile(String fileName, Charset c) {"
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,209,"return fromFile(new File(fileName), c);"
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,216,"public static SourceFile fromFile(File file, Charset c) {"
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,217,"return new OnDisk(file, c);"
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,299,"// This is stored as a String, but passed in and out as a Charset so that"
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,300,// we can serialize the class.
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,301,// Default input file format for JSCompiler has always been UTF_8.
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,302,protected String inputCharset = Charsets.UTF_8.name();
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,304,"OnDisk(File file, Charset c) {"
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,305,this(file);
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,306,if (c != null) {
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,307,this.setCharset(c);
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,311,// No Charset provided?
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,292,his.file = file;
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,314,this.file = file;
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,300,"achedCode = Files.toString(file, Charsets.UTF_8);"
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,322,"cachedCode = Files.toString(file, this.getCharset());"
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,336,"* Store the Charset specification as the string version of the name,"
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,337,* rather than the Charset itself.  This allows us to serialize the
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,338,* SourceFile class.
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,339,* @param c charset to use when reading the input.
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,341,public void setCharset(Charset c) {
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,342,inputCharset = c.name();
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,346,* Get the Charset specifying how we're supposed to read the file
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,347,* in off disk and into UTF-16.  This is stored as a strong to allow
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,348,* SourceFile to be serialized.
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,349,* @return Charset object representing charset to use.
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,351,public Charset getCharset() {
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,352,return Charset.forName(inputCharset);
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,25,import java.nio.charset.Charset;
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,32,ypedCodeGenerator(CodeConsumer consumer) {
False,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,33,uper(consumer);
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,34,"TypedCodeGenerator(CodeConsumer consumer, Charset outputCharset) {"
True,src/com/google/javascript/jscomp/TypedCodeGenerator.java,src/com/google/javascript/jscomp/TypedCodeGenerator.java,35,"super(consumer, outputCharset);"
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,61,options.checkControlStructures = true;
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,23,mport com.google.javascript.rhino.JSDocInfo;
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,24,mport com.google.javascript.rhino.jstype.JSTypeRegistry;
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,25,mport com.google.javascript.rhino.Node;
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,26,mport com.google.javascript.rhino.ScriptOrFnNode;
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,27,mport com.google.javascript.rhino.Token;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,22,import com.google.common.collect.Sets;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,23,import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,67,import com.google.javascript.rhino.JSDocInfo;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,68,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,69,import com.google.javascript.rhino.ScriptOrFnNode;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,70,import com.google.javascript.rhino.Token;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,71,import com.google.javascript.rhino.jstype.JSTypeRegistry;
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,73,mport com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,73,import java.util.Set;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,94,// non-static for thread safety
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,95,"private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet(""use strict"");"
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,369,parseDirectives(node);
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,374,"* Parse the directives, encode them in the AST, and remove their nodes."
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,376,"* For information on ES5 directives, see section 14.1 of"
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,377,"* Ecma-262, Edition 5."
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,379,* It would be nice if Rhino would eventually take care of this for
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,380,"* us, but right now their directive-processing is a one-off."
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,382,private void parseDirectives(Node node) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,383,"// Remove all the directives, and encode them in the AST."
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,384,Set<String> directives = null;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,385,while (isDirective(node.getFirstChild())) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,386,String directive = node.removeFirstChild().getFirstChild().getString();
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,387,if (directives == null) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,388,directives = Sets.newHashSet(directive);
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,389,} else {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,390,directives.add(directive);
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,394,if (directives != null) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,395,node.setDirectives(directives);
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,399,private boolean isDirective(Node n) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,400,if (n == null) return false;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,402,int nType = n.getType();
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,403,return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,404,n.getFirstChild().getType() == Token.STRING &&
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,405,ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,531,ode.addChildToBack(transform(functionNode.getBody()));
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,571,Node bodyNode = transform(functionNode.getBody());
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,572,parseDirectives(bodyNode);
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,573,node.addChildToBack(bodyNode);
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,43,mport com.google.javascript.rhino.jstype.JSType;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,45,import com.google.javascript.rhino.jstype.JSType;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,53,import java.util.Set;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,149,AST_PROP          = 47;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,150,"DIRECTIVES         = 48,    // The ES5 directives on this node."
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,151,LAST_PROP          = 48;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1914,* Sets the ES5 directives on this node.
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1916,public void setDirectives(Set<String> val) {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1917,"putProp(DIRECTIVES, val);"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1921,* Returns the set of ES5 directives for this node.
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1923,public Set<String> getDirectives() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1924,return (Set<String>) getProp(DIRECTIVES);
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,43,import com.google.common.collect.HashMultimap;
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,45,mport com.google.common.collect.Multimaps;
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,125,ultimaps.newHashMultimap();
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,125,HashMultimap.create();
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,55,// NOTE(nicksantos): ANT needs this for some weird reason.
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,56,AbstractCompilerRunner.FLAG_define.resetForTest();
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,108,public void testScriptStrictModeNoWarning() {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,109,"test(""'use strict';"", """");"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,110,"test(""'no use strict';"", CheckSideEffects.USELESS_CODE_ERROR);"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,113,public void testFunctionStrictModeNoWarning() {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,114,"test(""function f() {'use strict';}"", ""function f() {}"");"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,115,"test(""function f() {'no use strict';}"","
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,116,CheckSideEffects.USELESS_CODE_ERROR);
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,188,} catch (AbstractCompilerRunner.FlagUsageException e) {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,189,"fail(""Unexpected exception "" + e);"
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,103,public void testRemoveUselessStrings() {
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,104,"test(""'a';"", """");"
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,107,public void testNoRemoveUseStrict() {
True,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,108,"test(""'use strict';"", ""'use strict'"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,19,import com.google.common.collect.Sets;
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,37,public void testStrictScript() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,38,"assertNull(newParse("""").getDirectives());"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,39,assertEquals(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,40,"Sets.newHashSet(""use strict""),"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,41,"newParse(""'use strict'"").getDirectives());"

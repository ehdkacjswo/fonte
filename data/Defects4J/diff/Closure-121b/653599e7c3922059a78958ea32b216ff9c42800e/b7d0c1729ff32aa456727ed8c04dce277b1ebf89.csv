is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,227,f (typeArray.getType() == Token.ARRAYLIT
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,228,& !NodeUtil.isSparseArray(typeArray)) {
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,227,if (typeArray.getType() == Token.ARRAYLIT) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,206,"ddArrayList(first, (int[]) n.getProp(Node.SKIP_INDEXES_PROP));"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,206,addArrayList(first);
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,878," @param skipIndexes If not null, then the array of skipped entries in the"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,879, array.
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,881,"oid addArrayList(Node firstInList, int[] skipIndexes) {"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,882,nt nextSlot = 0;
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,883,nt nextSkipSlot = 0;
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,879,void addArrayList(Node firstInList) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,880,boolean lastWasEmpty = false;
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,885,hile (skipIndexes != null && nextSkipSlot < skipIndexes.length) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,886,f (nextSlot == skipIndexes[nextSkipSlot]) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,887,c.listSeparator();
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,888,extSlot++;
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,889,extSkipSlot++;
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,890, else {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,891,reak;
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,898,extSlot++;
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,886,lastWasEmpty = n.getType() == Token.EMPTY;
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,889,if (lastWasEmpty) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,890,cc.listSeparator();
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,213,"eturn NodeUtil.isNullOrUndefined(n) ? """" : getStringValue(n);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,213,return (NodeUtil.isNullOrUndefined(n) || n.getType() == Token.EMPTY)
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,214,"? """" : getStringValue(n);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,218,nt[] skipIndexes = (int[]) literal.getProp(Node.SKIP_INDEXES_PROP);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,223,hile (skipIndexes != null && nextSkipSlot < skipIndexes.length) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,224,f (nextSlot == skipIndexes[nextSkipSlot]) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,225,"esult.append(',');"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,226,extSlot++;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,227,extSkipSlot++;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,228, else {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,229,reak;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,500,for (Node child = n.getFirstChild(); child != null;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,501,child = child.getNext()) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,502,if (child.getType() != Token.EMPTY
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,503,"&& !isLiteralValue(child, includeFunctions)) {"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,504,return false;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,507,return true;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1853, Is this an sparse ARRAYLIT node
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1855,tatic boolean isSparseArray(Node node) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1856,reconditions.checkArgument(isArrayLiteral(node));
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1857,nt[] skipList = (int[]) node.getProp(Node.SKIP_INDEXES_PROP);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1858,eturn skipList != null && skipList.length > 0;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1320,odeUtil.isSparseArray(arrayNode) ||
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1325,/ TODO(johnlenz): handle sparse arrays
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1335,f (NodeUtil.isImmutableValue(elem)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1332,if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1527,f (left.getType() == Token.ARRAYLIT && !NodeUtil.isSparseArray(left)) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1528,/ TODO(johnlenz): handle sparse arrays
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1524,if (left.getType() == Token.ARRAYLIT) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1553,if (elem.getType() == Token.EMPTY) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1554,elem = NodeUtil.newUndefinedNode(elem);
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1555,} else {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1556,left.removeChild(elem);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1559,eft.removeChild(elem);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1578,/ TODO(johnlenz): handle sparse arrays
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1579,f (NodeUtil.isSparseArray(left) || mayHaveSideEffects(left)) {
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1578,if (mayHaveSideEffects(left)) {
False,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,572,nt skipCount = 0;
False,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,574,f (child.getType() == TagType.Empty) {
False,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,575,kipCount++;
False,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,580,"/ if at least one empty element occurs, set up SKIP_INDEXES_PROP"
False,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,581,f (skipCount > 0) {
False,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,582,nt [] skipIndexes = new int[skipCount];
False,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,583,nt i = 0;
False,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,584,nt j = 0;
False,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,585,or (JsonML child : element.getChildren()) {
False,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,586,f (child.getType() == TagType.Empty) {
False,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,587,kipIndexes[i] = j;
False,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,588,+i;
False,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,590,+j;
False,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,592,"ode.putProp(Node.SKIP_INDEXES_PROP, skipIndexes);"
False,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,812,"/ nothing happens, but we make sure that the elements are"
False,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,813,/ taken into account by nodeIndex
True,src/com/google/javascript/jscomp/jsonml/Reader.java,src/com/google/javascript/jscomp/jsonml/Reader.java,793,parent.addChildToBack(new Node(Token.EMPTY));
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,306,nt[] skipIndexes = (int[]) node.getProp(Node.SKIP_INDEXES_PROP);
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,307,nt i = 0;  // next index in new array to process
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,308,nt j = 0;  // next index in skip array
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,309,nt nextToSkip = 0;
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,311,hile (skipIndexes != null && j < skipIndexes.length) {
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,312,f (i == skipIndexes[j]) {
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,313,lement.appendChild(new JsonML(TagType.Empty));
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,314,+i;
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,315,+j;
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,316, else {
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,317,reak;
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,321,+i;
False,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,435,urrentParent.appendChild(new JsonML(TagType.EmptyStmt));
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,421,if (currentParent.getType() == TagType.ArrayExpr) {
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,422,// Empty expression are only found in Array literals
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,423,currentParent.appendChild(new JsonML(TagType.Empty));
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,424,} else {
True,src/com/google/javascript/jscomp/jsonml/Writer.java,src/com/google/javascript/jscomp/jsonml/Writer.java,425,currentParent.appendChild(new JsonML(TagType.EmptyStmt));
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,343,nt skipCount = 0;
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,346,f (c.getType() == Token.EMPTY) {
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,347,kipCount++;
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,352,f (skipCount > 0) {
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,353,nt[] skipIndexes = new int[skipCount];
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,354,nt i = 0;
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,355,nt j = 0;
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,356,or (Node child : node.children()) {
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,357,f (child.getType() == Token.EMPTY) {
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,358,ode.removeChild(child);
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,359,kipIndexes[j] = i;
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,360,++;
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,362,++;
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,364,"ode.putProp(Node.SKIP_INDEXES_PROP, skipIndexes);"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1170,public void testArrayLiteral() {
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1171,"assertPrint(""var x = [,];"",""var x=[,]"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1172,"assertPrint(""var x = [,,];"",""var x=[,,]"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1173,"assertPrint(""var x = [,s,,];"",""var x=[,s,,]"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1174,"assertPrint(""var x = [,s];"",""var x=[,s]"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1175,"assertPrint(""var x = [s,];"",""var x=[s]"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,471,"oldSame(""x = [,,'a'].join(',')""); // Could be: x = ',,a'"
True,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,471,"fold(""x = [,,'a'].join(',')"", ""x = ',,a'"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,698,"oldSame(""x = [,10][0]""); // Should be ""x = void 0"";"
True,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,698,"fold(""x = [,10][0]"", ""x = void 0"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,727,"oldSame(""x = [,,1].length""); // Should be ""x = 3"""
True,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,727,"fold(""x = [,,1].length"", ""x = 3"");"
False,test/com/google/javascript/jscomp/jsonml/JsonMLConversionTest.java,test/com/google/javascript/jscomp/jsonml/JsonMLConversionTest.java,85," ""\n"" + explanation, explanation);"
True,test/com/google/javascript/jscomp/jsonml/JsonMLConversionTest.java,test/com/google/javascript/jscomp/jsonml/JsonMLConversionTest.java,85,"+ ""\n"" + explanation, explanation);"
True,test/com/google/javascript/jscomp/jsonml/JsonMLConversionTest.java,test/com/google/javascript/jscomp/jsonml/JsonMLConversionTest.java,106,"testConversion(""[,]"");"
True,test/com/google/javascript/jscomp/jsonml/JsonMLConversionTest.java,test/com/google/javascript/jscomp/jsonml/JsonMLConversionTest.java,116,public void testArray1() throws Exception {
True,test/com/google/javascript/jscomp/jsonml/JsonMLConversionTest.java,test/com/google/javascript/jscomp/jsonml/JsonMLConversionTest.java,117,"testConversion(""[,]"");"
False,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,62,"arse(""[a, , b]"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,62,"testNewParser(""[a, , b]"","
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,63,"""SCRIPT 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,64,"""    EXPR_RESULT 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,65,"""        ARRAYLIT 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,66,"""            NAME a 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,67,"""            EMPTY 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,68,"""            NAME b 0\n"");"
False,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,70,"arse(""[,,,a,,b]"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,76,"testNewParser(""[,,,a,,b]"","
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,77,"""SCRIPT 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,78,"""    EXPR_RESULT 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,79,"""        ARRAYLIT 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,80,"""            EMPTY 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,81,"""            EMPTY 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,82,"""            EMPTY 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,83,"""            NAME a 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,84,"""            EMPTY 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,85,"""            NAME b 0\n"");"

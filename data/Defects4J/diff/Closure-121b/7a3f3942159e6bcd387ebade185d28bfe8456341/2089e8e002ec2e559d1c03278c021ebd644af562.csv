is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,34,ublic class StatementFusion extends AbstractPeepholeOptimization {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,34,class StatementFusion extends AbstractPeepholeOptimization {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,35,// TODO(user): We probably need to test this more. The current compiler
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,36,"// assumes that there are more ;'s than ,'s in a real program. However,"
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,37,// this assumption may be incorrect. We can probably do a quick traverse
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,38,// to check this assumption if that's neccessary.
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,39,public static final boolean SHOULD_FAVOR_COMMA_OVER_SEMI_COLON = false;
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,41,private final boolean favorsCommaOverSemiColon;
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,43,public StatementFusion() {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,44,this(SHOULD_FAVOR_COMMA_OVER_SEMI_COLON);
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,47,public StatementFusion(boolean favorsCommaOverSemiColon) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,48,this.favorsCommaOverSemiColon = favorsCommaOverSemiColon;
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,39,/ allow more aggressve use of comma's.
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,54,// allow more aggressive use of comma's.
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,41,/ The block of a function body always need { }.
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,42,f (!n.getParent().isFunction() && canFuseIntoOneStatement(n)) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,56,if ((favorsCommaOverSemiColon || !n.getParent().isFunction())
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,57,&& canFuseIntoOneStatement(n)) {
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,53,/ Fold only statement block. NOT scripts block.
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,54,f (!block.isBlock()) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,68,"// If we are favoring semi-colon, we shouldn't fuse script blocks."
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,69,if (!favorsCommaOverSemiColon && !block.isBlock()) {
True,test/com/google/javascript/jscomp/StatementFusionTest.java,test/com/google/javascript/jscomp/StatementFusionTest.java,25,private boolean favorsCommas = false;
True,test/com/google/javascript/jscomp/StatementFusionTest.java,test/com/google/javascript/jscomp/StatementFusionTest.java,31,favorsCommas = false;
False,test/com/google/javascript/jscomp/StatementFusionTest.java,test/com/google/javascript/jscomp/StatementFusionTest.java,34,"ew PeepholeOptimizationsPass(compiler, new StatementFusion());"
True,test/com/google/javascript/jscomp/StatementFusionTest.java,test/com/google/javascript/jscomp/StatementFusionTest.java,37,new PeepholeOptimizationsPass(
True,test/com/google/javascript/jscomp/StatementFusionTest.java,test/com/google/javascript/jscomp/StatementFusionTest.java,38,"compiler, new StatementFusion(favorsCommas));"
True,test/com/google/javascript/jscomp/StatementFusionTest.java,test/com/google/javascript/jscomp/StatementFusionTest.java,99,public void testFavorComma1() {
True,test/com/google/javascript/jscomp/StatementFusionTest.java,test/com/google/javascript/jscomp/StatementFusionTest.java,100,favorsCommas = true;
True,test/com/google/javascript/jscomp/StatementFusionTest.java,test/com/google/javascript/jscomp/StatementFusionTest.java,101,"test(""a;b;c"", ""a,b,c"");"
True,test/com/google/javascript/jscomp/StatementFusionTest.java,test/com/google/javascript/jscomp/StatementFusionTest.java,104,public void testFavorComma2() {
True,test/com/google/javascript/jscomp/StatementFusionTest.java,test/com/google/javascript/jscomp/StatementFusionTest.java,105,favorsCommas = true;
True,test/com/google/javascript/jscomp/StatementFusionTest.java,test/com/google/javascript/jscomp/StatementFusionTest.java,106,"test(""a;b;c;if(d){}"", ""if(a,b,c,d){}"");"

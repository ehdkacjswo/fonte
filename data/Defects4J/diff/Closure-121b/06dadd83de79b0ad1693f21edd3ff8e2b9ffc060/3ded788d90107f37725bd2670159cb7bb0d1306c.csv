is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,31,import com.google.javascript.jscomp.graph.LinkedDirectedGraph;
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,360,"LinkedDirectedGraph<JSModule, String> toGraphvizGraph() {"
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,361,"LinkedDirectedGraph<JSModule, String> graphViz ="
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,362,LinkedDirectedGraph.create();
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,363,for (JSModule module : getAllModulesInDependencyOrder()) {
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,364,graphViz.createNode(module);
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,365,for (JSModule dep : module.getDependencies()) {
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,366,graphViz.createNode(dep);
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,367,"graphViz.connect(module, ""->"", dep);"
True,src/com/google/javascript/jscomp/JSModuleGraph.java,src/com/google/javascript/jscomp/JSModuleGraph.java,370,return graphViz;
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,2,* Copyright 2011 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,17,package com.google.javascript.jscomp.graph;
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,19,import com.google.common.base.Predicate;
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,20,import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge;
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,21,import com.google.javascript.jscomp.graph.DiGraph.DiGraphNode;
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,24,"* Prunes a graph, creating a new graph with nodes removed."
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,26,"* If a node is removed from the graph, any paths through that node"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,27,"* will be replaced with edges. In other words, if A and B are nodes"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,28,"* in the original graph and the pruned graph, then there exists a path"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,29,* from A -> B in the original graph iff there's a path from A -> B
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,30,* in the pruned graph.
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,32,* We do not make any guarantees about what edges are in the pruned graph.
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,34,* @author nicksantos@google.com (Nick Santos)
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,36,"public class GraphPruner<N, E> {"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,37,"private final DiGraph<N, E> graph;"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,39,"public GraphPruner(DiGraph<N, E> graph) {"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,40,this.graph = graph;
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,43,"public LinkedDirectedGraph<N, E> prune(Predicate<N> keep) {"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,44,"LinkedDirectedGraph<N, E> workGraph = cloneGraph(graph);"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,46,// Create a work graph where all nodes with a path between them have
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,47,// an edge.
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,48,"for (DiGraphNode<N, E> node : workGraph.getDirectedGraphNodes()) {"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,49,"for (DiGraphEdge<N, E> inEdge : node.getInEdges()) {"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,50,"for (DiGraphEdge<N, E> outEdge : node.getOutEdges()) {"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,51,N source = inEdge.getSource().getValue();
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,52,N dest = outEdge.getDestination().getValue();
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,53,"if (!workGraph.isConnectedInDirection(source, dest)) {"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,54,"workGraph.connect(source, outEdge.getValue(), dest);"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,61,// Build a complete subgraph of workGraph.
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,62,"LinkedDirectedGraph<N, E> resultGraph ="
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,63,LinkedDirectedGraph.create();
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,64,"for (DiGraphNode<N, E> node : workGraph.getDirectedGraphNodes()) {"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,65,if (keep.apply(node.getValue())) {
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,66,resultGraph.createNode(node.getValue());
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,68,"for (DiGraphEdge<N, E> outEdge : node.getOutEdges()) {"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,69,N source = node.getValue();
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,70,N dest = outEdge.getDestination().getValue();
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,71,if (keep.apply(dest)) {
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,72,resultGraph.createNode(dest);
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,73,if (source != dest &&
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,74,"!resultGraph.isConnectedInDirection(source, dest)) {"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,75,"resultGraph.connect(source, outEdge.getValue(), dest);"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,82,return resultGraph;
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,85,"private static <N, E> LinkedDirectedGraph<N, E> cloneGraph("
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,86,"DiGraph<N, E> graph) {"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,87,"LinkedDirectedGraph<N, E> newGraph = LinkedDirectedGraph.create();"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,88,"for (DiGraphNode<N, E> node : graph.getDirectedGraphNodes()) {"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,89,newGraph.createNode(node.getValue());
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,91,"for (DiGraphEdge<N, E> outEdge : node.getOutEdges()) {"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,92,N dest = outEdge.getDestination().getValue();
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,93,newGraph.createNode(dest);
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,94,"newGraph.connect(node.getValue(), outEdge.getValue(), dest);"
True,src/com/google/javascript/jscomp/graph/GraphPruner.java,src/com/google/javascript/jscomp/graph/GraphPruner.java,98,return newGraph;
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,2,* Copyright 2011 The Closure Compiler Authors.
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,17,package com.google.javascript.jscomp.graph;
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,19,import com.google.common.base.Predicates;
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,20,import com.google.common.collect.Lists;
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,22,import junit.framework.TestCase;
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,25,* @author nicksantos@google.com (Nick Santos)
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,27,public class GraphPrunerTest extends TestCase {
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,29,public void testThreeNodesConnected() {
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,30,"DiGraph<String, String> graph = LinkedDirectedGraph.create();"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,31,"graph.createNode(""A"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,32,"graph.createNode(""B"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,33,"graph.createNode(""C"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,34,"graph.connect(""A"", ""--"", ""B"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,35,"graph.connect(""B"", ""--"", ""C"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,37,"DiGraph<String, String> pruned ="
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,38,"new GraphPruner<String, String>(graph).prune("
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,39,"Predicates.in(Lists.newArrayList(""A"", ""C"")));"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,40,"assertEquals(2, pruned.getNodes().size());"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,41,"assertTrue(pruned.isConnectedInDirection(""A"", ""C""));"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,44,public void testThreeNodesDisconnected() {
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,45,"DiGraph<String, String> graph = LinkedDirectedGraph.create();"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,46,"graph.createNode(""A"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,47,"graph.createNode(""B"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,48,"graph.createNode(""C"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,49,"graph.connect(""A"", ""--"", ""B"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,50,"graph.connect(""C"", ""--"", ""B"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,52,"DiGraph<String, String> pruned ="
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,53,"new GraphPruner<String, String>(graph).prune("
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,54,"Predicates.in(Lists.newArrayList(""A"", ""C"")));"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,55,"assertEquals(2, pruned.getNodes().size());"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,56,"assertFalse(pruned.isConnectedInDirection(""A"", ""C""));"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,59,public void testFourNodesConnected1() {
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,60,"DiGraph<String, String> graph = LinkedDirectedGraph.create();"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,61,"graph.createNode(""A"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,62,"graph.createNode(""B"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,63,"graph.createNode(""C"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,64,"graph.createNode(""D"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,65,"graph.connect(""A"", ""--"", ""C"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,66,"graph.connect(""B"", ""--"", ""C"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,67,"graph.connect(""C"", ""--"", ""D"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,68,"graph.connect(""A"", ""--"", ""D"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,70,"DiGraph<String, String> pruned ="
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,71,"new GraphPruner<String, String>(graph).prune("
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,72,"Predicates.not(Predicates.equalTo(""C"")));"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,73,"assertEquals(3, pruned.getNodes().size());"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,74,"assertTrue(pruned.isConnectedInDirection(""A"", ""D""));"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,75,"assertTrue(pruned.isConnectedInDirection(""B"", ""D""));"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,76,"assertFalse(pruned.isConnectedInDirection(""A"", ""B""));"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,79,public void testFourNodesConnected2() {
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,80,"DiGraph<String, String> graph = LinkedDirectedGraph.create();"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,81,"graph.createNode(""A"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,82,"graph.createNode(""B"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,83,"graph.createNode(""C"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,84,"graph.createNode(""D"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,85,"graph.connect(""A"", ""--"", ""B"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,86,"graph.connect(""B"", ""--"", ""C"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,87,"graph.connect(""C"", ""--"", ""D"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,89,"DiGraph<String, String> pruned ="
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,90,"new GraphPruner<String, String>(graph).prune("
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,91,"Predicates.not(Predicates.in(Lists.newArrayList(""B"", ""C""))));"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,92,"assertEquals(2, pruned.getNodes().size());"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,93,"assertTrue(pruned.isConnectedInDirection(""A"", ""D""));"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,96,public void testFiveNodesConnected() {
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,97,"DiGraph<String, String> graph = LinkedDirectedGraph.create();"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,98,"graph.createNode(""A"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,99,"graph.createNode(""B"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,100,"graph.createNode(""C"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,101,"graph.createNode(""D"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,102,"graph.createNode(""E"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,103,"graph.connect(""A"", ""--"", ""B"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,104,"graph.connect(""B"", ""--"", ""C"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,105,"graph.connect(""C"", ""--"", ""D"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,106,"graph.connect(""D"", ""--"", ""E"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,107,"graph.connect(""D"", ""--"", ""B"");"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,109,"DiGraph<String, String> pruned ="
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,110,"new GraphPruner<String, String>(graph).prune("
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,111,"Predicates.not(Predicates.in(Lists.newArrayList(""B"", ""C"", ""D""))));"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,112,"assertEquals(2, pruned.getNodes().size());"
True,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,test/com/google/javascript/jscomp/graph/GraphPrunerTest.java,113,"assertTrue(pruned.isConnectedInDirection(""A"", ""E""));"

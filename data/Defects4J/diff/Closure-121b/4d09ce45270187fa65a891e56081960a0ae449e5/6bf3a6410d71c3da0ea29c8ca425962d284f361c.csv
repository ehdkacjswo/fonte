is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/CodeConsumer.java,src/com/google/javascript/jscomp/CodeConsumer.java,53," Generates the source map from the given code consumer,"
False,src/com/google/javascript/jscomp/CodeConsumer.java,src/com/google/javascript/jscomp/CodeConsumer.java,54, appending the information it saved to the SourceMap
False,src/com/google/javascript/jscomp/CodeConsumer.java,src/com/google/javascript/jscomp/CodeConsumer.java,55, object given.
False,src/com/google/javascript/jscomp/CodeConsumer.java,src/com/google/javascript/jscomp/CodeConsumer.java,57,oid generateSourceMap(SourceMap map){
False,src/com/google/javascript/jscomp/CodeConsumer.java,src/com/google/javascript/jscomp/CodeConsumer.java,61, Returns the current length of the buffer in which
False,src/com/google/javascript/jscomp/CodeConsumer.java,src/com/google/javascript/jscomp/CodeConsumer.java,62, the generated code is being placed.
False,src/com/google/javascript/jscomp/CodeConsumer.java,src/com/google/javascript/jscomp/CodeConsumer.java,64,bstract int getCurrentBufferLength();
False,src/com/google/javascript/jscomp/CodeConsumer.java,src/com/google/javascript/jscomp/CodeConsumer.java,67, Returns the current character position on the current
False,src/com/google/javascript/jscomp/CodeConsumer.java,src/com/google/javascript/jscomp/CodeConsumer.java,68, line in the generated code.
False,src/com/google/javascript/jscomp/CodeConsumer.java,src/com/google/javascript/jscomp/CodeConsumer.java,70,bstract int getCurrentCharIndex();
False,src/com/google/javascript/jscomp/CodeConsumer.java,src/com/google/javascript/jscomp/CodeConsumer.java,73, Returns the current line in the generated code.
False,src/com/google/javascript/jscomp/CodeConsumer.java,src/com/google/javascript/jscomp/CodeConsumer.java,75,bstract int getCurrentLineIndex();
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,879,tringBuilder sb = new StringBuilder();
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,879,StringBuilder sb = new StringBuilder(s.length() + 2);
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,24,import java.util.ArrayDeque;
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,26,import java.util.Deque;
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,26,mport java.util.Stack;
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,41,/ another for compact printing.  Both implement the interface
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,42,/ HasGetCode as CodeConsumer does not have a method for getting the
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,43,/ formatted string.
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,42,// another for compact printing.
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,49,rivate interface HasGetCode {
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,50,tring getCode();
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,54,inal private Stack<Mapping> mappings;
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,49,final private Deque<Mapping> mappings;
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,52,protected final StringBuilder code = new StringBuilder(1024);
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,53,protected final int lineLengthThreshold;
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,54,protected int lineLength = 0;
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,55,protected int lineIndex = 0;
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,58,appedCodePrinter(boolean createSrcMap) {
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,57,"MappedCodePrinter(int lineLengthThreshold, boolean createSrcMap) {"
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,58,this.lineLengthThreshold = lineLengthThreshold;
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,60,his.mappings = createSrcMap ? new Stack<Mapping>() : null;
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,60,this.mappings = createSrcMap ? new ArrayDeque<Mapping>() : null;
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,117,"mappings.empty(), ""Mismatch in start and end of mapping"");"
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,117,"!mappings.isEmpty(), ""Mismatch in start and end of mapping"");"
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,130,Override
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,144,"oid reportLineCut(int lineIndex, int characterPosition) {"
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,143,"void reportLineCut(int lineIndex, int charIndex) {"
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,147,"apping.start = convertPosition(mapping.start, lineIndex,"
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,148,haracterPosition);
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,146,"mapping.start = convertPosition(mapping.start, lineIndex, charIndex);"
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,151,"apping.end = convertPosition(mapping.end, lineIndex,"
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,152,haracterPosition);
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,149,"mapping.end = convertPosition(mapping.end, lineIndex, charIndex);"
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,171,nt pLine = position.getLineNumber();
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,172,nt pChar = position.getCharacterIndex();
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,174,"/ If the position falls on the line itself, then normalize it"
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,175,/ if it falls at or after the place the newline was inserted.
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,176,f (position.getLineNumber() == lineIndex) {
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,177,f (position.getCharacterIndex() >= characterPosition) {
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,178,Line++;
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,179,Char -= characterPosition;
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,168,int originalLine = position.getLineNumber();
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,169,int originalChar = position.getCharacterIndex();
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,170,if (originalLine == lineIndex && originalChar >= characterPosition) {
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,171,"// If the position falls on the line itself, then normalize it"
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,172,// if it falls at or after the place the newline was inserted.
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,173,"return new Position(originalLine + 1, originalChar - characterPosition);"
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,174,} else {
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,175,return position;
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,183,"/ If the position falls on a line after the newline, increment its"
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,184,/ line index.
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,185,f (position.getLineNumber() > lineIndex) {
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,186,Line++;
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,179,public String getCode() {
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,180,return code.toString();
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,183,@Override
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,184,char getLastChar() {
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,185,return (code.length() > 0) ? code.charAt(code.length() - 1) : '\0';
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,189,"eturn new Position(pLine, pChar);"
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,188,protected final int getCurrentCharIndex() {
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,189,return lineLength;
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,192,protected final int getCurrentLineIndex() {
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,193,return lineIndex;
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,193,rivate static class PrettyCodePrinter
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,194,xtends MappedCodePrinter
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,195,mplements HasGetCode {
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,197,static class PrettyCodePrinter
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,198,extends MappedCodePrinter {
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,199,rivate final StringBuilder code = new StringBuilder(1024);
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,200,rivate final int lineLengthThreshold;
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,202,rivate int lineLength = 0;
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,203,rivate int lineIndex = 0;
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,211,uper(createSourceMap);
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,212,his.lineLengthThreshold = lineLengthThreshold;
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,215,ublic String getCode() {
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,216,eturn code.toString();
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,219,Override
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,220,har getLastChar() {
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,221,eturn (code.length() > 0) ? code.charAt(code.length() - 1) : '\0';
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,224,Override
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,225,nt getCurrentBufferLength() {
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,226,eturn code.length();
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,229,Override
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,230,nt getCurrentCharIndex() {
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,231,eturn lineLength;
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,234,Override
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,235,nt getCurrentLineIndex() {
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,236,eturn lineIndex;
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,210,"super(lineLengthThreshold, createSourceMap);"
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,397,xtends MappedCodePrinter
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,398,mplements HasGetCode {
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,371,extends MappedCodePrinter {
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,410,rivate final StringBuilder code = new StringBuilder(1024);
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,413,rivate final int lineLengthThreshold;
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,415,rivate int lineIndex = 0;
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,416,rivate int lineLength = 0;
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,429,uper(createSrcMap);
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,396,"super(lineLengthThreshold, createSrcMap);"
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,431,his.lineLengthThreshold = lineLengthThreshold;
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,434,ublic String getCode() {
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,435,eturn code.toString();
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,438,Override
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,439,har getLastChar() {
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,440,eturn (code.length() > 0) ? code.charAt(code.length() - 1) : '\0';
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,443,Override
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,444,nt getCurrentBufferLength() {
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,445,eturn code.length();
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,448,Override
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,449,nt getCurrentCharIndex() {
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,450,eturn lineLength;
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,453,Override
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,454,nt getCurrentLineIndex() {
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,455,eturn lineIndex;
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,641,odeConsumer cp =
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,583,MappedCodePrinter mcp =
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,648," new TypedCodeGenerator(cp, outputCharset)"
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,649," new CodeGenerator(cp, outputCharset);"
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,590,"? new TypedCodeGenerator(mcp, outputCharset)"
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,591,": new CodeGenerator(mcp, outputCharset);"
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,652,tring code = ((HasGetCode) cp).getCode();
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,594,String code = mcp.getCode();
False,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,655,p.generateSourceMap(sourceMap);
True,src/com/google/javascript/jscomp/CodePrinter.java,src/com/google/javascript/jscomp/CodePrinter.java,597,mcp.generateSourceMap(sourceMap);
False,src/com/google/javascript/jscomp/InlineCostEstimator.java,src/com/google/javascript/jscomp/InlineCostEstimator.java,99,Override
False,src/com/google/javascript/jscomp/InlineCostEstimator.java,src/com/google/javascript/jscomp/InlineCostEstimator.java,100,nt getCurrentBufferLength() {
False,src/com/google/javascript/jscomp/InlineCostEstimator.java,src/com/google/javascript/jscomp/InlineCostEstimator.java,101,eturn -1;
False,src/com/google/javascript/jscomp/InlineCostEstimator.java,src/com/google/javascript/jscomp/InlineCostEstimator.java,104,Override
False,src/com/google/javascript/jscomp/InlineCostEstimator.java,src/com/google/javascript/jscomp/InlineCostEstimator.java,105,nt getCurrentCharIndex() {
False,src/com/google/javascript/jscomp/InlineCostEstimator.java,src/com/google/javascript/jscomp/InlineCostEstimator.java,106,eturn -1;
False,src/com/google/javascript/jscomp/InlineCostEstimator.java,src/com/google/javascript/jscomp/InlineCostEstimator.java,109,Override
False,src/com/google/javascript/jscomp/InlineCostEstimator.java,src/com/google/javascript/jscomp/InlineCostEstimator.java,110,nt getCurrentLineIndex() {
False,src/com/google/javascript/jscomp/InlineCostEstimator.java,src/com/google/javascript/jscomp/InlineCostEstimator.java,111,eturn -1;
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,200,Override
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,201,nt getCurrentBufferLength() {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,202,eturn -1;
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,205,Override
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,206,nt getCurrentCharIndex() {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,207,eturn -1;
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,210,Override
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,211,nt getCurrentLineIndex() {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,212,eturn -1;
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,60,tatic final DiagnosticType STRIP_ASSIGNMENT_ERROR = DiagnosticType.error(
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,61,"JSC_STRIP_ASSIGNMENT_ERROR"","
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,62,"Unable to strip assignment to {0}"");"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,96,/ Any additional types added to this switch statement should
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,97,/ also be added to the guard in
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,98,/ maybeReplaceDirectReferenceToStrippedType() to prevent
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,99,/ interference.
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,107,f (qualifiedNameBeginsWithStripType(n)) {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,108,"aybeReplaceDirectReferenceToStrippedType(t, n);"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,109, else {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,110,"aybeRemoveReferenceToRemovedVariable(t, n, parent);"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,112,reak;
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,114,ase Token.GETPROP:
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,115,"aybeReplaceDirectReferenceToStrippedType(t, n);"
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,99,"maybeRemoveReferenceToRemovedVariable(t, n, parent);"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,290,/ Limit to EXPR_RESULT because it is not
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,291,"/ safe to eliminate assignment in complex expressions,"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,292,/ e.g. in ((x = 7) + 8)
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,296,ompiler.reportCodeChange();
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,297,  else {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,298,".report(n, STRIP_ASSIGNMENT_ERROR, lvalue.getQualifiedName());"
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,276,} else {
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,277,"replaceWithEmpty(n, parent);"
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,279,compiler.reportCodeChange();
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,378, Replaces a reference to a stripped type with 'void 0' when it is safe
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,379," to do so. In particular, we want to avoid stepping on the toes of other"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,380, StripCode methods.
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,382, @param t The traversal
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,383, @param n A GETPROP node or NAME node
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,385,"oid maybeReplaceDirectReferenceToStrippedType(NodeTraversal t, Node n) {"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,386,f (stripTypes.contains(n.getQualifiedName())) {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,387,ode parent = n.getParent();
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,389,/ Other methods already handle these cases
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,390,/ and we don't want to interfere with them.
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,391,/ This guard may need to be updated if additional
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,392,/ functionality is added to StripCode.
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,393,f (NodeUtil.isGet(parent)
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,394,| NodeUtil.isCall(parent)
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,395,| NodeUtil.isNew(parent)
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,396,| NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,397,eturn;
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,400,nt parentType = parent.getType();
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,402,/ Report error if stripping type would result in (void 0)++.
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,403,f (parentType == Token.INC || parentType == Token.DEC) {
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,404,".report(n, STRIP_ASSIGNMENT_ERROR, n.getQualifiedName());"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,405,eturn;
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,408,".getParent().replaceChild(n, NodeUtil.newUndefinedNode(n));"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,409,.getCompiler().reportCodeChange();
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,34,uper(EXTERNS);
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,34,"super(EXTERNS, false);"
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,53,"goog.net.BrowserChannel.LogSaver"","
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,54,"TypeWithoutNamespace"");"
True,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,53,"""goog.net.BrowserChannel.LogSaver"");"
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,307,ublic void testReplaceDirectStrippedTypeReferences() {
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,309,/ Replace direct references with undefined
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,310,"est(""if (goog.debug.Logger != null){foo()}"","
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,311,"if (void 0 != null){foo()}"");"
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,313,/ Test replacement with non-namespaced type
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,314,"est(""if (TypeWithoutNamespace != null){foo()}"","
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,315,"if (void 0 != null){foo()}"");"
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,317,/ Replace is fine in RHS of assignment
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,318,"est(""if ((x = goog.debug.Logger) != null) {foo()}"","
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,319,"if ((x = void 0) != null) {foo()}"");"
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,320,"est(""if ((x += goog.debug.Logger) != null) {foo()}"","
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,321,"if ((x += void 0) != null) {foo()}"");"
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,324,ublic void testReportErrorOnStripTypeInNestedAssignment() {
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,325,/ Don't replace if stripped type is LHS of assignment
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,326,"est(""if ((goog.debug.Logger = bar()) != null) {foo()}"","
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,327,"if ((goog.debug.Logger = bar()) != null) {foo()}"","
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,328,tripCode.STRIP_ASSIGNMENT_ERROR);
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,330,"est(""if ((goog.debug.Logger += bar()) != null) {foo()}"","
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,331,"if ((goog.debug.Logger += bar()) != null) {foo()}"","
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,332,tripCode.STRIP_ASSIGNMENT_ERROR);
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,334,/ Don't replace if stripped type is in increment/decrement
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,335,"est(""if ((goog.debug.Logger++) != null) {foo()}"","
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,336,"if ((goog.debug.Logger++) != null) {foo()}"","
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,337,tripCode.STRIP_ASSIGNMENT_ERROR);
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,339,"est(""if ((goog.debug.Logger--) != null) {foo()}"","
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,340,"if ((goog.debug.Logger--) != null) {foo()}"","
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,341,tripCode.STRIP_ASSIGNMENT_ERROR);
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,344,ublic void testReportErrorOnStripNameInNestedAssignment() {
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,345,"est(""(foo.logger_ = 7) + 8"","
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,346,"(foo.logger_ = 7) + 8"","
False,test/com/google/javascript/jscomp/StripCodeTest.java,test/com/google/javascript/jscomp/StripCodeTest.java,347,tripCode.STRIP_ASSIGNMENT_ERROR);
False,test/com/google/javascript/jscomp/graph/GraphColoringTest.java,test/com/google/javascript/jscomp/graph/GraphColoringTest.java,182,"f (o1.equals(""D"")) {"
False,test/com/google/javascript/jscomp/graph/GraphColoringTest.java,test/com/google/javascript/jscomp/graph/GraphColoringTest.java,183,eturn -1;
False,test/com/google/javascript/jscomp/graph/GraphColoringTest.java,test/com/google/javascript/jscomp/graph/GraphColoringTest.java,184," else if (o2.equals(""D"")) {"
False,test/com/google/javascript/jscomp/graph/GraphColoringTest.java,test/com/google/javascript/jscomp/graph/GraphColoringTest.java,185,eturn 1;
False,test/com/google/javascript/jscomp/graph/GraphColoringTest.java,test/com/google/javascript/jscomp/graph/GraphColoringTest.java,186, else {
False,test/com/google/javascript/jscomp/graph/GraphColoringTest.java,test/com/google/javascript/jscomp/graph/GraphColoringTest.java,187,eturn o1.toString().compareTo(o2.toString());
True,test/com/google/javascript/jscomp/graph/GraphColoringTest.java,test/com/google/javascript/jscomp/graph/GraphColoringTest.java,182,"return o1.replaceAll(""D"", ""@"").compareTo(o2.replaceAll(""D"", ""@""));"

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,53,/ TODO(user): canFuseIntoOnestatement needs to be rewritten to
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,54,/ allow more aggressive use of comma's.
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,53,// TODO(user): It is much cleaner to have two algorithms depending
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,54,// on favorsCommaOverSemiColon. If we decided the less aggressive one is
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,55,"// no longer useful, delete it."
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,56,if (favorsCommaOverSemiColon) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,57,return tryFuseStatementsAggressively(n);
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,58,} else {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,59,return tryFuseStatements(n);
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,56,f ((favorsCommaOverSemiColon || !n.getParent().isFunction())
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,57,& canFuseIntoOneStatement(n)) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,63,Node tryFuseStatements(Node n) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,64,if (!n.getParent().isFunction() && canFuseIntoOneStatement(n)) {
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,59,ode end = n.getChildBefore(n.getLastChild());
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,66,Node end = n.getLastChild();
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,74,Node tryFuseStatementsAggressively(Node n) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,75,if (!NodeUtil.isStatementBlock(n)) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,76,return n;
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,79,Node cur = n.getFirstChild();
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,80,while (cur != null) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,81,if (!cur.isExprResult()) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,82,cur = cur.getNext();
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,83,continue;
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,85,Node next = cur.getNext();
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,86,while (next != null && next.isExprResult()) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,87,next = next.getNext();
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,89,if (cur.getNext() != next) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,90,"cur = fuseIntoOneStatement(n, cur, next);"
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,91,reportCodeChange();
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,93,if (cur.isExprResult() &&
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,94,next != null && isFusableControlStatement(next)) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,95,"fuseExpressionIntoControlFlowStatement(cur, next);"
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,96,reportCodeChange();
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,97,next = next.getNext();
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,99,cur = next;
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,102,return n;
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,124,return isFusableControlStatement(last);
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,127,private boolean isFusableControlStatement(Node n) {
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,88,witch(last.getType()) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,130,switch(n.getType()) {
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,96,eturn last.hasChildren();
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,138,return n.hasChildren();
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,98,eturn NodeUtil.isForIn(last) &&
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,140,return NodeUtil.isForIn(n) &&
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,100,mayHaveSideEffects(last.getFirstChild());
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,142,!mayHaveSideEffects(n.getFirstChild());
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,111, @param last The last statement to fuse (inclusive)
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,152,* @param last The last statement to fuse (exclusive)
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,116,f (first == last) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,157,if (first.getNext() == last) {
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,122,ode onePastLast = last.getNext();
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,125,or (Node cur = first.getNext(); cur != onePastLast; cur = next) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,165,for (Node cur = first.getNext(); cur != last; cur = next) {
True,test/com/google/javascript/jscomp/StatementFusionTest.java,test/com/google/javascript/jscomp/StatementFusionTest.java,109,public void testFavorComma3() {
True,test/com/google/javascript/jscomp/StatementFusionTest.java,test/com/google/javascript/jscomp/StatementFusionTest.java,110,favorsCommas = true;
True,test/com/google/javascript/jscomp/StatementFusionTest.java,test/com/google/javascript/jscomp/StatementFusionTest.java,111,"test(""a;b;c;if(d){} d;e;f"", ""if(a,b,c,d){}d,e,f"");"
True,test/com/google/javascript/jscomp/StatementFusionTest.java,test/com/google/javascript/jscomp/StatementFusionTest.java,114,public void testFavorComma4() {
True,test/com/google/javascript/jscomp/StatementFusionTest.java,test/com/google/javascript/jscomp/StatementFusionTest.java,115,favorsCommas = true;
True,test/com/google/javascript/jscomp/StatementFusionTest.java,test/com/google/javascript/jscomp/StatementFusionTest.java,116,"test(""if(d){} d;e;f"", ""if(d){}d,e,f"");"
True,test/com/google/javascript/jscomp/StatementFusionTest.java,test/com/google/javascript/jscomp/StatementFusionTest.java,119,public void testFavorComma5() {
True,test/com/google/javascript/jscomp/StatementFusionTest.java,test/com/google/javascript/jscomp/StatementFusionTest.java,120,favorsCommas = true;
True,test/com/google/javascript/jscomp/StatementFusionTest.java,test/com/google/javascript/jscomp/StatementFusionTest.java,121,"test(""a;b;c;if(d){}d;e;f;if(g){}"", ""if(a,b,c,d){}if(d,e,f,g){}"");"

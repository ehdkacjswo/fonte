is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,34,import java.util.Arrays;
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,71,/ Remember the offset for the previous line query.  If the next line
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,72,"/ is after this point, we can start scanning at the previous offset rather"
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,73,/ than starting at the beginning of the file.
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,74,rivate int lastOffset;
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,75,rivate int lastLine;
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,91,/ Starting point: offset 0 is at line 1.
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,92,his.lastOffset = 0;
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,93,his.lastLine = 1;
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,98,f (lineOffsets == null) {
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,99,indLineOffsets();
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,90,findLineOffsets();
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,111,f (lineOffsets == null) {
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,112,indLineOffsets();
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,101,findLineOffsets();
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,107,if (lineOffsets != null) {
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,108,return;
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,189,@Override
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,190,public int getLineOfOffset(int offset) {
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,191,findLineOffsets();
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,192,"int search = Arrays.binarySearch(lineOffsets, offset);"
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,193,if (search >= 0) {
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,194,return search + 1; // lines are 1-based.
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,195,} else {
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,196,int insertionPoint = -1 * (search + 1);
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,197,"return Math.min(insertionPoint - 1, lineOffsets.length - 1) + 1;"
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,201,@Override
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,202,public int getColumnOfOffset(int offset) {
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,203,int line = getLineOfOffset(offset);
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,204,return offset - lineOffsets[line - 1];
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,216,findLineOffsets();
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,217,if (lineNumber > lineOffsets.length) {
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,218,return null;
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,221,if (lineNumber < 1) {
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,222,lineNumber = 1;
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,225,int pos = lineOffsets[lineNumber - 1];
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,216,nt pos = 0;
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,217,nt startLine = 1;
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,219,/ If we've saved a previous offset and it's for a line less than the
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,220,"/ one we're searching for, then start at that point."
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,221,f (lineNumber >= lastLine) {
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,222,os = lastOffset;
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,223,tartLine = lastLine;
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,226,or (int n = startLine; n < lineNumber; n++) {
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,227,"nt nextpos = js.indexOf('\n', pos);"
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,228,f (nextpos == -1) {
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,229,eturn null;
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,231,os = nextpos + 1;
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,234,/ Remember this offset for the next search we do.
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,235,astOffset = pos;
False,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,236,astLine = lineNumber;
True,src/com/google/javascript/rhino/jstype/SimpleSourceFile.java,src/com/google/javascript/rhino/jstype/SimpleSourceFile.java,65,@Override
True,src/com/google/javascript/rhino/jstype/SimpleSourceFile.java,src/com/google/javascript/rhino/jstype/SimpleSourceFile.java,66,public int getColumnOfOffset(int offset) {
True,src/com/google/javascript/rhino/jstype/SimpleSourceFile.java,src/com/google/javascript/rhino/jstype/SimpleSourceFile.java,67,return 0;
True,src/com/google/javascript/rhino/jstype/SimpleSourceFile.java,src/com/google/javascript/rhino/jstype/SimpleSourceFile.java,70,@Override
True,src/com/google/javascript/rhino/jstype/SimpleSourceFile.java,src/com/google/javascript/rhino/jstype/SimpleSourceFile.java,71,public int getLineOfOffset(int offset) {
True,src/com/google/javascript/rhino/jstype/SimpleSourceFile.java,src/com/google/javascript/rhino/jstype/SimpleSourceFile.java,72,return 1;
True,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,73,* Gets the 1-based line number of the given source offset.
True,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,75,* @param offset An absolute file offset.
True,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,76,* @return The 1-based line number of that offset. The behavior is
True,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,77,*     undefined if this offset does not exist in the source file.
True,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,79,int getLineOfOffset(int offset);
True,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,82,* Gets the 0-based column number of the given source offset.
True,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,84,* @param offset An absolute file offset.
True,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,85,* @return The 0-based column number of that offset. The behavior is
True,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,86,*     undefined if this offset does not exist in the source file.
True,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,88,int getColumnOfOffset(int offset);

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,48,hrows InvalidMatrixException;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,48,throws InvalidMatrixException;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,61,"hrows IllegalStateException, IllegalArgumentException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,61,"throws IllegalStateException, IllegalArgumentException, InvalidMatrixException;"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,74,"hrows IllegalStateException, IllegalArgumentException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,74,"throws IllegalStateException, IllegalArgumentException, InvalidMatrixException;"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,87,"hrows IllegalStateException, IllegalArgumentException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,87,"throws IllegalStateException, IllegalArgumentException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,90,* Check if the decomposed matrix is non-singular.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,91,* @return true if the decomposed matrix is non-singular
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,92,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,93,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,95,boolean isNonSingular() throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,97,/** Get the inverse of the decomposed matrix.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,98,* @return inverse matrix
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,99,* @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,100,* has not been called
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,101,* @throws InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,103,RealMatrix getInverse()
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,104,"throws IllegalStateException, InvalidMatrixException;"
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,99, Check if the decomposed matrix is non-singular.
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,100, @return true if the decomposed matrix is non-singular
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,101, @exception IllegalStateException if {@link
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,102, DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,103, @see #getDeterminant()
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,105,oolean isNonSingular() throws IllegalStateException;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,35,rivate static final long serialVersionUID = -9052751605297201067L;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,35,private static final long serialVersionUID = 3446121671437672843L;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,111,"hrow new InvalidMatrixException(""LU decomposition requires that the matrix be square."");"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,111,"throw new InvalidMatrixException(""LU decomposition requires that the matrix be square"");"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,416,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,417,public RealMatrix getInverse()
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,418,"throws IllegalStateException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,419,checkDecomposed();
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,420,return solve(MatrixUtils.createRealIdentityMatrix(pivot.length));
False,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,27,"   <li>several signatures have been added for the <code>solve</code> methods (in the superinterface),</code>"
False,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,28,"   <li>a <code>decompose</code> method has been added (in the superinterface),</code>"
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,27,*   <li>several signatures have been added for the <code>solve</code> methods
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,28,"*   (in the superinterface),</li>"
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,29,*   <li>a {@link DecompositionSolver#decompose(RealMatrix) decompose} method
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,30,"*   has been added (in the superinterface),</li>"
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,31,*   <li>the <code>isFullRank</code> method has been replaced by the {@link
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,32,*   DecompositionSolver#isNonSingular() isNonSingular} method in the superinterface.</li>
False,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,68, Check if the decomposed matrix is full rank.
False,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,69, @return true if the decomposed matrix is full rank
False,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,70, @exception IllegalStateException if {@link
False,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,71, DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,73,oolean isFullRank() throws IllegalStateException;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,39,rivate static final long serialVersionUID = 7560093145655650408L;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,39,private static final long serialVersionUID = -5179446891802932307L;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,270,ublic boolean isFullRank()
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,270,public boolean isNonSingular()
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,295,f (!isFullRank()) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,295,if (!isNonSingular()) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,369,f (!isFullRank()) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,369,if (!isNonSingular()) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,417,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,418,public RealMatrix getInverse()
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,419,"throws IllegalStateException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,420,checkDecomposed();
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,421,return solve(MatrixUtils.createRealIdentityMatrix(rDiag.length));
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,203,ssertTrue(qr.isFullRank());
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,203,assertTrue(qr.isNonSingular());
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,206,ssertFalse(qr.isFullRank());
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,206,assertFalse(qr.isNonSingular());
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,209,ssertFalse(qr.isFullRank());
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,209,assertFalse(qr.isNonSingular());
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,212,ssertTrue(qr.isFullRank());
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,212,assertTrue(qr.isNonSingular());
False,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,355,ew QRDecompositionImpl().isFullRank();
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,355,new QRDecompositionImpl().isNonSingular();

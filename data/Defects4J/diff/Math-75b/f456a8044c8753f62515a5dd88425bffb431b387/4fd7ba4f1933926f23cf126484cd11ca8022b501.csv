is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,64, @version $Revision: 1.3 $ $Date: 2003/07/09 20:02:43 $
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,64,* @version $Revision: 1.4 $ $Date: 2003/07/11 15:59:14 $
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,139,f (Math.abs(oldDelta) < tolerance
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,140,| Math.abs(y0) <= Math.abs(y1)) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,139,if ((Math.abs(oldDelta) < tolerance) ||
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,140,(Math.abs(y0) <= Math.abs(y1))) {
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,164,f (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1)
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,165,| p >= Math.abs(0.5 * oldDelta * p1)) {
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,164,if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,165,p >= Math.abs(0.5 * oldDelta * p1)) {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,67, @version $Revision: 1.2 $ $Date: 2003/07/09 20:02:43 $
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,67,* @version $Revision: 1.3 $ $Date: 2003/07/11 15:59:14 $
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,71,/ Spline segment interval delimiters.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,72,/ Size is N+1 for N segments.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,70,/** Spline segment interval delimiters. Size is N+1 for N segments. */
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,75,/ The spline segment's polynominal coefficients.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,76,"/ The first index runs over the intervals, size is N."
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,77,"/ The second index adresses the coefficients in the segment, with"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,78,/ index 0 being the absolute coefficient and index 3 the coefficient
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,79,/ for the third power.
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,80,/ The coefficients are setup so that x runs from 0 to xval[i+1]-xval[i].
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,74,* The spline segment's polynominal coefficients.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,75,"* The first index runs over the intervals, size is N."
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,76,"* The second index adresses the coefficients in the segment, with"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,77,* index 0 being the absolute coefficient and index 3 the coefficient
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,78,* for the third power.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,79,* The coefficients are setup so that x runs from 0 to xval[i+1]-xval[i].
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,83,"ublic CubicSplineFunction(double xval[],double c[][]) {"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,84,* Construct a function with the given segment delimiters and polynomial
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,85,* coefficients.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,86,* @param xval Spline segment interval delimiters
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,87,* @param c spline segment's polynominal coefficients
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,89,"public CubicSplineFunction(double xval[], double c[][]) {"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,90,super();
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,85,his.xval=xval;
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,86,his.c=c;
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,92,this.xval = xval;
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,93,this.c = c;
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,89,* (non-Javadoc)
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,90, @see org.apache.commons.math.UnivariateRealFunction#value(double)
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,97,* Compute the value for the function.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,98,* @param x the point for which the function value should be computed
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,99,* @return the value
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,100,* @throws MathException if the function couldn't be computed due to
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,101,*  missing additional data or other environmental problems.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,102,* @see UnivariateRealFunction#value(double)
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,93,f(x<xval[0]||x>xval[xval.length-1]) {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,105,if (x < xval[0] || x > xval[xval.length - 1]) {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,96,"nt i=Arrays.binarySearch(xval,x);"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,97,f(i<0) {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,98,=-i-2;
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,108,"int i = Arrays.binarySearch(xval, x);"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,109,if (i < 0) {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,110,i = -i - 2;
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,100,=x-xval[i];
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,101,eturn ((c[i][3]*x+c[i][2])*x+c[i][1])*x+c[i][0];
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,112,x = x - xval[i];
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,113,return ((c[i][3] * x + c[i][2]) * x + c[i][1]) * x + c[i][0];
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,104,* (non-Javadoc)
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,105, @see org.apache.commons.math.UnivariateRealFunction#firstDerivative(double)
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,117,* Compute the value for the first derivative of the function.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,118,* It is recommended to provide this method only if the first derivative is
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,119,* analytical. Numerical derivatives may be acceptable in some cases.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,120,* An implementation should throw an UnsupportedOperationException if
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,121,* this method is not implemented.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,122,* @param x the point for which the first derivative should be computed
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,123,* @return the value
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,124,* @throws MathException if the derivative couldn't be computed.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,125,* @see UnivariateRealFunction#firstDerivative(double)
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,108,f(x<xval[0]||x>xval[xval.length-1]) {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,128,if (x < xval[0] || x > xval[xval.length - 1]) {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,111,"nt i=Arrays.binarySearch(xval,x);"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,112,f(i<0) {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,113,=-i-2;
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,131,"int i = Arrays.binarySearch(xval, x);"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,132,if (i < 0) {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,133,i = -i - 2;
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,115,=x-xval[i];
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,116,eturn (3*c[i][3]*x+2*c[i][2])*x+c[i][1];
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,135,x = x - xval[i];
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,136,return (3 * c[i][3] * x + 2 * c[i][2]) * x + c[i][1];
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,119,* (non-Javadoc)
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,120, @see org.apache.commons.math.UnivariateRealFunction#secondDerivative(double)
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,140,* Compute the value for the second derivative of the function.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,141,* It is recommended to provide this method only if the second derivative is
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,142,* analytical. Numerical derivatives may be acceptable in some cases.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,143,* An implementation should throw an UnsupportedOperationException if
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,144,* this method is not implemented.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,145,* @param x the point for which the first derivative should be computed
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,146,* @return the value
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,147,* @throws MathException if the second derivative couldn't be computed.
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,148,* @see UnivariateRealFunction#secondDerivative(double)
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,123,f(x<xval[0]||x>xval[xval.length-1]) {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,151,if (x < xval[0] || x > xval[xval.length - 1]) {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,126,"nt i=Arrays.binarySearch(xval,x);"
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,127,f(i<0) {
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,128,=-i-2;
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,154,"int i = Arrays.binarySearch(xval, x);"
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,155,if (i < 0) {
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,156,i = -i - 2;
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,130,=x-xval[i];
False,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,131,eturn 6*c[i][3]*x+2*c[i][2];
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,158,x = x - xval[i];
True,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,src/java/org/apache/commons/math/analysis/CubicSplineFunction.java,159,return 6 * c[i][3] * x + 2 * c[i][2];
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,66, @version $Revision: 1.3 $ $Date: 2003/07/09 20:02:43 $
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,66,* @version $Revision: 1.4 $ $Date: 2003/07/11 15:59:14 $
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,131,f (Math.abs(oldDelta)
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,132," Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)) {"
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,131,if (Math.abs(oldDelta) <
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,132,"Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)) {"
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,2," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,4, Copyright (c) 2003 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,5, reserved.
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,7," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,8," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,9, are met:
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,11, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,12,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,14, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,15,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,16,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,17,    distribution.
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,19," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,20,"    any, must include the following acknowlegement:"
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,21,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,22,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,23,"    Alternately, this acknowlegement may appear in the software itself,"
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,24,    if and wherever such third-party acknowlegements normally appear.
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,26," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,27,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,28,    from this software without prior written permission. For written
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,29,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,31," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,32,"    nor may ""Apache"" appear in their names without prior written"
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,33,    permission of the Apache Software Foundation.
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,35, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,36," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,37, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,38, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,39," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,40," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,41," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,42," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,43," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,44, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,45," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,46, SUCH DAMAGE.
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,49, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,50, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,51," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,52, <http://www.apache.org/>.
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,54,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,57, @version $Revision: 1.2 $ $Date: 2003/07/09 20:02:43 $
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,59,ublic interface UnivariateFunction {
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,60,/ TODO: More documentation
False,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,src/java/org/apache/commons/math/analysis/UnivariateFunction.java,65,ouble evaluate(double x);
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,65, @version $Revision: 1.2 $ $Date: 2003/07/09 20:02:43 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,65,* @version $Revision: 1.3 $ $Date: 2003/07/11 15:59:14 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,59,  Interface for interpolating a data set.
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,59,* Interface for interpolating a data set.
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,61, @version $Revision: 1.2 $ $Date: 2003/07/09 20:02:43 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,61,* @version $Revision: 1.3 $ $Date: 2003/07/11 15:59:14 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,70, @throws MathException if arguments violate assumptions made by the interpolationg algorithm
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,70,* @throws MathException if arguments violate assumptions made by the
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,71,*         interpolationg algorithm
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,63, @version $Revision: 1.3 $ $Date: 2003/07/09 20:02:43 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,63,* @version $Revision: 1.4 $ $Date: 2003/07/11 15:59:14 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,187, @return the value where the function is zero
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,187,* @return a value where the function is zero
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,199, @return the value where the function is zero
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,199,* @return a value where the function is zero
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,69, @version $Revision: 1.2 $ $Date: 2003/07/09 20:02:43 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,69,* @version $Revision: 1.3 $ $Date: 2003/07/11 15:59:14 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,72,rotected UnivariateRealSolverFactory() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,73,* Default constructor.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,75,private UnivariateRealSolverFactory() {
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,79,* Create a new {@link UnivariateRealSolver} for the given function.  The
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,80,* actual solver returned can be controlled by defining the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,81,* <code>org.apache.commons.math.analysis.UnivariateRealSolver</code>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,82,* property on the JVM command-line (<code>
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,83,* -Dorg.apache.commons.math.analysis.UnivariateRealSolver=
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,84,"* <i>class name</i></code>).  The value of the property should be any,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,85,* fully qualified class name for a type that implements the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,86,"* {@link UnivariateRealSolver} interface.  By default, an instance of"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,87,* {@link BrentSolver} is returned.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,88,* @param f the function.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,89,* @return the new solver.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,90,* @throws MathConfigurationException if a
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,84,aramClass[0] =
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,85,"lass.forName(""org.apache.commons.math.analysis.UnivariateRealFunction"");"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,101,paramClass[0] = UnivariateRealFunction.class;
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,113,"No constructor with UnivariateRealFunction in """
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,114," solverClassName,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,129,"""No constructor with UnivariateRealFunction in "" +"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,130,"solverClassName,"
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,136,* Convience method to solve for zeros of real univariate functions.  A
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,137,* default solver is created and used for solving.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,138,* @param f the function.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,139,* @param x0 the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,140,* @param x1 the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,141,* @return a value where the function is zero.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,142,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,143,*         solver detects convergence problems otherwise.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,151,* Convience method to solve for zeros of real univariate functions.  A
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,152,* default solver is created and used for solving.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,153,* @param f the function.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,154,* @param x0 the lower bound for the interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,155,* @param x1 the upper bound for the interval.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,156,* @param absoluteAccuracy the accuracy to be used by the solver.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,157,* @return a value where the function is zero.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,158,* @throws MathException if the iteration count was exceeded or the
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,159,*         solver detects convergence problems otherwise.

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,39," <code>[smallest knot, largest knot)</code>.  Attempts to evaluate the"
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,39,"* <code>[smallest knot, largest knot]</code>.  Attempts to evaluate the"
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,47," than or equal to the largest one, an <code>IllegalArgumentException</code>"
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,47,"* than the largest one, an <code>IllegalArgumentException</code>"
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,119," function.  The domain is [smallest knot, largest knot)."
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,119,"* function.  The domain is [smallest knot, largest knot]."
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,128, than or equal to the largest knot point)
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,128,* than the largest knot point)
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,131,f (v < knots[0] || v >= knots[n]) {
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,131,if (v < knots[0] || v > knots[n]) {
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,138,//This will handle the case where v is the last knot value
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,139,"//There are only n-1 polynomials, so if v is the last knot"
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,140,//then we will use the last polynomial to calculate the value.
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,141,if ( i >= polynomials.length ) {
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,142,i--;
False,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,70,"ssertEquals(0.4,f.value(0.4), interpolationTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,70,"assertEquals(0.0,f.value(0.0), interpolationTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,71,"assertEquals(0.4,f.value(0.4), interpolationTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,72,"assertEquals(1.0,f.value(1.0), interpolationTolerance);"
False,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,91,"ssertEquals(1.4,f.value(1.4), interpolationTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,93,"assertEquals(0,f.value(0), interpolationTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,94,"assertEquals(1.4,f.value(1.4), interpolationTolerance);"
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,95,"assertEquals(1.5,f.value(1.5), interpolationTolerance);"
False,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,182, verifies that f(x[i]) = y[i] for i = 0..n -1 where n is common length -- skips last point.
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,186,* verifies that f(x[i]) = y[i] for i = 0..n-1 where n is common length.
False,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,186,or (int i = 0; i < x.length - 1; i++) {
True,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,src/test/org/apache/commons/math/analysis/SplineInterpolatorTest.java,190,for (int i = 0; i < x.length; i++) {

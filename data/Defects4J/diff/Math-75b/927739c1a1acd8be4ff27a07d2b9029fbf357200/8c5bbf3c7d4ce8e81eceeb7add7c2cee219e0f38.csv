is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,230,heckRowIndex(startRow);
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,231,heckRowIndex(endRow);
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,232,f (startRow > endRow) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,233,"hrow new MatrixIndexException(""initial row {0} after final row {1}"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,234,"ew Object[] { startRow, endRow });"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,237,heckColumnIndex(startColumn);
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,238,heckColumnIndex(endColumn);
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,239,f (startColumn > endColumn) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,240,"hrow new MatrixIndexException(""initial column {0} after final column {1}"","
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,241,"ew Object[] { startColumn, endColumn });"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,230,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,260,f (selectedRows.length * selectedColumns.length == 0) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,261,f (selectedRows.length == 0) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,262,"hrow new MatrixIndexException(""empty selected row index array"", null);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,264,"hrow new MatrixIndexException(""empty selected column index array"", null);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,248,"checkSubMatrixIndex(selectedRows, selectedColumns);"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,269,ry  {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,270,or (int i = 0; i < selectedRows.length; i++) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,271,or (int j = 0; j < selectedColumns.length; j++) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,272,"ubMatrix.setEntry(i, j, getEntry(selectedRows[i], selectedColumns[j]));"
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,275, catch (ArrayIndexOutOfBoundsException e) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,276,/ we redo the loop with checks enabled
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,277,/ in order to generate an appropriate message
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,278,or (final int row : selectedRows) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,279,heckRowIndex(row);
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,281,or (final int column : selectedColumns) {
False,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,282,heckColumnIndex(column);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,252,for (int i = 0; i < selectedRows.length; i++) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,253,for (int j = 0; j < selectedColumns.length; j++) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,254,"subMatrix.setEntry(i, j, getEntry(selectedRows[i], selectedColumns[j]));"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,500,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,501,"public abstract void addToEntry(int row, int column, double increment)"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,502,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,504,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,505,"public abstract void multiplyEntry(int row, int column, double factor)"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,506,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,842,* Check if submatrix ranges indices are valid.
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,843,* Rows and columns are indicated counting from 0 to n-1.
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,845,* @param startRow Initial row index
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,846,* @param endRow Final row index
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,847,* @param startColumn Initial column index
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,848,* @param endColumn Final column index
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,849,* @exception MatrixIndexException  if the indices are not valid
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,851,"protected void checkSubMatrixIndex(final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,852,"final int startColumn, final int endColumn) {"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,853,checkRowIndex(startRow);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,854,checkRowIndex(endRow);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,855,if (startRow > endRow) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,856,"throw new MatrixIndexException(""initial row {0} after final row {1}"","
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,857,"new Object[] { startRow, endRow });"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,860,checkColumnIndex(startColumn);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,861,checkColumnIndex(endColumn);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,862,if (startColumn > endColumn) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,863,"throw new MatrixIndexException(""initial column {0} after final column {1}"","
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,864,"new Object[] { startColumn, endColumn });"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,871,* Check if submatrix ranges indices are valid.
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,872,* Rows and columns are indicated counting from 0 to n-1.
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,874,* @param selectedRows Array of row indices.
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,875,* @param selectedColumns Array of column indices.
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,876,* @exception MatrixIndexException if row or column selections are not valid
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,878,"protected void checkSubMatrixIndex(final int[] selectedRows, final int[] selectedColumns) {"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,879,if (selectedRows.length * selectedColumns.length == 0) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,880,if (selectedRows.length == 0) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,881,"throw new MatrixIndexException(""empty selected row index array"", null);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,883,"throw new MatrixIndexException(""empty selected column index array"", null);"
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,886,for (final int row : selectedRows) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,887,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,889,for (final int column : selectedColumns) {
True,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/java/org/apache/commons/math/linear/AbstractRealMatrix.java,890,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,363,* Change an entry in the specified row and column.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,364,* <p>
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,365,* Row and column indices start at 0 and must satisfy
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,366,* <ul>
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,367,* <li><code>0 <= row < rowDimension</code></li>
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,368,* <li><code> 0 <= column < columnDimension</code></li>
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,369,* </ul>
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,370,* otherwise a <code>MatrixIndexException</code> is thrown.</p>
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,372,* @param row  row location of entry to be set
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,373,* @param column  column location of entry to be set
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,374,"* @param increment value to add to the current matrix entry in row,column"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,375,* @throws MatrixIndexException if the row or column index is not valid
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,376,* @since 2.0
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,378,"void addToEntry(int row, int column, double increment) throws MatrixIndexException;"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,381,* Change an entry in the specified row and column.
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,382,* <p>
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,383,* Row and column indices start at 0 and must satisfy
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,384,* <ul>
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,385,* <li><code>0 <= row < rowDimension</code></li>
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,386,* <li><code> 0 <= column < columnDimension</code></li>
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,387,* </ul>
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,388,* otherwise a <code>MatrixIndexException</code> is thrown.</p>
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,390,* @param row  row location of entry to be set
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,391,* @param column  column location of entry to be set
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,392,"* @param factor multiplication factor for the current matrix entry in row,column"
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,393,* @throws MatrixIndexException if the row or column index is not valid
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,394,* @since 2.0
True,src/java/org/apache/commons/math/linear/RealMatrix.java,src/java/org/apache/commons/math/linear/RealMatrix.java,396,"void multiplyEntry(int row, int column, double factor) throws MatrixIndexException;"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,373,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,374,"public void addToEntry(final int row, final int column, final double increment)"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,375,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,376,try {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,377,data[row][column] += increment;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,378,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,379,"throw new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,380,new Object[] {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,381,"row, column,"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,382,"getRowDimension(), getColumnDimension()"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,387,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,388,"public void multiplyEntry(final int row, final int column, final double factor)"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,389,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,390,try {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,391,data[row][column] *= factor;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,392,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,393,"throw new MatrixIndexException(""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,394,new Object[] {
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,395,"row, column,"
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,396,"getRowDimension(), getColumnDimension()"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,749,/ javadoc example
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,750,ealMatrixImpl matrix = (RealMatrixImpl) MatrixUtils.createRealMatrix
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,751,"new double[][] {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 0, 1 , 2}});"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,752,"atrix.setSubMatrix(new double[][] {{3, 4}, {5, 6}}, 1, 1);"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,753,xpected = MatrixUtils.createRealMatrix
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,754,"new double[][] {{1, 2, 3, 4}, {5, 3, 4, 8}, {9, 5 ,6, 2}});"
False,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,755,"ssertEquals(expected, matrix);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,233,// org.apache.commons.math.ode.stiff.BDFIntegrator
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,234,"{ ""unsupported order {0} for BDF methods, must be between {1} and {2}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,235,"""ordre {0} non support\u00e9 pour les m\u00e9thodes BDF, doit \u00eatre entre {1} et {2}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,236,"{ ""corrector failed to converge after {0} iterations at t = {1}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,237,"""\u00e9chec de convergence du correcteur apr\u00e8s {0} it\u00e9rations \u00e0 t = {1}"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,285,// org.apache.commons.math.linear.FieldVectorImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,295,// org.apache.commons.math.linear.AbstractFieldMatrix
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,21,import java.lang.reflect.Array;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,23,import org.apache.commons.math.Field;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,24,import org.apache.commons.math.FieldElement;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,25,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,26,import org.apache.commons.math.linear.decomposition.NonSquareMatrixException;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,29,* Basic implementation of {@link FieldMatrix} methods regardless of the underlying storage.
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,30,"* <p>All the methods implemented here use {@link #getEntry(int, int)} to access"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,31,* matrix elements. Derived class can provide faster implementations. </p>
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,33,* @param <T> the type of the field elements
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,34,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,35,* @since 2.0
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,37,"public abstract class AbstractFieldMatrix<T extends FieldElement<T>> implements FieldMatrix<T>, Serializable {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,39,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,40,private static final long serialVersionUID = -3665653040524315561L;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,42,/** Field to which the elements belong. */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,43,private final Field<T> field;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,45,/** Build an array of elements.
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,46,* @param rows number of rows
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,47,* @param columns number of columns
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,48,* @return a new array
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,50,"@SuppressWarnings(""unchecked"")"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,51,"protected T[][] buildArray(final int rows, final int columns) {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,52,"return (T[][]) Array.newInstance(field.getZero().getClass(), new int[] { rows, columns });"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,55,/** Build an array of elements.
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,56,* @param length of the array
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,57,* @return a new array
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,59,"@SuppressWarnings(""unchecked"")"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,60,protected T[] buildArray(final int length) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,61,"return (T[]) Array.newInstance(field.getZero().getClass(), length);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,65,* Creates a matrix with no data
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,66,* @param field field to which the elements belong
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,68,protected AbstractFieldMatrix(final Field<T> field) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,69,this.field = field;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,73,* Create a new FieldMatrix<T> with the supplied row and column dimensions.
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,75,* @param field field to which the elements belong
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,76,* @param rowDimension  the number of rows in the new matrix
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,77,* @param columnDimension  the number of columns in the new matrix
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,78,* @throws IllegalArgumentException if row or column dimension is not positive
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,80,"protected AbstractFieldMatrix(final Field<T> field,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,81,"final int rowDimension, final int columnDimension)"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,82,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,83,if (rowDimension <= 0 ) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,84,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,85,"""invalid row dimension {0} (must be positive)"","
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,86,rowDimension);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,88,if (columnDimension <= 0) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,89,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,90,"""invalid column dimension {0} (must be positive)"","
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,91,columnDimension);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,93,this.field = field;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,96,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,97,public Field<T> getField() {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,98,return field;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,101,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,102,"public abstract FieldMatrix<T> createMatrix(final int rowDimension, final int columnDimension)"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,103,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,105,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,106,public abstract FieldMatrix<T> copy();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,108,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,109,public FieldMatrix<T> add(FieldMatrix<T> m) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,111,// safety check
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,112,checkAdditionCompatible(m);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,114,final int rowCount    = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,115,final int columnCount = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,116,"final FieldMatrix<T> out = createMatrix(rowCount, columnCount);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,117,for (int row = 0; row < rowCount; ++row) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,118,for (int col = 0; col < columnCount; ++col) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,119,"out.setEntry(row, col, getEntry(row, col).add(m.getEntry(row, col)));"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,123,return out;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,127,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,128,public FieldMatrix<T> subtract(final FieldMatrix<T> m) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,130,// safety check
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,131,checkSubtractionCompatible(m);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,133,final int rowCount    = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,134,final int columnCount = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,135,"final FieldMatrix<T> out = createMatrix(rowCount, columnCount);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,136,for (int row = 0; row < rowCount; ++row) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,137,for (int col = 0; col < columnCount; ++col) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,138,"out.setEntry(row, col, getEntry(row, col).subtract(m.getEntry(row, col)));"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,142,return out;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,146,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,147,public FieldMatrix<T> scalarAdd(final T d) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,149,final int rowCount    = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,150,final int columnCount = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,151,"final FieldMatrix<T> out = createMatrix(rowCount, columnCount);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,152,for (int row = 0; row < rowCount; ++row) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,153,for (int col = 0; col < columnCount; ++col) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,154,"out.setEntry(row, col, getEntry(row, col).add(d));"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,158,return out;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,162,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,163,public FieldMatrix<T> scalarMultiply(final T d) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,165,final int rowCount    = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,166,final int columnCount = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,167,"final FieldMatrix<T> out = createMatrix(rowCount, columnCount);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,168,for (int row = 0; row < rowCount; ++row) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,169,for (int col = 0; col < columnCount; ++col) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,170,"out.setEntry(row, col, getEntry(row, col).multiply(d));"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,174,return out;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,178,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,179,public FieldMatrix<T> multiply(final FieldMatrix<T> m)
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,180,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,182,// safety check
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,183,checkMultiplicationCompatible(m);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,185,final int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,186,final int nCols = m.getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,187,final int nSum  = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,188,"final FieldMatrix<T> out = createMatrix(nRows, nCols);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,189,for (int row = 0; row < nRows; ++row) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,190,for (int col = 0; col < nCols; ++col) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,191,T sum = field.getZero();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,192,for (int i = 0; i < nSum; ++i) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,193,"sum = sum.add(getEntry(row, i).multiply(m.getEntry(i, col)));"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,195,"out.setEntry(row, col, sum);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,199,return out;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,203,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,204,public FieldMatrix<T> preMultiply(final FieldMatrix<T> m)
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,205,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,206,return m.multiply(this);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,209,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,210,public T[][] getData() {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,212,"final T[][] data = buildArray(getRowDimension(), getColumnDimension());"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,214,for (int i = 0; i < data.length; ++i) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,215,final T[] dataI = data[i];
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,216,for (int j = 0; j < dataI.length; ++j) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,217,"dataI[j] = getEntry(i, j);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,221,return data;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,225,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,226,"public FieldMatrix<T> getSubMatrix(final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,227,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,228,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,230,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,232,final FieldMatrix<T> subMatrix =
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,233,"createMatrix(endRow - startRow + 1, endColumn - startColumn + 1);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,234,for (int i = startRow; i <= endRow; ++i) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,235,for (int j = startColumn; j <= endColumn; ++j) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,236,"subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,240,return subMatrix;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,244,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,245,"public FieldMatrix<T> getSubMatrix(final int[] selectedRows, final int[] selectedColumns)"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,246,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,248,// safety checks
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,249,"checkSubMatrixIndex(selectedRows, selectedColumns);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,251,// copy entries
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,252,final FieldMatrix<T> subMatrix =
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,253,"createMatrix(selectedRows.length, selectedColumns.length);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,254,subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,256,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,257,private static final long serialVersionUID = 5079316658710707181L;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,259,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,260,@Override
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,261,"public T visit(final int row, final int column, final T value) {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,262,"return getEntry(selectedRows[row], selectedColumns[column]);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,267,return subMatrix;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,271,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,272,"public void copySubMatrix(final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,273,"final int startColumn, final int endColumn,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,274,final T[][] destination)
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,275,"throws MatrixIndexException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,277,// safety checks
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,278,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,279,final int rowsCount    = endRow + 1 - startRow;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,280,final int columnsCount = endColumn + 1 - startColumn;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,281,if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,282,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,283,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,284,"destination.length, destination[0].length,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,285,"rowsCount, columnsCount);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,288,// copy entries
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,289,walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,291,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,292,private static final long serialVersionUID = 1894428776156078725L;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,294,/** Initial row index. */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,295,private int startRow;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,297,/** Initial column index. */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,298,private int startColumn;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,300,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,301,@Override
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,302,"public void start(final int rows, final int columns,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,303,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,304,"final int startColumn, final int endColumn) {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,305,this.startRow    = startRow;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,306,this.startColumn = startColumn;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,309,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,310,@Override
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,311,"public void visit(final int row, final int column, final T value) {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,312,destination[row - startRow][column - startColumn] = value;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,315,"}, startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,319,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,320,"public void copySubMatrix(int[] selectedRows, int[] selectedColumns, T[][] destination)"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,321,"throws MatrixIndexException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,323,// safety checks
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,324,"checkSubMatrixIndex(selectedRows, selectedColumns);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,325,if ((destination.length < selectedRows.length) ||
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,326,(destination[0].length < selectedColumns.length)) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,327,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,328,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,329,"destination.length, destination[0].length,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,330,"selectedRows.length, selectedColumns.length);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,333,// copy entries
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,334,for (int i = 0; i < selectedRows.length; i++) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,335,final T[] destinationI = destination[i];
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,336,for (int j = 0; j < selectedColumns.length; j++) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,337,"destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,343,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,344,"public void setSubMatrix(final T[][] subMatrix, final int row, final int column)"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,345,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,347,final int nRows = subMatrix.length;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,348,if (nRows == 0) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,349,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,352,final int nCols = subMatrix[0].length;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,353,if (nCols == 0) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,354,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,357,for (int r = 1; r < nRows; ++r) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,358,if (subMatrix[r].length != nCols) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,359,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,360,"""some rows have length {0} while others have length {1}"","
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,361,"nCols, subMatrix[r].length);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,365,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,366,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,367,checkRowIndex(nRows + row - 1);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,368,checkColumnIndex(nCols + column - 1);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,370,for (int i = 0; i < nRows; ++i) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,371,for (int j = 0; j < nCols; ++j) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,372,"setEntry(row + i, column + j, subMatrix[i][j]);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,378,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,379,public FieldMatrix<T> getRowMatrix(final int row)
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,380,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,382,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,383,final int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,384,"final FieldMatrix<T> out = createMatrix(1, nCols);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,385,for (int i = 0; i < nCols; ++i) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,386,"out.setEntry(0, i, getEntry(row, i));"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,389,return out;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,393,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,394,"public void setRowMatrix(final int row, final FieldMatrix<T> matrix)"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,395,"throws MatrixIndexException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,397,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,398,final int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,399,if ((matrix.getRowDimension() != 1) ||
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,400,(matrix.getColumnDimension() != nCols)) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,401,throw new InvalidMatrixException(
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,402,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,403,"matrix.getRowDimension(), matrix.getColumnDimension(), 1, nCols);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,405,for (int i = 0; i < nCols; ++i) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,406,"setEntry(row, i, matrix.getEntry(0, i));"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,411,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,412,public FieldMatrix<T> getColumnMatrix(final int column)
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,413,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,415,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,416,final int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,417,"final FieldMatrix<T> out = createMatrix(nRows, 1);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,418,for (int i = 0; i < nRows; ++i) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,419,"out.setEntry(i, 0, getEntry(i, column));"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,422,return out;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,426,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,427,"public void setColumnMatrix(final int column, final FieldMatrix<T> matrix)"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,428,"throws MatrixIndexException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,430,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,431,final int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,432,if ((matrix.getRowDimension() != nRows) ||
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,433,(matrix.getColumnDimension() != 1)) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,434,throw new InvalidMatrixException(
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,435,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,436,"matrix.getRowDimension(), matrix.getColumnDimension(), nRows, 1);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,438,for (int i = 0; i < nRows; ++i) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,439,"setEntry(i, column, matrix.getEntry(i, 0));"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,444,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,445,public FieldVector<T> getRowVector(final int row)
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,446,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,447,"return new FieldVectorImpl<T>(getRow(row), false);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,450,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,451,"public void setRowVector(final int row, final FieldVector<T> vector)"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,452,"throws MatrixIndexException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,454,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,455,final int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,456,if (vector.getDimension() != nCols) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,457,throw new InvalidMatrixException(
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,458,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,459,"1, vector.getDimension(), 1, nCols);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,461,for (int i = 0; i < nCols; ++i) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,462,"setEntry(row, i, vector.getEntry(i));"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,467,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,468,public FieldVector<T> getColumnVector(final int column)
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,469,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,470,"return new FieldVectorImpl<T>(getColumn(column), false);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,473,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,474,"public void setColumnVector(final int column, final FieldVector<T> vector)"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,475,"throws MatrixIndexException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,477,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,478,final int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,479,if (vector.getDimension() != nRows) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,480,throw new InvalidMatrixException(
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,481,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,482,"vector.getDimension(), 1, nRows, 1);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,484,for (int i = 0; i < nRows; ++i) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,485,"setEntry(i, column, vector.getEntry(i));"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,490,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,491,public T[] getRow(final int row)
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,492,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,494,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,495,final int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,496,final T[] out = buildArray(nCols);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,497,for (int i = 0; i < nCols; ++i) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,498,"out[i] = getEntry(row, i);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,501,return out;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,505,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,506,"public void setRow(final int row, final T[] array)"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,507,"throws MatrixIndexException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,509,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,510,final int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,511,if (array.length != nCols) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,512,throw new InvalidMatrixException(
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,513,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,514,"1, array.length, 1, nCols);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,516,for (int i = 0; i < nCols; ++i) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,517,"setEntry(row, i, array[i]);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,522,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,523,public T[] getColumn(final int column)
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,524,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,526,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,527,final int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,528,final T[] out = buildArray(nRows);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,529,for (int i = 0; i < nRows; ++i) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,530,"out[i] = getEntry(i, column);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,533,return out;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,537,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,538,"public void setColumn(final int column, final T[] array)"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,539,"throws MatrixIndexException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,541,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,542,final int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,543,if (array.length != nRows) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,544,throw new InvalidMatrixException(
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,545,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,546,"array.length, 1, nRows, 1);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,548,for (int i = 0; i < nRows; ++i) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,549,"setEntry(i, column, array[i]);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,554,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,555,"public abstract T getEntry(int row, int column)"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,556,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,558,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,559,"public abstract void setEntry(int row, int column, T value)"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,560,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,562,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,563,"public abstract void addToEntry(int row, int column, T increment)"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,564,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,566,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,567,"public abstract void multiplyEntry(int row, int column, T factor)"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,568,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,570,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,571,public FieldMatrix<T> transpose() {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,573,final int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,574,final int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,575,"final FieldMatrix<T> out = createMatrix(nCols, nRows);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,576,walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,578,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,579,private static final long serialVersionUID = 6281961451465720534L;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,581,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,582,@Override
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,583,"public void visit(final int row, final int column, final T value) {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,584,"out.setEntry(column, row, value);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,589,return out;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,593,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,594,public boolean isSquare() {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,595,return (getColumnDimension() == getRowDimension());
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,598,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,599,public abstract int getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,601,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,602,public abstract int getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,604,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,605,public T getTrace()
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,606,throws NonSquareMatrixException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,607,final int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,608,final int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,609,if (nRows != nCols) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,610,"throw new NonSquareMatrixException(nRows, nCols);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,612,T trace = field.getZero();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,613,for (int i = 0; i < nRows; ++i) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,614,"trace = trace.add(getEntry(i, i));"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,616,return trace;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,619,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,620,public T[] operate(final T[] v)
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,621,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,623,final int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,624,final int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,625,if (v.length != nCols) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,626,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,627,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,628,"v.length, nCols);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,631,final T[] out = buildArray(nRows);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,632,for (int row = 0; row < nRows; ++row) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,633,T sum = field.getZero();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,634,for (int i = 0; i < nCols; ++i) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,635,"sum = sum.add(getEntry(row, i).multiply(v[i]));"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,637,out[row] = sum;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,640,return out;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,644,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,645,public FieldVector<T> operate(final FieldVector<T> v)
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,646,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,647,try {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,648,"return new FieldVectorImpl<T>(operate(((FieldVectorImpl<T>) v).getDataRef()), false);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,649,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,650,final int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,651,final int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,652,if (v.getDimension() != nCols) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,653,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,654,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,655,"v.getDimension(), nCols);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,658,final T[] out = buildArray(nRows);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,659,for (int row = 0; row < nRows; ++row) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,660,T sum = field.getZero();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,661,for (int i = 0; i < nCols; ++i) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,662,"sum = sum.add(getEntry(row, i).multiply(v.getEntry(i)));"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,664,out[row] = sum;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,667,"return new FieldVectorImpl<T>(out, false);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,671,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,672,public T[] preMultiply(final T[] v)
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,673,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,675,final int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,676,final int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,677,if (v.length != nRows) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,678,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,679,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,680,"v.length, nRows);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,683,final T[] out = buildArray(nCols);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,684,for (int col = 0; col < nCols; ++col) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,685,T sum = field.getZero();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,686,for (int i = 0; i < nRows; ++i) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,687,"sum = sum.add(getEntry(i, col).multiply(v[i]));"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,689,out[col] = sum;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,692,return out;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,696,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,697,public FieldVector<T> preMultiply(final FieldVector<T> v)
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,698,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,699,try {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,700,"return new FieldVectorImpl<T>(preMultiply(((FieldVectorImpl<T>) v).getDataRef()), false);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,701,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,703,final int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,704,final int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,705,if (v.getDimension() != nRows) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,706,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,707,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,708,"v.getDimension(), nRows);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,711,final T[] out = buildArray(nCols);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,712,for (int col = 0; col < nCols; ++col) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,713,T sum = field.getZero();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,714,for (int i = 0; i < nRows; ++i) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,715,"sum = sum.add(getEntry(i, col).multiply(v.getEntry(i)));"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,717,out[col] = sum;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,720,return new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,725,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,726,public T walkInRowOrder(final FieldMatrixChangingVisitor<T> visitor)
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,727,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,728,final int rows    = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,729,final int columns = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,730,"visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,731,for (int row = 0; row < rows; ++row) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,732,for (int column = 0; column < columns; ++column) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,733,"final T oldValue = getEntry(row, column);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,734,"final T newValue = visitor.visit(row, column, oldValue);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,735,"setEntry(row, column, newValue);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,738,return visitor.end();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,741,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,742,public T walkInRowOrder(final FieldMatrixPreservingVisitor<T> visitor)
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,743,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,744,final int rows    = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,745,final int columns = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,746,"visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,747,for (int row = 0; row < rows; ++row) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,748,for (int column = 0; column < columns; ++column) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,749,"visitor.visit(row, column, getEntry(row, column));"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,752,return visitor.end();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,755,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,756,"public T walkInRowOrder(final FieldMatrixChangingVisitor<T> visitor,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,757,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,758,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,759,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,760,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,761,"visitor.start(getRowDimension(), getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,762,"startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,763,for (int row = startRow; row <= endRow; ++row) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,764,for (int column = startColumn; column <= endColumn; ++column) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,765,"final T oldValue = getEntry(row, column);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,766,"final T newValue = visitor.visit(row, column, oldValue);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,767,"setEntry(row, column, newValue);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,770,return visitor.end();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,773,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,774,"public T walkInRowOrder(final FieldMatrixPreservingVisitor<T> visitor,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,775,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,776,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,777,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,778,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,779,"visitor.start(getRowDimension(), getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,780,"startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,781,for (int row = startRow; row <= endRow; ++row) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,782,for (int column = startColumn; column <= endColumn; ++column) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,783,"visitor.visit(row, column, getEntry(row, column));"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,786,return visitor.end();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,789,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,790,public T walkInColumnOrder(final FieldMatrixChangingVisitor<T> visitor)
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,791,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,792,final int rows    = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,793,final int columns = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,794,"visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,795,for (int column = 0; column < columns; ++column) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,796,for (int row = 0; row < rows; ++row) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,797,"final T oldValue = getEntry(row, column);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,798,"final T newValue = visitor.visit(row, column, oldValue);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,799,"setEntry(row, column, newValue);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,802,return visitor.end();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,805,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,806,public T walkInColumnOrder(final FieldMatrixPreservingVisitor<T> visitor)
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,807,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,808,final int rows    = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,809,final int columns = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,810,"visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,811,for (int column = 0; column < columns; ++column) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,812,for (int row = 0; row < rows; ++row) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,813,"visitor.visit(row, column, getEntry(row, column));"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,816,return visitor.end();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,819,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,820,"public T walkInColumnOrder(final FieldMatrixChangingVisitor<T> visitor,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,821,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,822,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,823,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,824,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,825,"visitor.start(getRowDimension(), getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,826,"startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,827,for (int column = startColumn; column <= endColumn; ++column) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,828,for (int row = startRow; row <= endRow; ++row) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,829,"final T oldValue = getEntry(row, column);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,830,"final T newValue = visitor.visit(row, column, oldValue);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,831,"setEntry(row, column, newValue);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,834,return visitor.end();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,837,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,838,"public T walkInColumnOrder(final FieldMatrixPreservingVisitor<T> visitor,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,839,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,840,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,841,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,842,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,843,"visitor.start(getRowDimension(), getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,844,"startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,845,for (int column = startColumn; column <= endColumn; ++column) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,846,for (int row = startRow; row <= endRow; ++row) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,847,"visitor.visit(row, column, getEntry(row, column));"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,850,return visitor.end();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,853,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,854,public T walkInOptimizedOrder(final FieldMatrixChangingVisitor<T> visitor)
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,855,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,856,return walkInRowOrder(visitor);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,859,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,860,public T walkInOptimizedOrder(final FieldMatrixPreservingVisitor<T> visitor)
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,861,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,862,return walkInRowOrder(visitor);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,865,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,866,"public T walkInOptimizedOrder(final FieldMatrixChangingVisitor<T> visitor,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,867,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,868,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,869,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,870,"return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,873,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,874,"public T walkInOptimizedOrder(final FieldMatrixPreservingVisitor<T> visitor,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,875,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,876,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,877,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,878,"return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,882,* Get a string representation for this matrix.
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,883,* @return a string representation for this matrix
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,885,@Override
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,886,public String toString() {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,887,final int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,888,final int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,889,final StringBuffer res = new StringBuffer();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,890,String fullClassName = getClass().getName();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,891,String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,892,"res.append(shortClassName).append(""{"");"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,894,for (int i = 0; i < nRows; ++i) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,895,if (i > 0) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,896,"res.append("","");"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,898,"res.append(""{"");"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,899,for (int j = 0; j < nCols; ++j) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,900,if (j > 0) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,901,"res.append("","");"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,903,"res.append(getEntry(i, j));"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,905,"res.append(""}"");"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,908,"res.append(""}"");"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,909,return res.toString();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,914,* Returns true iff <code>object</code> is a
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,915,* <code>FieldMatrix</code> instance with the same dimensions as this
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,916,* and all corresponding matrix entries are equal.
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,918,* @param object the object to test equality against.
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,919,* @return true if object equals this
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,921,"@SuppressWarnings(""unchecked"")"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,922,@Override
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,923,public boolean equals(final Object object) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,924,if (object == this ) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,925,return true;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,927,if (object instanceof FieldMatrix == false) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,928,return false;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,930,FieldMatrix<T> m = (FieldMatrix<T>) object;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,931,final int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,932,final int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,933,if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,934,return false;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,936,for (int row = 0; row < nRows; ++row) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,937,for (int col = 0; col < nCols; ++col) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,938,"if (!getEntry(row, col).equals(m.getEntry(row, col))) {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,939,return false;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,943,return true;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,947,* Computes a hashcode for the matrix.
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,949,* @return hashcode for matrix
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,951,@Override
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,952,public int hashCode() {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,953,int ret = 322562;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,954,final int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,955,final int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,956,ret = ret * 31 + nRows;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,957,ret = ret * 31 + nCols;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,958,for (int row = 0; row < nRows; ++row) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,959,for (int col = 0; col < nCols; ++col) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,960,"ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * getEntry(row, col).hashCode();"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,963,return ret;
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,967,* Check if a row index is valid.
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,968,* @param row row index to check
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,969,* @exception MatrixIndexException if index is not valid
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,971,protected void checkRowIndex(final int row) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,972,if (row < 0 || row >= getRowDimension()) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,973,"throw new MatrixIndexException(""row index {0} out of allowed range [{1}, {2}]"","
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,974,"row, 0, getRowDimension() - 1);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,979,* Check if a column index is valid.
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,980,* @param column column index to check
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,981,* @exception MatrixIndexException if index is not valid
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,983,protected void checkColumnIndex(final int column)
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,984,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,985,if (column < 0 || column >= getColumnDimension()) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,986,"throw new MatrixIndexException(""column index {0} out of allowed range [{1}, {2}]"","
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,987,"column, 0, getColumnDimension() - 1);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,992,* Check if submatrix ranges indices are valid.
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,993,* Rows and columns are indicated counting from 0 to n-1.
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,995,* @param startRow Initial row index
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,996,* @param endRow Final row index
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,997,* @param startColumn Initial column index
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,998,* @param endColumn Final column index
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,999,* @exception MatrixIndexException  if the indices are not valid
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1001,"protected void checkSubMatrixIndex(final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1002,"final int startColumn, final int endColumn) {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1003,checkRowIndex(startRow);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1004,checkRowIndex(endRow);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1005,if (startRow > endRow) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1006,"throw new MatrixIndexException(""initial row {0} after final row {1}"","
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1007,"startRow, endRow);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1010,checkColumnIndex(startColumn);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1011,checkColumnIndex(endColumn);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1012,if (startColumn > endColumn) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1013,"throw new MatrixIndexException(""initial column {0} after final column {1}"","
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1014,"startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1021,* Check if submatrix ranges indices are valid.
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1022,* Rows and columns are indicated counting from 0 to n-1.
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1024,* @param selectedRows Array of row indices.
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1025,* @param selectedColumns Array of column indices.
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1026,* @exception MatrixIndexException if row or column selections are not valid
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1028,"protected void checkSubMatrixIndex(final int[] selectedRows, final int[] selectedColumns) {"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1029,if (selectedRows.length * selectedColumns.length == 0) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1030,if (selectedRows.length == 0) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1031,"throw new MatrixIndexException(""empty selected row index array"");"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1033,"throw new MatrixIndexException(""empty selected column index array"");"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1036,for (final int row : selectedRows) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1037,checkRowIndex(row);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1039,for (final int column : selectedColumns) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1040,checkColumnIndex(column);
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1045,* Check if a matrix is addition compatible with the instance
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1046,* @param m matrix to check
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1047,* @exception IllegalArgumentException if matrix is not addition compatible with instance
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1049,protected void checkAdditionCompatible(final FieldMatrix<T> m) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1050,if ((getRowDimension()    != m.getRowDimension()) ||
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1051,(getColumnDimension() != m.getColumnDimension())) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1052,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1053,"""{0}x{1} and {2}x{3} matrices are not addition compatible"","
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1054,"getRowDimension(), getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1055,"m.getRowDimension(), m.getColumnDimension());"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1060,* Check if a matrix is subtraction compatible with the instance
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1061,* @param m matrix to check
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1062,* @exception IllegalArgumentException if matrix is not subtraction compatible with instance
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1064,protected void checkSubtractionCompatible(final FieldMatrix<T> m) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1065,if ((getRowDimension()    != m.getRowDimension()) ||
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1066,(getColumnDimension() != m.getColumnDimension())) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1067,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1068,"""{0}x{1} and {2}x{3} matrices are not subtraction compatible"","
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1069,"getRowDimension(), getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1070,"m.getRowDimension(), m.getColumnDimension());"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1075,* Check if a matrix is multiplication compatible with the instance
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1076,* @param m matrix to check
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1077,* @exception IllegalArgumentException if matrix is not multiplication compatible with instance
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1079,protected void checkMultiplicationCompatible(final FieldMatrix<T> m) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1080,if (getColumnDimension() != m.getRowDimension()) {
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1081,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1082,"""{0}x{1} and {2}x{3} matrices are not multiplication compatible"","
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1083,"getRowDimension(), getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,1084,"m.getRowDimension(), m.getColumnDimension());"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,30,"* @deprecated as of 2.0, replaced by {@link FieldMatrix} with a {@link"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,31,* org.apache.commons.math.util.BigReal} parameter
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,33,@Deprecated
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,52,"* @deprecated as of 2.0, replaced by {@link FieldMatrixImpl} with a {@link"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,53,* org.apache.commons.math.util.BigReal} parameter
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,56,@Deprecated
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,20,import org.apache.commons.math.FieldElement;
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,23,* Default implementation of the {@link FieldMatrixChangingVisitor} interface.
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,24,* <p>
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,25,* This class is a convenience to create custom visitors without defining all
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,26,* methods. This class provides default implementations that do nothing.
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,27,* </p>
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,29,* @param <T> the type of the field elements
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,30,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,31,* @since 2.0
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,33,public class DefaultFieldMatrixChangingVisitor<T extends FieldElement<T>>
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,34,implements FieldMatrixChangingVisitor<T> {
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,36,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,37,private static final long serialVersionUID = -7138694000397476118L;
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,39,/** Zero element of the field. */
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,40,private final T zero;
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,42,/** Build a new instance.
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,43,* @param zero additive identity of the field
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,45,public DefaultFieldMatrixChangingVisitor(final T zero) {
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,46,this.zero = zero;
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,49,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,50,"public void start(int rows, int columns,"
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,51,"int startRow, int endRow, int startColumn, int endColumn) {"
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,54,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,55,"public T visit(int row, int column, T value)"
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,56,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,57,return value;
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,60,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,61,public T end() {
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java,62,return zero;
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,20,import org.apache.commons.math.FieldElement;
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,23,* Default implementation of the {@link FieldMatrixPreservingVisitor} interface.
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,24,* <p>
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,25,* This class is a convenience to create custom visitors without defining all
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,26,* methods. This class provides default implementations that do nothing.
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,27,* </p>
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,29,* @param <T> the type of the field elements
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,30,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,31,* @since 2.0
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,33,public class DefaultFieldMatrixPreservingVisitor<T extends FieldElement<T>>
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,34,implements FieldMatrixPreservingVisitor<T> {
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,36,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,37,private static final long serialVersionUID = 7998898965168636198L;
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,39,/** Zero element of the field. */
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,40,private final T zero;
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,42,/** Build a new instance.
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,43,* @param zero additive identity of the field
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,45,public DefaultFieldMatrixPreservingVisitor(final T zero) {
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,46,this.zero = zero;
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,49,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,50,"public void start(int rows, int columns,"
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,51,"int startRow, int endRow, int startColumn, int endColumn) {"
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,54,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,55,"public void visit(int row, int column, T value)"
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,56,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,59,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,60,public T end() {
True,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java,61,return zero;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,22,import org.apache.commons.math.Field;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,23,import org.apache.commons.math.FieldElement;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,24,import org.apache.commons.math.linear.decomposition.NonSquareMatrixException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,27,* Interface defining field-valued matrix with basic algebraic operations.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,28,* <p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,29,"* Matrix element indexing is 0-based -- e.g., <code>getEntry(0, 0)</code>"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,30,"* returns the element in the first row, first column of the matrix.</p>"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,32,* @param <T> the type of the field elements
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,33,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,35,public interface FieldMatrix<T extends FieldElement<T>> extends Serializable {
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,38,* Get the type of field elements of the matrix.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,39,* @return type of field elements of the matrix
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,41,Field<T> getField();
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,44,* Create a new FieldMatrix<T> of the same type as the instance with the supplied
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,45,* row and column dimensions.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,47,* @param rowDimension  the number of rows in the new matrix
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,48,* @param columnDimension  the number of columns in the new matrix
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,49,* @return a new matrix of the same type as the instance
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,50,* @throws IllegalArgumentException if row or column dimension is not positive
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,51,* @since 2.0
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,53,"FieldMatrix<T> createMatrix(final int rowDimension, final int columnDimension);"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,56,* Returns a (deep) copy of this.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,58,* @return matrix copy
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,60,FieldMatrix<T> copy();
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,63,* Compute the sum of this and m.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,65,* @param m    matrix to be added
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,66,* @return     this + m
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,67,* @throws  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,69,FieldMatrix<T> add(FieldMatrix<T> m) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,72,* Compute this minus m.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,74,* @param m    matrix to be subtracted
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,75,* @return     this + m
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,76,* @throws  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,78,FieldMatrix<T> subtract(FieldMatrix<T> m) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,81,* Returns the result of adding d to each entry of this.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,83,* @param d    value to be added to each entry
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,84,* @return     d + this
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,86,FieldMatrix<T> scalarAdd(T d);
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,89,* Returns the result multiplying each entry of this by d.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,91,* @param d    value to multiply all entries by
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,92,* @return     d * this
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,94,FieldMatrix<T> scalarMultiply(T d);
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,97,* Returns the result of postmultiplying this by m.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,99,* @param m    matrix to postmultiply by
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,100,* @return     this * m
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,101,* @throws     IllegalArgumentException
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,102,*             if columnDimension(this) != rowDimension(m)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,104,FieldMatrix<T> multiply(FieldMatrix<T> m) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,107,* Returns the result premultiplying this by <code>m</code>.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,108,* @param m    matrix to premultiply by
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,109,* @return     m * this
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,110,* @throws     IllegalArgumentException
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,111,*             if rowDimension(this) != columnDimension(m)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,113,public FieldMatrix<T> preMultiply(FieldMatrix<T> m) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,116,* Returns matrix entries as a two-dimensional array.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,118,* @return    2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,120,T[][] getData();
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,123,* Gets a submatrix. Rows and columns are indicated
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,124,* counting from 0 to n-1.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,126,* @param startRow Initial row index
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,127,* @param endRow Final row index (inclusive)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,128,* @param startColumn Initial column index
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,129,* @param endColumn Final column index (inclusive)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,130,* @return The subMatrix containing the data of the
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,131,*         specified rows and columns
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,132,* @exception MatrixIndexException  if the indices are not valid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,134,"FieldMatrix<T> getSubMatrix(int startRow, int endRow, int startColumn, int endColumn)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,135,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,138,* Gets a submatrix. Rows and columns are indicated
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,139,* counting from 0 to n-1.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,141,* @param selectedRows Array of row indices.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,142,* @param selectedColumns Array of column indices.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,143,* @return The subMatrix containing the data in the
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,144,*         specified rows and columns
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,145,* @exception MatrixIndexException if row or column selections are not valid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,147,"FieldMatrix<T> getSubMatrix(int[] selectedRows, int[] selectedColumns)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,148,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,151,* Copy a submatrix. Rows and columns are indicated
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,152,* counting from 0 to n-1.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,154,* @param startRow Initial row index
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,155,* @param endRow Final row index (inclusive)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,156,* @param startColumn Initial column index
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,157,* @param endColumn Final column index (inclusive)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,158,* @param destination The arrays where the submatrix data should be copied
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,159,"* (if larger than rows/columns counts, only the upper-left part will be used)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,160,* @exception MatrixIndexException if the indices are not valid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,161,* @exception IllegalArgumentException if the destination array is too small
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,163,"void copySubMatrix(int startRow, int endRow, int startColumn, int endColumn,"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,164,T[][] destination)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,165,"throws MatrixIndexException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,168,* Copy a submatrix. Rows and columns are indicated
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,169,* counting from 0 to n-1.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,171,* @param selectedRows Array of row indices.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,172,* @param selectedColumns Array of column indices.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,173,* @param destination The arrays where the submatrix data should be copied
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,174,"* (if larger than rows/columns counts, only the upper-left part will be used)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,175,* @exception MatrixIndexException if the indices are not valid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,176,* @exception IllegalArgumentException if the destination array is too small
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,178,"void copySubMatrix(int[] selectedRows, int[] selectedColumns, T[][] destination)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,179,"throws MatrixIndexException, IllegalArgumentException;"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,182,"* Replace the submatrix starting at <code>row, column</code> using data in"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,183,* the input <code>subMatrix</code> array. Indexes are 0-based.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,184,* <p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,185,* Example:<br>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,186,* Starting with <pre>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,187,* 1  2  3  4
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,188,* 5  6  7  8
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,189,* 9  0  1  2
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,190,* </pre>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,191,"* and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,192,"* <code>setSubMatrix(subMatrix,1,1))</code> will result in <pre>"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,193,* 1  2  3  4
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,194,* 5  3  4  8
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,195,* 9  5  6  2
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,196,* </pre></p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,198,* @param subMatrix  array containing the submatrix replacement data
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,199,"* @param row  row coordinate of the top, left element to be replaced"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,200,"* @param column  column coordinate of the top, left element to be replaced"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,201,* @throws MatrixIndexException  if subMatrix does not fit into this
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,202,"*    matrix from element in (row, column)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,203,* @throws IllegalArgumentException if <code>subMatrix</code> is not rectangular
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,204,*  (not all rows have the same length) or empty
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,205,* @throws NullPointerException if <code>subMatrix</code> is null
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,206,* @since 2.0
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,208,"void setSubMatrix(T[][] subMatrix, int row, int column)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,209,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,212,* Returns the entries in row number <code>row</code>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,213,* as a row matrix.  Row indices start at 0.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,215,* @param row the row to be fetched
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,216,* @return row matrix
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,217,* @throws MatrixIndexException if the specified row index is invalid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,219,FieldMatrix<T> getRowMatrix(int row) throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,222,* Sets the entries in row number <code>row</code>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,223,* as a row matrix.  Row indices start at 0.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,225,* @param row the row to be set
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,226,* @param matrix row matrix (must have one row and the same number of columns
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,227,* as the instance)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,228,* @throws MatrixIndexException if the specified row index is invalid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,229,* @throws InvalidMatrixException if the matrix dimensions do not match one
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,230,* instance row
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,232,"void setRowMatrix(int row, FieldMatrix<T> matrix)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,233,"throws MatrixIndexException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,236,* Returns the entries in column number <code>column</code>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,237,* as a column matrix.  Column indices start at 0.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,239,* @param column the column to be fetched
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,240,* @return column matrix
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,241,* @throws MatrixIndexException if the specified column index is invalid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,243,FieldMatrix<T> getColumnMatrix(int column) throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,246,* Sets the entries in column number <code>column</code>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,247,* as a column matrix.  Column indices start at 0.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,249,* @param column the column to be set
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,250,* @param matrix column matrix (must have one column and the same number of rows
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,251,* as the instance)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,252,* @throws MatrixIndexException if the specified column index is invalid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,253,* @throws InvalidMatrixException if the matrix dimensions do not match one
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,254,* instance column
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,256,"void setColumnMatrix(int column, FieldMatrix<T> matrix)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,257,"throws MatrixIndexException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,260,* Returns the entries in row number <code>row</code>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,261,* as a vector.  Row indices start at 0.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,263,* @param row the row to be fetched
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,264,* @return row vector
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,265,* @throws MatrixIndexException if the specified row index is invalid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,267,FieldVector<T> getRowVector(int row) throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,270,* Sets the entries in row number <code>row</code>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,271,* as a vector.  Row indices start at 0.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,273,* @param row the row to be set
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,274,* @param vector row vector (must have the same number of columns
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,275,* as the instance)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,276,* @throws MatrixIndexException if the specified row index is invalid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,277,* @throws InvalidMatrixException if the vector dimension does not match one
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,278,* instance row
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,280,"void setRowVector(int row, FieldVector<T> vector)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,281,"throws MatrixIndexException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,284,* Returns the entries in column number <code>column</code>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,285,* as a vector.  Column indices start at 0.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,287,* @param column the column to be fetched
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,288,* @return column vector
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,289,* @throws MatrixIndexException if the specified column index is invalid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,291,FieldVector<T> getColumnVector(int column) throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,294,* Sets the entries in column number <code>column</code>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,295,* as a vector.  Column indices start at 0.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,297,* @param column the column to be set
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,298,* @param vector column vector (must have the same number of rows as the instance)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,299,* @throws MatrixIndexException if the specified column index is invalid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,300,* @throws InvalidMatrixException if the vector dimension does not match one
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,301,* instance column
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,303,"void setColumnVector(int column, FieldVector<T> vector)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,304,"throws MatrixIndexException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,307,* Returns the entries in row number <code>row</code> as an array.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,308,* <p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,309,* Row indices start at 0.  A <code>MatrixIndexException</code> is thrown
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,310,* unless <code>0 <= row < rowDimension.</code></p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,312,* @param row the row to be fetched
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,313,* @return array of entries in the row
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,314,* @throws MatrixIndexException if the specified row index is not valid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,316,T[] getRow(int row) throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,319,* Sets the entries in row number <code>row</code>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,320,* as a row matrix.  Row indices start at 0.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,322,* @param row the row to be set
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,323,* @param array row matrix (must have the same number of columns as the instance)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,324,* @throws MatrixIndexException if the specified row index is invalid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,325,* @throws InvalidMatrixException if the array size does not match one
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,326,* instance row
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,328,"void setRow(int row, T[] array)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,329,"throws MatrixIndexException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,332,* Returns the entries in column number <code>col</code> as an array.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,333,* <p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,334,* Column indices start at 0.  A <code>MatrixIndexException</code> is thrown
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,335,* unless <code>0 <= column < columnDimension.</code></p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,337,* @param column the column to be fetched
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,338,* @return array of entries in the column
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,339,* @throws MatrixIndexException if the specified column index is not valid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,341,T[] getColumn(int column) throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,344,* Sets the entries in column number <code>column</code>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,345,* as a column matrix.  Column indices start at 0.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,347,* @param column the column to be set
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,348,* @param array column array (must have the same number of rows as the instance)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,349,* @throws MatrixIndexException if the specified column index is invalid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,350,* @throws InvalidMatrixException if the array size does not match one
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,351,* instance column
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,353,"void setColumn(int column, T[] array)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,354,"throws MatrixIndexException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,357,* Returns the entry in the specified row and column.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,358,* <p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,359,* Row and column indices start at 0 and must satisfy
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,360,* <ul>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,361,* <li><code>0 <= row < rowDimension</code></li>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,362,* <li><code> 0 <= column < columnDimension</code></li>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,363,* </ul>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,364,* otherwise a <code>MatrixIndexException</code> is thrown.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,366,* @param row  row location of entry to be fetched
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,367,* @param column  column location of entry to be fetched
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,368,"* @return matrix entry in row,column"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,369,* @throws MatrixIndexException if the row or column index is not valid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,371,"T getEntry(int row, int column) throws MatrixIndexException;"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,374,* Set the entry in the specified row and column.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,375,* <p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,376,* Row and column indices start at 0 and must satisfy
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,377,* <ul>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,378,* <li><code>0 <= row < rowDimension</code></li>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,379,* <li><code> 0 <= column < columnDimension</code></li>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,380,* </ul>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,381,* otherwise a <code>MatrixIndexException</code> is thrown.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,383,* @param row  row location of entry to be set
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,384,* @param column  column location of entry to be set
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,385,"* @param value matrix entry to be set in row,column"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,386,* @throws MatrixIndexException if the row or column index is not valid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,387,* @since 2.0
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,389,"void setEntry(int row, int column, T value) throws MatrixIndexException;"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,392,* Change an entry in the specified row and column.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,393,* <p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,394,* Row and column indices start at 0 and must satisfy
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,395,* <ul>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,396,* <li><code>0 <= row < rowDimension</code></li>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,397,* <li><code> 0 <= column < columnDimension</code></li>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,398,* </ul>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,399,* otherwise a <code>MatrixIndexException</code> is thrown.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,401,* @param row  row location of entry to be set
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,402,* @param column  column location of entry to be set
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,403,"* @param increment value to add to the current matrix entry in row,column"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,404,* @throws MatrixIndexException if the row or column index is not valid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,405,* @since 2.0
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,407,"void addToEntry(int row, int column, T increment) throws MatrixIndexException;"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,410,* Change an entry in the specified row and column.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,411,* <p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,412,* Row and column indices start at 0 and must satisfy
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,413,* <ul>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,414,* <li><code>0 <= row < rowDimension</code></li>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,415,* <li><code> 0 <= column < columnDimension</code></li>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,416,* </ul>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,417,* otherwise a <code>MatrixIndexException</code> is thrown.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,419,* @param row  row location of entry to be set
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,420,* @param column  column location of entry to be set
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,421,"* @param factor multiplication factor for the current matrix entry in row,column"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,422,* @throws MatrixIndexException if the row or column index is not valid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,423,* @since 2.0
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,425,"void multiplyEntry(int row, int column, T factor) throws MatrixIndexException;"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,428,* Returns the transpose of this matrix.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,430,* @return transpose matrix
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,432,FieldMatrix<T> transpose();
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,435,* Is this a square matrix?
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,436,* @return true if the matrix is square (rowDimension = columnDimension)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,438,boolean isSquare();
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,441,* Returns the number of rows in the matrix.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,443,* @return rowDimension
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,445,int getRowDimension();
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,448,* Returns the number of columns in the matrix.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,450,* @return columnDimension
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,452,int getColumnDimension();
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,455,"* Returns the <a href=""http://mathworld.wolfram.com/MatrixTrace.html"">"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,456,* trace</a> of the matrix (the sum of the elements on the main diagonal).
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,458,* @return trace
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,459,* @throws NonSquareMatrixException if the matrix is not square
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,461,T getTrace() throws NonSquareMatrixException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,464,* Returns the result of multiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,466,* @param v the vector to operate on
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,467,* @return this*v
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,468,* @throws IllegalArgumentException if columnDimension != v.size()
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,470,T[] operate(T[] v) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,473,* Returns the result of multiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,475,* @param v the vector to operate on
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,476,* @return this*v
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,477,* @throws IllegalArgumentException if columnDimension != v.size()
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,479,FieldVector<T> operate(FieldVector<T> v) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,482,* Returns the (row) vector result of premultiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,484,* @param v the row vector to premultiply by
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,485,* @return v*this
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,486,* @throws IllegalArgumentException if rowDimension != v.size()
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,488,T[] preMultiply(T[] v) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,491,* Returns the (row) vector result of premultiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,493,* @param v the row vector to premultiply by
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,494,* @return v*this
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,495,* @throws IllegalArgumentException if rowDimension != v.size()
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,497,FieldVector<T> preMultiply(FieldVector<T> v) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,500,* Visit (and possibly change) all matrix entries in row order.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,501,* <p>Row order starts at upper left and iterating through all elements
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,502,* of a row from left to right before going to the leftmost element
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,503,* of the next row.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,504,* @param visitor visitor used to process all matrix entries
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,505,* @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,506,* @see #walkInRowOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,507,"* @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,508,"* @see #walkInRowOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,509,* @see #walkInColumnOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,510,* @see #walkInColumnOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,511,"* @see #walkInColumnOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,512,"* @see #walkInColumnOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,513,* @see #walkInOptimizedOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,514,* @see #walkInOptimizedOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,515,"* @see #walkInOptimizedOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,516,"* @see #walkInOptimizedOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,517,* @return the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,518,* of the walk
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,520,T walkInRowOrder(FieldMatrixChangingVisitor<T> visitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,521,throws MatrixVisitorException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,524,* Visit (but don't change) all matrix entries in row order.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,525,* <p>Row order starts at upper left and iterating through all elements
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,526,* of a row from left to right before going to the leftmost element
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,527,* of the next row.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,528,* @param visitor visitor used to process all matrix entries
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,529,* @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,530,* @see #walkInRowOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,531,"* @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,532,"* @see #walkInRowOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,533,* @see #walkInColumnOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,534,* @see #walkInColumnOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,535,"* @see #walkInColumnOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,536,"* @see #walkInColumnOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,537,* @see #walkInOptimizedOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,538,* @see #walkInOptimizedOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,539,"* @see #walkInOptimizedOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,540,"* @see #walkInOptimizedOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,541,* @return the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,542,* of the walk
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,544,T walkInRowOrder(FieldMatrixPreservingVisitor<T> visitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,545,throws MatrixVisitorException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,548,* Visit (and possibly change) some matrix entries in row order.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,549,* <p>Row order starts at upper left and iterating through all elements
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,550,* of a row from left to right before going to the leftmost element
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,551,* of the next row.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,552,* @param visitor visitor used to process all matrix entries
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,553,* @param startRow Initial row index
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,554,* @param endRow Final row index (inclusive)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,555,* @param startColumn Initial column index
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,556,* @param endColumn Final column index
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,557,* @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,558,* @exception MatrixIndexException  if the indices are not valid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,559,* @see #walkInRowOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,560,* @see #walkInRowOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,561,"* @see #walkInRowOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,562,* @see #walkInColumnOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,563,* @see #walkInColumnOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,564,"* @see #walkInColumnOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,565,"* @see #walkInColumnOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,566,* @see #walkInOptimizedOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,567,* @see #walkInOptimizedOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,568,"* @see #walkInOptimizedOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,569,"* @see #walkInOptimizedOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,570,* @return the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,571,* of the walk
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,573,"T walkInRowOrder(FieldMatrixChangingVisitor<T> visitor,"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,574,"int startRow, int endRow, int startColumn, int endColumn)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,575,"throws MatrixIndexException, MatrixVisitorException;"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,578,* Visit (but don't change) some matrix entries in row order.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,579,* <p>Row order starts at upper left and iterating through all elements
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,580,* of a row from left to right before going to the leftmost element
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,581,* of the next row.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,582,* @param visitor visitor used to process all matrix entries
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,583,* @param startRow Initial row index
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,584,* @param endRow Final row index (inclusive)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,585,* @param startColumn Initial column index
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,586,* @param endColumn Final column index
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,587,* @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,588,* @exception MatrixIndexException  if the indices are not valid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,589,* @see #walkInRowOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,590,* @see #walkInRowOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,591,"* @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,592,* @see #walkInColumnOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,593,* @see #walkInColumnOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,594,"* @see #walkInColumnOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,595,"* @see #walkInColumnOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,596,* @see #walkInOptimizedOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,597,* @see #walkInOptimizedOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,598,"* @see #walkInOptimizedOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,599,"* @see #walkInOptimizedOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,600,* @return the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,601,* of the walk
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,603,"T walkInRowOrder(FieldMatrixPreservingVisitor<T> visitor,"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,604,"int startRow, int endRow, int startColumn, int endColumn)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,605,"throws MatrixIndexException, MatrixVisitorException;"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,608,* Visit (and possibly change) all matrix entries in column order.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,609,* <p>Column order starts at upper left and iterating through all elements
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,610,* of a column from top to bottom before going to the topmost element
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,611,* of the next column.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,612,* @param visitor visitor used to process all matrix entries
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,613,* @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,614,* @see #walkInRowOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,615,* @see #walkInRowOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,616,"* @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,617,"* @see #walkInRowOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,618,* @see #walkInColumnOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,619,"* @see #walkInColumnOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,620,"* @see #walkInColumnOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,621,* @see #walkInOptimizedOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,622,* @see #walkInOptimizedOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,623,"* @see #walkInOptimizedOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,624,"* @see #walkInOptimizedOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,625,* @return the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,626,* of the walk
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,628,T walkInColumnOrder(FieldMatrixChangingVisitor<T> visitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,629,throws MatrixVisitorException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,632,* Visit (but don't change) all matrix entries in column order.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,633,* <p>Column order starts at upper left and iterating through all elements
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,634,* of a column from top to bottom before going to the topmost element
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,635,* of the next column.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,636,* @param visitor visitor used to process all matrix entries
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,637,* @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,638,* @see #walkInRowOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,639,* @see #walkInRowOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,640,"* @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,641,"* @see #walkInRowOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,642,* @see #walkInColumnOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,643,"* @see #walkInColumnOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,644,"* @see #walkInColumnOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,645,* @see #walkInOptimizedOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,646,* @see #walkInOptimizedOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,647,"* @see #walkInOptimizedOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,648,"* @see #walkInOptimizedOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,649,* @return the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,650,* of the walk
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,652,T walkInColumnOrder(FieldMatrixPreservingVisitor<T> visitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,653,throws MatrixVisitorException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,656,* Visit (and possibly change) some matrix entries in column order.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,657,* <p>Column order starts at upper left and iterating through all elements
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,658,* of a column from top to bottom before going to the topmost element
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,659,* of the next column.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,660,* @param visitor visitor used to process all matrix entries
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,661,* @param startRow Initial row index
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,662,* @param endRow Final row index (inclusive)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,663,* @param startColumn Initial column index
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,664,* @param endColumn Final column index
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,665,* @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,666,* @exception MatrixIndexException  if the indices are not valid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,667,* @see #walkInRowOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,668,* @see #walkInRowOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,669,"* @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,670,"* @see #walkInRowOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,671,* @see #walkInColumnOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,672,* @see #walkInColumnOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,673,"* @see #walkInColumnOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,674,* @see #walkInOptimizedOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,675,* @see #walkInOptimizedOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,676,"* @see #walkInOptimizedOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,677,"* @see #walkInOptimizedOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,678,* @return the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,679,* of the walk
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,681,"T walkInColumnOrder(FieldMatrixChangingVisitor<T> visitor,"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,682,"int startRow, int endRow, int startColumn, int endColumn)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,683,"throws MatrixIndexException, MatrixVisitorException;"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,686,* Visit (but don't change) some matrix entries in column order.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,687,* <p>Column order starts at upper left and iterating through all elements
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,688,* of a column from top to bottom before going to the topmost element
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,689,* of the next column.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,690,* @param visitor visitor used to process all matrix entries
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,691,* @param startRow Initial row index
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,692,* @param endRow Final row index (inclusive)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,693,* @param startColumn Initial column index
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,694,* @param endColumn Final column index
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,695,* @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,696,* @exception MatrixIndexException  if the indices are not valid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,697,* @see #walkInRowOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,698,* @see #walkInRowOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,699,"* @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,700,"* @see #walkInRowOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,701,* @see #walkInColumnOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,702,* @see #walkInColumnOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,703,"* @see #walkInColumnOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,704,* @see #walkInOptimizedOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,705,* @see #walkInOptimizedOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,706,"* @see #walkInOptimizedOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,707,"* @see #walkInOptimizedOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,708,* @return the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,709,* of the walk
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,711,"T walkInColumnOrder(FieldMatrixPreservingVisitor<T> visitor,"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,712,"int startRow, int endRow, int startColumn, int endColumn)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,713,"throws MatrixIndexException, MatrixVisitorException;"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,716,* Visit (and possibly change) all matrix entries using the fastest possible order.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,717,* <p>The fastest walking order depends on the exact matrix class. It may be
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,718,* different from traditional row or column orders.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,719,* @param visitor visitor used to process all matrix entries
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,720,* @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,721,* @see #walkInRowOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,722,* @see #walkInRowOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,723,"* @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,724,"* @see #walkInRowOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,725,* @see #walkInColumnOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,726,* @see #walkInColumnOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,727,"* @see #walkInColumnOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,728,"* @see #walkInColumnOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,729,* @see #walkInOptimizedOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,730,"* @see #walkInOptimizedOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,731,"* @see #walkInOptimizedOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,732,* @return the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,733,* of the walk
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,735,T walkInOptimizedOrder(FieldMatrixChangingVisitor<T> visitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,736,throws MatrixVisitorException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,739,* Visit (but don't change) all matrix entries using the fastest possible order.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,740,* <p>The fastest walking order depends on the exact matrix class. It may be
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,741,* different from traditional row or column orders.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,742,* @param visitor visitor used to process all matrix entries
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,743,* @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,744,* @see #walkInRowOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,745,* @see #walkInRowOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,746,"* @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,747,"* @see #walkInRowOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,748,* @see #walkInColumnOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,749,* @see #walkInColumnOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,750,"* @see #walkInColumnOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,751,"* @see #walkInColumnOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,752,* @see #walkInOptimizedOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,753,"* @see #walkInOptimizedOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,754,"* @see #walkInOptimizedOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,755,* @return the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,756,* of the walk
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,758,T walkInOptimizedOrder(FieldMatrixPreservingVisitor<T> visitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,759,throws MatrixVisitorException;
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,762,* Visit (and possibly change) some matrix entries using the fastest possible order.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,763,* <p>The fastest walking order depends on the exact matrix class. It may be
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,764,* different from traditional row or column orders.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,765,* @param visitor visitor used to process all matrix entries
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,766,* @param startRow Initial row index
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,767,* @param endRow Final row index (inclusive)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,768,* @param startColumn Initial column index
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,769,* @param endColumn Final column index (inclusive)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,770,* @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,771,* @exception MatrixIndexException  if the indices are not valid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,772,* @see #walkInRowOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,773,* @see #walkInRowOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,774,"* @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,775,"* @see #walkInRowOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,776,* @see #walkInColumnOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,777,* @see #walkInColumnOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,778,"* @see #walkInColumnOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,779,"* @see #walkInColumnOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,780,* @see #walkInOptimizedOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,781,* @see #walkInOptimizedOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,782,"* @see #walkInOptimizedOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,783,* @return the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,784,* of the walk
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,786,"T walkInOptimizedOrder(FieldMatrixChangingVisitor<T> visitor,"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,787,"int startRow, int endRow, int startColumn, int endColumn)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,788,"throws MatrixIndexException, MatrixVisitorException;"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,791,* Visit (but don't change) some matrix entries using the fastest possible order.
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,792,* <p>The fastest walking order depends on the exact matrix class. It may be
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,793,* different from traditional row or column orders.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,794,* @param visitor visitor used to process all matrix entries
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,795,* @param startRow Initial row index
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,796,* @param endRow Final row index (inclusive)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,797,* @param startColumn Initial column index
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,798,* @param endColumn Final column index (inclusive)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,799,* @exception  MatrixVisitorException if the visitor cannot process an entry
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,800,* @exception MatrixIndexException  if the indices are not valid
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,801,* @see #walkInRowOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,802,* @see #walkInRowOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,803,"* @see #walkInRowOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,804,"* @see #walkInRowOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,805,* @see #walkInColumnOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,806,* @see #walkInColumnOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,807,"* @see #walkInColumnOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,808,"* @see #walkInColumnOrder(FieldMatrixPreservingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,809,* @see #walkInOptimizedOrder(FieldMatrixChangingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,810,* @see #walkInOptimizedOrder(FieldMatrixPreservingVisitor)
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,811,"* @see #walkInOptimizedOrder(FieldMatrixChangingVisitor, int, int, int, int)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,812,* @return the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,813,* of the walk
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,815,"T walkInOptimizedOrder(FieldMatrixPreservingVisitor<T> visitor,"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,816,"int startRow, int endRow, int startColumn, int endColumn)"
True,src/java/org/apache/commons/math/linear/FieldMatrix.java,src/java/org/apache/commons/math/linear/FieldMatrix.java,817,"throws MatrixIndexException, MatrixVisitorException;"
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,22,import org.apache.commons.math.FieldElement;
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,25,* Interface defining a visitor for matrix entries.
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,27,* @param <T> the type of the field elements
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,28,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,29,* @since 2.0
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,31,public interface FieldMatrixChangingVisitor<T extends FieldElement<?>> extends Serializable {
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,34,* Start visiting a matrix.
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,35,* <p>This method is called once before any entry of the matrix is visited.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,36,* @param rows number of rows of the matrix
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,37,* @param columns number of columns of the matrix
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,38,* @param startRow Initial row index
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,39,* @param endRow Final row index (inclusive)
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,40,* @param startColumn Initial column index
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,41,* @param endColumn Final column index (inclusive)
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,43,"void start(int rows, int columns,"
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,44,"int startRow, int endRow, int startColumn, int endColumn);"
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,47,* Visit one matrix entry.
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,48,* @param row row index of the entry
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,49,* @param column column index of the entry
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,50,* @param value current value of the entry
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,51,* @return the new value to be set for the entry
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,52,* @throws MatrixVisitorException if something wrong occurs
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,54,"T visit(int row, int column, T value)"
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,55,throws MatrixVisitorException;
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,58,* End visiting a matrix.
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,59,* <p>This method is called once after all entries of the matrix have been visited.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,60,* @return the value that the <code>walkInXxxOrder</code> must return
True,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java,62,T end();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,20,import java.util.Arrays;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,22,import org.apache.commons.math.Field;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,23,import org.apache.commons.math.FieldElement;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,24,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,27,* Implementation of FieldMatrix<T> using a {@link FieldElement}[][] array to store entries.
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,28,* <p>
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,29,"* As specified in the {@link FieldMatrix} interface, matrix element indexing"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,30,"* is 0-based -- e.g., <code>getEntry(0, 0)</code>"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,31,"* returns the element in the first row, first column of the matrix.</li></ul>"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,32,* </p>
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,34,* @param <T> the type of the field elements
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,35,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,37,public class FieldMatrixImpl<T extends FieldElement<T>> extends AbstractFieldMatrix<T> {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,39,/** Serializable version identifier */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,40,private static final long serialVersionUID = 7260756672015356458L;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,42,/** Entries of the matrix */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,43,protected T[][] data;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,46,* Get the elements type from an array.
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,47,* @param d data array
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,48,* @return field to which array elements belong
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,49,* @exception IllegalArgumentException if array is empty
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,51,private static Field<? extends FieldElement<?>> extractField(final FieldElement<? extends FieldElement<?>>[][] d)
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,52,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,53,if (d.length == 0) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,54,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,56,if (d[0].length == 0) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,57,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,59,return d[0][0].getField();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,63,* Get the elements type from an array.
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,64,* @param d data array
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,65,* @return field to which array elements belong
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,66,* @exception IllegalArgumentException if array is empty
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,68,private static Field<? extends FieldElement<?>> extractField(final FieldElement<? extends FieldElement<?>>[] d)
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,69,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,70,if (d.length == 0) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,71,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,73,return d[0].getField();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,77,* Creates a matrix with no data
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,78,* @param field field to which the elements belong
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,80,public FieldMatrixImpl(final Field<T> field) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,81,super(field);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,85,* Create a new FieldMatrix<T> with the supplied row and column dimensions.
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,87,* @param field field to which the elements belong
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,88,* @param rowDimension  the number of rows in the new matrix
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,89,* @param columnDimension  the number of columns in the new matrix
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,90,* @throws IllegalArgumentException if row or column dimension is not
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,91,*  positive
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,93,"public FieldMatrixImpl(final Field<T> field,"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,94,"final int rowDimension, final int columnDimension)"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,95,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,96,"super(field, rowDimension, columnDimension);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,97,"data = buildArray(rowDimension, columnDimension);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,98,final T zero = field.getZero();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,99,for (int i = 0; i < rowDimension; ++i) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,100,"Arrays.fill(data[i], zero);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,105,* Create a new FieldMatrix<T> using the input array as the underlying
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,106,* data array.
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,107,"* <p>The input array is copied, not referenced. This constructor has"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,108,"* the same effect as calling {@link #FieldMatrixImpl(T[][], boolean)}"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,109,* with the second argument set to <code>true</code>.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,111,* @param d data for new matrix
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,112,* @throws IllegalArgumentException if <code>d</code> is not rectangular
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,113,*  (not all rows have the same length) or empty
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,114,* @throws NullPointerException if <code>d</code> is null
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,115,"* @see #FieldMatrixImpl(T[][], boolean)"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,117,"@SuppressWarnings(""unchecked"")"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,118,public FieldMatrixImpl(final T[][] d)
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,119,"throws IllegalArgumentException, NullPointerException {"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,120,super((Field<T>) extractField(d));
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,121,copyIn(d);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,125,* Create a new FieldMatrix<T> using the input array as the underlying
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,126,* data array.
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,127,* <p>If an array is built specially in order to be embedded in a
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,128,"* FieldMatrix<T> and not used directly, the <code>copyArray</code> may be"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,129,* set to <code>false</code. This will prevent the copying and improve
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,130,* performance as no new array will be built and no data will be copied.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,131,* @param d data for new matrix
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,132,"* @param copyArray if true, the input array will be copied, otherwise"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,133,* it will be referenced
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,134,* @throws IllegalArgumentException if <code>d</code> is not rectangular
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,135,*  (not all rows have the same length) or empty
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,136,* @throws NullPointerException if <code>d</code> is null
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,137,* @see #FieldMatrixImpl(T[][])
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,139,"@SuppressWarnings(""unchecked"")"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,140,"public FieldMatrixImpl(final T[][] d, final boolean copyArray)"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,141,"throws IllegalArgumentException, NullPointerException {"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,142,super((Field<T>) extractField(d));
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,143,if (copyArray) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,144,copyIn(d);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,145,} else {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,146,if (d == null) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,147,throw new NullPointerException();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,149,final int nRows = d.length;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,150,if (nRows == 0) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,151,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,153,final int nCols = d[0].length;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,154,if (nCols == 0) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,155,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,157,for (int r = 1; r < nRows; r++) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,158,if (d[r].length != nCols) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,159,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,160,"""some rows have length {0} while others have length {1}"","
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,161,"nCols, d[r].length);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,164,data = d;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,169,* Create a new (column) FieldMatrix<T> using <code>v</code> as the
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,170,* data for the unique column of the <code>v.length x 1</code> matrix
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,171,* created.
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,172,"* <p>The input array is copied, not referenced.</p>"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,174,* @param v column vector holding data for new matrix
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,176,"@SuppressWarnings(""unchecked"")"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,177,public FieldMatrixImpl(final T[] v) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,178,super((Field<T>) extractField(v));
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,179,final int nRows = v.length;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,180,"data = buildArray(nRows, 1);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,181,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,182,data[row][0] = v[row];
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,186,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,187,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,188,"public FieldMatrix<T> createMatrix(final int rowDimension, final int columnDimension)"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,189,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,190,"return new FieldMatrixImpl<T>(getField(), rowDimension, columnDimension);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,193,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,194,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,195,public FieldMatrix<T> copy() {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,196,"return new FieldMatrixImpl<T>(copyOut(), false);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,199,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,200,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,201,public FieldMatrix<T> add(final FieldMatrix<T> m)
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,202,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,203,try {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,204,return add((FieldMatrixImpl<T>) m);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,205,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,206,return super.add(m);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,211,* Compute the sum of this and <code>m</code>.
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,213,* @param m    matrix to be added
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,214,* @return     this + m
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,215,* @throws  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,217,public FieldMatrixImpl<T> add(final FieldMatrixImpl<T> m)
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,218,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,220,// safety check
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,221,checkAdditionCompatible(m);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,223,final int rowCount    = getRowDimension();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,224,final int columnCount = getColumnDimension();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,225,"final T[][] outData = buildArray(rowCount, columnCount);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,226,for (int row = 0; row < rowCount; row++) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,227,final T[] dataRow    = data[row];
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,228,final T[] mRow       = m.data[row];
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,229,final T[] outDataRow = outData[row];
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,230,for (int col = 0; col < columnCount; col++) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,231,outDataRow[col] = dataRow[col].add(mRow[col]);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,235,"return new FieldMatrixImpl<T>(outData, false);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,239,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,240,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,241,public FieldMatrix<T> subtract(final FieldMatrix<T> m)
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,242,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,243,try {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,244,return subtract((FieldMatrixImpl<T>) m);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,245,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,246,return super.subtract(m);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,251,* Compute  this minus <code>m</code>.
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,253,* @param m    matrix to be subtracted
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,254,* @return     this + m
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,255,* @throws  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,257,public FieldMatrixImpl<T> subtract(final FieldMatrixImpl<T> m)
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,258,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,260,// safety check
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,261,checkSubtractionCompatible(m);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,263,final int rowCount    = getRowDimension();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,264,final int columnCount = getColumnDimension();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,265,"final T[][] outData = buildArray(rowCount, columnCount);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,266,for (int row = 0; row < rowCount; row++) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,267,final T[] dataRow    = data[row];
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,268,final T[] mRow       = m.data[row];
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,269,final T[] outDataRow = outData[row];
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,270,for (int col = 0; col < columnCount; col++) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,271,outDataRow[col] = dataRow[col].subtract(mRow[col]);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,275,"return new FieldMatrixImpl<T>(outData, false);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,279,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,280,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,281,public FieldMatrix<T> multiply(final FieldMatrix<T> m)
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,282,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,283,try {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,284,return multiply((FieldMatrixImpl<T>) m);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,285,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,286,return super.multiply(m);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,291,* Returns the result of postmultiplying this by <code>m</code>.
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,292,* @param m    matrix to postmultiply by
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,293,* @return     this*m
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,294,* @throws     IllegalArgumentException
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,295,*             if columnDimension(this) != rowDimension(m)
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,297,public FieldMatrixImpl<T> multiply(final FieldMatrixImpl<T> m)
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,298,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,300,// safety check
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,301,checkMultiplicationCompatible(m);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,303,final int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,304,final int nCols = m.getColumnDimension();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,305,final int nSum = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,306,"final T[][] outData = buildArray(nRows, nCols);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,307,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,308,final T[] dataRow    = data[row];
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,309,final T[] outDataRow = outData[row];
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,310,for (int col = 0; col < nCols; col++) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,311,T sum = getField().getZero();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,312,for (int i = 0; i < nSum; i++) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,313,sum = sum.add(dataRow[i].multiply(m.data[i][col]));
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,315,outDataRow[col] = sum;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,319,"return new FieldMatrixImpl<T>(outData, false);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,323,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,324,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,325,public T[][] getData() {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,326,return copyOut();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,330,* Returns a reference to the underlying data array.
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,331,* <p>
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,332,* Does <strong>not</strong> make a fresh copy of the underlying data.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,334,* @return 2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,336,public T[][] getDataRef() {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,337,return data;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,340,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,341,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,342,"public void setSubMatrix(final T[][] subMatrix, final int row, final int column)"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,343,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,344,if (data == null) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,345,if (row > 0) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,346,throw MathRuntimeException.createIllegalStateException(
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,347,"""first {0} rows are not initialized yet"","
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,348,row);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,350,if (column > 0) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,351,throw MathRuntimeException.createIllegalStateException(
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,352,"""first {0} columns are not initialized yet"","
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,353,column);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,355,final int nRows = subMatrix.length;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,356,if (nRows == 0) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,357,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,360,final int nCols = subMatrix[0].length;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,361,if (nCols == 0) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,362,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,364,"data = buildArray(subMatrix.length, nCols);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,365,for (int i = 0; i < data.length; ++i) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,366,if (subMatrix[i].length != nCols) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,367,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,368,"""some rows have length {0} while others have length {1}"","
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,369,"nCols, subMatrix[i].length);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,371,"System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,373,} else {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,374,"super.setSubMatrix(subMatrix, row, column);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,379,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,380,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,381,"public T getEntry(final int row, final int column)"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,382,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,383,try {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,384,return data[row][column];
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,385,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,386,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,387,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,388,"row, column, getRowDimension(), getColumnDimension());"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,392,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,393,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,394,"public void setEntry(final int row, final int column, final T value)"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,395,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,396,try {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,397,data[row][column] = value;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,398,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,399,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,400,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,401,"row, column, getRowDimension(), getColumnDimension());"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,405,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,406,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,407,"public void addToEntry(final int row, final int column, final T increment)"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,408,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,409,try {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,410,data[row][column] = data[row][column].add(increment);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,411,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,412,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,413,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,414,"row, column, getRowDimension(), getColumnDimension());"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,418,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,419,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,420,"public void multiplyEntry(final int row, final int column, final T factor)"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,421,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,422,try {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,423,data[row][column] = data[row][column].multiply(factor);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,424,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,425,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,426,"""no entry at indices ({0}, {1}) in a {2}x{3} matrix"","
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,427,"row, column, getRowDimension(), getColumnDimension());"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,431,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,432,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,433,public int getRowDimension() {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,434,return (data == null) ? 0 : data.length;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,437,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,438,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,439,public int getColumnDimension() {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,440,return ((data == null) || (data[0] == null)) ? 0 : data[0].length;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,443,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,444,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,445,public T[] operate(final T[] v)
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,446,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,447,final int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,448,final int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,449,if (v.length != nCols) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,450,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,451,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,452,"v.length, nCols);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,454,final T[] out = buildArray(nRows);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,455,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,456,final T[] dataRow = data[row];
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,457,T sum = getField().getZero();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,458,for (int i = 0; i < nCols; i++) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,459,sum = sum.add(dataRow[i].multiply(v[i]));
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,461,out[row] = sum;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,463,return out;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,466,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,467,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,468,public T[] preMultiply(final T[] v)
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,469,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,471,final int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,472,final int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,473,if (v.length != nRows) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,474,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,475,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,476,"v.length, nRows);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,479,final T[] out = buildArray(nCols);
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,480,for (int col = 0; col < nCols; ++col) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,481,T sum = getField().getZero();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,482,for (int i = 0; i < nRows; ++i) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,483,sum = sum.add(data[i][col].multiply(v[i]));
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,485,out[col] = sum;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,488,return out;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,492,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,493,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,494,public T walkInRowOrder(final FieldMatrixChangingVisitor<T> visitor)
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,495,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,496,final int rows    = getRowDimension();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,497,final int columns = getColumnDimension();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,498,"visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,499,for (int i = 0; i < rows; ++i) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,500,final T[] rowI = data[i];
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,501,for (int j = 0; j < columns; ++j) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,502,"rowI[j] = visitor.visit(i, j, rowI[j]);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,505,return visitor.end();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,508,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,509,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,510,public T walkInRowOrder(final FieldMatrixPreservingVisitor<T> visitor)
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,511,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,512,final int rows    = getRowDimension();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,513,final int columns = getColumnDimension();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,514,"visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,515,for (int i = 0; i < rows; ++i) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,516,final T[] rowI = data[i];
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,517,for (int j = 0; j < columns; ++j) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,518,"visitor.visit(i, j, rowI[j]);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,521,return visitor.end();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,524,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,525,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,526,"public T walkInRowOrder(final FieldMatrixChangingVisitor<T> visitor,"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,527,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,528,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,529,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,530,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,531,"visitor.start(getRowDimension(), getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,532,"startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,533,for (int i = startRow; i <= endRow; ++i) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,534,final T[] rowI = data[i];
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,535,for (int j = startColumn; j <= endColumn; ++j) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,536,"rowI[j] = visitor.visit(i, j, rowI[j]);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,539,return visitor.end();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,542,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,543,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,544,"public T walkInRowOrder(final FieldMatrixPreservingVisitor<T> visitor,"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,545,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,546,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,547,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,548,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,549,"visitor.start(getRowDimension(), getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,550,"startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,551,for (int i = startRow; i <= endRow; ++i) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,552,final T[] rowI = data[i];
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,553,for (int j = startColumn; j <= endColumn; ++j) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,554,"visitor.visit(i, j, rowI[j]);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,557,return visitor.end();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,560,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,561,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,562,public T walkInColumnOrder(final FieldMatrixChangingVisitor<T> visitor)
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,563,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,564,final int rows    = getRowDimension();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,565,final int columns = getColumnDimension();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,566,"visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,567,for (int j = 0; j < columns; ++j) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,568,for (int i = 0; i < rows; ++i) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,569,final T[] rowI = data[i];
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,570,"rowI[j] = visitor.visit(i, j, rowI[j]);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,573,return visitor.end();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,576,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,577,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,578,public T walkInColumnOrder(final FieldMatrixPreservingVisitor<T> visitor)
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,579,throws MatrixVisitorException {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,580,final int rows    = getRowDimension();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,581,final int columns = getColumnDimension();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,582,"visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,583,for (int j = 0; j < columns; ++j) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,584,for (int i = 0; i < rows; ++i) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,585,"visitor.visit(i, j, data[i][j]);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,588,return visitor.end();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,591,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,592,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,593,"public T walkInColumnOrder(final FieldMatrixChangingVisitor<T> visitor,"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,594,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,595,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,596,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,597,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,598,"visitor.start(getRowDimension(), getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,599,"startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,600,for (int j = startColumn; j <= endColumn; ++j) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,601,for (int i = startRow; i <= endRow; ++i) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,602,final T[] rowI = data[i];
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,603,"rowI[j] = visitor.visit(i, j, rowI[j]);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,606,return visitor.end();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,609,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,610,@Override
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,611,"public T walkInColumnOrder(final FieldMatrixPreservingVisitor<T> visitor,"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,612,"final int startRow, final int endRow,"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,613,"final int startColumn, final int endColumn)"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,614,"throws MatrixIndexException, MatrixVisitorException {"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,615,"checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,616,"visitor.start(getRowDimension(), getColumnDimension(),"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,617,"startRow, endRow, startColumn, endColumn);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,618,for (int j = startColumn; j <= endColumn; ++j) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,619,for (int i = startRow; i <= endRow; ++i) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,620,"visitor.visit(i, j, data[i][j]);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,623,return visitor.end();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,627,* Returns a fresh copy of the underlying data array.
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,629,* @return a copy of the underlying data array.
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,631,private T[][] copyOut() {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,632,final int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,633,"final T[][] out = buildArray(nRows, getColumnDimension());"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,634,"// can't copy 2-d array in one shot, otherwise get row references"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,635,for (int i = 0; i < nRows; i++) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,636,"System.arraycopy(data[i], 0, out[i], 0, data[i].length);"
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,638,return out;
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,642,* Replaces data with a fresh copy of the input array.
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,643,* <p>
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,644,* Verifies that the input array is rectangular and non-empty.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,646,* @param in data to copy in
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,647,* @throws IllegalArgumentException if input array is empty or not
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,648,*    rectangular
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,649,* @throws NullPointerException if input array is null
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,651,private void copyIn(final T[][] in) {
True,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,src/java/org/apache/commons/math/linear/FieldMatrixImpl.java,652,"setSubMatrix(in, 0, 0);"
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,18,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,22,import org.apache.commons.math.FieldElement;
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,25,* Interface defining a visitor for matrix entries.
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,27,* @param <T> the type of the field elements
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,28,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,29,* @since 2.0
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,31,public interface FieldMatrixPreservingVisitor<T extends FieldElement<?>> extends Serializable {
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,34,* Start visiting a matrix.
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,35,* <p>This method is called once before any entry of the matrix is visited.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,36,* @param rows number of rows of the matrix
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,37,* @param columns number of columns of the matrix
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,38,* @param startRow Initial row index
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,39,* @param endRow Final row index (inclusive)
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,40,* @param startColumn Initial column index
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,41,* @param endColumn Final column index (inclusive)
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,43,"void start(int rows, int columns,"
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,44,"int startRow, int endRow, int startColumn, int endColumn);"
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,47,* Visit one matrix entry.
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,48,* @param row row index of the entry
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,49,* @param column column index of the entry
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,50,* @param value current value of the entry
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,51,* @throws MatrixVisitorException if something wrong occurs
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,53,"void visit(int row, int column, T value)"
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,54,throws MatrixVisitorException;
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,57,* End visiting a matrix.
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,58,* <p>This method is called once after all entries of the matrix have been visited.</p>
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,59,* @return the value that the <code>walkInXxxOrder</code> must return
True,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,src/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java,61,T end();
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,17,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,19,import java.io.Serializable;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,21,import org.apache.commons.math.Field;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,22,import org.apache.commons.math.FieldElement;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,25,* Interface defining a field-valued vector with basic algebraic operations.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,26,* <p>
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,27,"* vector element indexing is 0-based -- e.g., <code>getEntry(0)</code>"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,28,* returns the first element of the vector.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,29,* </p>
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,30,* <p>
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,31,* The various <code>mapXxx</code> and <code>mapXxxToSelf</code> methods operate
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,32,"* on vectors element-wise, i.e. they perform the same operation (adding a scalar,"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,33,* applying a function ...) on each element in turn. The <code>mapXxx</code>
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,34,* versions create a new vector to hold the result and do not change the instance.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,35,* The <code>mapXxxToSelf</code> versions use the instance itself to store the
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,36,"* results, so the instance is changed by these methods. In both cases, the result"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,37,"* vector is returned by the methods, this allows to use the <i>fluent API</i>"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,38,"* style, like this:"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,39,* </p>
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,40,* <pre>
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,41,*   RealVector result = v.mapAddToSelf(3.0).mapTanToSelf().mapSquareToSelf();
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,42,* </pre>
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,44,* @param <T> the type of the field elements
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,45,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,46,* @since 2.0
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,48,public interface FieldVector<T extends FieldElement<T>> extends Serializable {
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,51,* Get the type of field elements of the vector.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,52,* @return type of field elements of the vector
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,54,Field<T> getField();
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,57,* Returns a (deep) copy of this.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,58,* @return vector copy
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,60,FieldVector<T> copy();
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,63,* Compute the sum of this and v.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,64,* @param v vector to be added
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,65,* @return this + v
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,66,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,68,FieldVector<T> add(FieldVector<T> v)
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,69,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,72,* Compute the sum of this and v.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,73,* @param v vector to be added
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,74,* @return this + v
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,75,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,77,FieldVector<T> add(T[] v)
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,78,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,81,* Compute this minus v.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,82,* @param v vector to be subtracted
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,83,* @return this + v
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,84,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,86,FieldVector<T> subtract(FieldVector<T> v)
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,87,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,90,* Compute this minus v.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,91,* @param v vector to be subtracted
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,92,* @return this + v
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,93,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,95,FieldVector<T> subtract(T[] v)
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,96,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,99,* Map an addition operation to each entry.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,100,* @param d value to be added to each entry
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,101,* @return this + d
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,103,FieldVector<T> mapAdd(T d);
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,106,* Map an addition operation to each entry.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,107,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,108,* @param d value to be added to each entry
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,109,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,111,FieldVector<T> mapAddToSelf(T d);
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,114,* Map a subtraction operation to each entry.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,115,* @param d value to be subtracted to each entry
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,116,* @return this - d
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,118,FieldVector<T> mapSubtract(T d);
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,121,* Map a subtraction operation to each entry.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,122,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,123,* @param d value to be subtracted to each entry
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,124,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,126,FieldVector<T> mapSubtractToSelf(T d);
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,129,* Map a multiplication operation to each entry.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,130,* @param d value to multiply all entries by
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,131,* @return this * d
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,133,FieldVector<T> mapMultiply(T d);
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,136,* Map a multiplication operation to each entry.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,137,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,138,* @param d value to multiply all entries by
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,139,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,141,FieldVector<T> mapMultiplyToSelf(T d);
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,144,* Map a division operation to each entry.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,145,* @param d value to divide all entries by
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,146,* @return this / d
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,148,FieldVector<T> mapDivide(T d);
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,151,* Map a division operation to each entry.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,152,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,153,* @param d value to divide all entries by
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,154,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,156,FieldVector<T> mapDivideToSelf(T d);
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,159,* Map the 1/x function to each entry.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,160,* @return a vector containing the result of applying the function to each entry
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,162,FieldVector<T> mapInv();
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,165,* Map the 1/x function to each entry.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,166,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,167,"* @return for convenience, return this"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,169,FieldVector<T> mapInvToSelf();
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,172,* Element-by-element multiplication.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,173,* @param v vector by which instance elements must be multiplied
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,174,* @return a vector containing this[i] * v[i] for all i
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,175,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,177,public FieldVector<T> ebeMultiply(FieldVector<T> v)
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,178,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,181,* Element-by-element multiplication.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,182,* @param v vector by which instance elements must be multiplied
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,183,* @return a vector containing this[i] * v[i] for all i
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,184,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,186,public FieldVector<T> ebeMultiply(T[] v)
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,187,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,190,* Element-by-element division.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,191,* @param v vector by which instance elements must be divided
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,192,* @return a vector containing this[i] / v[i] for all i
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,193,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,195,public FieldVector<T> ebeDivide(FieldVector<T> v)
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,196,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,199,* Element-by-element division.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,200,* @param v vector by which instance elements must be divided
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,201,* @return a vector containing this[i] / v[i] for all i
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,202,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,204,public FieldVector<T> ebeDivide(T[] v)
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,205,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,208,* Returns vector entries as a T array.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,209,* @return T array of entries
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,211,T[] getData();
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,214,* Compute the dot product.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,215,* @param v vector with which dot product should be computed
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,216,* @return the scalar dot product between instance and v
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,217,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,219,T dotProduct(FieldVector<T> v)
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,220,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,223,* Compute the dot product.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,224,* @param v vector with which dot product should be computed
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,225,* @return the scalar dot product between instance and v
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,226,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,228,T dotProduct(T[] v)
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,229,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,231,/** Find the orthogonal projection of this vector onto another vector.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,232,* @param v vector onto which instance must be projected
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,233,* @return projection of the instance onto v
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,234,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,236,FieldVector<T> projection(FieldVector<T> v)
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,237,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,239,/** Find the orthogonal projection of this vector onto another vector.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,240,* @param v vector onto which instance must be projected
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,241,* @return projection of the instance onto v
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,242,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,244,FieldVector<T> projection(T[] v)
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,245,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,248,* Compute the outer product.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,249,* @param v vector with which outer product should be computed
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,250,* @return the square matrix outer product between instance and v
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,251,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,253,FieldMatrix<T> outerProduct(FieldVector<T> v)
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,254,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,257,* Compute the outer product.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,258,* @param v vector with which outer product should be computed
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,259,* @return the square matrix outer product between instance and v
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,260,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,262,FieldMatrix<T> outerProduct(T[] v)
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,263,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,266,* Returns the entry in the specified index.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,267,* <p>
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,268,"* The index start at 0 and must be lesser than the size,"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,269,* otherwise a {@link MatrixIndexException} is thrown.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,270,* </p>
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,271,* @param index  index location of entry to be fetched
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,272,* @return vector entry at index
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,273,* @throws MatrixIndexException if the index is not valid
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,274,"* @see #setEntry(int, T)"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,276,T getEntry(int index)
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,277,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,280,* Set a single element.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,281,* @param index element index.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,282,* @param value new value for the element.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,283,* @exception MatrixIndexException if the index is
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,284,* inconsistent with vector size
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,285,* @see #getEntry(int)
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,287,"void setEntry(int index, T value)"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,288,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,291,* Returns the size of the vector.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,292,* @return size
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,294,int getDimension();
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,297,* Construct a vector by appending a vector to this vector.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,298,* @param v vector to append to this one.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,299,* @return a new vector
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,301,FieldVector<T> append(FieldVector<T> v);
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,304,* Construct a vector by appending a T to this vector.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,305,* @param d T to append.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,306,* @return a new vector
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,308,FieldVector<T> append(T d);
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,311,* Construct a vector by appending a T array to this vector.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,312,* @param a T array to append.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,313,* @return a new vector
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,315,FieldVector<T> append(T[] a);
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,318,* Get a subvector from consecutive elements.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,319,* @param index index of first element.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,320,* @param n number of elements to be retrieved.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,321,* @return a vector containing n elements.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,322,* @exception MatrixIndexException if the index is
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,323,* inconsistent with vector size
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,325,"FieldVector<T> getSubVector(int index, int n)"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,326,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,329,* Set a set of consecutive elements.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,330,* @param index index of first element to be set.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,331,* @param v vector containing the values to set.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,332,* @exception MatrixIndexException if the index is
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,333,* inconsistent with vector size
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,334,"* @see #setSubVector(int, T[])"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,336,"void setSubVector(int index, FieldVector<T> v)"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,337,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,340,* Set a set of consecutive elements.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,341,* @param index index of first element to be set.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,342,* @param v vector containing the values to set.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,343,* @exception MatrixIndexException if the index is
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,344,* inconsistent with vector size
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,345,"* @see #setSubVector(int, FieldVector)"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,347,"void setSubVector(int index, T[] v)"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,348,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,351,* Set all elements to a single value.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,352,* @param value single value to set for all elements
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,354,void set(T value);
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,357,* Convert the vector to a T array.
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,358,"* <p>The array is independent from vector data, it's elements"
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,359,* are copied.</p>
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,360,* @return array containing a copy of vector elements
True,src/java/org/apache/commons/math/linear/FieldVector.java,src/java/org/apache/commons/math/linear/FieldVector.java,362,T[] toArray();
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,17,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,19,import java.lang.reflect.Array;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,20,import java.util.Arrays;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,22,import org.apache.commons.math.Field;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,23,import org.apache.commons.math.FieldElement;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,24,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,27,* This class implements the {@link FieldVector<T>} interface with a {@link FieldElement} array.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,28,* @param <T> the type of the field elements
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,29,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,30,* @since 2.0
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,32,public class FieldVectorImpl<T extends FieldElement<T>> implements FieldVector<T> {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,34,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,35,private static final long serialVersionUID = 7648186910365927050L;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,37,/** Field to which the elements belong. */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,38,private final Field<T> field;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,40,/** Entries of the vector. */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,41,protected T[] data;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,43,/** Build an array of elements.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,44,* @param length size of the array to build
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,45,* @return a new array
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,47,"@SuppressWarnings(""unchecked"")"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,48,private T[] buildArray(final int length) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,49,"return (T[]) Array.newInstance(field.getZero().getClass(), length);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,53,* Build a 0-length vector.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,54,* <p>Zero-length vectors may be used to initialized construction of vectors
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,55,* by data gathering. We start with zero-length and use either the {@link
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,56,"* #FieldVectorImpl(FieldVectorImpl<T>, FieldVectorImpl<T>)} constructor"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,57,"* or one of the <code>append</code> method ({@link #append(double)}, {@link"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,58,"* #append(T[])}, {@link #append(FieldVectorImpl<T>)}) to gather data"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,59,* into this vector.</p>
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,60,* @param field field to which the elements belong
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,62,public FieldVectorImpl(final Field<T> field) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,63,"this(field, 0);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,67,* Construct a (size)-length vector of zeros.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,68,* @param field field to which the elements belong
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,69,* @param size size of the vector
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,71,"public FieldVectorImpl(Field<T> field, int size) {"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,72,this.field = field;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,73,data = buildArray(size);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,74,"Arrays.fill(data, field.getZero());"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,78,* Construct an (size)-length vector with preset values.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,79,* @param size size of the vector
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,80,* @param preset fill the vector with this scalar value
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,82,"public FieldVectorImpl(int size, T preset) {"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,83,"this(preset.getField(), size);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,84,"Arrays.fill(data, preset);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,88,"* Construct a vector from an array, copying the input array."
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,89,* @param d array of Ts.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,90,* @throws IllegalArgumentException if <code>d</code> is empty
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,92,public FieldVectorImpl(T[] d)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,93,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,94,try {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,95,field = d[0].getField();
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,96,data = d.clone();
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,97,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,98,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,99,"""vector must have at least one element"");"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,104,* Create a new FieldVectorImpl using the input array as the underlying
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,105,* data array.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,106,* <p>If an array is built specially in order to be embedded in a
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,107,"* FieldVectorImpl and not used directly, the <code>copyArray</code> may be"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,108,* set to <code>false</code. This will prevent the copying and improve
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,109,* performance as no new array will be built and no data will be copied.</p>
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,110,* @param d data for new vector
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,111,"* @param copyArray if true, the input array will be copied, otherwise"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,112,* it will be referenced
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,113,* @throws IllegalArgumentException if <code>d</code> is empty
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,114,* @throws NullPointerException if <code>d</code> is null
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,115,* @see #FieldVectorImpl(T[])
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,117,"public FieldVectorImpl(T[] d, boolean copyArray)"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,118,"throws NullPointerException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,119,try {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,120,field = d[0].getField();
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,121,data = copyArray ? d.clone() :  d;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,122,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,123,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,124,"""vector must have at least one element"");"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,129,* Construct a vector from part of a array.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,130,* @param d array of Ts.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,131,* @param pos position of first entry
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,132,* @param size number of entries to copy
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,134,"public FieldVectorImpl(T[] d, int pos, int size) {"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,135,if (d.length < pos + size) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,136,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,137,"""position {0} and size {1} don't fit to the size of the input array {2}"","
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,138,"pos, size, d.length);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,140,field = d[0].getField();
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,141,data = buildArray(size);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,142,"System.arraycopy(d, pos, data, 0, size);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,146,"* Construct a vector from another vector, using a deep copy."
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,147,* @param v vector to copy
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,149,public FieldVectorImpl(FieldVector<T> v) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,150,field = v.getField();
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,151,data = buildArray(v.getDimension());
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,152,for (int i = 0; i < data.length; ++i) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,153,data[i] = v.getEntry(i);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,158,"* Construct a vector from another vector, using a deep copy."
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,159,* @param v vector to copy
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,161,public FieldVectorImpl(FieldVectorImpl<T> v) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,162,field = v.getField();
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,163,data = v.data.clone();
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,167,* Construct a vector from another vector.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,168,* @param v vector to copy
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,169,* @param deep if true perform a deep copy otherwise perform a shallow copy
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,171,"public FieldVectorImpl(FieldVectorImpl<T> v, boolean deep) {"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,172,field = v.getField();
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,173,data = deep ? v.data.clone() : v.data;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,177,* Construct a vector by appending one vector to another vector.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,178,* @param v1 first vector (will be put in front of the new vector)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,179,* @param v2 second vector (will be put at back of the new vector)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,181,"public FieldVectorImpl(FieldVectorImpl<T> v1, FieldVectorImpl<T> v2) {"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,182,field = v1.getField();
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,183,data = buildArray(v1.data.length + v2.data.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,184,"System.arraycopy(v1.data, 0, data, 0, v1.data.length);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,185,"System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,189,* Construct a vector by appending one vector to another vector.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,190,* @param v1 first vector (will be put in front of the new vector)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,191,* @param v2 second vector (will be put at back of the new vector)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,193,"public FieldVectorImpl(FieldVectorImpl<T> v1, T[] v2) {"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,194,field = v1.getField();
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,195,data = buildArray(v1.data.length + v2.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,196,"System.arraycopy(v1.data, 0, data, 0, v1.data.length);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,197,"System.arraycopy(v2, 0, data, v1.data.length, v2.length);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,201,* Construct a vector by appending one vector to another vector.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,202,* @param v1 first vector (will be put in front of the new vector)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,203,* @param v2 second vector (will be put at back of the new vector)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,205,"public FieldVectorImpl(T[] v1, FieldVectorImpl<T> v2) {"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,206,field = v2.getField();
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,207,data = buildArray(v1.length + v2.data.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,208,"System.arraycopy(v1, 0, data, 0, v1.length);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,209,"System.arraycopy(v2.data, 0, data, v1.length, v2.data.length);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,213,* Construct a vector by appending one vector to another vector.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,214,* @param v1 first vector (will be put in front of the new vector)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,215,* @param v2 second vector (will be put at back of the new vector)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,216,* @exception IllegalArgumentException if both vectors are empty
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,218,"public FieldVectorImpl(T[] v1, T[] v2) {"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,219,try {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,220,data = buildArray(v1.length + v2.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,221,"System.arraycopy(v1, 0, data, 0, v1.length);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,222,"System.arraycopy(v2, 0, data, v1.length, v2.length);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,223,field = data[0].getField();
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,224,} catch (ArrayIndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,225,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,226,"""vector must have at least one element"");"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,230,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,231,public Field<T> getField() {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,232,return field;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,235,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,236,public FieldVector<T> copy() {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,237,"return new FieldVectorImpl<T>(this, true);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,240,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,241,public FieldVector<T> add(FieldVector<T> v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,242,try {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,243,return add((FieldVectorImpl<T>) v);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,244,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,245,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,246,T[] out = buildArray(data.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,247,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,248,out[i] = data[i].add(v.getEntry(i));
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,250,return new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,254,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,255,public FieldVector<T> add(T[] v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,256,checkVectorDimensions(v.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,257,T[] out = buildArray(data.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,258,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,259,out[i] = data[i].add(v[i]);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,261,return new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,265,* Compute the sum of this and v.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,266,* @param v vector to be added
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,267,* @return this + v
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,268,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,270,public FieldVectorImpl<T> add(FieldVectorImpl<T> v)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,271,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,272,return (FieldVectorImpl<T>) add((T[]) v.data);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,275,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,276,public FieldVector<T> subtract(FieldVector<T> v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,277,try {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,278,return subtract((FieldVectorImpl<T>) v);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,279,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,280,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,281,T[] out = buildArray(data.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,282,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,283,out[i] = data[i].subtract(v.getEntry(i));
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,285,return new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,289,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,290,public FieldVector<T> subtract(T[] v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,291,checkVectorDimensions(v.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,292,T[] out = buildArray(data.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,293,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,294,out[i] = data[i].subtract(v[i]);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,296,return new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,300,* Compute this minus v.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,301,* @param v vector to be subtracted
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,302,* @return this + v
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,303,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,305,public FieldVectorImpl<T> subtract(FieldVectorImpl<T> v)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,306,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,307,return (FieldVectorImpl<T>) subtract((T[]) v.data);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,310,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,311,public FieldVector<T> mapAdd(T d) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,312,T[] out = buildArray(data.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,313,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,314,out[i] = data[i].add(d);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,316,return new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,319,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,320,public FieldVector<T> mapAddToSelf(T d) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,321,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,322,data[i] = data[i].add(d);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,324,return this;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,327,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,328,public FieldVector<T> mapSubtract(T d) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,329,T[] out = buildArray(data.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,330,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,331,out[i] = data[i].subtract(d);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,333,return new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,336,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,337,public FieldVector<T> mapSubtractToSelf(T d) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,338,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,339,data[i] = data[i].subtract(d);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,341,return this;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,344,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,345,public FieldVector<T> mapMultiply(T d) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,346,T[] out = buildArray(data.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,347,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,348,out[i] = data[i].multiply(d);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,350,return new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,353,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,354,public FieldVector<T> mapMultiplyToSelf(T d) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,355,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,356,data[i] = data[i].multiply(d);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,358,return this;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,361,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,362,public FieldVector<T> mapDivide(T d) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,363,T[] out = buildArray(data.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,364,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,365,out[i] = data[i].divide(d);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,367,return new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,370,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,371,public FieldVector<T> mapDivideToSelf(T d) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,372,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,373,data[i] = data[i].divide(d);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,375,return this;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,378,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,379,public FieldVector<T> mapInv() {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,380,T[] out = buildArray(data.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,381,final T one = field.getOne();
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,382,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,383,out[i] = one.divide(data[i]);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,385,return new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,388,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,389,public FieldVector<T> mapInvToSelf() {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,390,final T one = field.getOne();
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,391,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,392,data[i] = one.divide(data[i]);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,394,return this;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,397,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,398,public FieldVector<T> ebeMultiply(FieldVector<T> v)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,399,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,400,try {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,401,return ebeMultiply((FieldVectorImpl<T>) v);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,402,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,403,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,404,T[] out = buildArray(data.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,405,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,406,out[i] = data[i].multiply(v.getEntry(i));
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,408,return new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,412,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,413,public FieldVector<T> ebeMultiply(T[] v)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,414,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,415,checkVectorDimensions(v.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,416,T[] out = buildArray(data.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,417,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,418,out[i] = data[i].multiply(v[i]);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,420,return new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,424,* Element-by-element multiplication.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,425,* @param v vector by which instance elements must be multiplied
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,426,* @return a vector containing this[i] * v[i] for all i
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,427,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,429,public FieldVectorImpl<T> ebeMultiply(FieldVectorImpl<T> v)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,430,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,431,return (FieldVectorImpl<T>) ebeMultiply(v.data);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,434,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,435,public FieldVector<T> ebeDivide(FieldVector<T> v)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,436,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,437,try {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,438,return ebeDivide((FieldVectorImpl<T>) v);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,439,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,440,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,441,T[] out = buildArray(data.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,442,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,443,out[i] = data[i].divide(v.getEntry(i));
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,445,return new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,449,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,450,public FieldVector<T> ebeDivide(T[] v)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,451,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,452,checkVectorDimensions(v.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,453,T[] out = buildArray(data.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,454,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,455,out[i] = data[i].divide(v[i]);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,457,return new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,461,* Element-by-element division.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,462,* @param v vector by which instance elements must be divided
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,463,* @return a vector containing this[i] / v[i] for all i
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,464,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,466,public FieldVectorImpl<T> ebeDivide(FieldVectorImpl<T> v)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,467,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,468,return (FieldVectorImpl<T>) ebeDivide(v.data);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,471,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,472,public T[] getData() {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,473,return data.clone();
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,477,* Returns a reference to the underlying data array.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,478,* <p>Does not make a fresh copy of the underlying data.</p>
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,479,* @return array of entries
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,481,public T[] getDataRef() {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,482,return data;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,485,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,486,public T dotProduct(FieldVector<T> v)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,487,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,488,try {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,489,return dotProduct((FieldVectorImpl<T>) v);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,490,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,491,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,492,T dot = field.getZero();
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,493,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,494,dot = dot.add(data[i].multiply(v.getEntry(i)));
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,496,return dot;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,500,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,501,public T dotProduct(T[] v)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,502,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,503,checkVectorDimensions(v.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,504,T dot = field.getZero();
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,505,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,506,dot = dot.add(data[i].multiply(v[i]));
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,508,return dot;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,512,* Compute the dot product.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,513,* @param v vector with which dot product should be computed
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,514,* @return the scalar dot product between instance and v
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,515,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,517,public T dotProduct(FieldVectorImpl<T> v)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,518,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,519,return dotProduct(v.data);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,522,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,523,public FieldVector<T> projection(FieldVector<T> v) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,524,return v.mapMultiply(dotProduct(v).divide(v.dotProduct(v)));
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,527,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,528,public FieldVector<T> projection(T[] v) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,529,"return projection(new FieldVectorImpl<T>(v, false));"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,532,/** Find the orthogonal projection of this vector onto another vector.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,533,* @param v vector onto which instance must be projected
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,534,* @return projection of the instance onto v
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,535,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,537,public FieldVectorImpl<T> projection(FieldVectorImpl<T> v) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,538,return (FieldVectorImpl<T>) v.mapMultiply(dotProduct(v).divide(v.dotProduct(v)));
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,541,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,542,public FieldMatrix<T> outerProduct(FieldVector<T> v)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,543,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,544,try {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,545,return outerProduct((FieldVectorImpl<T>) v);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,546,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,547,checkVectorDimensions(v);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,548,final int m = data.length;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,549,"final FieldMatrix<T> out = new FieldMatrixImpl<T>(field, m, m);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,550,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,551,for (int j = 0; j < data.length; j++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,552,"out.setEntry(i, j, data[i].multiply(v.getEntry(j)));"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,555,return out;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,560,* Compute the outer product.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,561,* @param v vector with which outer product should be computed
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,562,* @return the square matrix outer product between instance and v
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,563,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,565,public FieldMatrix<T> outerProduct(FieldVectorImpl<T> v)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,566,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,567,return outerProduct(v.data);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,570,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,571,public FieldMatrix<T> outerProduct(T[] v)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,572,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,573,checkVectorDimensions(v.length);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,574,final int m = data.length;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,575,"final FieldMatrix<T> out = new FieldMatrixImpl<T>(field, m, m);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,576,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,577,for (int j = 0; j < data.length; j++) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,578,"out.setEntry(i, j, data[i].multiply(v[j]));"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,581,return out;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,584,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,585,public T getEntry(int index) throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,586,return data[index];
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,589,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,590,public int getDimension() {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,591,return data.length;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,594,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,595,public FieldVector<T> append(FieldVector<T> v) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,596,try {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,597,return append((FieldVectorImpl<T>) v);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,598,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,599,"return new FieldVectorImpl<T>(this,new FieldVectorImpl<T>(v));"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,604,* Construct a vector by appending a vector to this vector.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,605,* @param v vector to append to this one.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,606,* @return a new vector
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,608,public FieldVectorImpl<T> append(FieldVectorImpl<T> v) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,609,"return new FieldVectorImpl<T>(this, v);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,612,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,613,public FieldVector<T> append(T in) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,614,final T[] out = buildArray(data.length + 1);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,615,"System.arraycopy(data, 0, out, 0, data.length);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,616,out[data.length] = in;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,617,return new FieldVectorImpl<T>(out);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,620,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,621,public FieldVector<T> append(T[] in) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,622,"return new FieldVectorImpl<T>(this, in);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,625,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,626,"public FieldVector<T> getSubVector(int index, int n) {"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,627,"FieldVectorImpl<T> out = new FieldVectorImpl<T>(field, n);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,628,try {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,629,"System.arraycopy(data, index, out.data, 0, n);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,630,} catch (IndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,631,checkIndex(index);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,632,checkIndex(index + n - 1);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,634,return out;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,637,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,638,"public void setEntry(int index, T value) {"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,639,try {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,640,data[index] = value;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,641,} catch (IndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,642,checkIndex(index);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,646,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,647,"public void setSubVector(int index, FieldVector<T> v) {"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,648,try {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,649,try {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,650,"set(index, (FieldVectorImpl<T>) v);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,651,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,652,for (int i = index; i < index + v.getDimension(); ++i) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,653,data[i] = v.getEntry(i-index);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,656,} catch (IndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,657,checkIndex(index);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,658,checkIndex(index + v.getDimension() - 1);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,662,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,663,"public void setSubVector(int index, T[] v) {"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,664,try {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,665,"System.arraycopy(v, 0, data, index, v.length);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,666,} catch (IndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,667,checkIndex(index);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,668,checkIndex(index + v.length - 1);
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,673,* Set a set of consecutive elements.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,675,* @param index index of first element to be set.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,676,* @param v vector containing the values to set.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,677,* @exception MatrixIndexException if the index is
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,678,* inconsistent with vector size
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,680,"public void set(int index, FieldVectorImpl<T> v)"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,681,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,682,"setSubVector(index, v.data);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,685,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,686,public void set(T value) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,687,"Arrays.fill(data, value);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,690,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,691,public T[] toArray(){
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,692,return data.clone();
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,696,* Check if instance and specified vectors have the same dimension.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,697,* @param v vector to compare instance with
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,698,* @exception IllegalArgumentException if the vectors do not
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,699,* have the same dimension
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,701,protected void checkVectorDimensions(FieldVector<T> v)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,702,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,703,checkVectorDimensions(v.getDimension());
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,707,* Check if instance dimension is equal to some expected value.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,709,* @param n expected dimension.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,710,* @exception IllegalArgumentException if the dimension is
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,711,* inconsistent with vector size
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,713,protected void checkVectorDimensions(int n)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,714,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,715,if (data.length != n) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,716,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,717,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,718,"data.length, n);"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,723,* Test for the equality of two real vectors.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,724,* <p>
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,725,"* If all coordinates of two real vectors are exactly the same, and none are"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,726,"* <code>Double.NaN</code>, the two real vectors are considered to be equal."
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,727,* </p>
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,728,* <p>
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,729,* <code>NaN</code> coordinates are considered to affect globally the vector
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,730,"* and be equals to each other - i.e, if either (or all) coordinates of the"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,731,"* real vector are equal to <code>Double.NaN</code>, the real vector is equal to"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,732,* a vector with all <code>Double.NaN</code> coordinates.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,733,* </p>
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,735,* @param other Object to test for equality to this
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,736,"* @return true if two 3D vector objects are equal, false if"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,737,"*         object is null, not an instance of Vector3D, or"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,738,*         not equal to this Vector3D instance
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,741,"@SuppressWarnings(""unchecked"")"
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,742,@Override
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,743,public boolean equals(Object other) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,745,if (this == other) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,746,return true;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,749,if (other == null) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,750,return false;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,753,try {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,755,FieldVector<T> rhs = (FieldVector<T>) other;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,756,if (data.length != rhs.getDimension()) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,757,return false;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,760,for (int i = 0; i < data.length; ++i) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,761,if (!data[i].equals(rhs.getEntry(i))) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,762,return false;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,765,return true;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,767,} catch (ClassCastException ex) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,768,// ignore exception
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,769,return false;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,775,* Get a hashCode for the real vector.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,776,* <p>All NaN values have the same hash code.</p>
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,777,* @return a hash code value for this object
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,779,@Override
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,780,public int hashCode() {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,781,int h = 3542;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,782,for (final T a : data) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,783,h = h ^ a.hashCode();
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,785,return h;
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,789,* Check if an index is valid.
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,790,* @param index index to check
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,791,* @exception MatrixIndexException if index is not valid
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,793,private void checkIndex(final int index)
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,794,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,795,if (index < 0 || index >= getDimension()) {
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,796,throw new MatrixIndexException(
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,797,"""index {0} out of allowed range [{1}, {2}]"","
True,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,src/java/org/apache/commons/math/linear/FieldVectorImpl.java,798,"index, 0, getDimension() - 1);"
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,18,package org.apache.commons.math.linear.decomposition;
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,22,import org.apache.commons.math.FieldElement;
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,23,import org.apache.commons.math.linear.FieldMatrix;
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,24,import org.apache.commons.math.linear.FieldVector;
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,25,import org.apache.commons.math.linear.InvalidMatrixException;
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,29,* Interface handling decomposition algorithms that can solve A &times; X = B.
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,30,* <p>Decomposition algorithms decompose an A matrix has a product of several specific
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,31,* matrices from which they can solve A &times; X = B in least squares sense: they find X
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,32,* such that ||A &times; X - B|| is minimal.</p>
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,33,* <p>Some solvers like {@link LUDecomposition} can only find the solution for
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,34,"* square matrices and when the solution is an exact linear solution, i.e. when"
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,35,* ||A &times; X - B|| is exactly 0. Other solvers can also find solutions
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,36,* with non-square matrix A and with non-null minimal norm. If an exact linear
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,37,* solution exists it is also the minimal norm solution.</p>
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,39,* @param <T> the type of the field elements
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,40,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,41,* @since 2.0
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,43,public interface FieldDecompositionSolver<T extends FieldElement<T>> extends Serializable {
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,45,/** Solve the linear equation A &times; X = B for matrices A.
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,46,"* <p>The A matrix is implicit, it is provided by the underlying"
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,47,* decomposition algorithm.</p>
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,48,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,49,* @return a vector X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,50,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,51,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,53,T[] solve(final T[] b)
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,54,"throws IllegalArgumentException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,56,/** Solve the linear equation A &times; X = B for matrices A.
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,57,"* <p>The A matrix is implicit, it is provided by the underlying"
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,58,* decomposition algorithm.</p>
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,59,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,60,* @return a vector X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,61,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,62,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,64,FieldVector<T> solve(final FieldVector<T> b)
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,65,"throws IllegalArgumentException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,67,/** Solve the linear equation A &times; X = B for matrices A.
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,68,"* <p>The A matrix is implicit, it is provided by the underlying"
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,69,* decomposition algorithm.</p>
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,70,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,71,* @return a matrix X that minimizes the two norm of A &times; X - B
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,72,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,73,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,75,FieldMatrix<T> solve(final FieldMatrix<T> b)
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,76,"throws IllegalArgumentException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,79,* Check if the decomposed matrix is non-singular.
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,80,* @return true if the decomposed matrix is non-singular
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,82,boolean isNonSingular();
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,84,/** Get the inverse (or pseudo-inverse) of the decomposed matrix.
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,85,* @return inverse matrix
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,86,* @throws InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,88,FieldMatrix<T> getInverse()
True,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,src/java/org/apache/commons/math/linear/decomposition/FieldDecompositionSolver.java,89,throws InvalidMatrixException;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,18,package org.apache.commons.math.linear.decomposition;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,22,import org.apache.commons.math.FieldElement;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,23,import org.apache.commons.math.linear.FieldMatrix;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,26,* An interface to classes that implement an algorithm to calculate the
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,27,* LU-decomposition of a real matrix.
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,28,"* <p>The LU-decomposition of matrix A is a set of three matrices: P, L and U"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,29,* such that P&times;A = L&times;U. P is a rows permutation matrix that is used
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,30,* to rearrange the rows of A before so that it can be decomposed. L is a lower
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,31,* triangular matrix with unit diagonal terms and U is an upper triangular matrix.</p>
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,32,* <p>This interface is based on the class with similar name from the now defunct
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,33,"* <a href=""http://math.nist.gov/javanumerics/jama/"">JAMA</a> library.</p>"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,34,* <ul>
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,35,"*   <li>a {@link #getP() getP} method has been added,</li>"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,36,*   <li>the <code>det</code> method has been renamed as {@link #getDeterminant()
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,37,"*   getDeterminant},</li>"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,38,*   <li>the <code>getDoublePivot</code> method has been removed (but the int based
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,39,"*   {@link #getPivot() getPivot} method has been kept),</li>"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,40,*   <li>the <code>solve</code> and <code>isNonSingular</code> methods have been replaced
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,41,*   by a {@link #getSolver() getSolver} method and the equivalent methods provided by
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,42,*   the returned {@link DecompositionSolver}.</li>
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,43,* </ul>
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,45,* @param <T> the type of the field elements
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,46,"* @see <a href=""http://mathworld.wolfram.com/LUDecomposition.html"">MathWorld</a>"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,47,"* @see <a href=""http://en.wikipedia.org/wiki/LU_decomposition"">Wikipedia</a>"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,48,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,49,* @since 2.0
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,51,public interface FieldLUDecomposition<T extends FieldElement<T>> extends Serializable {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,54,* Returns the matrix L of the decomposition.
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,55,* <p>L is an lower-triangular matrix</p>
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,56,* @return the L matrix (or null if decomposed matrix is singular)
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,58,FieldMatrix<T> getL();
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,61,* Returns the matrix U of the decomposition.
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,62,* <p>U is an upper-triangular matrix</p>
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,63,* @return the U matrix (or null if decomposed matrix is singular)
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,65,FieldMatrix<T> getU();
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,68,* Returns the P rows permutation matrix.
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,69,* <p>P is a sparse matrix with exactly one element set to 1.0 in
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,70,"* each row and each column, all other elements being set to 0.0.</p>"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,71,* <p>The positions of the 1 elements are given by the {@link #getPivot()
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,72,* pivot permutation vector}.</p>
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,73,* @return the P rows permutation matrix (or null if decomposed matrix is singular)
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,74,* @see #getPivot()
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,76,FieldMatrix<T> getP();
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,79,* Returns the pivot permutation vector.
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,80,* @return the pivot permutation vector
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,81,* @see #getP()
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,83,int[] getPivot();
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,86,* Return the determinant of the matrix
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,87,* @return determinant of the matrix
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,89,T getDeterminant();
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,92,* Get a solver for finding the A &times; X = B solution in exact linear sense.
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,93,* @return a solver
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecomposition.java,95,FieldDecompositionSolver<T> getSolver();
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,18,package org.apache.commons.math.linear.decomposition;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,20,import java.lang.reflect.Array;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,22,import org.apache.commons.math.Field;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,23,import org.apache.commons.math.FieldElement;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,24,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,25,import org.apache.commons.math.linear.FieldMatrix;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,26,import org.apache.commons.math.linear.FieldMatrixImpl;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,27,import org.apache.commons.math.linear.FieldVector;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,28,import org.apache.commons.math.linear.FieldVectorImpl;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,29,import org.apache.commons.math.linear.InvalidMatrixException;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,32,* Calculates the LUP-decomposition of a square matrix.
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,33,* <p>The LUP-decomposition of a matrix A consists of three matrices
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,34,"* L, U and P that satisfy: PA = LU, L is lower triangular, and U is"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,35,* upper triangular and P is a permutation matrix. All matrices are
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,36,* m&times;m.</p>
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,37,* <p>Since {@link FieldElement field elements} do not provide an ordering
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,38,"* operator, the permutation matrix is computed here only in order to avoid"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,39,"* a zero pivot element, no attempt is done to get the largest pivot element.</p>"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,41,* @param <T> the type of the field elements
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,42,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,43,* @since 2.0
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,45,public class FieldLUDecompositionImpl<T extends FieldElement<T>> implements FieldLUDecomposition<T> {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,47,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,48,private static final long serialVersionUID = 1954692554563387537L;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,50,/** Field to which the elements belong. */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,51,private final Field<T> field;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,53,/** Entries of LU decomposition. */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,54,private T lu[][];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,56,/** Pivot permutation associated with LU decomposition */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,57,private int[] pivot;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,59,/** Parity of the permutation associated with the LU decomposition */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,60,private boolean even;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,62,/** Singularity indicator. */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,63,private boolean singular;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,65,/** Cached value of L. */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,66,private FieldMatrix<T> cachedL;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,68,/** Cached value of U. */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,69,private FieldMatrix<T> cachedU;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,71,/** Cached value of P. */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,72,private FieldMatrix<T> cachedP;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,75,* Calculates the LU-decomposition of the given matrix.
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,76,* @param matrix The matrix to decompose.
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,77,* @exception NonSquareMatrixException if matrix is not square
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,79,public FieldLUDecompositionImpl(FieldMatrix<T> matrix)
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,80,throws NonSquareMatrixException {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,82,if (!matrix.isSquare()) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,83,"throw new NonSquareMatrixException(matrix.getRowDimension(), matrix.getColumnDimension());"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,86,final int m = matrix.getColumnDimension();
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,87,field = matrix.getField();
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,88,lu = matrix.getData();
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,89,pivot = new int[m];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,90,cachedL = null;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,91,cachedU = null;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,92,cachedP = null;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,94,// Initialize permutation array and parity
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,95,for (int row = 0; row < m; row++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,96,pivot[row] = row;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,98,even     = true;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,99,singular = false;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,101,// Loop over columns
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,102,for (int col = 0; col < m; col++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,104,T sum = field.getZero();
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,106,// upper
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,107,for (int row = 0; row < col; row++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,108,final T[] luRow = lu[row];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,109,sum = luRow[col];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,110,for (int i = 0; i < row; i++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,111,sum = sum.subtract(luRow[i].multiply(lu[i][col]));
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,113,luRow[col] = sum;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,116,// lower
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,117,int nonZero = col; // permutation row
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,118,for (int row = col; row < m; row++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,119,final T[] luRow = lu[row];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,120,sum = luRow[col];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,121,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,122,sum = sum.subtract(luRow[i].multiply(lu[i][col]));
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,124,luRow[col] = sum;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,126,if (lu[nonZero][col].equals(field.getZero())) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,127,// try to select a better permutation choice
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,128,++nonZero;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,132,// Singularity check
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,133,if (nonZero >= m) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,134,singular = true;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,135,return;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,138,// Pivot if necessary
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,139,if (nonZero != col) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,140,T tmp = field.getZero();
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,141,for (int i = 0; i < m; i++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,142,tmp = lu[nonZero][i];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,143,lu[nonZero][i] = lu[col][i];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,144,lu[col][i] = tmp;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,146,int temp = pivot[nonZero];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,147,pivot[nonZero] = pivot[col];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,148,pivot[col] = temp;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,149,even = !even;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,152,"// Divide the lower elements by the ""winning"" diagonal elt."
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,153,final T luDiag = lu[col][col];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,154,for (int row = col + 1; row < m; row++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,155,final T[] luRow = lu[row];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,156,luRow[col] = luRow[col].divide(luDiag);
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,162,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,163,public FieldMatrix<T> getL() {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,164,if ((cachedL == null) && !singular) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,165,final int m = pivot.length;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,166,"cachedL = new FieldMatrixImpl<T>(field, m, m);"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,167,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,168,final T[] luI = lu[i];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,169,for (int j = 0; j < i; ++j) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,170,"cachedL.setEntry(i, j, luI[j]);"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,172,"cachedL.setEntry(i, i, field.getOne());"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,175,return cachedL;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,178,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,179,public FieldMatrix<T> getU() {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,180,if ((cachedU == null) && !singular) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,181,final int m = pivot.length;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,182,"cachedU = new FieldMatrixImpl<T>(field, m, m);"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,183,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,184,final T[] luI = lu[i];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,185,for (int j = i; j < m; ++j) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,186,"cachedU.setEntry(i, j, luI[j]);"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,190,return cachedU;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,193,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,194,public FieldMatrix<T> getP() {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,195,if ((cachedP == null) && !singular) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,196,final int m = pivot.length;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,197,"cachedP = new FieldMatrixImpl<T>(field, m, m);"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,198,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,199,"cachedP.setEntry(i, pivot[i], field.getOne());"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,202,return cachedP;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,205,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,206,public int[] getPivot() {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,207,return pivot.clone();
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,210,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,211,public T getDeterminant() {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,212,if (singular) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,213,return field.getZero();
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,214,} else {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,215,final int m = pivot.length;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,216,T determinant = even ? field.getOne() : field.getZero().subtract(field.getOne());
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,217,for (int i = 0; i < m; i++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,218,determinant = determinant.multiply(lu[i][i]);
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,220,return determinant;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,224,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,225,public FieldDecompositionSolver<T> getSolver() {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,226,"return new Solver<T>(field, lu, pivot, singular);"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,229,/** Specialized solver. */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,230,private static class Solver<T extends FieldElement<T>> implements FieldDecompositionSolver<T> {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,232,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,233,private static final long serialVersionUID = -6353105415121373022L;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,235,/** Field to which the elements belong. */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,236,private final Field<T> field;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,238,/** Entries of LU decomposition. */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,239,private final T lu[][];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,241,/** Pivot permutation associated with LU decomposition. */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,242,private final int[] pivot;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,244,/** Singularity indicator. */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,245,private final boolean singular;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,248,* Build a solver from decomposed matrix.
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,249,* @param field field to which the matrix elements belong
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,250,* @param lu entries of LU decomposition
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,251,* @param pivot pivot permutation associated with LU decomposition
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,252,* @param singular singularity indicator
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,254,"private Solver(final Field<T> field, final T[][] lu,"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,255,"final int[] pivot, final boolean singular) {"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,256,this.field    = field;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,257,this.lu       = lu;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,258,this.pivot    = pivot;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,259,this.singular = singular;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,262,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,263,public boolean isNonSingular() {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,264,return !singular;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,267,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,268,"@SuppressWarnings(""unchecked"")"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,269,public T[] solve(T[] b)
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,270,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,272,final int m = pivot.length;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,273,if (b.length != m) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,274,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,275,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,276,"b.length, m);"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,278,if (singular) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,279,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,282,"final T[] bp = (T[]) Array.newInstance(field.getZero().getClass(), m);"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,284,// Apply permutations to b
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,285,for (int row = 0; row < m; row++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,286,bp[row] = b[pivot[row]];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,289,// Solve LY = b
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,290,for (int col = 0; col < m; col++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,291,final T bpCol = bp[col];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,292,for (int i = col + 1; i < m; i++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,293,bp[i] = bp[i].subtract(bpCol.multiply(lu[i][col]));
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,297,// Solve UX = Y
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,298,for (int col = m - 1; col >= 0; col--) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,299,bp[col] = bp[col].divide(lu[col][col]);
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,300,final T bpCol = bp[col];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,301,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,302,bp[i] = bp[i].subtract(bpCol.multiply(lu[i][col]));
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,306,return bp;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,310,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,311,"@SuppressWarnings(""unchecked"")"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,312,public FieldVector<T> solve(FieldVector<T> b)
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,313,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,314,try {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,315,return solve((FieldVectorImpl<T>) b);
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,316,} catch (ClassCastException cce) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,318,final int m = pivot.length;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,319,if (b.getDimension() != m) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,320,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,321,"""vector length mismatch: got {0} but expected {1}"","
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,322,"b.getDimension(), m);"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,324,if (singular) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,325,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,328,"final T[] bp = (T[]) Array.newInstance(field.getZero().getClass(), m);"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,330,// Apply permutations to b
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,331,for (int row = 0; row < m; row++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,332,bp[row] = b.getEntry(pivot[row]);
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,335,// Solve LY = b
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,336,for (int col = 0; col < m; col++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,337,final T bpCol = bp[col];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,338,for (int i = col + 1; i < m; i++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,339,bp[i] = bp[i].subtract(bpCol.multiply(lu[i][col]));
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,343,// Solve UX = Y
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,344,for (int col = m - 1; col >= 0; col--) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,345,bp[col] = bp[col].divide(lu[col][col]);
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,346,final T bpCol = bp[col];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,347,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,348,bp[i] = bp[i].subtract(bpCol.multiply(lu[i][col]));
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,352,"return new FieldVectorImpl<T>(bp, false);"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,357,/** Solve the linear equation A &times; X = B.
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,358,* <p>The A matrix is implicit here. It is </p>
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,359,* @param b right-hand side of the equation A &times; X = B
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,360,* @return a vector X such that A &times; X = B
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,361,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,362,* @exception InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,364,public FieldVectorImpl<T> solve(FieldVectorImpl<T> b)
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,365,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,366,"return new FieldVectorImpl<T>(solve(b.getDataRef()), false);"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,369,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,370,"@SuppressWarnings(""unchecked"")"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,371,public FieldMatrix<T> solve(FieldMatrix<T> b)
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,372,"throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,374,final int m = pivot.length;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,375,if (b.getRowDimension() != m) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,376,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,377,"""dimensions mismatch: got {0}x{1} but expected {2}x{3}"","
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,378,"b.getRowDimension(), b.getColumnDimension(), m, ""n"");"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,380,if (singular) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,381,throw new SingularMatrixException();
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,384,final int nColB = b.getColumnDimension();
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,386,// Apply permutations to b
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,387,"final T[][] bp = (T[][]) Array.newInstance(field.getZero().getClass(), new int[] { m, nColB });"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,388,for (int row = 0; row < m; row++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,389,final T[] bpRow = bp[row];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,390,final int pRow = pivot[row];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,391,for (int col = 0; col < nColB; col++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,392,"bpRow[col] = b.getEntry(pRow, col);"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,396,// Solve LY = b
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,397,for (int col = 0; col < m; col++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,398,final T[] bpCol = bp[col];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,399,for (int i = col + 1; i < m; i++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,400,final T[] bpI = bp[i];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,401,final T luICol = lu[i][col];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,402,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,403,bpI[j] = bpI[j].subtract(bpCol[j].multiply(luICol));
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,408,// Solve UX = Y
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,409,for (int col = m - 1; col >= 0; col--) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,410,final T[] bpCol = bp[col];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,411,final T luDiag = lu[col][col];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,412,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,413,bpCol[j] = bpCol[j].divide(luDiag);
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,415,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,416,final T[] bpI = bp[i];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,417,final T luICol = lu[i][col];
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,418,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,419,bpI[j] = bpI[j].subtract(bpCol[j].multiply(luICol));
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,424,"return new FieldMatrixImpl<T>(bp, false);"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,428,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,429,public FieldMatrix<T> getInverse() throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,430,final int m = pivot.length;
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,431,final T one = field.getOne();
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,432,"FieldMatrix<T> identity = new FieldMatrixImpl<T>(field, m, m);"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,433,for (int i = 0; i < m; ++i) {
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,434,"identity.setEntry(i, i, one);"
True,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImpl.java,436,return solve(identity);
False,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,31," L, U and P that satisfy: A = LUP, L is lower triangular, and U is"
True,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,31,"* L, U and P that satisfy: PA = LU, L is lower triangular, and U is"
True,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,149,final double[] luMax = lu[max];
True,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,150,final double[] luCol = lu[col];
False,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,150,mp = lu[max][i];
False,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,151,u[max][i] = lu[col][i];
False,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,152,u[col][i] = tmp;
True,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,152,tmp = luMax[i];
True,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,153,luMax[i] = luCol[i];
True,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,154,luCol[i] = tmp;
True,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,293,final double bpCol = bp[col];
False,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,292,p[i] -= bp[col] * lu[i][col];
True,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,295,bp[i] -= bpCol * lu[i][col];
True,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,302,final double bpCol = bp[col];
False,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,300,p[i] -= bp[col] * lu[i][col];
True,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,304,bp[i] -= bpCol * lu[i][col];
True,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,338,final double bpCol = bp[col];
False,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,335,p[i] -= bp[col] * lu[i][col];
True,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,340,bp[i] -= bpCol * lu[i][col];
True,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,347,final double bpCol = bp[col];
False,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,343,p[i] -= bp[col] * lu[i][col];
True,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java,349,bp[i] -= bpCol * lu[i][col];
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,31,import org.apache.commons.math.linear.FieldMatrix;
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,286,/** verifies that two matrices are equal */
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,287,"public static void assertEquals(FieldMatrix<? extends FieldElement<?>> expected,"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,288,FieldMatrix<? extends FieldElement<?>> observed) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,290,if (observed == null) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,291,"Assert.fail(""Observed is null"");"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,294,if (expected.getColumnDimension() != observed.getColumnDimension() ||
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,295,expected.getRowDimension() != observed.getRowDimension()) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,296,StringBuffer messageBuffer = new StringBuffer();
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,297,"messageBuffer.append(""Observed has incorrect dimensions."");"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,298,"messageBuffer.append(""\nobserved is "" + observed.getRowDimension() +"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,299,""" x "" + observed.getColumnDimension());"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,300,"messageBuffer.append(""\nexpected "" + expected.getRowDimension() +"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,301,""" x "" + expected.getColumnDimension());"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,302,Assert.fail(messageBuffer.toString());
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,305,for (int i = 0; i < expected.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,306,for (int j = 0; j < expected.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,307,"FieldElement<?> eij = expected.getEntry(i, j);"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,308,"FieldElement<?> oij = observed.getEntry(i, j);"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,309,"Assert.assertEquals(eij, oij);"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,326,/** verifies that two arrays are equal */
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,327,"public static void assertEquals(FieldElement<? extends FieldElement<?>>[] m,"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,328,FieldElement<? extends FieldElement<?>>[] n) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,329,if (m.length != n.length) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,330,"Assert.fail(""vectors not same length"");"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,332,for (int i = 0; i < m.length; i++) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,333,"Assert.assertEquals(m[i],n[i]);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,32,@Deprecated
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,17,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,19,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,21,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,23,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,24,import org.apache.commons.math.fraction.Fraction;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,25,import org.apache.commons.math.fraction.FractionField;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,26,import org.apache.commons.math.linear.decomposition.FieldLUDecompositionImpl;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,27,import org.apache.commons.math.linear.decomposition.NonSquareMatrixException;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,30,* Test cases for the {@link FieldMatrixImpl} class.
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,32,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,35,public final class FieldMatrixImplTest extends TestCase {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,37,// 3 x 3 identity matrix
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,38,"protected Fraction[][] id = { {new Fraction(1),new Fraction(0),new Fraction(0)}, {new Fraction(0),new Fraction(1),new Fraction(0)}, {new Fraction(0),new Fraction(0),new Fraction(1)} };"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,40,// Test data for group operations
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,41,"protected Fraction[][] testData = { {new Fraction(1),new Fraction(2),new Fraction(3)}, {new Fraction(2),new Fraction(5),new Fraction(3)}, {new Fraction(1),new Fraction(0),new Fraction(8)} };"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,42,"protected Fraction[][] testDataLU = {{new Fraction(2), new Fraction(5), new Fraction(3)}, {new Fraction(1, 2), new Fraction(-5, 2), new Fraction(13, 2)}, {new Fraction(1, 2), new Fraction(1, 5), new Fraction(1, 5)}};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,43,"protected Fraction[][] testDataPlus2 = { {new Fraction(3),new Fraction(4),new Fraction(5)}, {new Fraction(4),new Fraction(7),new Fraction(5)}, {new Fraction(3),new Fraction(2),new Fraction(10)} };"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,44,"protected Fraction[][] testDataMinus = { {new Fraction(-1),new Fraction(-2),new Fraction(-3)}, {new Fraction(-2),new Fraction(-5),new Fraction(-3)},"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,45,"{new Fraction(-1),new Fraction(0),new Fraction(-8)} };"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,46,"protected Fraction[] testDataRow1 = {new Fraction(1),new Fraction(2),new Fraction(3)};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,47,"protected Fraction[] testDataCol3 = {new Fraction(3),new Fraction(3),new Fraction(8)};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,48,protected Fraction[][] testDataInv =
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,49,"{ {new Fraction(-40),new Fraction(16),new Fraction(9)}, {new Fraction(13),new Fraction(-5),new Fraction(-3)}, {new Fraction(5),new Fraction(-2),new Fraction(-1)} };"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,50,"protected Fraction[] preMultTest = {new Fraction(8),new Fraction(12),new Fraction(33)};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,51,"protected Fraction[][] testData2 ={ {new Fraction(1),new Fraction(2),new Fraction(3)}, {new Fraction(2),new Fraction(5),new Fraction(3)}};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,52,"protected Fraction[][] testData2T = { {new Fraction(1),new Fraction(2)}, {new Fraction(2),new Fraction(5)}, {new Fraction(3),new Fraction(3)}};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,53,protected Fraction[][] testDataPlusInv =
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,54,"{ {new Fraction(-39),new Fraction(18),new Fraction(12)}, {new Fraction(15),new Fraction(0),new Fraction(0)}, {new Fraction(6),new Fraction(-2),new Fraction(7)} };"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,56,// lu decomposition tests
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,57,"protected Fraction[][] luData = { {new Fraction(2),new Fraction(3),new Fraction(3)}, {new Fraction(0),new Fraction(5),new Fraction(7)}, {new Fraction(6),new Fraction(9),new Fraction(8)} };"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,58,"protected Fraction[][] luDataLUDecomposition = { {new Fraction(6),new Fraction(9),new Fraction(8)}, {new Fraction(0),new Fraction(5),new Fraction(7)},"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,59,"{new Fraction(1, 3),new Fraction(0),new Fraction(1, 3)} };"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,61,// singular matrices
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,62,"protected Fraction[][] singular = { {new Fraction(2),new Fraction(3)}, {new Fraction(2),new Fraction(3)} };"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,63,"protected Fraction[][] bigSingular = {{new Fraction(1),new Fraction(2),new Fraction(3),new Fraction(4)}, {new Fraction(2),new Fraction(5),new Fraction(3),new Fraction(4)},"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,64,"{new Fraction(7),new Fraction(3),new Fraction(256),new Fraction(1930)}, {new Fraction(3),new Fraction(7),new Fraction(6),new Fraction(8)}}; // 4th row = 1st + 2nd"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,65,"protected Fraction[][] detData = { {new Fraction(1),new Fraction(2),new Fraction(3)}, {new Fraction(4),new Fraction(5),new Fraction(6)}, {new Fraction(7),new Fraction(8),new Fraction(10)} };"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,66,"protected Fraction[][] detData2 = { {new Fraction(1), new Fraction(3)}, {new Fraction(2), new Fraction(4)}};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,68,// vectors
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,69,"protected Fraction[] testVector = {new Fraction(1),new Fraction(2),new Fraction(3)};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,70,"protected Fraction[] testVector2 = {new Fraction(1),new Fraction(2),new Fraction(3),new Fraction(4)};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,72,// submatrix accessor tests
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,73,"protected Fraction[][] subTestData = {{new Fraction(1), new Fraction(2), new Fraction(3), new Fraction(4)}, {new Fraction(3, 2), new Fraction(5, 2), new Fraction(7, 2), new Fraction(9, 2)},"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,74,"{new Fraction(2), new Fraction(4), new Fraction(6), new Fraction(8)}, {new Fraction(4), new Fraction(5), new Fraction(6), new Fraction(7)}};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,75,// array selections
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,76,"protected Fraction[][] subRows02Cols13 = { {new Fraction(2), new Fraction(4)}, {new Fraction(4), new Fraction(8)}};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,77,"protected Fraction[][] subRows03Cols12 = { {new Fraction(2), new Fraction(3)}, {new Fraction(5), new Fraction(6)}};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,78,"protected Fraction[][] subRows03Cols123 = { {new Fraction(2), new Fraction(3), new Fraction(4)} , {new Fraction(5), new Fraction(6), new Fraction(7)}};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,79,// effective permutations
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,80,"protected Fraction[][] subRows20Cols123 = { {new Fraction(4), new Fraction(6), new Fraction(8)} , {new Fraction(2), new Fraction(3), new Fraction(4)}};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,81,"protected Fraction[][] subRows31Cols31 = {{new Fraction(7), new Fraction(5)}, {new Fraction(9, 2), new Fraction(5, 2)}};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,82,// contiguous ranges
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,83,"protected Fraction[][] subRows01Cols23 = {{new Fraction(3),new Fraction(4)} , {new Fraction(7, 2), new Fraction(9, 2)}};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,84,"protected Fraction[][] subRows23Cols00 = {{new Fraction(2)} , {new Fraction(4)}};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,85,protected Fraction[][] subRows00Cols33 = {{new Fraction(4)}};
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,86,// row matrices
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,87,"protected Fraction[][] subRow0 = {{new Fraction(1),new Fraction(2),new Fraction(3),new Fraction(4)}};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,88,"protected Fraction[][] subRow3 = {{new Fraction(4),new Fraction(5),new Fraction(6),new Fraction(7)}};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,89,// column matrices
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,90,"protected Fraction[][] subColumn1 = {{new Fraction(2)}, {new Fraction(5, 2)}, {new Fraction(4)}, {new Fraction(5)}};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,91,"protected Fraction[][] subColumn3 = {{new Fraction(4)}, {new Fraction(9, 2)}, {new Fraction(8)}, {new Fraction(7)}};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,93,// tolerances
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,94,protected double entryTolerance = 10E-16;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,95,protected double normTolerance = 10E-14;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,97,public FieldMatrixImplTest(String name) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,98,super(name);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,101,public static Test suite() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,102,TestSuite suite = new TestSuite(FieldMatrixImplTest.class);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,103,"suite.setName(""FieldMatrixImpl<Fraction> Tests"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,104,return suite;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,107,/** test dimensions */
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,108,public void testDimensions() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,109,FieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,110,FieldMatrixImpl<Fraction> m2 = new FieldMatrixImpl<Fraction>(testData2);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,111,"assertEquals(""testData row dimension"",3,m.getRowDimension());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,112,"assertEquals(""testData column dimension"",3,m.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,113,"assertTrue(""testData is square"",m.isSquare());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,114,"assertEquals(""testData2 row dimension"",m2.getRowDimension(),2);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,115,"assertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,116,"assertTrue(""testData2 is not square"",!m2.isSquare());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,119,/** test copy functions */
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,120,public void testCopyFunctions() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,121,FieldMatrixImpl<Fraction> m1 = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,122,FieldMatrixImpl<Fraction> m2 = new FieldMatrixImpl<Fraction>(m1.getData());
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,123,"assertEquals(m2,m1);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,124,FieldMatrixImpl<Fraction> m3 = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,125,"FieldMatrixImpl<Fraction> m4 = new FieldMatrixImpl<Fraction>(m3.getData(), false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,126,"assertEquals(m4,m3);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,129,/** test add */
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,130,public void testAdd() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,131,FieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,132,FieldMatrixImpl<Fraction> mInv = new FieldMatrixImpl<Fraction>(testDataInv);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,133,FieldMatrix<Fraction> mPlusMInv = m.add(mInv);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,134,Fraction[][] sumEntries = mPlusMInv.getData();
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,135,for (int row = 0; row < m.getRowDimension(); row++) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,136,for (int col = 0; col < m.getColumnDimension(); col++) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,137,"assertEquals(testDataPlusInv[row][col],sumEntries[row][col]);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,142,/** test add failure */
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,143,public void testAddFail() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,144,FieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,145,FieldMatrixImpl<Fraction> m2 = new FieldMatrixImpl<Fraction>(testData2);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,146,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,147,m.add(m2);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,148,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,149,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,150,// ignored
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,154,/** test m-n = m + -n */
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,155,public void testPlusMinus() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,156,FieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,157,FieldMatrixImpl<Fraction> m2 = new FieldMatrixImpl<Fraction>(testDataInv);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,158,"TestUtils.assertEquals(m.subtract(m2),m2.scalarMultiply(new Fraction(-1)).add(m));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,159,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,160,m.subtract(new FieldMatrixImpl<Fraction>(testData2));
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,161,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,162,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,163,// ignored
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,167,/** test multiply */
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,168,public void testMultiply() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,169,FieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,170,FieldMatrixImpl<Fraction> mInv = new FieldMatrixImpl<Fraction>(testDataInv);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,171,FieldMatrixImpl<Fraction> identity = new FieldMatrixImpl<Fraction>(id);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,172,FieldMatrixImpl<Fraction> m2 = new FieldMatrixImpl<Fraction>(testData2);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,173,"TestUtils.assertEquals(m.multiply(mInv), identity);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,174,"TestUtils.assertEquals(mInv.multiply(m), identity);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,175,"TestUtils.assertEquals(m.multiply(identity), m);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,176,"TestUtils.assertEquals(identity.multiply(mInv), mInv);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,177,"TestUtils.assertEquals(m2.multiply(identity), m2);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,178,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,179,m.multiply(new FieldMatrixImpl<Fraction>(bigSingular));
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,180,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,181,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,182,// ignored
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,186,//Additional Test for FieldMatrixImpl<Fraction>Test.testMultiply
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,188,"private Fraction[][] d3 = new Fraction[][] {{new Fraction(1),new Fraction(2),new Fraction(3),new Fraction(4)},{new Fraction(5),new Fraction(6),new Fraction(7),new Fraction(8)}};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,189,"private Fraction[][] d4 = new Fraction[][] {{new Fraction(1)},{new Fraction(2)},{new Fraction(3)},{new Fraction(4)}};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,190,"private Fraction[][] d5 = new Fraction[][] {{new Fraction(30)},{new Fraction(70)}};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,192,public void testMultiply2() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,193,FieldMatrix<Fraction> m3 = new FieldMatrixImpl<Fraction>(d3);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,194,FieldMatrix<Fraction> m4 = new FieldMatrixImpl<Fraction>(d4);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,195,FieldMatrix<Fraction> m5 = new FieldMatrixImpl<Fraction>(d5);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,196,"TestUtils.assertEquals(m3.multiply(m4), m5);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,199,/** test trace */
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,200,public void testTrace() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,201,FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(id);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,202,"assertEquals(""identity trace"",new Fraction(3),m.getTrace());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,203,m = new FieldMatrixImpl<Fraction>(testData2);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,204,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,205,m.getTrace();
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,206,"fail(""Expecting NonSquareMatrixException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,207,} catch (NonSquareMatrixException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,208,// ignored
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,212,/** test sclarAdd */
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,213,public void testScalarAdd() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,214,FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,215,"TestUtils.assertEquals(new FieldMatrixImpl<Fraction>(testDataPlus2), m.scalarAdd(new Fraction(2)));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,218,/** test operate */
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,219,public void testOperate() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,220,FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(id);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,221,"TestUtils.assertEquals(testVector, m.operate(testVector));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,222,"TestUtils.assertEquals(testVector, m.operate(new FieldVectorImpl<Fraction>(testVector)).getData());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,223,m = new FieldMatrixImpl<Fraction>(bigSingular);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,224,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,225,m.operate(testVector);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,226,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,227,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,228,// ignored
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,232,/** test issue MATH-209 */
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,233,public void testMath209() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,234,FieldMatrix<Fraction> a = new FieldMatrixImpl<Fraction>(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,235,"{ new Fraction(1), new Fraction(2) }, { new Fraction(3), new Fraction(4) }, { new Fraction(5), new Fraction(6) }"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,236,"}, false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,237,"Fraction[] b = a.operate(new Fraction[] { new Fraction(1), new Fraction(1) });"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,238,"assertEquals(a.getRowDimension(), b.length);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,239,"assertEquals( new Fraction(3), b[0]);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,240,"assertEquals( new Fraction(7), b[1]);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,241,"assertEquals(new Fraction(11), b[2]);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,244,/** test transpose */
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,245,public void testTranspose() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,246,FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,247,FieldMatrix<Fraction> mIT = new FieldLUDecompositionImpl<Fraction>(m).getSolver().getInverse().transpose();
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,248,FieldMatrix<Fraction> mTI = new FieldLUDecompositionImpl<Fraction>(m.transpose()).getSolver().getInverse();
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,249,"TestUtils.assertEquals(mIT, mTI);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,250,m = new FieldMatrixImpl<Fraction>(testData2);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,251,FieldMatrix<Fraction> mt = new FieldMatrixImpl<Fraction>(testData2T);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,252,"TestUtils.assertEquals(mt, m.transpose());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,255,/** test preMultiply by vector */
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,256,public void testPremultiplyVector() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,257,FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,258,"TestUtils.assertEquals(m.preMultiply(testVector), preMultTest);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,259,"TestUtils.assertEquals(m.preMultiply(new FieldVectorImpl<Fraction>(testVector).getData()),"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,260,preMultTest);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,261,m = new FieldMatrixImpl<Fraction>(bigSingular);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,262,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,263,m.preMultiply(testVector);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,264,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,265,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,266,// ignored
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,270,public void testPremultiply() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,271,FieldMatrix<Fraction> m3 = new FieldMatrixImpl<Fraction>(d3);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,272,FieldMatrix<Fraction> m4 = new FieldMatrixImpl<Fraction>(d4);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,273,FieldMatrix<Fraction> m5 = new FieldMatrixImpl<Fraction>(d5);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,274,"TestUtils.assertEquals(m4.preMultiply(m3), m5);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,276,FieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,277,FieldMatrixImpl<Fraction> mInv = new FieldMatrixImpl<Fraction>(testDataInv);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,278,FieldMatrixImpl<Fraction> identity = new FieldMatrixImpl<Fraction>(id);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,279,"TestUtils.assertEquals(m.preMultiply(mInv), identity);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,280,"TestUtils.assertEquals(mInv.preMultiply(m), identity);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,281,"TestUtils.assertEquals(m.preMultiply(identity), m);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,282,"TestUtils.assertEquals(identity.preMultiply(mInv), mInv);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,283,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,284,m.preMultiply(new FieldMatrixImpl<Fraction>(bigSingular));
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,285,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,286,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,287,// ignored
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,291,public void testGetVectors() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,292,FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,293,"TestUtils.assertEquals(m.getRow(0), testDataRow1);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,294,"TestUtils.assertEquals(m.getColumn(2), testDataCol3);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,295,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,296,m.getRow(10);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,297,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,298,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,299,// ignored
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,301,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,302,m.getColumn(-1);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,303,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,304,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,305,// ignored
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,309,public void testGetEntry() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,310,FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,311,"assertEquals(""get entry"",m.getEntry(0,1),new Fraction(2));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,312,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,313,"m.getEntry(10, 4);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,314,"fail (""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,315,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,316,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,320,/** test examples in user guide */
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,321,public void testExamples() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,322,// Create a real matrix with two rows and three columns
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,323,Fraction[][] matrixData = {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,324,"{new Fraction(1),new Fraction(2),new Fraction(3)},"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,325,"{new Fraction(2),new Fraction(5),new Fraction(3)}"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,327,FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(matrixData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,328,"// One more with three rows, two columns"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,329,Fraction[][] matrixData2 = {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,330,"{new Fraction(1),new Fraction(2)},"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,331,"{new Fraction(2),new Fraction(5)},"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,332,"{new Fraction(1), new Fraction(7)}"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,334,FieldMatrix<Fraction> n = new FieldMatrixImpl<Fraction>(matrixData2);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,335,// Now multiply m by n
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,336,FieldMatrix<Fraction> p = m.multiply(n);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,337,"assertEquals(2, p.getRowDimension());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,338,"assertEquals(2, p.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,339,// Invert p
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,340,FieldMatrix<Fraction> pInverse = new FieldLUDecompositionImpl<Fraction>(p).getSolver().getInverse();
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,341,"assertEquals(2, pInverse.getRowDimension());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,342,"assertEquals(2, pInverse.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,344,// Solve example
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,345,Fraction[][] coefficientsData = {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,346,"{new Fraction(2), new Fraction(3), new Fraction(-2)},"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,347,"{new Fraction(-1), new Fraction(7), new Fraction(6)},"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,348,"{new Fraction(4), new Fraction(-3), new Fraction(-5)}"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,350,FieldMatrix<Fraction> coefficients = new FieldMatrixImpl<Fraction>(coefficientsData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,351,"Fraction[] constants = {new Fraction(1), new Fraction(-2), new Fraction(1)};"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,352,Fraction[] solution = new FieldLUDecompositionImpl<Fraction>(coefficients).getSolver().solve(constants);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,353,assertEquals(new Fraction(2).multiply(solution[0]).
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,354,add(new Fraction(3).multiply(solution[1])).
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,355,"subtract(new Fraction(2).multiply(solution[2])), constants[0]);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,356,assertEquals(new Fraction(-1).multiply(solution[0]).
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,357,add(new Fraction(7).multiply(solution[1])).
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,358,"add(new Fraction(6).multiply(solution[2])), constants[1]);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,359,assertEquals(new Fraction(4).multiply(solution[0]).
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,360,subtract(new Fraction(3).multiply(solution[1])).
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,361,"subtract(new Fraction(5).multiply(solution[2])), constants[2]);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,365,// test submatrix accessors
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,366,public void testGetSubMatrix() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,367,FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,368,"checkGetSubMatrix(m, subRows23Cols00,  2 , 3 , 0, 0, false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,369,"checkGetSubMatrix(m, subRows00Cols33,  0 , 0 , 3, 3, false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,370,"checkGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,371,"checkGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,372,"checkGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,373,"checkGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,374,"checkGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,375,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,376,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,377,"checkGetSubMatrix(m, null,  1, 0, 2, 4, true);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,378,"checkGetSubMatrix(m, null, -1, 1, 2, 2, true);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,379,"checkGetSubMatrix(m, null,  1, 0, 2, 2, true);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,380,"checkGetSubMatrix(m, null,  1, 0, 2, 4, true);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,381,"checkGetSubMatrix(m, null, new int[] {},    new int[] { 0 }, true);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,382,"checkGetSubMatrix(m, null, new int[] { 0 }, new int[] { 4 }, true);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,385,"private void checkGetSubMatrix(FieldMatrix<Fraction> m, Fraction[][] reference,"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,386,"int startRow, int endRow, int startColumn, int endColumn,"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,387,boolean mustFail) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,388,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,389,"FieldMatrix<Fraction> sub = m.getSubMatrix(startRow, endRow, startColumn, endColumn);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,390,"assertEquals(new FieldMatrixImpl<Fraction>(reference), sub);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,391,if (mustFail) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,392,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,394,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,395,if (!mustFail) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,396,throw e;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,401,"private void checkGetSubMatrix(FieldMatrix<Fraction> m, Fraction[][] reference,"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,402,"int[] selectedRows, int[] selectedColumns,"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,403,boolean mustFail) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,404,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,405,"FieldMatrix<Fraction> sub = m.getSubMatrix(selectedRows, selectedColumns);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,406,"assertEquals(new FieldMatrixImpl<Fraction>(reference), sub);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,407,if (mustFail) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,408,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,410,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,411,if (!mustFail) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,412,throw e;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,417,public void testCopySubMatrix() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,418,FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,419,"checkCopy(m, subRows23Cols00,  2 , 3 , 0, 0, false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,420,"checkCopy(m, subRows00Cols33,  0 , 0 , 3, 3, false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,421,"checkCopy(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,422,"checkCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,423,"checkCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,424,"checkCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,425,"checkCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,426,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,427,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,429,"checkCopy(m, null,  1, 0, 2, 4, true);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,430,"checkCopy(m, null, -1, 1, 2, 2, true);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,431,"checkCopy(m, null,  1, 0, 2, 2, true);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,432,"checkCopy(m, null,  1, 0, 2, 4, true);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,433,"checkCopy(m, null, new int[] {},    new int[] { 0 }, true);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,434,"checkCopy(m, null, new int[] { 0 }, new int[] { 4 }, true);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,437,"private void checkCopy(FieldMatrix<Fraction> m, Fraction[][] reference,"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,438,"int startRow, int endRow, int startColumn, int endColumn,"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,439,boolean mustFail) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,440,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,441,Fraction[][] sub = (reference == null) ?
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,442,new Fraction[1][1] :
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,443,new Fraction[reference.length][reference[0].length];
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,444,"m.copySubMatrix(startRow, endRow, startColumn, endColumn, sub);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,445,"assertEquals(new FieldMatrixImpl<Fraction>(reference), new FieldMatrixImpl<Fraction>(sub));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,446,if (mustFail) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,447,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,449,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,450,if (!mustFail) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,451,throw e;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,456,"private void checkCopy(FieldMatrix<Fraction> m, Fraction[][] reference,"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,457,"int[] selectedRows, int[] selectedColumns,"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,458,boolean mustFail) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,459,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,460,Fraction[][] sub = (reference == null) ?
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,461,new Fraction[1][1] :
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,462,new Fraction[reference.length][reference[0].length];
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,463,"m.copySubMatrix(selectedRows, selectedColumns, sub);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,464,"assertEquals(new FieldMatrixImpl<Fraction>(reference), new FieldMatrixImpl<Fraction>(sub));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,465,if (mustFail) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,466,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,468,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,469,if (!mustFail) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,470,throw e;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,475,public void testGetRowMatrix() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,476,FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,477,FieldMatrix<Fraction> mRow0 = new FieldMatrixImpl<Fraction>(subRow0);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,478,FieldMatrix<Fraction> mRow3 = new FieldMatrixImpl<Fraction>(subRow3);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,479,"assertEquals(""Row0"", mRow0,"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,480,m.getRowMatrix(0));
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,481,"assertEquals(""Row3"", mRow3,"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,482,m.getRowMatrix(3));
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,483,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,484,m.getRowMatrix(-1);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,485,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,486,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,487,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,489,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,490,m.getRowMatrix(4);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,491,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,492,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,493,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,497,public void testSetRowMatrix() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,498,FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,499,FieldMatrix<Fraction> mRow3 = new FieldMatrixImpl<Fraction>(subRow3);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,500,"assertNotSame(mRow3, m.getRowMatrix(0));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,501,"m.setRowMatrix(0, mRow3);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,502,"assertEquals(mRow3, m.getRowMatrix(0));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,503,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,504,"m.setRowMatrix(-1, mRow3);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,505,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,506,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,507,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,509,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,510,"m.setRowMatrix(0, m);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,511,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,512,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,513,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,517,public void testGetColumnMatrix() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,518,FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,519,FieldMatrix<Fraction> mColumn1 = new FieldMatrixImpl<Fraction>(subColumn1);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,520,FieldMatrix<Fraction> mColumn3 = new FieldMatrixImpl<Fraction>(subColumn3);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,521,"assertEquals(""Column1"", mColumn1,"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,522,m.getColumnMatrix(1));
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,523,"assertEquals(""Column3"", mColumn3,"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,524,m.getColumnMatrix(3));
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,525,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,526,m.getColumnMatrix(-1);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,527,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,528,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,529,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,531,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,532,m.getColumnMatrix(4);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,533,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,534,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,535,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,539,public void testSetColumnMatrix() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,540,FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,541,FieldMatrix<Fraction> mColumn3 = new FieldMatrixImpl<Fraction>(subColumn3);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,542,"assertNotSame(mColumn3, m.getColumnMatrix(1));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,543,"m.setColumnMatrix(1, mColumn3);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,544,"assertEquals(mColumn3, m.getColumnMatrix(1));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,545,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,546,"m.setColumnMatrix(-1, mColumn3);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,547,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,548,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,549,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,551,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,552,"m.setColumnMatrix(0, m);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,553,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,554,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,555,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,559,public void testGetRowVector() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,560,FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,561,FieldVector<Fraction> mRow0 = new FieldVectorImpl<Fraction>(subRow0[0]);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,562,FieldVector<Fraction> mRow3 = new FieldVectorImpl<Fraction>(subRow3[0]);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,563,"assertEquals(""Row0"", mRow0, m.getRowVector(0));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,564,"assertEquals(""Row3"", mRow3, m.getRowVector(3));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,565,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,566,m.getRowVector(-1);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,567,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,568,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,569,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,571,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,572,m.getRowVector(4);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,573,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,574,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,575,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,579,public void testSetRowVector() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,580,FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,581,FieldVector<Fraction> mRow3 = new FieldVectorImpl<Fraction>(subRow3[0]);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,582,"assertNotSame(mRow3, m.getRowMatrix(0));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,583,"m.setRowVector(0, mRow3);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,584,"assertEquals(mRow3, m.getRowVector(0));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,585,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,586,"m.setRowVector(-1, mRow3);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,587,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,588,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,589,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,591,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,592,"m.setRowVector(0, new FieldVectorImpl<Fraction>(FractionField.getInstance(), 5));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,593,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,594,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,595,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,599,public void testGetColumnVector() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,600,FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,601,FieldVector<Fraction> mColumn1 = columnToVector(subColumn1);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,602,FieldVector<Fraction> mColumn3 = columnToVector(subColumn3);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,603,"assertEquals(""Column1"", mColumn1, m.getColumnVector(1));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,604,"assertEquals(""Column3"", mColumn3, m.getColumnVector(3));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,605,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,606,m.getColumnVector(-1);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,607,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,608,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,609,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,611,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,612,m.getColumnVector(4);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,613,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,614,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,615,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,619,public void testSetColumnVector() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,620,FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,621,FieldVector<Fraction> mColumn3 = columnToVector(subColumn3);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,622,"assertNotSame(mColumn3, m.getColumnVector(1));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,623,"m.setColumnVector(1, mColumn3);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,624,"assertEquals(mColumn3, m.getColumnVector(1));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,625,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,626,"m.setColumnVector(-1, mColumn3);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,627,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,628,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,629,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,631,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,632,"m.setColumnVector(0, new FieldVectorImpl<Fraction>(FractionField.getInstance(), 5));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,633,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,634,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,635,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,639,private FieldVector<Fraction> columnToVector(Fraction[][] column) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,640,Fraction[] data = new Fraction[column.length];
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,641,for (int i = 0; i < data.length; ++i) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,642,data[i] = column[i][0];
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,644,"return new FieldVectorImpl<Fraction>(data, false);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,647,public void testGetRow() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,648,FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,649,"checkArrays(subRow0[0], m.getRow(0));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,650,"checkArrays(subRow3[0], m.getRow(3));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,651,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,652,m.getRow(-1);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,653,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,654,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,655,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,657,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,658,m.getRow(4);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,659,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,660,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,661,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,665,public void testSetRow() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,666,FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,667,assertTrue(subRow3[0][0] != m.getRow(0)[0]);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,668,"m.setRow(0, subRow3[0]);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,669,"checkArrays(subRow3[0], m.getRow(0));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,670,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,671,"m.setRow(-1, subRow3[0]);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,672,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,673,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,674,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,676,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,677,"m.setRow(0, new Fraction[5]);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,678,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,679,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,680,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,684,public void testGetColumn() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,685,FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,686,Fraction[] mColumn1 = columnToArray(subColumn1);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,687,Fraction[] mColumn3 = columnToArray(subColumn3);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,688,"checkArrays(mColumn1, m.getColumn(1));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,689,"checkArrays(mColumn3, m.getColumn(3));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,690,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,691,m.getColumn(-1);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,692,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,693,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,694,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,696,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,697,m.getColumn(4);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,698,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,699,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,700,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,704,public void testSetColumn() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,705,FieldMatrix<Fraction> m = new FieldMatrixImpl<Fraction>(subTestData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,706,Fraction[] mColumn3 = columnToArray(subColumn3);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,707,assertTrue(mColumn3[0] != m.getColumn(1)[0]);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,708,"m.setColumn(1, mColumn3);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,709,"checkArrays(mColumn3, m.getColumn(1));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,710,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,711,"m.setColumn(-1, mColumn3);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,712,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,713,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,714,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,716,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,717,"m.setColumn(0, new Fraction[5]);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,718,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,719,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,720,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,724,private Fraction[] columnToArray(Fraction[][] column) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,725,Fraction[] data = new Fraction[column.length];
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,726,for (int i = 0; i < data.length; ++i) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,727,data[i] = column[i][0];
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,729,return data;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,732,"private void checkArrays(Fraction[] expected, Fraction[] actual) {"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,733,"assertEquals(expected.length, actual.length);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,734,for (int i = 0; i < expected.length; ++i) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,735,"assertEquals(expected[i], actual[i]);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,739,public void testEqualsAndHashCode() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,740,FieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,741,FieldMatrixImpl<Fraction> m1 = (FieldMatrixImpl<Fraction>) m.copy();
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,742,FieldMatrixImpl<Fraction> mt = (FieldMatrixImpl<Fraction>) m.transpose();
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,743,assertTrue(m.hashCode() != mt.hashCode());
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,744,"assertEquals(m.hashCode(), m1.hashCode());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,745,"assertEquals(m, m);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,746,"assertEquals(m, m1);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,747,assertFalse(m.equals(null));
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,748,assertFalse(m.equals(mt));
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,749,assertFalse(m.equals(new FieldMatrixImpl<Fraction>(bigSingular)));
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,752,public void testToString() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,753,FieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,754,"assertEquals(""FieldMatrixImpl{{1,2,3},{2,5,3},{1,0,8}}"", m.toString());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,755,m = new FieldMatrixImpl<Fraction>(FractionField.getInstance());
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,756,"assertEquals(""FieldMatrixImpl{}"", m.toString());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,759,public void testSetSubMatrix() throws Exception {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,760,FieldMatrixImpl<Fraction> m = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,761,"m.setSubMatrix(detData2,1,1);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,762,FieldMatrix<Fraction> expected = new FieldMatrixImpl<Fraction>
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,763,(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,764,"{new Fraction(1),new Fraction(2),new Fraction(3)},"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,765,"{new Fraction(2),new Fraction(1),new Fraction(3)},"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,766,"{new Fraction(1),new Fraction(2),new Fraction(4)}"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,768,"assertEquals(expected, m);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,770,"m.setSubMatrix(detData2,0,0);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,771,expected = new FieldMatrixImpl<Fraction>
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,772,(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,773,"{new Fraction(1),new Fraction(3),new Fraction(3)},"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,774,"{new Fraction(2),new Fraction(4),new Fraction(3)},"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,775,"{new Fraction(1),new Fraction(2),new Fraction(4)}"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,777,"assertEquals(expected, m);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,779,"m.setSubMatrix(testDataPlus2,0,0);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,780,expected = new FieldMatrixImpl<Fraction>
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,781,(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,782,"{new Fraction(3),new Fraction(4),new Fraction(5)},"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,783,"{new Fraction(4),new Fraction(7),new Fraction(5)},"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,784,"{new Fraction(3),new Fraction(2),new Fraction(10)}"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,786,"assertEquals(expected, m);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,788,// dimension overflow
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,789,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,790,"m.setSubMatrix(testData,1,1);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,791,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,792,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,793,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,795,// dimension underflow
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,796,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,797,"m.setSubMatrix(testData,-1,1);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,798,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,799,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,800,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,802,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,803,"m.setSubMatrix(testData,1,-1);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,804,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,805,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,806,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,809,// null
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,810,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,811,"m.setSubMatrix(null,1,1);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,812,"fail(""expecting NullPointerException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,813,} catch (NullPointerException e) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,814,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,816,FieldMatrixImpl<Fraction> m2 = new FieldMatrixImpl<Fraction>(FractionField.getInstance());
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,817,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,818,"m2.setSubMatrix(testData,0,1);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,819,"fail(""expecting IllegalStateException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,820,} catch (IllegalStateException e) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,821,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,823,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,824,"m2.setSubMatrix(testData,1,0);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,825,"fail(""expecting IllegalStateException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,826,} catch (IllegalStateException e) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,827,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,830,// ragged
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,831,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,832,"m.setSubMatrix(new Fraction[][] {{new Fraction(1)}, {new Fraction(2), new Fraction(3)}}, 0, 0);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,833,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,834,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,835,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,838,// empty
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,839,try {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,840,"m.setSubMatrix(new Fraction[][] {{}}, 0, 0);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,841,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,842,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,843,// expected
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,848,public void testWalk() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,849,int rows    = 150;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,850,int columns = 75;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,852,FieldMatrix<Fraction> m =
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,853,"new FieldMatrixImpl<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,854,m.walkInRowOrder(new SetVisitor());
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,855,GetVisitor getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,856,m.walkInOptimizedOrder(getVisitor);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,857,"assertEquals(rows * columns, getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,859,"m = new FieldMatrixImpl<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,860,"m.walkInRowOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,861,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,862,"m.walkInOptimizedOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,863,"assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,864,for (int i = 0; i < rows; ++i) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,865,"assertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,866,"assertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,868,for (int j = 0; j < columns; ++j) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,869,"assertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,870,"assertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,873,"m = new FieldMatrixImpl<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,874,m.walkInColumnOrder(new SetVisitor());
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,875,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,876,m.walkInOptimizedOrder(getVisitor);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,877,"assertEquals(rows * columns, getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,879,"m = new FieldMatrixImpl<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,880,"m.walkInColumnOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,881,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,882,"m.walkInOptimizedOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,883,"assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,884,for (int i = 0; i < rows; ++i) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,885,"assertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,886,"assertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,888,for (int j = 0; j < columns; ++j) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,889,"assertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,890,"assertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,893,"m = new FieldMatrixImpl<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,894,m.walkInOptimizedOrder(new SetVisitor());
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,895,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,896,m.walkInRowOrder(getVisitor);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,897,"assertEquals(rows * columns, getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,899,"m = new FieldMatrixImpl<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,900,"m.walkInOptimizedOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,901,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,902,"m.walkInRowOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,903,"assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,904,for (int i = 0; i < rows; ++i) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,905,"assertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,906,"assertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,908,for (int j = 0; j < columns; ++j) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,909,"assertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,910,"assertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,913,"m = new FieldMatrixImpl<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,914,m.walkInOptimizedOrder(new SetVisitor());
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,915,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,916,m.walkInColumnOrder(getVisitor);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,917,"assertEquals(rows * columns, getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,919,"m = new FieldMatrixImpl<Fraction>(FractionField.getInstance(), rows, columns);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,920,"m.walkInOptimizedOrder(new SetVisitor(), 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,921,getVisitor = new GetVisitor();
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,922,"m.walkInColumnOrder(getVisitor, 1, rows - 2, 1, columns - 2);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,923,"assertEquals((rows - 2) * (columns - 2), getVisitor.getCount());"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,924,for (int i = 0; i < rows; ++i) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,925,"assertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,926,"assertEquals(new Fraction(0), m.getEntry(i, columns - 1));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,928,for (int j = 0; j < columns; ++j) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,929,"assertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,930,"assertEquals(new Fraction(0), m.getEntry(rows - 1, j));"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,935,private static class SetVisitor extends DefaultFieldMatrixChangingVisitor<Fraction> {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,936,private static final long serialVersionUID = -949750581026560454L;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,937,public SetVisitor() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,938,super(Fraction.ZERO);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,940,@Override
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,941,"public Fraction visit(int i, int j, Fraction value) {"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,942,"return new Fraction(i * 1024 + j, 1024);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,946,private static class GetVisitor extends DefaultFieldMatrixPreservingVisitor<Fraction> {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,947,private static final long serialVersionUID = -8008915491884412915L;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,948,private int count;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,949,public GetVisitor() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,950,super(Fraction.ZERO);
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,951,count = 0;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,953,@Override
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,954,"public void visit(int i, int j, Fraction value) {"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,955,++count;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,956,"assertEquals(new Fraction(i * 1024 + j, 1024), value);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,958,public int getCount() {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,959,return count;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,963,//--------------- -----------------Protected methods
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,965,/** extracts the l  and u matrices from compact lu representation */
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,966,"protected void splitLU(FieldMatrix<Fraction> lu,"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,967,"Fraction[][] lowerData,"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,968,Fraction[][] upperData)
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,969,throws InvalidMatrixException {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,970,if (!lu.isSquare() ||
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,971,lowerData.length != lowerData[0].length ||
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,972,upperData.length != upperData[0].length ||
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,973,lowerData.length != upperData.length ||
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,974,lowerData.length != lu.getRowDimension()) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,975,"throw new InvalidMatrixException(""incorrect dimensions"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,977,int n = lu.getRowDimension();
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,978,for (int i = 0; i < n; i++) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,979,for (int j = 0; j < n; j++) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,980,if (j < i) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,981,"lowerData[i][j] = lu.getEntry(i, j);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,982,upperData[i][j] = Fraction.ZERO;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,983,} else if (i == j) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,984,lowerData[i][j] = Fraction.ONE;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,985,"upperData[i][j] = lu.getEntry(i, j);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,986,} else {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,987,lowerData[i][j] = Fraction.ZERO;
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,988,"upperData[i][j] = lu.getEntry(i, j);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,994,/** Returns the result of applying the given row permutation to the matrix */
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,995,"protected FieldMatrix<Fraction> permuteRows(FieldMatrix<Fraction> matrix, int[] permutation) {"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,996,if (!matrix.isSquare() || matrix.getRowDimension() != permutation.length) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,997,"throw new IllegalArgumentException(""dimension mismatch"");"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,999,int n = matrix.getRowDimension();
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,1000,int m = matrix.getColumnDimension();
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,1001,Fraction out[][] = new Fraction[m][n];
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,1002,for (int i = 0; i < n; i++) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,1003,for (int j = 0; j < m; j++) {
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,1004,"out[i][j] = matrix.getEntry(permutation[i], j);"
True,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java,1007,return new FieldMatrixImpl<Fraction>(out);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,17,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,19,import java.io.Serializable;
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,20,import java.lang.reflect.Array;
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,22,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,23,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,24,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,26,import org.apache.commons.math.Field;
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,27,import org.apache.commons.math.FieldElement;
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,28,import org.apache.commons.math.fraction.Fraction;
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,29,import org.apache.commons.math.fraction.FractionField;
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,32,* Test cases for the {@link FieldVectorImpl} class.
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,34,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,36,public class FieldVectorImplTest extends TestCase {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,39,protected Fraction[][] ma1 = {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,40,"{new Fraction(1), new Fraction(2), new Fraction(3)},"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,41,"{new Fraction(4), new Fraction(5), new Fraction(6)},"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,42,"{new Fraction(7), new Fraction(8), new Fraction(9)}"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,44,"protected Fraction[] vec1 = {new Fraction(1), new Fraction(2), new Fraction(3)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,45,"protected Fraction[] vec2 = {new Fraction(4), new Fraction(5), new Fraction(6)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,46,"protected Fraction[] vec3 = {new Fraction(7), new Fraction(8), new Fraction(9)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,47,"protected Fraction[] vec4 = { new Fraction(1), new Fraction(2), new Fraction(3),"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,48,"new Fraction(4), new Fraction(5), new Fraction(6),"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,49,"new Fraction(7), new Fraction(8), new Fraction(9)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,50,"protected Fraction[] vec_null = {new Fraction(0), new Fraction(0), new Fraction(0)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,51,"protected Fraction[] dvec1 = {new Fraction(1), new Fraction(2), new Fraction(3),"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,52,"new Fraction(4), new Fraction(5), new Fraction(6),"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,53,"new Fraction(7), new Fraction(8), new Fraction(9)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,54,protected Fraction[][] mat1 = {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,55,"{new Fraction(1), new Fraction(2), new Fraction(3)},"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,56,"{new Fraction(4), new Fraction(5), new Fraction(6)},"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,57,"{new Fraction(7), new Fraction(8), new Fraction(9)}"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,60,// Testclass to test the FieldVector<Fraction> interface
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,61,// only with enough content to support the test
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,62,public static class FieldVectorTestImpl<T extends FieldElement<T>>
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,63,"implements FieldVector<T>, Serializable {"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,65,private static final long serialVersionUID = 3970959016014158539L;
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,67,private final Field<T> field;
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,69,/** Entries of the vector. */
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,70,protected T[] data;
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,72,/** Build an array of elements.
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,73,* @param length size of the array to build
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,74,* @return a new array
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,76,"@SuppressWarnings(""unchecked"")"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,77,private T[] buildArray(final int length) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,78,"return (T[]) Array.newInstance(field.getZero().getClass(), length);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,81,public FieldVectorTestImpl(T[] d) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,82,field = d[0].getField();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,83,data = d.clone();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,86,public Field<T> getField() {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,87,return field;
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,90,private UnsupportedOperationException unsupported() {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,91,"return new UnsupportedOperationException(""Not supported, unneeded for test purposes"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,94,public FieldVector<T> copy() {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,95,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,98,public FieldVector<T> add(FieldVector<T> v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,99,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,102,public FieldVector<T> add(T[] v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,103,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,106,public FieldVector<T> subtract(FieldVector<T> v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,107,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,110,public FieldVector<T> subtract(T[] v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,111,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,114,public FieldVector<T> mapAdd(T d) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,115,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,118,public FieldVector<T> mapAddToSelf(T d) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,119,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,122,public FieldVector<T> mapSubtract(T d) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,123,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,126,public FieldVector<T> mapSubtractToSelf(T d) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,127,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,130,public FieldVector<T> mapMultiply(T d) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,131,T[] out = buildArray(data.length);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,132,for (int i = 0; i < data.length; i++) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,133,out[i] = data[i].multiply(d);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,135,return new FieldVectorTestImpl<T>(out);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,138,public FieldVector<T> mapMultiplyToSelf(T d) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,139,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,142,public FieldVector<T> mapDivide(T d) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,143,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,146,public FieldVector<T> mapDivideToSelf(T d) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,147,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,150,public FieldVector<T> mapInv() {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,151,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,154,public FieldVector<T> mapInvToSelf() {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,155,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,158,public FieldVector<T> ebeMultiply(FieldVector<T> v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,159,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,162,public FieldVector<T> ebeMultiply(T[] v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,163,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,166,public FieldVector<T> ebeDivide(FieldVector<T> v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,167,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,170,public FieldVector<T> ebeDivide(T[] v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,171,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,174,public T[] getData() {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,175,return data.clone();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,178,public T dotProduct(FieldVector<T> v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,179,T dot = field.getZero();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,180,for (int i = 0; i < data.length; i++) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,181,dot = dot.add(data[i].multiply(v.getEntry(i)));
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,183,return dot;
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,186,public T dotProduct(T[] v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,187,T dot = field.getZero();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,188,for (int i = 0; i < data.length; i++) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,189,dot = dot.add(data[i].multiply(v[i]));
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,191,return dot;
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,194,public FieldVector<T> projection(FieldVector<T> v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,195,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,198,public FieldVector<T> projection(T[] v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,199,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,202,public FieldMatrix<T> outerProduct(FieldVector<T> v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,203,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,206,public FieldMatrix<T> outerProduct(T[] v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,207,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,210,public T getEntry(int index) throws MatrixIndexException {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,211,return data[index];
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,214,public int getDimension() {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,215,return data.length;
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,218,public FieldVector<T> append(FieldVector<T> v) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,219,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,222,public FieldVector<T> append(T d) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,223,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,226,public FieldVector<T> append(T[] a) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,227,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,230,"public FieldVector<T> getSubVector(int index, int n) throws MatrixIndexException {"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,231,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,234,"public void setEntry(int index, T value) throws MatrixIndexException {"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,235,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,238,"public void setSubVector(int index, FieldVector<T> v) throws MatrixIndexException {"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,239,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,242,"public void setSubVector(int index, T[] v) throws MatrixIndexException {"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,243,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,246,public void set(T value) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,247,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,250,public T[] toArray() {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,251,throw unsupported();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,256,public static Test suite() {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,257,TestSuite suite = new TestSuite(FieldVectorImplTest.class);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,258,"suite.setName(""FieldVectorImpl<Fraction> Tests"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,259,return suite;
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,262,public void testConstructors() {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,264,FieldVectorImpl<Fraction> v0 = new FieldVectorImpl<Fraction>(FractionField.getInstance());
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,265,"assertEquals(0, v0.getDimension());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,267,"FieldVectorImpl<Fraction> v1 = new FieldVectorImpl<Fraction>(FractionField.getInstance(), 7);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,268,"assertEquals(7, v1.getDimension());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,269,"assertEquals(new Fraction(0), v1.getEntry(6));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,271,"FieldVectorImpl<Fraction> v2 = new FieldVectorImpl<Fraction>(5, new Fraction(123, 100));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,272,"assertEquals(5, v2.getDimension());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,273,"assertEquals(new Fraction(123, 100), v2.getEntry(4));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,275,FieldVectorImpl<Fraction> v3 = new FieldVectorImpl<Fraction>(vec1);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,276,"assertEquals(3, v3.getDimension());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,277,"assertEquals(new Fraction(2), v3.getEntry(1));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,279,"FieldVectorImpl<Fraction> v4 = new FieldVectorImpl<Fraction>(vec4, 3, 2);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,280,"assertEquals(2, v4.getDimension());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,281,"assertEquals(new Fraction(4), v4.getEntry(0));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,282,try {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,283,"new FieldVectorImpl<Fraction>(vec4, 8, 3);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,284,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,285,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,286,// expected behavior
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,287,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,288,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,291,FieldVector<Fraction> v5_i = new FieldVectorImpl<Fraction>(dvec1);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,292,"assertEquals(9, v5_i.getDimension());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,293,"assertEquals(new Fraction(9), v5_i.getEntry(8));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,295,FieldVectorImpl<Fraction> v5 = new FieldVectorImpl<Fraction>(dvec1);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,296,"assertEquals(9, v5.getDimension());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,297,"assertEquals(new Fraction(9), v5.getEntry(8));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,299,"FieldVectorImpl<Fraction> v6 = new FieldVectorImpl<Fraction>(dvec1, 3, 2);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,300,"assertEquals(2, v6.getDimension());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,301,"assertEquals(new Fraction(4), v6.getEntry(0));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,302,try {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,303,"new FieldVectorImpl<Fraction>(dvec1, 8, 3);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,304,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,305,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,306,// expected behavior
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,307,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,308,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,311,FieldVectorImpl<Fraction> v7 = new FieldVectorImpl<Fraction>(v1);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,312,"assertEquals(7, v7.getDimension());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,313,"assertEquals(new Fraction(0), v7.getEntry(6));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,315,FieldVectorTestImpl<Fraction> v7_i = new FieldVectorTestImpl<Fraction>(vec1);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,317,FieldVectorImpl<Fraction> v7_2 = new FieldVectorImpl<Fraction>(v7_i);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,318,"assertEquals(3, v7_2.getDimension());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,319,"assertEquals(new Fraction(2), v7_2.getEntry(1));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,321,"FieldVectorImpl<Fraction> v8 = new FieldVectorImpl<Fraction>(v1, true);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,322,"assertEquals(7, v8.getDimension());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,323,"assertEquals(new Fraction(0), v8.getEntry(6));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,324,"assertNotSame(""testData not same object "", v1.data, v8.data);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,326,"FieldVectorImpl<Fraction> v8_2 = new FieldVectorImpl<Fraction>(v1, false);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,327,"assertEquals(7, v8_2.getDimension());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,328,"assertEquals(new Fraction(0), v8_2.getEntry(6));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,329,"assertEquals(v1.data, v8_2.data);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,331,"FieldVectorImpl<Fraction> v9 = new FieldVectorImpl<Fraction>(v1, v3);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,332,"assertEquals(10, v9.getDimension());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,333,"assertEquals(new Fraction(1), v9.getEntry(7));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,337,public void testDataInOut() {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,339,FieldVectorImpl<Fraction> v1 = new FieldVectorImpl<Fraction>(vec1);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,340,FieldVectorImpl<Fraction> v2 = new FieldVectorImpl<Fraction>(vec2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,341,FieldVectorImpl<Fraction> v4 = new FieldVectorImpl<Fraction>(vec4);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,342,FieldVectorTestImpl<Fraction> v2_t = new FieldVectorTestImpl<Fraction>(vec2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,344,FieldVector<Fraction> v_append_1 = v1.append(v2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,345,"assertEquals(6, v_append_1.getDimension());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,346,"assertEquals(new Fraction(4), v_append_1.getEntry(3));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,348,FieldVector<Fraction> v_append_2 = v1.append(new Fraction(2));
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,349,"assertEquals(4, v_append_2.getDimension());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,350,"assertEquals(new Fraction(2), v_append_2.getEntry(3));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,352,FieldVector<Fraction> v_append_3 = v1.append(vec2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,353,"assertEquals(6, v_append_3.getDimension());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,354,"assertEquals(new Fraction(4), v_append_3.getEntry(3));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,356,FieldVector<Fraction> v_append_4 = v1.append(v2_t);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,357,"assertEquals(6, v_append_4.getDimension());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,358,"assertEquals(new Fraction(4), v_append_4.getEntry(3));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,360,FieldVector<Fraction> v_copy = v1.copy();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,361,"assertEquals(3, v_copy.getDimension());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,362,"assertNotSame(""testData not same object "", v1.data, v_copy.getData());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,364,Fraction[] a_frac = v1.toArray();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,365,"assertEquals(3, a_frac.length);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,366,"assertNotSame(""testData not same object "", v1.data, a_frac);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,369,//      FieldVectorImpl<Fraction> vout4 = (FieldVectorImpl<Fraction>) v1.clone();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,370,"//      assertEquals(3, vout4.getDimension());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,371,"//      assertEquals(v1.data, vout4.data);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,374,"FieldVector<Fraction> vout5 = v4.getSubVector(3, 3);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,375,"assertEquals(3, vout5.getDimension());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,376,"assertEquals(new Fraction(5), vout5.getEntry(1));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,377,try {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,378,"v4.getSubVector(3, 7);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,379,"fail(""MatrixIndexException expected"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,380,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,381,// expected behavior
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,382,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,383,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,386,FieldVectorImpl<Fraction> v_set1 = (FieldVectorImpl<Fraction>) v1.copy();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,387,"v_set1.setEntry(1, new Fraction(11));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,388,"assertEquals(new Fraction(11), v_set1.getEntry(1));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,389,try {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,390,"v_set1.setEntry(3, new Fraction(11));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,391,"fail(""MatrixIndexException expected"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,392,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,393,// expected behavior
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,394,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,395,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,398,FieldVectorImpl<Fraction> v_set2 = (FieldVectorImpl<Fraction>) v4.copy();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,399,"v_set2.set(3, v1);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,400,"assertEquals(new Fraction(1), v_set2.getEntry(3));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,401,"assertEquals(new Fraction(7), v_set2.getEntry(6));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,402,try {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,403,"v_set2.set(7, v1);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,404,"fail(""MatrixIndexException expected"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,405,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,406,// expected behavior
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,407,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,408,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,411,FieldVectorImpl<Fraction> v_set3 = (FieldVectorImpl<Fraction>) v1.copy();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,412,v_set3.set(new Fraction(13));
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,413,"assertEquals(new Fraction(13), v_set3.getEntry(2));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,415,try {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,416,v_set3.getEntry(23);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,417,"fail(""ArrayIndexOutOfBoundsException expected"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,418,} catch (ArrayIndexOutOfBoundsException ex) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,419,// expected behavior
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,420,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,421,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,424,FieldVectorImpl<Fraction> v_set4 = (FieldVectorImpl<Fraction>) v4.copy();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,425,"v_set4.setSubVector(3, v2_t);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,426,"assertEquals(new Fraction(4), v_set4.getEntry(3));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,427,"assertEquals(new Fraction(7), v_set4.getEntry(6));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,428,try {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,429,"v_set4.setSubVector(7, v2_t);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,430,"fail(""MatrixIndexException expected"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,431,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,432,// expected behavior
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,433,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,434,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,438,FieldVectorImpl<Fraction> vout10 = (FieldVectorImpl<Fraction>) v1.copy();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,439,FieldVectorImpl<Fraction> vout10_2 = (FieldVectorImpl<Fraction>) v1.copy();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,440,"assertEquals(vout10, vout10_2);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,441,"vout10_2.setEntry(0, new Fraction(11, 10));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,442,"assertNotSame(vout10, vout10_2);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,446,public void testMapFunctions() {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,447,FieldVectorImpl<Fraction> v1 = new FieldVectorImpl<Fraction>(vec1);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,449,//octave =  v1 .+ 2.0
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,450,FieldVector<Fraction> v_mapAdd = v1.mapAdd(new Fraction(2));
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,451,"Fraction[] result_mapAdd = {new Fraction(3), new Fraction(4), new Fraction(5)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,452,"checkArray(""compare vectors"" ,result_mapAdd,v_mapAdd.getData());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,454,//octave =  v1 .+ 2.0
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,455,FieldVector<Fraction> v_mapAddToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,456,v_mapAddToSelf.mapAddToSelf(new Fraction(2));
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,457,"Fraction[] result_mapAddToSelf = {new Fraction(3), new Fraction(4), new Fraction(5)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,458,"checkArray(""compare vectors"" ,result_mapAddToSelf,v_mapAddToSelf.getData());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,460,//octave =  v1 .- 2.0
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,461,FieldVector<Fraction> v_mapSubtract = v1.mapSubtract(new Fraction(2));
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,462,"Fraction[] result_mapSubtract = {new Fraction(-1), new Fraction(0), new Fraction(1)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,463,"checkArray(""compare vectors"" ,result_mapSubtract,v_mapSubtract.getData());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,465,//octave =  v1 .- 2.0
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,466,FieldVector<Fraction> v_mapSubtractToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,467,v_mapSubtractToSelf.mapSubtractToSelf(new Fraction(2));
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,468,"Fraction[] result_mapSubtractToSelf = {new Fraction(-1), new Fraction(0), new Fraction(1)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,469,"checkArray(""compare vectors"" ,result_mapSubtractToSelf,v_mapSubtractToSelf.getData());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,471,//octave =  v1 .* 2.0
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,472,FieldVector<Fraction> v_mapMultiply = v1.mapMultiply(new Fraction(2));
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,473,"Fraction[] result_mapMultiply = {new Fraction(2), new Fraction(4), new Fraction(6)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,474,"checkArray(""compare vectors"" ,result_mapMultiply,v_mapMultiply.getData());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,476,//octave =  v1 .* 2.0
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,477,FieldVector<Fraction> v_mapMultiplyToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,478,v_mapMultiplyToSelf.mapMultiplyToSelf(new Fraction(2));
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,479,"Fraction[] result_mapMultiplyToSelf = {new Fraction(2), new Fraction(4), new Fraction(6)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,480,"checkArray(""compare vectors"" ,result_mapMultiplyToSelf,v_mapMultiplyToSelf.getData());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,482,//octave =  v1 ./ 2.0
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,483,FieldVector<Fraction> v_mapDivide = v1.mapDivide(new Fraction(2));
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,484,"Fraction[] result_mapDivide = {new Fraction(1, 2), new Fraction(1), new Fraction(3, 2)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,485,"checkArray(""compare vectors"" ,result_mapDivide,v_mapDivide.getData());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,487,//octave =  v1 ./ 2.0
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,488,FieldVector<Fraction> v_mapDivideToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,489,v_mapDivideToSelf.mapDivideToSelf(new Fraction(2));
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,490,"Fraction[] result_mapDivideToSelf = {new Fraction(1, 2), new Fraction(1), new Fraction(3, 2)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,491,"checkArray(""compare vectors"" ,result_mapDivideToSelf,v_mapDivideToSelf.getData());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,493,//octave =  v1 .^-1
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,494,FieldVector<Fraction> v_mapInv = v1.mapInv();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,495,"Fraction[] result_mapInv = {new Fraction(1),new Fraction(1, 2),new Fraction(1, 3)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,496,"checkArray(""compare vectors"" ,result_mapInv,v_mapInv.getData());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,498,//octave =  v1 .^-1
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,499,FieldVector<Fraction> v_mapInvToSelf = v1.copy();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,500,v_mapInvToSelf.mapInvToSelf();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,501,"Fraction[] result_mapInvToSelf = {new Fraction(1),new Fraction(1, 2),new Fraction(1, 3)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,502,"checkArray(""compare vectors"" ,result_mapInvToSelf,v_mapInvToSelf.getData());"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,506,public void testBasicFunctions() {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,507,FieldVectorImpl<Fraction> v1 = new FieldVectorImpl<Fraction>(vec1);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,508,FieldVectorImpl<Fraction> v2 = new FieldVectorImpl<Fraction>(vec2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,509,new FieldVectorImpl<Fraction>(vec_null);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,511,FieldVectorTestImpl<Fraction> v2_t = new FieldVectorTestImpl<Fraction>(vec2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,513,//octave =  v1 + v2
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,514,FieldVectorImpl<Fraction> v_add = v1.add(v2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,515,"Fraction[] result_add = {new Fraction(5), new Fraction(7), new Fraction(9)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,516,"checkArray(""compare vect"" ,v_add.getData(),result_add);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,518,FieldVectorTestImpl<Fraction> vt2 = new FieldVectorTestImpl<Fraction>(vec2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,519,FieldVector<Fraction> v_add_i = v1.add(vt2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,520,"Fraction[] result_add_i = {new Fraction(5), new Fraction(7), new Fraction(9)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,521,"checkArray(""compare vect"" ,v_add_i.getData(),result_add_i);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,523,//octave =  v1 - v2
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,524,FieldVectorImpl<Fraction> v_subtract = v1.subtract(v2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,525,"Fraction[] result_subtract = {new Fraction(-3), new Fraction(-3), new Fraction(-3)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,526,"checkArray(""compare vect"" ,v_subtract.getData(),result_subtract);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,528,FieldVector<Fraction> v_subtract_i = v1.subtract(vt2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,529,"Fraction[] result_subtract_i = {new Fraction(-3), new Fraction(-3), new Fraction(-3)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,530,"checkArray(""compare vect"" ,v_subtract_i.getData(),result_subtract_i);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,532,// octave v1 .* v2
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,533,FieldVectorImpl<Fraction>  v_ebeMultiply = v1.ebeMultiply(v2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,534,"Fraction[] result_ebeMultiply = {new Fraction(4), new Fraction(10), new Fraction(18)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,535,"checkArray(""compare vect"" ,v_ebeMultiply.getData(),result_ebeMultiply);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,537,FieldVector<Fraction>  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,538,"Fraction[] result_ebeMultiply_2 = {new Fraction(4), new Fraction(10), new Fraction(18)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,539,"checkArray(""compare vect"" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,541,// octave v1 ./ v2
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,542,FieldVectorImpl<Fraction>  v_ebeDivide = v1.ebeDivide(v2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,543,"Fraction[] result_ebeDivide = {new Fraction(1, 4), new Fraction(2, 5), new Fraction(1, 2)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,544,"checkArray(""compare vect"" ,v_ebeDivide.getData(),result_ebeDivide);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,546,FieldVector<Fraction>  v_ebeDivide_2 = v1.ebeDivide(v2_t);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,547,"Fraction[] result_ebeDivide_2 = {new Fraction(1, 4), new Fraction(2, 5), new Fraction(1, 2)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,548,"checkArray(""compare vect"" ,v_ebeDivide_2.getData(),result_ebeDivide_2);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,550,"// octave  dot(v1,v2)"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,551,Fraction dot =  v1.dotProduct(v2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,552,"assertEquals(""compare val "",new Fraction(32), dot);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,554,"// octave  dot(v1,v2_t)"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,555,Fraction dot_2 =  v1.dotProduct(v2_t);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,556,"assertEquals(""compare val "",new Fraction(32), dot_2);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,558,FieldMatrix<Fraction> m_outerProduct = v1.outerProduct(v2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,559,"assertEquals(""compare val "",new Fraction(4), m_outerProduct.getEntry(0,0));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,561,FieldMatrix<Fraction> m_outerProduct_2 = v1.outerProduct(v2_t);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,562,"assertEquals(""compare val "",new Fraction(4), m_outerProduct_2.getEntry(0,0));"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,564,FieldVectorImpl<Fraction> v_projection = v1.projection(v2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,565,"Fraction[] result_projection = {new Fraction(128, 77), new Fraction(160, 77), new Fraction(192, 77)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,566,"checkArray(""compare vect"", v_projection.getData(), result_projection);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,568,FieldVector<Fraction> v_projection_2 = v1.projection(v2_t);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,569,"Fraction[] result_projection_2 = {new Fraction(128, 77), new Fraction(160, 77), new Fraction(192, 77)};"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,570,"checkArray(""compare vect"", v_projection_2.getData(), result_projection_2);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,574,public void testMisc() {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,575,FieldVectorImpl<Fraction> v1 = new FieldVectorImpl<Fraction>(vec1);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,576,FieldVectorImpl<Fraction> v4 = new FieldVectorImpl<Fraction>(vec4);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,577,FieldVector<Fraction> v4_2 = new FieldVectorImpl<Fraction>(vec4);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,579,String out1 = v1.toString();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,580,"assertTrue(""some output "",  out1.length()!=0);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,582,Fraction[] dout1 = v1.copyOut();
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,583,"assertEquals(3, dout1.length);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,584,"assertNotSame(""testData not same object "", v1.data, dout1);"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,586,try {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,587,v1.checkVectorDimensions(2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,588,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,589,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,590,// expected behavior
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,591,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,592,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,595,try {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,596,v1.checkVectorDimensions(v4);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,597,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,598,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,599,// expected behavior
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,600,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,601,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,604,try {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,605,v1.checkVectorDimensions(v4_2);
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,606,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,607,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,608,// expected behavior
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,609,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,610,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,615,/** verifies that two vectors are equals */
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,616,"protected void checkArray(String msg, Fraction[] m, Fraction[] n) {"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,617,if (m.length != n.length) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,618,"fail(""vectors have different lengths"");"
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,620,for (int i = 0; i < m.length; i++) {
True,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,src/test/org/apache/commons/math/linear/FieldVectorImplTest.java,621,"assertEquals(msg + "" "" +  i + "" elements differ"", m[i],n[i]);"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,18,package org.apache.commons.math.linear.decomposition;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,20,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,22,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,24,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,25,import org.apache.commons.math.fraction.Fraction;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,26,import org.apache.commons.math.fraction.FractionField;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,27,import org.apache.commons.math.linear.FieldMatrix;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,28,import org.apache.commons.math.linear.FieldMatrixImpl;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,29,import org.apache.commons.math.linear.InvalidMatrixException;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,31,public class FieldLUDecompositionImplTest extends TestCase {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,32,private Fraction[][] testData = {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,33,"{ new Fraction(1), new Fraction(2), new Fraction(3)},"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,34,"{ new Fraction(2), new Fraction(5), new Fraction(3)},"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,35,"{ new Fraction(1), new Fraction(0), new Fraction(8)}"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,37,private Fraction[][] testDataMinus = {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,38,"{ new Fraction(-1), new Fraction(-2), new Fraction(-3)},"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,39,"{ new Fraction(-2), new Fraction(-5), new Fraction(-3)},"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,40,"{ new Fraction(-1),  new Fraction(0), new Fraction(-8)}"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,42,private Fraction[][] luData = {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,43,"{ new Fraction(2), new Fraction(3), new Fraction(3) },"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,44,"{ new Fraction(2), new Fraction(3), new Fraction(7) },"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,45,"{ new Fraction(6), new Fraction(6), new Fraction(8) }"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,48,// singular matrices
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,49,private Fraction[][] singular = {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,50,"{ new Fraction(2), new Fraction(3) },"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,51,"{ new Fraction(2), new Fraction(3) }"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,53,private Fraction[][] bigSingular = {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,54,"{ new Fraction(1), new Fraction(2),   new Fraction(3),    new Fraction(4) },"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,55,"{ new Fraction(2), new Fraction(5),   new Fraction(3),    new Fraction(4) },"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,56,"{ new Fraction(7), new Fraction(3), new Fraction(256), new Fraction(1930) },"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,57,"{ new Fraction(3), new Fraction(7),   new Fraction(6),    new Fraction(8) }"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,58,}; // 4th row = 1st + 2nd
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,60,public FieldLUDecompositionImplTest(String name) {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,61,super(name);
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,64,public static Test suite() {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,65,TestSuite suite = new TestSuite(FieldLUDecompositionImplTest.class);
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,66,"suite.setName(""FieldLUDecompositionImpl Tests"");"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,67,return suite;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,70,/** test dimensions */
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,71,public void testDimensions() {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,72,FieldMatrix<Fraction> matrix = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,73,FieldLUDecomposition<Fraction> LU = new FieldLUDecompositionImpl<Fraction>(matrix);
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,74,"assertEquals(testData.length, LU.getL().getRowDimension());"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,75,"assertEquals(testData.length, LU.getL().getColumnDimension());"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,76,"assertEquals(testData.length, LU.getU().getRowDimension());"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,77,"assertEquals(testData.length, LU.getU().getColumnDimension());"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,78,"assertEquals(testData.length, LU.getP().getRowDimension());"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,79,"assertEquals(testData.length, LU.getP().getColumnDimension());"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,83,/** test non-square matrix */
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,84,public void testNonSquare() {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,85,try {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,86,new FieldLUDecompositionImpl<Fraction>(new FieldMatrixImpl<Fraction>(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,87,"{ Fraction.ZERO, Fraction.ZERO },"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,88,"{ Fraction.ZERO, Fraction.ZERO },"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,89,"{ Fraction.ZERO, Fraction.ZERO }"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,91,} catch (InvalidMatrixException ime) {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,92,// expected behavior
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,93,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,94,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,98,/** test PA = LU */
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,99,public void testPAEqualLU() {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,100,FieldMatrix<Fraction> matrix = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,101,FieldLUDecomposition<Fraction> lu = new FieldLUDecompositionImpl<Fraction>(matrix);
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,102,FieldMatrix<Fraction> l = lu.getL();
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,103,FieldMatrix<Fraction> u = lu.getU();
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,104,FieldMatrix<Fraction> p = lu.getP();
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,105,"TestUtils.assertEquals(p.multiply(matrix), l.multiply(u));"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,107,matrix = new FieldMatrixImpl<Fraction>(testDataMinus);
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,108,lu = new FieldLUDecompositionImpl<Fraction>(matrix);
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,109,l = lu.getL();
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,110,u = lu.getU();
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,111,p = lu.getP();
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,112,"TestUtils.assertEquals(p.multiply(matrix), l.multiply(u));"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,114,"matrix = new FieldMatrixImpl<Fraction>(FractionField.getInstance(), 17, 17);"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,115,for (int i = 0; i < matrix.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,116,"matrix.setEntry(i, i, Fraction.ONE);"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,118,lu = new FieldLUDecompositionImpl<Fraction>(matrix);
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,119,l = lu.getL();
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,120,u = lu.getU();
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,121,p = lu.getP();
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,122,"TestUtils.assertEquals(p.multiply(matrix), l.multiply(u));"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,124,matrix = new FieldMatrixImpl<Fraction>(singular);
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,125,lu = new FieldLUDecompositionImpl<Fraction>(matrix);
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,126,assertFalse(lu.getSolver().isNonSingular());
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,127,assertNull(lu.getL());
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,128,assertNull(lu.getU());
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,129,assertNull(lu.getP());
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,131,matrix = new FieldMatrixImpl<Fraction>(bigSingular);
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,132,lu = new FieldLUDecompositionImpl<Fraction>(matrix);
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,133,assertFalse(lu.getSolver().isNonSingular());
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,134,assertNull(lu.getL());
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,135,assertNull(lu.getU());
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,136,assertNull(lu.getP());
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,140,/** test that L is lower triangular with unit diagonal */
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,141,public void testLLowerTriangular() {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,142,FieldMatrix<Fraction> matrix = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,143,FieldMatrix<Fraction> l = new FieldLUDecompositionImpl<Fraction>(matrix).getL();
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,144,for (int i = 0; i < l.getRowDimension(); i++) {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,145,"assertEquals(Fraction.ONE, l.getEntry(i, i));"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,146,for (int j = i + 1; j < l.getColumnDimension(); j++) {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,147,"assertEquals(Fraction.ZERO, l.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,152,/** test that U is upper triangular */
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,153,public void testUUpperTriangular() {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,154,FieldMatrix<Fraction> matrix = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,155,FieldMatrix<Fraction> u = new FieldLUDecompositionImpl<Fraction>(matrix).getU();
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,156,for (int i = 0; i < u.getRowDimension(); i++) {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,157,for (int j = 0; j < i; j++) {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,158,"assertEquals(Fraction.ZERO, u.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,163,/** test that P is a permutation matrix */
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,164,public void testPPermutation() {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,165,FieldMatrix<Fraction> matrix = new FieldMatrixImpl<Fraction>(testData);
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,166,FieldMatrix<Fraction> p   = new FieldLUDecompositionImpl<Fraction>(matrix).getP();
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,168,FieldMatrix<Fraction> ppT = p.multiply(p.transpose());
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,169,FieldMatrix<Fraction> id  =
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,170,"new FieldMatrixImpl<Fraction>(FractionField.getInstance(),"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,171,"p.getRowDimension(), p.getRowDimension());"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,172,for (int i = 0; i < id.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,173,"id.setEntry(i, i, Fraction.ONE);"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,175,"TestUtils.assertEquals(id, ppT);"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,177,for (int i = 0; i < p.getRowDimension(); i++) {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,178,int zeroCount  = 0;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,179,int oneCount   = 0;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,180,int otherCount = 0;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,181,for (int j = 0; j < p.getColumnDimension(); j++) {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,182,"final Fraction e = p.getEntry(i, j);"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,183,if (e.equals(Fraction.ZERO)) {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,184,++zeroCount;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,185,} else if (e.equals(Fraction.ONE)) {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,186,++oneCount;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,187,} else {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,188,++otherCount;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,191,"assertEquals(p.getColumnDimension() - 1, zeroCount);"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,192,"assertEquals(1, oneCount);"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,193,"assertEquals(0, otherCount);"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,196,for (int j = 0; j < p.getColumnDimension(); j++) {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,197,int zeroCount  = 0;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,198,int oneCount   = 0;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,199,int otherCount = 0;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,200,for (int i = 0; i < p.getRowDimension(); i++) {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,201,"final Fraction e = p.getEntry(i, j);"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,202,if (e.equals(Fraction.ZERO)) {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,203,++zeroCount;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,204,} else if (e.equals(Fraction.ONE)) {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,205,++oneCount;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,206,} else {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,207,++otherCount;
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,210,"assertEquals(p.getRowDimension() - 1, zeroCount);"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,211,"assertEquals(1, oneCount);"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,212,"assertEquals(0, otherCount);"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,218,/** test singular */
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,219,public void testSingular() {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,220,FieldLUDecomposition<Fraction> lu =
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,221,new FieldLUDecompositionImpl<Fraction>(new FieldMatrixImpl<Fraction>(testData));
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,222,assertTrue(lu.getSolver().isNonSingular());
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,223,lu = new FieldLUDecompositionImpl<Fraction>(new FieldMatrixImpl<Fraction>(singular));
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,224,assertFalse(lu.getSolver().isNonSingular());
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,225,lu = new FieldLUDecompositionImpl<Fraction>(new FieldMatrixImpl<Fraction>(bigSingular));
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,226,assertFalse(lu.getSolver().isNonSingular());
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,229,/** test matrices values */
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,230,public void testMatricesValues1() {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,231,FieldLUDecomposition<Fraction> lu =
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,232,new FieldLUDecompositionImpl<Fraction>(new FieldMatrixImpl<Fraction>(testData));
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,233,FieldMatrix<Fraction> lRef = new FieldMatrixImpl<Fraction>(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,234,"{ new Fraction(1), new Fraction(0), new Fraction(0) },"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,235,"{ new Fraction(2), new Fraction(1), new Fraction(0) },"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,236,"{ new Fraction(1), new Fraction(-2), new Fraction(1) }"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,238,FieldMatrix<Fraction> uRef = new FieldMatrixImpl<Fraction>(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,239,"{ new Fraction(1),  new Fraction(2), new Fraction(3) },"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,240,"{ new Fraction(0), new Fraction(1), new Fraction(-3) },"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,241,"{ new Fraction(0),  new Fraction(0), new Fraction(-1) }"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,243,FieldMatrix<Fraction> pRef = new FieldMatrixImpl<Fraction>(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,244,"{ new Fraction(1), new Fraction(0), new Fraction(0) },"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,245,"{ new Fraction(0), new Fraction(1), new Fraction(0) },"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,246,"{ new Fraction(0), new Fraction(0), new Fraction(1) }"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,248,"int[] pivotRef = { 0, 1, 2 };"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,250,// check values against known references
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,251,FieldMatrix<Fraction> l = lu.getL();
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,252,"TestUtils.assertEquals(lRef, l);"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,253,FieldMatrix<Fraction> u = lu.getU();
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,254,"TestUtils.assertEquals(uRef, u);"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,255,FieldMatrix<Fraction> p = lu.getP();
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,256,"TestUtils.assertEquals(pRef, p);"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,257,int[] pivot = lu.getPivot();
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,258,for (int i = 0; i < pivotRef.length; ++i) {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,259,"assertEquals(pivotRef[i], pivot[i]);"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,262,// check the same cached instance is returned the second time
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,263,assertTrue(l == lu.getL());
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,264,assertTrue(u == lu.getU());
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,265,assertTrue(p == lu.getP());
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,269,/** test matrices values */
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,270,public void testMatricesValues2() {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,271,FieldLUDecomposition<Fraction> lu =
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,272,new FieldLUDecompositionImpl<Fraction>(new FieldMatrixImpl<Fraction>(luData));
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,273,FieldMatrix<Fraction> lRef = new FieldMatrixImpl<Fraction>(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,274,"{ new Fraction(1), new Fraction(0), new Fraction(0) },"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,275,"{ new Fraction(3), new Fraction(1), new Fraction(0) },"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,276,"{ new Fraction(1), new Fraction(0), new Fraction(1) }"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,278,FieldMatrix<Fraction> uRef = new FieldMatrixImpl<Fraction>(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,279,"{ new Fraction(2), new Fraction(3), new Fraction(3)    },"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,280,"{ new Fraction(0), new Fraction(-3), new Fraction(-1)  },"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,281,"{ new Fraction(0), new Fraction(0), new Fraction(4) }"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,283,FieldMatrix<Fraction> pRef = new FieldMatrixImpl<Fraction>(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,284,"{ new Fraction(1), new Fraction(0), new Fraction(0) },"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,285,"{ new Fraction(0), new Fraction(0), new Fraction(1) },"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,286,"{ new Fraction(0), new Fraction(1), new Fraction(0) }"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,288,"int[] pivotRef = { 0, 2, 1 };"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,290,// check values against known references
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,291,FieldMatrix<Fraction> l = lu.getL();
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,292,"TestUtils.assertEquals(lRef, l);"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,293,FieldMatrix<Fraction> u = lu.getU();
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,294,"TestUtils.assertEquals(uRef, u);"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,295,FieldMatrix<Fraction> p = lu.getP();
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,296,"TestUtils.assertEquals(pRef, p);"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,297,int[] pivot = lu.getPivot();
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,298,for (int i = 0; i < pivotRef.length; ++i) {
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,299,"assertEquals(pivotRef[i], pivot[i]);"
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,302,// check the same cached instance is returned the second time
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,303,assertTrue(l == lu.getL());
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,304,assertTrue(u == lu.getU());
True,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/decomposition/FieldLUDecompositionImplTest.java,305,assertTrue(p == lu.getP());

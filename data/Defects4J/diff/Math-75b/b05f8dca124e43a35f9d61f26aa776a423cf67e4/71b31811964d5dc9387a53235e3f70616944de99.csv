is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,177,ableau.discardArtificialVariables();
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,177,tableau.dropPhase1Objective();
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,115,his.tableau = new Array2DRowRealMatrix(createTableau(goalType == GoalType.MAXIMIZE));
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,116,nitialize();
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,115,this.tableau = createTableau(goalType == GoalType.MAXIMIZE);
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,124,rotected double[][] createTableau(final boolean maximize) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,123,protected RealMatrix createTableau(final boolean maximize) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,130,ouble[][] matrix = new double[height][width];
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,129,"Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width);"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,134,atrix[0][0] = -1;
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,133,"matrix.setEntry(0, 0, -1);"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,137,atrix[zIndex][zIndex] = maximize ? 1 : -1;
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,136,"matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,140,"opyArray(objectiveCoefficients.getData(), matrix[zIndex]);"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,141,atrix[zIndex][width - 1] =
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,142,aximize ? f.getConstantTerm() : -1 * f.getConstantTerm();
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,139,"copyArray(objectiveCoefficients.getData(), matrix.getDataRef()[zIndex]);"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,140,"matrix.setEntry(zIndex, width - 1,"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,141,maximize ? f.getConstantTerm() : -1 * f.getConstantTerm());
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,145,atrix[zIndex][getSlackVariableOffset() - 1] =
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,146,etInvertedCoeffiecientSum(objectiveCoefficients);
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,144,"matrix.setEntry(zIndex, getSlackVariableOffset() - 1,"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,145,getInvertedCoeffiecientSum(objectiveCoefficients));
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,157,"opyArray(constraint.getCoefficients().getData(), matrix[row]);"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,156,"copyArray(constraint.getCoefficients().getData(), matrix.getDataRef()[row]);"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,161,atrix[row][getSlackVariableOffset() - 1] =
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,162,etInvertedCoeffiecientSum(constraint.getCoefficients());
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,160,"matrix.setEntry(row, getSlackVariableOffset() - 1,"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,161,getInvertedCoeffiecientSum(constraint.getCoefficients()));
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,166,atrix[row][width - 1] = constraint.getValue();
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,165,"matrix.setEntry(row, width - 1, constraint.getValue());"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,170,atrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,169,"matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);  // slack"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,172,atrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,171,"matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,178,atrix[0][getArtificialVariableOffset() + artificialVar] = 1;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,179,atrix[row][getArtificialVariableOffset() + artificialVar++] = 1;
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,177,"matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,178,"matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,179,"matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,239, Puts the tableau in proper form by zeroing out the artificial variables
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,240, in the objective function via elementary row operations.
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,242,rivate void initialize() {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,243,or (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,244,nt row = getBasicRow(getArtificialVariableOffset() + artificialVar);
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,245,"ubtractRow(0, row, 1.0);"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,267,nteger getBasicRow(final int col) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,268,"eturn getBasicRow(col, true);"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,272, Checks whether the given column is basic.
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,273, @param col index of the column to check
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,274, @return the row that the variable is basic in.  null if the column is not basic
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,276,rivate Integer getBasicRowForSolution(final int col) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,277,"eturn getBasicRow(col, false);"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,281, Checks whether the given column is basic.
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,282, @param col index of the column to check
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,283, @param ignoreObjectiveRows if true ignore the first rows which correspond
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,284, to objective functions
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,285, @return the row that the variable is basic in.  null if the column is not basic
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,287,"rivate Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,255,protected Integer getBasicRow(final int col) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,289,nt start = ignoreObjectiveRows ? getNumObjectiveFunctions() : 0;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,290,or (int i = start; i < getHeight(); i++) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,257,for (int i = 0; i < getHeight(); i++) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,301, Removes the phase 1 objective function and artificial variables from this tableau.
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,268,"* Removes the phase 1 objective function, positive cost non-artificial variables,"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,269,* and the non-basic artificial variables from this tableau.
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,303,rotected void discardArtificialVariables() {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,304,f (numArtificialVariables == 0) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,271,protected void dropPhase1Objective() {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,272,if (getNumObjectiveFunctions() == 1) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,307,nt width = getWidth() - numArtificialVariables - 1;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,308,nt height = getHeight() - 1;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,309,ouble[][] matrix = new double[height][width];
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,310,or (int i = 0; i < height; i++) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,311,or (int j = 0; j < width - 1; j++) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,312,"atrix[i][j] = getEntry(i + 1, j + 1);"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,276,List<Integer> columnsToDrop = new ArrayList<Integer>();
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,277,columnsToDrop.add(0);
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,279,// positive cost non-artificial variables
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,280,for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,281,"if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) > 0) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,282,columnsToDrop.add(i);
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,286,// non-basic artificial variables
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,287,for (int i = 0; i < getNumArtificialVariables(); i++) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,288,int col = i + getArtificialVariableOffset();
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,289,if (getBasicRow(col) == null) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,290,columnsToDrop.add(col);
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,294,double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,295,for (int i = 1; i < getHeight(); i++) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,296,int col = 0;
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,297,for (int j = 0; j < getWidth(); j++) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,298,if (!columnsToDrop.contains(j)) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,299,"matrix[i - 1][col++] = tableau.getEntry(i, j);"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,314,"atrix[i][width - 1] = getEntry(i + 1, getRhsOffset());"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,348,nteger negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,336,Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,352,nteger basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,340,Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,394,or (int j = 0; j < getWidth(); j++) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,395,"ableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,396,"ultiple * tableau.getEntry(subtrahendRow, j));"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,382,"tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow)"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,383,.subtract(tableau.getRowVector(subtrahendRow).mapMultiply(multiple)));
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,51,"inearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.2, 0.3 }, 0 );"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,51,"LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.8, 0.2, 0.7, 0.3, 0.6, 0.4 }, 0 );"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,53,"onstraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ, 23.0));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,53,"constraints.add(new LinearConstraint(new double[] { 1, 0, 1, 0, 1, 0 }, Relationship.EQ, 23.0));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,54,"constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 1, 0, 1 }, Relationship.EQ, 23.0));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,55,"constraints.add(new LinearConstraint(new double[] { 1, 0, 0, 0, 0, 0 }, Relationship.GEQ, 10.0));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,56,"constraints.add(new LinearConstraint(new double[] { 0, 0, 1, 0, 0, 0 }, Relationship.GEQ, 8.0));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,57,"constraints.add(new LinearConstraint(new double[] { 0, 0, 0, 0, 1, 0 }, Relationship.GEQ, 5.0));"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,57,"ssert.assertEquals(6.9, solution.getValue(), .0000001);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,61,"Assert.assertEquals(25.8, solution.getValue(), .0000001);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,53," 1, -15, -10, 25, 0, 0, 0},"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,54," 0,   1,   0, -1, 1, 0, 2},"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,55," 0,   0,   1, -1, 0, 1, 3},"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,56," 0,   1,   1, -2, 0, 0, 4}"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,53,"{ 1, -15, -10, 0, 0, 0, 0},"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,54,"{ 0,   1,   0, 1, 0, 0, 2},"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,55,"{ 0,   0,   1, 0, 1, 0, 3},"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,56,"{ 0,   1,   1, 0, 0, 1, 4}"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,58,ableau.discardArtificialVariables();
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,58,tableau.dropPhase1Objective();

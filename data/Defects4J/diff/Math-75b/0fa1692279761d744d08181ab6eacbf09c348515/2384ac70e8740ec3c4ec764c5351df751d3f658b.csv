is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,25,import org.apache.commons.math.ode.events.CombinedEventsManager;
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,109,/ recompute the step
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,110,"ong    nbStep    = Math.max(1l, Math.abs(Math.round((t - t0) / step)));"
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,111,oolean lastStep  = false;
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,110,// set up integration control objects
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,113,tepSize  = (t - t0) / nbStep;
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,112,stepSize  = step;
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,117,or (long i = 0; ! lastStep; ++i) {
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,116,"CombinedEventsManager manager = addEndTimeChecker(t, eventsHandlersManager);"
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,117,boolean lastStep = false;
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,119,// main integration loop
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,120,while (!lastStep) {
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,121,oolean needUpdate = false;
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,151,/ Discrete events handling
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,153,// discrete events handling
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,153,f (eventsHandlersManager.evaluateStep(interpolator)) {
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,154,eedUpdate = true;
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,155,tepSize = eventsHandlersManager.getEventTime() - stepStart;
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,155,if (manager.evaluateStep(interpolator)) {
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,156,stepSize = manager.getEventTime() - stepStart;
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,165,"ventsHandlersManager.stepAccepted(nextStep, y);"
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,166,f (eventsHandlersManager.stop()) {
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,167,astStep = true;
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,168, else {
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,169,astStep = (i == (nbStep - 1));
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,166,"manager.stepAccepted(nextStep, y);"
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,167,lastStep = manager.stop();
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,179,"f (eventsHandlersManager.reset(stepStart, y) && ! lastStep) {"
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,176,"if (manager.reset(stepStart, y) && ! lastStep) {"
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,185,f (needUpdate) {
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,186,/ an event handler has changed the step
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,187,/ we need to recompute stepsize
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,188,"bStep = Math.max(1l, Math.abs(Math.round((t - stepStart) / step)));"
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,189,tepSize = (t - stepStart) / nbStep;
False,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,190, = -1;
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,182,// make sure step size is set to default before next step
True,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,183,stepSize = step;
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,23,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,195,public void testStepSize()
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,196,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,197,final double step = 1.23456;
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,198,FirstOrderIntegrator integ = new ClassicalRungeKuttaIntegrator(step);
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,199,integ.addStepHandler(new StepHandler() {
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,200,private static final long serialVersionUID = 0L;
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,201,"public void handleStep(StepInterpolator interpolator, boolean isLast) {"
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,202,if (! isLast) {
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,203,"assertEquals(step,"
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,204,"interpolator.getCurrentTime() - interpolator.getPreviousTime(),"
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,205,1.0e-12);
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,208,public boolean requiresDenseOutput() {
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,209,return false;
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,211,public void reset() {
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,214,integ.integrate(new FirstOrderDifferentialEquations() {
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,215,private static final long serialVersionUID = 0L;
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,216,"public void computeDerivatives(double t, double[] y, double[] dot) {"
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,217,dot[0] = 1.0;
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,219,public int getDimension() {
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,220,return 1;
True,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,222,"}, 0.0, new double[] { 0.0 }, 5.0, new double[1]);"
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,23,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,28,import org.apache.commons.math.ode.sampling.StepHandler;
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,29,import org.apache.commons.math.ode.sampling.StepInterpolator;
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,130,public void testStepSize()
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,131,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,132,final double step = 1.23456;
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,133,FirstOrderIntegrator integ = new EulerIntegrator(step);
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,134,integ.addStepHandler(new StepHandler() {
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,135,private static final long serialVersionUID = 0L;
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,136,"public void handleStep(StepInterpolator interpolator, boolean isLast) {"
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,137,if (! isLast) {
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,138,"assertEquals(step,"
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,139,"interpolator.getCurrentTime() - interpolator.getPreviousTime(),"
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,140,1.0e-12);
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,143,public boolean requiresDenseOutput() {
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,144,return false;
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,146,public void reset() {
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,149,integ.integrate(new FirstOrderDifferentialEquations() {
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,150,private static final long serialVersionUID = 0L;
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,151,"public void computeDerivatives(double t, double[] y, double[] dot) {"
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,152,dot[0] = 1.0;
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,154,public int getDimension() {
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,155,return 1;
True,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java,157,"}, 0.0, new double[] { 0.0 }, 5.0, new double[1]);"
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,23,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,185,public void testStepSize()
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,186,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,187,final double step = 1.23456;
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,188,FirstOrderIntegrator integ = new GillIntegrator(step);
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,189,integ.addStepHandler(new StepHandler() {
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,190,private static final long serialVersionUID = 0L;
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,191,"public void handleStep(StepInterpolator interpolator, boolean isLast) {"
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,192,if (! isLast) {
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,193,"assertEquals(step,"
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,194,"interpolator.getCurrentTime() - interpolator.getPreviousTime(),"
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,195,1.0e-12);
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,198,public boolean requiresDenseOutput() {
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,199,return false;
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,201,public void reset() {
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,204,integ.integrate(new FirstOrderDifferentialEquations() {
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,205,private static final long serialVersionUID = 0L;
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,206,"public void computeDerivatives(double t, double[] y, double[] dot) {"
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,207,dot[0] = 1.0;
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,209,public int getDimension() {
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,210,return 1;
True,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java,212,"}, 0.0, new double[] { 0.0 }, 5.0, new double[1]);"
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,23,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,28,import org.apache.commons.math.ode.sampling.StepHandler;
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,29,import org.apache.commons.math.ode.sampling.StepInterpolator;
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,130,public void testStepSize()
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,131,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,132,final double step = 1.23456;
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,133,FirstOrderIntegrator integ = new MidpointIntegrator(step);
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,134,integ.addStepHandler(new StepHandler() {
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,135,private static final long serialVersionUID = 0L;
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,136,"public void handleStep(StepInterpolator interpolator, boolean isLast) {"
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,137,if (! isLast) {
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,138,"assertEquals(step,"
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,139,"interpolator.getCurrentTime() - interpolator.getPreviousTime(),"
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,140,1.0e-12);
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,143,public boolean requiresDenseOutput() {
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,144,return false;
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,146,public void reset() {
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,149,integ.integrate(new FirstOrderDifferentialEquations() {
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,150,private static final long serialVersionUID = 0L;
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,151,"public void computeDerivatives(double t, double[] y, double[] dot) {"
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,152,dot[0] = 1.0;
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,154,public int getDimension() {
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,155,return 1;
True,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java,157,"}, 0.0, new double[] { 0.0 }, 5.0, new double[1]);"
True,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,51,if (Math.abs(h) < 10 * Math.ulp(t)) {
True,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,52,return;
True,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,80,if (Math.abs(approYDot - yDot[i]) >= threshold) {
True,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java,81,"System.out.println(""gotcha!"");"
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,23,import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,182,public void testStepSize()
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,183,"throws DerivativeException, IntegratorException {"
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,184,final double step = 1.23456;
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,185,FirstOrderIntegrator integ = new ThreeEighthesIntegrator(step);
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,186,integ.addStepHandler(new StepHandler() {
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,187,private static final long serialVersionUID = 0L;
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,188,"public void handleStep(StepInterpolator interpolator, boolean isLast) {"
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,189,if (! isLast) {
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,190,"assertEquals(step,"
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,191,"interpolator.getCurrentTime() - interpolator.getPreviousTime(),"
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,192,1.0e-12);
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,195,public boolean requiresDenseOutput() {
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,196,return false;
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,198,public void reset() {
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,201,integ.integrate(new FirstOrderDifferentialEquations() {
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,202,private static final long serialVersionUID = 0L;
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,203,"public void computeDerivatives(double t, double[] y, double[] dot) {"
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,204,dot[0] = 1.0;
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,206,public int getDimension() {
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,207,return 1;
True,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java,209,"}, 0.0, new double[] { 0.0 }, 5.0, new double[1]);"

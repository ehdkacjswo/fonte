is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,53," @deprecated as of 1.2, replaced by {@link #FunctionEvaluationException(double, String, Object[])"
True,src/java/org/apache/commons/math/FunctionEvaluationException.java,src/java/org/apache/commons/math/FunctionEvaluationException.java,53,"* @deprecated as of 1.2, replaced by {@link #FunctionEvaluationException(double, String, Object[])}"
False,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,44, @param argument  the failing function argument
True,src/java/org/apache/commons/math/MaxIterationsExceededException.java,src/java/org/apache/commons/math/MaxIterationsExceededException.java,44,* @param maxIterations the exceeded maximal number of iterations
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,327, <p>This method calls the protected {@link #doFinalize doFinalize}
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,328, method if it has never been called during this step and set a
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,329, flag indicating that it has been called once. It is the {@link
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,330, #doFinalize doFinalize} method which should perform the
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,331, evaluations. This wrapping prevents from calling {@link
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,332, #doFinalize doFinalize} several times and hence evaluating the
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,333," differential equations too often. Therefore, subclasses are not"
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,334," allowed not reimplement it, they should rather reimplement {@link"
False,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,335, #doFinalize doFinalize}.</p>
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,327,* <p>This method calls the protected <code>doFinalize</code> method
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,328,* if it has never been called during this step and set a flag
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,329,* indicating that it has been called once. It is the <code>
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,330,* doFinalize</code> method which should perform the evaluations.
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,331,* This wrapping prevents from calling <code>doFinalize</code> several
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,332,* times and hence evaluating the differential equations too often.
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,333,"* Therefore, subclasses are not allowed not reimplement it, they"
True,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,src/java/org/apache/commons/math/ode/AbstractStepInterpolator.java,334,* should rather reimplement <code>doFinalize</code>.</p>
False,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,44, {@link AbstractStepInterpolator#reinitialize} method should be called
False,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,45, before using the instance in order to initialize the internal arrays. This
False,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,46, constructor is used only in order to delay the initialization in
False,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,47," some cases. As an example, the {@link"
True,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,44,* <code>AbstractStepInterpolator.reinitialize</code> protected method
True,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,45,* should be called before using the instance in order to initialize
True,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,46,* the internal arrays. This constructor is used only in order to delay
True,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,src/java/org/apache/commons/math/ode/DummyStepInterpolator.java,47,"* the initialization in some cases. As an example, the {@link"
False,src/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java,src/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java,42, @see org.spaceroots.mantissa.utilities.ArraySliceMappable
False,src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,43, @see org.spaceroots.mantissa.utilities.ArraySliceMappable
False,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,54, @param vector vector to add
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,54,* @param v vector to add
False,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,47, @param vector vector to add
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,47,* @param v vector to add

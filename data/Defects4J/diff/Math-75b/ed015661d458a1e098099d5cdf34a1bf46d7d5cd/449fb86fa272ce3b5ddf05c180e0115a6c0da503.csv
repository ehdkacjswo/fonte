is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,31, @version $Revision: 1.9 $ $Date: 2004/06/23 16:26:16 $
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,31,* @version $Revision: 1.1 $ $Date: 2004/07/12 00:27:09 $
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,33,ublic class ComplexMath {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,33,public class ComplexUtils {
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,38,rivate ComplexMath() {
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,38,private ComplexUtils() {
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,24, @version $Revision: 1.3 $ $Date: 2004/02/21 21:35:16 $
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,24,* @version $Revision: 1.1 $ $Date: 2004/07/12 00:27:09 $
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,26,ublic class ComplexMathTest extends TestCase {
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,26,public class ComplexUtilsTest extends TestCase {
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,31,"estUtils.assertEquals(expected, ComplexMath.acos(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,31,"TestUtils.assertEquals(expected, ComplexUtils.acos(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,35,ssertTrue(ComplexMath.acos(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,35,assertTrue(ComplexUtils.acos(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,41,"estUtils.assertEquals(expected, ComplexMath.asin(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,41,"TestUtils.assertEquals(expected, ComplexUtils.asin(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,45,ssertTrue(ComplexMath.asin(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,45,assertTrue(ComplexUtils.asin(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,51,"estUtils.assertEquals(expected, ComplexMath.atan(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,51,"TestUtils.assertEquals(expected, ComplexUtils.atan(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,55,ssertTrue(ComplexMath.atan(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,55,assertTrue(ComplexUtils.atan(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,61,"estUtils.assertEquals(expected, ComplexMath.cos(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,61,"TestUtils.assertEquals(expected, ComplexUtils.cos(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,67,"estUtils.assertEquals(expected, ComplexMath.cosh(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,67,"TestUtils.assertEquals(expected, ComplexUtils.cosh(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,71,ssertTrue(ComplexMath.cosh(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,71,assertTrue(ComplexUtils.cosh(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,75,ssertTrue(ComplexMath.cos(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,75,assertTrue(ComplexUtils.cos(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,81,"estUtils.assertEquals(expected, ComplexMath.exp(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,81,"TestUtils.assertEquals(expected, ComplexUtils.exp(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,85,ssertTrue(ComplexMath.exp(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,85,assertTrue(ComplexUtils.exp(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,91,"estUtils.assertEquals(expected, ComplexMath.log(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,91,"TestUtils.assertEquals(expected, ComplexUtils.log(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,95,ssertTrue(ComplexMath.log(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,95,assertTrue(ComplexUtils.log(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,102,"estUtils.assertEquals(expected, ComplexMath.pow(x, y), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,102,"TestUtils.assertEquals(expected, ComplexUtils.pow(x, y), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,107,"ssertTrue(ComplexMath.pow(Complex.NaN, x).isNaN());"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,107,"assertTrue(ComplexUtils.pow(Complex.NaN, x).isNaN());"
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,112,"ssertTrue(ComplexMath.pow(x, Complex.NaN).isNaN());"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,112,"assertTrue(ComplexUtils.pow(x, Complex.NaN).isNaN());"
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,118,"estUtils.assertEquals(expected, ComplexMath.sin(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,118,"TestUtils.assertEquals(expected, ComplexUtils.sin(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,124,"estUtils.assertEquals(expected, ComplexMath.sinh(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,124,"TestUtils.assertEquals(expected, ComplexUtils.sinh(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,128,ssertTrue(ComplexMath.sinh(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,128,assertTrue(ComplexUtils.sinh(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,132,ssertTrue(ComplexMath.sin(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,132,assertTrue(ComplexUtils.sin(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,138,"estUtils.assertEquals(expected, ComplexMath.sqrt(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,138,"TestUtils.assertEquals(expected, ComplexUtils.sqrt(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,144,"estUtils.assertEquals(expected, ComplexMath.sqrt(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,144,"TestUtils.assertEquals(expected, ComplexUtils.sqrt(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,150,"estUtils.assertEquals(expected, ComplexMath.sqrt(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,150,"TestUtils.assertEquals(expected, ComplexUtils.sqrt(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,156,"estUtils.assertEquals(expected, ComplexMath.sqrt(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,156,"TestUtils.assertEquals(expected, ComplexUtils.sqrt(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,162,"estUtils.assertEquals(expected, ComplexMath.sqrt(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,162,"TestUtils.assertEquals(expected, ComplexUtils.sqrt(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,168,"estUtils.assertEquals(expected, ComplexMath.sqrt1z(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,168,"TestUtils.assertEquals(expected, ComplexUtils.sqrt1z(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,172,ssertTrue(ComplexMath.sqrt1z(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,172,assertTrue(ComplexUtils.sqrt1z(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,176,ssertTrue(ComplexMath.sqrt(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,176,assertTrue(ComplexUtils.sqrt(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,182,"estUtils.assertEquals(expected, ComplexMath.tan(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,182,"TestUtils.assertEquals(expected, ComplexUtils.tan(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,188,"estUtils.assertEquals(expected, ComplexMath.tanh(z), 1.0e-5);"
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,188,"TestUtils.assertEquals(expected, ComplexUtils.tanh(z), 1.0e-5);"
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,192,ssertTrue(ComplexMath.tanh(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,192,assertTrue(ComplexUtils.tanh(Complex.NaN).isNaN());
False,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,196,ssertTrue(ComplexMath.tan(Complex.NaN).isNaN());
True,src/test/org/apache/commons/math/complex/ComplexMathTest.java,src/test/org/apache/commons/math/complex/ComplexUtilsTest.java,196,assertTrue(ComplexUtils.tan(Complex.NaN).isNaN());

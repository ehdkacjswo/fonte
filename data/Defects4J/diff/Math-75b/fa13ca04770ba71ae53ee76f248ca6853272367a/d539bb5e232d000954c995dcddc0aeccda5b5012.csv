is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,18,package org.apache.commons.math.stat.ranking;
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,21,* Strategies for handling NaN values in rank transformations.
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,22,* <ul>
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,23,"* <li>MINIMAL - NaNs are treated as minimal in the ordering, equivalent to"
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,24,"* (that is, tied with) <code>Double.NEGATIVE_INFINITY</code>.</li>"
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,25,"* <li>MAXIMAL - NaNs are treated as maximal in the ordering, equivalent to"
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,26,* <code>Double.POSITIVE_INFINITY</code></li>
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,27,* <li>REMOVED - NaNs are removed before the rank transform is applied</li>
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,28,"* <li>FIXED - NaNs are left ""in place,"" that is the rank transformation is"
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,29,"* applied to the other elements in the input array, but the NaN elements"
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,30,* are returned unchanged.</li>
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,31,* </ul>
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,33,* @since 2.0
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,34,* @version $Revision:$ $Date:$
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,36,public enum NaNStrategy {
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,38,/** NaNs are considered minimal in the ordering */
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,39,"MINIMAL,"
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,41,/** NaNs are considered maximal in the ordering */
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,42,"MAXIMAL,"
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,44,/** NaNs are removed before computing ranks */
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,45,"REMOVED,"
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,47,/** NaNs are left in place */
True,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,src/java/org/apache/commons/math/stat/ranking/NaNStrategy.java,48,FIXED
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,18,package org.apache.commons.math.stat.ranking;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,20,import java.util.ArrayList;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,21,import java.util.Arrays;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,22,import java.util.Iterator;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,23,import java.util.List;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,25,import org.apache.commons.math.random.RandomData;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,26,import org.apache.commons.math.random.RandomDataImpl;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,27,import org.apache.commons.math.random.RandomGenerator;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,31,* <p> Ranking based on the natural ordering on doubles.</p>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,32,* <p>NaNs are treated according to the configured {@link NaNStrategy} and ties
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,33,* are handled using the selected {@link TiesStrategy}.
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,34,* Configuration settings are supplied in optional constructor arguments.
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,35,"* Defaults are {@link NaNStrategy#MAXIMAL} and {@link TiesStrategy#AVERAGE},"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,36,"* respectively. When using {@link TiesStrategy#RANDOM}, a"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,37,* {@link RandomGenerator} may be supplied as a constructor argument.</p>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,38,* <p>Examples:
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,39,"* <table border=""1"" cellpadding=""3"">"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,40,"* <tr><th colspan=""3"">"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,41,"* Input data: (20, 17, 30, 42.3, 17, 50, Double.NaN, Double.NEGATIVE_INFINITY, 17)"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,42,* </th></tr>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,43,* <tr><th>NaNStrategy</th><th>TiesStrategy</th>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,44,* <th><code>rank(data)</code></th>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,45,* <tr>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,46,* <td>default (NaNs maximal)</td>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,47,* <td>default (ties averaged)</td>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,48,"* <td>(5, 3, 6, 7, 3, 8, 9, 1, 3)</td></tr>"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,49,* <tr>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,50,* <td>default (NaNs maximal)</td>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,51,* <td>MINIMUM</td>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,52,"* <td>(5, 2, 6, 7, 2, 8, 9, 1, 2)</td></tr>"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,53,* <tr>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,54,* <td>MINIMAL</td>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,55,* <td>default (ties averaged)</td>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,56,"* <td>(6, 4, 7, 8, 4, 9, 1.5, 1.5, 4)</td></tr>"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,57,* <tr>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,58,* <td>REMOVED</td>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,59,* <td>SEQUENTIAL</td>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,60,"* <td>(5, 2, 6, 7, 3, 8, 1, 4)</td></tr>"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,61,* <tr>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,62,* <td>MINIMAL</td>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,63,* <td>MAXIMUM</td>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,64,"* <td>(6, 5, 7, 8, 5, 9, 2, 2, 5)</td></tr></table></p>"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,66,* @since 2.0
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,67,* @version $Revision:$ $Date:$
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,69,public class NaturalRanking implements RankingAlgorithm {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,71,/** NaN strategy - defaults to NaNs maximal */
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,72,private final NaNStrategy nanStrategy;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,74,/** Ties strategy - defaults to ties averaged */
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,75,private final TiesStrategy tiesStrategy;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,77,/** Source of random data - used only when ties strategy is RANDOM */
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,78,private final RandomData randomData;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,80,/** default NaN strategy */
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,81,public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.MAXIMAL;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,83,/** default ties strategy */
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,84,public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,87,* Create a NaturalRanking with default strategies for handling ties and NaNs.
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,89,public NaturalRanking() {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,90,super();
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,91,tiesStrategy = DEFAULT_TIES_STRATEGY;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,92,nanStrategy = DEFAULT_NAN_STRATEGY;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,93,randomData = null;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,97,* Create a NaturalRanking with the given TiesStrategy.
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,99,* @param tiesStrategy the TiesStrategy to use
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,101,public NaturalRanking(TiesStrategy tiesStrategy) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,102,super();
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,103,this.tiesStrategy = tiesStrategy;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,104,nanStrategy = DEFAULT_NAN_STRATEGY;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,105,randomData = new RandomDataImpl();
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,109,* Create a NaturalRanking with the given NaNStrategy.
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,111,* @param nanStrategy the NaNStrategy to use
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,113,public NaturalRanking(NaNStrategy nanStrategy) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,114,super();
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,115,this.nanStrategy = nanStrategy;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,116,tiesStrategy = DEFAULT_TIES_STRATEGY;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,117,randomData = null;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,121,* Create a NaturalRanking with the given NaNStrategy and TiesStrategy.
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,123,* @param nanStrategy NaNStrategy to use
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,124,* @param tiesStrategy TiesStrategy to use
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,126,"public NaturalRanking(NaNStrategy nanStrategy, TiesStrategy tiesStrategy) {"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,127,super();
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,128,this.nanStrategy = nanStrategy;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,129,this.tiesStrategy = tiesStrategy;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,130,randomData = new RandomDataImpl();
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,134,* Create a NaturalRanking with TiesStrategy.RANDOM and the given
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,135,* RandomGenerator as the source of random data.
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,137,* @param randomGenerator source of random data
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,139,public NaturalRanking(RandomGenerator randomGenerator) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,140,super();
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,141,this.tiesStrategy = TiesStrategy.RANDOM;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,142,nanStrategy = DEFAULT_NAN_STRATEGY;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,143,randomData = new RandomDataImpl(randomGenerator);
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,148,"* Create a NaturalRanking with the given NaNStrategy, TiesStrategy.RANDOM"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,149,* and the given source of random data.
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,151,* @param nanStrategy NaNStrategy to use
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,152,* @param randomGenerator source of random data
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,154,"public NaturalRanking(NaNStrategy nanStrategy,"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,155,RandomGenerator randomGenerator) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,156,super();
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,157,this.nanStrategy = nanStrategy;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,158,this.tiesStrategy = TiesStrategy.RANDOM;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,159,randomData = new RandomDataImpl(randomGenerator);
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,163,* Return the NaNStrategy
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,165,* @return returns the NaNStrategy
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,167,public NaNStrategy getNanStrategy() {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,168,return nanStrategy;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,172,* Return the TiesStrategy
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,174,* @return the TiesStrategy
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,176,public TiesStrategy getTiesStrategy() {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,177,return tiesStrategy;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,181,"* Rank <code>data</code> using the natural ordering on Doubles, with"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,182,* NaN values handled according to <code>nanStrategy</code> and ties
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,183,* resolved using <code>tiesStrategy.</code>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,185,* @param data array to be ranked
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,186,* @return array of ranks
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,188,public double[] rank(double[] data) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,190,// Array recording initial positions of data to be ranked
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,191,IntDoublePair[] ranks = new IntDoublePair[data.length];
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,192,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,193,"ranks[i] = new IntDoublePair(data[i], i);"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,196,"// Recode, remove or record positions of NaNs"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,197,List<Integer> nanPositions = null;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,198,switch (nanStrategy) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,199,case MAXIMAL: // Replace NaNs with +INFs
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,200,"recodeNaNs(ranks, Double.POSITIVE_INFINITY);"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,201,break;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,202,case MINIMAL: // Replace NaNs with -INFs
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,203,"recodeNaNs(ranks, Double.NEGATIVE_INFINITY);"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,204,break;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,205,case REMOVED: // Drop NaNs from data
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,206,ranks = removeNaNs(ranks);
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,207,break;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,208,case FIXED:   // Record positions of NaNs
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,209,nanPositions = getNanPositions(ranks);
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,210,break;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,213,// Sort the IntDoublePairs
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,214,Arrays.sort(ranks);
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,216,"// Walk the sorted array, filling output array using sorted positions,"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,217,// resolving ties as we go
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,218,double[] out = new double[ranks.length];
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,219,int pos = 1;  // position in sorted array
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,220,out[ranks[0].getPosition()] = pos;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,221,List<Integer> tiesTrace = new ArrayList<Integer>();
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,222,tiesTrace.add(ranks[0].getPosition());
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,223,for (int i = 1; i < ranks.length; i++) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,224,"if (Double.compare(ranks[i].getValue(), ranks[i - 1].getValue()) > 0) {"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,225,// tie sequence has ended (or had length 1)
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,226,pos = i + 1;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,227,"if (tiesTrace.size() > 1) {  // if seq is nontrivial, resolve"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,228,"resolveTie(out, tiesTrace);"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,230,tiesTrace = new ArrayList<Integer>();
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,231,tiesTrace.add(ranks[i].getPosition());
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,232,} else {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,233,// tie sequence continues
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,234,tiesTrace.add(ranks[i].getPosition());
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,236,out[ranks[i].getPosition()] = pos;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,238,if (tiesTrace.size() > 1) {  // handle tie sequence at end
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,239,"resolveTie(out, tiesTrace);"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,241,if (nanStrategy == NaNStrategy.FIXED) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,242,"restoreNaNs(out, nanPositions);"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,244,return out;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,248,* Returns an array that is a copy of the input array with IntDoublePairs
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,249,* having NaN values removed.
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,251,* @param ranks input array
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,252,* @return array with NaN-valued entries removed
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,254,private IntDoublePair[] removeNaNs(IntDoublePair[] ranks) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,255,if (!containsNaNs(ranks)) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,256,return ranks;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,258,IntDoublePair[] outRanks = new IntDoublePair[ranks.length];
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,259,int j = 0;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,260,for (int i = 0; i < ranks.length; i++) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,261,if (Double.isNaN(ranks[i].getValue())) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,262,"// drop, but adjust original ranks of later elements"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,263,for (int k = i + 1; k < ranks.length; k++) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,264,ranks[k] = new IntDoublePair(
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,265,"ranks[k].getValue(), ranks[k].getPosition() - 1);"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,267,} else {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,268,outRanks[j] = new IntDoublePair(
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,269,"ranks[i].getValue(), ranks[i].getPosition());"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,270,j++;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,273,IntDoublePair[] returnRanks = new IntDoublePair[j];
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,274,"System.arraycopy(outRanks, 0, returnRanks, 0, j);"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,275,return returnRanks;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,279,* Recodes NaN values to the given value.
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,281,* @param ranks array to recode
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,282,* @param value the value to replace NaNs with
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,284,"private void recodeNaNs(IntDoublePair[] ranks, double value) {"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,285,for (int i = 0; i < ranks.length; i++) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,286,if (Double.isNaN(ranks[i].getValue())) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,287,ranks[i] = new IntDoublePair(
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,288,"value, ranks[i].getPosition());"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,294,* Checks for presence of NaNs in <code>ranks.</code>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,296,* @param ranks array to be searched for NaNs
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,297,* @return true iff ranks contains one or more NaNs
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,299,private boolean containsNaNs(IntDoublePair[] ranks) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,300,for (int i = 0; i < ranks.length; i++) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,301,if (Double.isNaN(ranks[i].getValue())) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,302,return true;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,305,return false;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,309,"* Resolve a sequence of ties, using the cconfigured {@link TiesStrategy}."
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,310,* The input <code>ranks</code> array is expected to take the same value
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,311,* for all indices in <code>tiesTrace</code>.  The common value is recoded
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,312,"* according to the tiesStrategy. For example, if ranks = <5,8,2,6,2,7,1,2>,"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,313,"* tiesTrace = <2,4,7> and tiesStrategy is MINIMUM, ranks will be unchanged."
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,314,* The same array and trace with tiesStrategy AVERAGE will come out
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,315,"* <5,8,3,6,3,7,1,3>."
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,317,* @param ranks array of ranks
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,318,* @param tiesTrace list of indices where <code>ranks</code> is constant
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,319,"* -- that is, for any i and j in TiesTrace, <code> ranks[i] == ranks[j]"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,320,* </code>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,322,"private void resolveTie(double[] ranks, List<Integer> tiesTrace) {"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,324,// constant value of ranks over tiesTrace
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,325,final double c = ranks[tiesTrace.get(0)];
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,327,// length of sequence of tied ranks
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,328,final int length = tiesTrace.size();
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,330,switch (tiesStrategy) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,331,case  AVERAGE:  // Replace ranks with average
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,332,"fill(ranks, tiesTrace, (2 * c + length - 1) / 2d);"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,333,break;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,334,case MAXIMUM:   // Replace ranks with maximum values
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,335,"fill(ranks, tiesTrace, c + length - 1);"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,336,break;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,337,case MINIMUM:   // Replace ties with minimum
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,338,"fill(ranks, tiesTrace, c);"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,339,break;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,340,"case RANDOM:    // Fill with random integral values in [c, c + length - 1]"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,341,Iterator<Integer> iterator = tiesTrace.iterator();
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,342,long f = Math.round(c);
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,343,while (iterator.hasNext()) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,344,ranks[iterator.next()] =
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,345,"randomData.nextLong(f, f + length - 1);"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,347,break;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,348,case SEQUENTIAL:  // Fill sequentially from c to c + length - 1
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,349,// walk and fill
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,350,iterator = tiesTrace.iterator();
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,351,f = Math.round(c);
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,352,int i = 0;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,353,while (iterator.hasNext()) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,354,ranks[iterator.next()] = f + i++;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,356,break;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,361,* Sets<code>data[i] = value</code> for each i in <code>tiesTrace.</code>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,363,* @param data array to modify
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,364,* @param tiesTrace list of index values to set
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,365,* @param value value to set
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,367,"private void fill(double[] data, List<Integer> tiesTrace, double value) {"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,368,Iterator<Integer> iterator = tiesTrace.iterator();
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,369,while (iterator.hasNext()) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,370,data[iterator.next()] = value;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,375,* Set <code>ranks[i] = Double.NaN</code> for each i in <code>nanPositions.</code>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,377,* @param ranks array to modify
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,378,* @param nanPositions list of index values to set to <code>Double.NaN</code>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,380,"private void restoreNaNs(double[] ranks, List<Integer> nanPositions) {"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,381,if (nanPositions.size() == 0) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,382,return;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,384,Iterator<Integer> iterator = nanPositions.iterator();
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,385,while (iterator.hasNext()) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,386,ranks[iterator.next().intValue()] = Double.NaN;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,392,* Returns a list of indexes where <code>ranks</code> is <code>NaN.</code>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,394,* @param ranks array to search for <code>NaNs</code>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,395,* @return list of indexes i such that <code>ranks[i] = NaN</code>
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,397,private List<Integer> getNanPositions(IntDoublePair[] ranks) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,398,ArrayList<Integer> out = new ArrayList<Integer>();
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,399,for (int i = 0; i < ranks.length; i++) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,400,if (Double.isNaN(ranks[i].getValue())) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,401,out.add(Integer.valueOf(i));
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,404,return out;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,408,* Represents the position of a double value in an ordering.
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,409,* Comparable interface is implemented so Arrays.sort can be used
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,410,* to sort an array of IntDoublePairs by value.  Note that the
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,411,* implicitly defined natural ordering is NOT consistent with equals.
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,413,private static class IntDoublePair implements Comparable<IntDoublePair>  {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,415,/** Value of the pair */
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,416,final private double value;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,418,/** Original position of the pair */
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,419,final private int position;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,422,* Construct an IntDoublePair with the given value and position.
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,423,* @param value the value of the pair
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,424,* @param position the original position
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,426,"public IntDoublePair(double value, int position) {"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,427,this.value = value;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,428,this.position = position;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,432,* Compare this IntDoublePair to another pair.
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,433,* Only the <strong>values</strong> are compared.
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,435,* @param other the other pair to compare this to
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,436,"* @return result of <code>Double.compare(value, other.value)</code>"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,438,public int compareTo(IntDoublePair other) {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,439,"return Double.compare(value, other.value);"
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,443,* Returns the value of the pair.
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,444,* @return value
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,446,public double getValue() {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,447,return value;
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,451,* Returns the original position of the pair.
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,452,* @return position
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,454,public int getPosition() {
True,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,455,return position;
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,18,package org.apache.commons.math.stat.ranking;
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,21,* Interface representing a rank transformation.
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,23,* @since 2.0
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,24,* @version $Revision:$ $Date:$
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,26,public interface RankingAlgorithm {
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,28,"* <p>Performs a rank transformation on the input data, returning an array"
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,29,* of ranks.</p>
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,31,"* <p>Ranks should be 1-based - that is, the smallest value"
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,32,"* returned in an array of ranks should be greater than or equal to one,"
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,33,"* rather than 0. Ranks should in general take integer values, though"
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,34,* implementations may return averages or other floating point values
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,35,* to resolve ties in the input data.</p>
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,37,* @param data array of data to be ranked
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,38,* @return an array of ranks corresponding to the elements of the input array
True,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,src/java/org/apache/commons/math/stat/ranking/RankingAlgorithm.java,40,double[] rank (double[] data);
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,18,package org.apache.commons.math.stat.ranking;
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,21,* Strategies for handling tied values in rank transformations.
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,22,* <ul>
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,23,"* <li>SEQUENTIAL - Ties are assigned ranks in order of occurrence in the original array,"
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,24,"* for example (1,3,4,3) is ranked as (1,2,4,3)</li>"
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,25,"* <li>MINIMUM - Tied values are assigned the minimum applicable rank, or the rank"
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,26,"* of the first occurrence. For example, (1,3,4,3) is ranked as (1,2,4,2)</li>"
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,27,"* <li>MAXIMUM - Tied values are assigned the maximum applicable rank, or the rank"
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,28,"* of the last occurrence. For example, (1,3,4,3) is ranked as (1,3,4,3)</li>"
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,29,* <li>AVERAGE - Tied values are assigned the average of the applicable ranks.
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,30,"* For example, (1,3,4,3) is ranked as (1,2.5,4,2.5)</li>"
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,31,* <li>AVERAGE - Tied values are assigned a random integer rank from among the
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,32,"* applicable values. The assigned rank will always be an integer, (inclusively)"
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,33,* between the values retured by the MINIMUM and MAXIMUM strategies.</li>
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,34,* </ul>
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,36,* @since 2.0
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,37,* @version $Revision:$ $Date:$
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,39,public enum TiesStrategy {
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,41,/** Ties assigned sequential ranks in order of occurrence */
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,42,"SEQUENTIAL,"
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,44,/** Ties get the minimum applicable rank */
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,45,"MINIMUM,"
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,47,/** Ties get the maximum applicable rank */
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,48,"MAXIMUM,"
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,50,/** Ties get the average of applicable ranks */
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,51,"AVERAGE,"
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,53,/** Ties get a random integral value from among applicable ranks */
True,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,54,RANDOM
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,2,"* TiesEquivalentRankTest.java created on Aug 24, 2005 by jdgant01"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,5,package org.apache.commons.math.stat.ranking;
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,7,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,8,import org.apache.commons.math.random.JDKRandomGenerator;
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,9,import org.apache.commons.math.random.RandomGenerator;
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,11,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,14,* Test cases for NaturalRanking class
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,16,* @since 2.0
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,17,* @version $Revision:$ $Date:$
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,19,public class NaturalRankingTest extends TestCase {
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,21,private final double[] exampleData =
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,22,"{20, 17, 30, 42.3, 17, 50, Double.NaN, Double.NEGATIVE_INFINITY, 17};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,23,"private final double[] tiesFirst = {0, 0, 2, 1, 4};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,24,"private final double[] tiesLast = {4, 4, 1, 0};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,25,"private final double[] multipleNaNs = {0, 1, Double.NaN, Double.NaN};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,26,"private final double[] multipleTies = {3, 2, 5, 5, 6, 6, 1};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,27,"private final double[] allSame = {0, 0, 0, 0};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,29,public NaturalRankingTest(String arg0) {
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,30,super(arg0);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,33,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,34,super.setUp();
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,37,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,38,super.tearDown();
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,41,"public void testDefault() {  // Ties averaged, NaNs maximal"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,42,NaturalRanking ranking = new NaturalRanking();
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,43,double[] ranks = ranking.rank(exampleData);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,44,"double[] correctRanks = {5, 3, 6, 7, 3, 8, 9, 1, 3};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,45,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,46,ranks = ranking.rank(tiesFirst);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,47,"correctRanks = new double[] {1.5, 1.5, 4, 3, 5};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,48,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,49,ranks = ranking.rank(tiesLast);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,50,"correctRanks = new double[] {3.5, 3.5, 2, 1};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,51,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,52,ranks = ranking.rank(multipleNaNs);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,53,"correctRanks = new double[] {1, 2, 3.5, 3.5};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,54,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,55,ranks = ranking.rank(multipleTies);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,56,"correctRanks = new double[] {3, 2, 4.5, 4.5, 6.5, 6.5, 1};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,57,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,58,ranks = ranking.rank(allSame);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,59,"correctRanks = new double[] {2.5, 2.5, 2.5, 2.5};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,60,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,63,public void testNaNsMaximalTiesMinimum() {
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,64,NaturalRanking ranking = new NaturalRanking(TiesStrategy.MINIMUM);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,65,double[] ranks = ranking.rank(exampleData);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,66,"double[] correctRanks = {5, 2, 6, 7, 2, 8, 9, 1, 2};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,67,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,68,ranks = ranking.rank(tiesFirst);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,69,"correctRanks = new double[] {1, 1, 4, 3, 5};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,70,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,71,ranks = ranking.rank(tiesLast);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,72,"correctRanks = new double[] {3, 3, 2, 1};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,73,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,74,ranks = ranking.rank(multipleNaNs);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,75,"correctRanks = new double[] {1, 2, 3, 3};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,76,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,77,ranks = ranking.rank(multipleTies);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,78,"correctRanks = new double[] {3, 2, 4, 4, 6, 6, 1};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,79,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,80,ranks = ranking.rank(allSame);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,81,"correctRanks = new double[] {1, 1, 1, 1};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,82,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,85,public void testNaNsRemovedTiesSequential() {
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,86,"NaturalRanking ranking = new NaturalRanking(NaNStrategy.REMOVED,"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,87,TiesStrategy.SEQUENTIAL);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,88,double[] ranks = ranking.rank(exampleData);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,89,"double[] correctRanks = {5, 2, 6, 7, 3, 8, 1, 4};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,90,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,91,ranks = ranking.rank(tiesFirst);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,92,"correctRanks = new double[] {1, 2, 4, 3, 5};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,93,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,94,ranks = ranking.rank(tiesLast);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,95,"correctRanks = new double[] {3, 4, 2, 1};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,96,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,97,ranks = ranking.rank(multipleNaNs);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,98,"correctRanks = new double[] {1, 2};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,99,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,100,ranks = ranking.rank(multipleTies);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,101,"correctRanks = new double[] {3, 2, 4, 5, 6, 7, 1};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,102,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,103,ranks = ranking.rank(allSame);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,104,"correctRanks = new double[] {1, 2, 3, 4};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,105,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,108,public void testNaNsMinimalTiesMaximum() {
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,109,"NaturalRanking ranking = new NaturalRanking(NaNStrategy.MINIMAL,"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,110,TiesStrategy.MAXIMUM);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,111,double[] ranks = ranking.rank(exampleData);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,112,"double[] correctRanks = {6, 5, 7, 8, 5, 9, 2, 2, 5};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,113,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,114,ranks = ranking.rank(tiesFirst);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,115,"correctRanks = new double[] {2, 2, 4, 3, 5};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,116,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,117,ranks = ranking.rank(tiesLast);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,118,"correctRanks = new double[] {4, 4, 2, 1};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,119,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,120,ranks = ranking.rank(multipleNaNs);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,121,"correctRanks = new double[] {3, 4, 2, 2};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,122,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,123,ranks = ranking.rank(multipleTies);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,124,"correctRanks = new double[] {3, 2, 5, 5, 7, 7, 1};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,125,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,126,ranks = ranking.rank(allSame);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,127,"correctRanks = new double[] {4, 4, 4, 4};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,128,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,131,public void testNaNsMinimalTiesAverage() {
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,132,NaturalRanking ranking = new NaturalRanking(NaNStrategy.MINIMAL);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,133,double[] ranks = ranking.rank(exampleData);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,134,"double[] correctRanks = {6, 4, 7, 8, 4, 9, 1.5, 1.5, 4};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,135,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,136,ranks = ranking.rank(tiesFirst);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,137,"correctRanks = new double[] {1.5, 1.5, 4, 3, 5};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,138,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,139,ranks = ranking.rank(tiesLast);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,140,"correctRanks = new double[] {3.5, 3.5, 2, 1};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,141,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,142,ranks = ranking.rank(multipleNaNs);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,143,"correctRanks = new double[] {3, 4, 1.5, 1.5};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,144,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,145,ranks = ranking.rank(multipleTies);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,146,"correctRanks = new double[] {3, 2, 4.5, 4.5, 6.5, 6.5, 1};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,147,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,148,ranks = ranking.rank(allSame);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,149,"correctRanks = new double[] {2.5, 2.5, 2.5, 2.5};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,150,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,153,public void testNaNsFixedTiesRandom() {
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,154,RandomGenerator randomGenerator = new JDKRandomGenerator();
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,155,randomGenerator.setSeed(1000);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,156,"NaturalRanking ranking = new NaturalRanking(NaNStrategy.FIXED,"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,157,randomGenerator);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,158,double[] ranks = ranking.rank(exampleData);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,159,"double[] correctRanks = {5, 4, 6, 7, 3, 8, Double.NaN, 1, 4};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,160,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,161,ranks = ranking.rank(tiesFirst);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,162,"correctRanks = new double[] {1, 1, 4, 3, 5};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,163,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,164,ranks = ranking.rank(tiesLast);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,165,"correctRanks = new double[] {3, 4, 2, 1};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,166,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,167,ranks = ranking.rank(multipleNaNs);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,168,"correctRanks = new double[] {1, 2, Double.NaN, Double.NaN};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,169,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,170,ranks = ranking.rank(multipleTies);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,171,"correctRanks = new double[] {3, 2, 5, 5, 7, 6, 1};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,172,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,173,ranks = ranking.rank(allSame);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,174,"correctRanks = new double[] {1, 3, 4, 4};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,175,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,178,public void testNaNsAndInfs() {
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,179,"double[] data = {0, Double.POSITIVE_INFINITY, Double.NaN, Double.NEGATIVE_INFINITY};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,180,NaturalRanking ranking = new NaturalRanking(NaNStrategy.MAXIMAL);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,181,double[] ranks = ranking.rank(data);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,182,"double[] correctRanks = new double[] {2, 3.5, 3.5, 1};"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,183,"TestUtils.assertEquals(correctRanks, ranks, 0d);"
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,184,ranking = new NaturalRanking(NaNStrategy.MINIMAL);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,185,ranks = ranking.rank(data);
True,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java,186,"correctRanks = new double[] {3, 4, 1.5, 1.5};"

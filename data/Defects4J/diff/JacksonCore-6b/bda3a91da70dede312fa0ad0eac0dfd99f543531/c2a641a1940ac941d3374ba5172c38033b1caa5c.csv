is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,21, with uniquer (~= random) names.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,21,* with unique (~= random) names.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,33,* Also: to thwart attacks based on hash collisions (which may or may not
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,34,"* be cheap to calculate), we will need to detect ""too long"""
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,35,* collision chains. Let's start with static value of 255 entries
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,36,* for the longest legal chain.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,37,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,38,* Note: longest chain we have been able to produce without malicious
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,39,"* intent has been 60 (with ""com.fasterxml.jackson.core.main.TestWithTonsaSymbols"");"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,40,* our setting should be reasonable here.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,42,* @since 2.1
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,44,final static int MAX_COLL_CHAIN_LENGTH = 255;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,47,* And to support reduce likelihood of accidental collisions causing
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,48,"* exceptions, let's prevent reuse of tables with long collision"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,49,* overflow lists as well.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,51,* @since 2.1
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,53,final static int MAX_COLL_CHAIN_FOR_REUSE  = 63;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,60,inal boolean _intern;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,83,private final boolean _intern;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,93,* We need to keep track of the longest collision list; this is needed
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,94,* both to indicate problems with attacks and to allow flushing for
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,95,* other cases.
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,97,* @since 2.1
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,99,protected int _longestCollisionList;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,269,_longestCollisionList = parent._longestCollisionList;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,280,_longestCollisionList = 0;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,274,f (child.size() > MAX_ENTRIES_FOR_REUSE) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,308,if (child.size() > MAX_ENTRIES_FOR_REUSE
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,309,|| child._longestCollisionList > MAX_COLL_CHAIN_FOR_REUSE) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,318,_longestCollisionList = child._longestCollisionList;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,346,* @since 2.1
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,348,public int bucketCount() { return _mainHash.length; }
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,361,* Method mostly needed by unit tests; calculates number of
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,362,* entries that are in collision list. Value can be at most
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,363,"* ({@link #size} - 1), but should usually be much lower, ideally 0."
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,365,* @since 2.1
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,367,public int collisionCount() {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,368,return _collCount;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,372,* Method mostly needed by unit tests; calculates length of the
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,373,"* longest collision chain. This should typically be a low number,"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,374,* but may be up to {@link #size} - 1 in the pathological case
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,376,* @since 2.1
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,378,public int maxCollisionLength() {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,379,return _longestCollisionList;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,384,"/* Public API, accessing symbols:"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,575,// JDK uses 33; other fine choices are 31 and 65599
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,576,// (see [http://www.cse.yorku.ca/~oz/hash.html] for details)
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,577,private final static int MULT = 33;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,515,nt hash = (firstQuad * 31) + secondQuad;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,589,int hash = (firstQuad * MULT) + secondQuad;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,518,/int hash = (secondQuad == 0) ? firstQuad : ((firstQuad * 31) + secondQuad);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,592,//int hash = (secondQuad == 0) ? firstQuad : ((firstQuad * MULT) + secondQuad);
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,530,ash = (hash * 31) + quads[i];
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,604,hash = (hash * MULT) + quads[i];
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,539,"* 26-Nov-2008, tatu: not used currently; if not used in near future,"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,540,   let's just delete it.
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,543,ublic static int[] calcQuads(byte[] wordBytes)
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,612,// Method only used by unit tests
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,613,protected static int[] calcQuads(byte[] wordBytes)
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,667,"collList[bucket] = new Bucket(symbol, _collList[bucket]);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,735,"Bucket newB = new Bucket(symbol, _collList[bucket]);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,736,_collList[bucket] = newB;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,737,"// but, be careful wrt attacks"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,738,"_longestCollisionList = Math.max(newB.length(), _longestCollisionList);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,739,if (_longestCollisionList > MAX_COLL_CHAIN_LENGTH) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,740,reportTooManyCollisions(MAX_COLL_CHAIN_LENGTH);
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,807,_longestCollisionList = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,815,int maxColl = 0;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,772,"collList[bucket] = new Bucket(symbol, _collList[bucket]);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,849,"Bucket newB = new Bucket(symbol, _collList[bucket]);"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,850,_collList[bucket] = newB;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,851,"maxColl = Math.max(maxColl, newB.length());"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,856,_longestCollisionList = maxColl;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,870,_longestCollisionList = 0;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,986,/* Other helper methods
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,991,* @since 2.1
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,993,protected void reportTooManyCollisions(int maxLen)
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,995,"throw new IllegalStateException(""Longest collision chain in symbol table (of size ""+_count"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,996,"+"") now exceeds maximum, ""+maxLen+"" -- suspect a DoS attack based on hash collisions"");"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1009,private final int _length;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1015,_length = (next == null) ? 1 : next._length+1;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,919,ublic int length()
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,921,nt len = 1;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,922,or (Bucket curr = _next; curr != null; curr = curr._next) {
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,923,+len;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,925,eturn len;
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,1018,public int length() { return _length; }
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,72,*<p>
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,73,* Note: longest chain we have been able to produce without malicious
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,74,"* intent has been 38 (with ""com.fasterxml.jackson.core.main.TestWithTonsaSymbols"");"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,75,* our setting should be reasonable here.
False,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,244,sizeThreshold = (initialSize - (initialSize >> 2));
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,248,_sizeThreshold = _thresholdSize(initialSize);
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,251,private final static int _thresholdSize(int hashAreaSize) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,252,return hashAreaSize - (hashAreaSize >> 2);
False,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,265,sizeThreshold = arrayLen - (arrayLen >> 2);
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,273,_sizeThreshold = _thresholdSize(arrayLen);
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,376,* Method for checking number of primary hash buckets this symbol
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,377,* table uses.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,379,* @since 2.1
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,381,public int bucketCount() {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,382,return _symbols.length; }
False,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,558,sizeThreshold += _sizeThreshold;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,575,_sizeThreshold = _thresholdSize(newSize);
False,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,16,"inal static String FIELD_BASENAME = ""f"";"
False,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,38,/ Helper methods
True,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,36,/* Helper methods
False,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,67,"rivate void fieldNameFor(StringBuilder sb, int index)"
False,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,69,"* let's do something like ""f1.1"" to exercise different"
False,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,70, field names (important for byte-based codec)
False,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,71, Other name shuffling done mostly just for fun... :)
False,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,73,b.append(FIELD_BASENAME);
False,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,74,b.append(index);
False,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,75,f (index > 50) {
False,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,76,b.append('.');
False,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,77,f (index > 200) {
False,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,78,b.append(index);
False,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,79,f (index > 4000) { // and some even longer symbols...
False,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,80,"b.append(""."").append(index);"
False,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,82, else {
False,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,83,b.append(index >> 3); // divide by 8
False,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,88,rivate String fieldNameFor(int index)
False,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,90,tringBuilder sb = new StringBuilder(16);
False,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,91,"ieldNameFor(sb, index);"
False,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java,92,eturn sb.toString();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,3,import java.io.IOException;
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,57,"// Test for verifying stability of hashCode, wrt collisions, using"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,58,// synthetic field name generation and character-based input
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,59,public void testSyntheticWithChars()
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,61,CharsToNameCanonicalizer symbols = CharsToNameCanonicalizer.createRoot(0);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,62,for (int i = 0; i < 5000; ++i) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,63,String id = fieldNameFor(i);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,64,char[] ch = id.toCharArray();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,65,"symbols.findSymbol(ch, 0, ch.length, symbols.calcHash(id));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,68,"assertEquals(8192, symbols.bucketCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,69,"assertEquals(5000, symbols.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,70,// holy guacamoley... there are way too many:
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,71,"assertEquals(3053, symbols.collisionCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,72,// but spread more evenly than byte-based ones?
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,73,"assertEquals(29, symbols.maxCollisionLength());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,76,"// Test for verifying stability of hashCode, wrt collisions, using"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,77,// synthetic field name generation and byte-based input (UTF-8)
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,78,public void testSyntheticWithBytes() throws IOException
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,80,BytesToNameCanonicalizer symbols = BytesToNameCanonicalizer.createRoot();
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,81,for (int i = 0; i < 5000; ++i) {
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,82,String id = fieldNameFor(i);
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,83,"int[] quads = BytesToNameCanonicalizer.calcQuads(id.getBytes(""UTF-8""));"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,84,"symbols.addName(id, quads, quads.length);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,86,"assertEquals(5000, symbols.size());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,87,"assertEquals(8192, symbols.bucketCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,89,// holy guacamoley... even here we have too many; but surprisingly (?)
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,90,// less than with chars
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,91,"assertEquals(1697, symbols.collisionCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,92,"assertEquals(9, symbols.maxCollisionLength());"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,15,"protected final static String FIELD_BASENAME = ""f"";"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,404,"protected void fieldNameFor(StringBuilder sb, int index)"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,406,"/* let's do something like ""f1.1"" to exercise different"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,407,* field names (important for byte-based codec)
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,408,* Other name shuffling done mostly just for fun... :)
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,410,sb.append(FIELD_BASENAME);
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,411,sb.append(index);
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,412,if (index > 50) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,413,sb.append('.');
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,414,if (index > 200) {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,415,sb.append(index);
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,416,if (index > 4000) { // and some even longer symbols...
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,417,"sb.append(""."").append(index);"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,419,} else {
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,420,sb.append(index >> 3); // divide by 8
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,425,protected String fieldNameFor(int index)
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,427,StringBuilder sb = new StringBuilder(16);
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,428,"fieldNameFor(sb, index);"
True,src/test/java/com/fasterxml/jackson/test/BaseTest.java,src/test/java/com/fasterxml/jackson/test/BaseTest.java,429,return sb.toString();

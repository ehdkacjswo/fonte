is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,37,"/* Construction, related"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,44,* Method that can be called to get a node that is guaranteed
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,45,* not to allow changing of this node through mutators on
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,46,* this node or any of its children.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,47,* This means it can either make a copy of this node (and all
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,48,"* mutable children and grand children nodes), or node itself"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,49,* if it is immutable.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,50,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,51,* Note: return type is guaranteed to have same type as the
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,52,* node method is called on; which is why method is declared
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,53,* with local generic type.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,55,* @since 2.0
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,57,* @return Node that is either a copy of this node (and all non-leaf
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,58,"*    children); or, for immutable leaf nodes, node itself."
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,60,public abstract <T extends JsonNode> T deepCopy();
False,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,182, returns native type that node uses to store the numeric
False,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,183, value.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,207,* returns native type that node uses to store the numeric value;
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,208,* otherwise returns null.
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,210,"* @return Type of number contained, if any; or null if node does not"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,211,*  contain numeric value.
False,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,185,ublic abstract JsonParser.NumberType getNumberType();
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,213,public abstract JsonParser.NumberType numberType();
False,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,225,ublic String getTextValue() { return null; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,253,public String textValue() { return null; }
False,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,237,ublic byte[] getBinaryValue() throws IOException
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,265,public byte[] binaryValue() throws IOException
False,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,250,ublic boolean getBooleanValue() { return false; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,278,public boolean booleanValue() { return false; }
False,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,260,ublic Number getNumberValue() { return null; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,288,public Number numberValue() { return null; }
False,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,272,ublic int getIntValue() { return 0; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,300,public int intValue() { return 0; }
False,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,274,ublic long getLongValue() { return 0L; }
False,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,275,ublic double getDoubleValue() { return 0.0; }
False,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,276,ublic BigDecimal getDecimalValue() { return BigDecimal.ZERO; }
False,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,277,ublic BigInteger getBigIntegerValue() { return BigInteger.ZERO; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,302,public long longValue() { return 0L; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,303,public double doubleValue() { return 0.0; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,304,public BigDecimal decimalValue() { return BigDecimal.ZERO; }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,305,public BigInteger bigIntegerValue() { return BigInteger.ZERO; }
False,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,596,ublic final Iterator<JsonNode> iterator() { return getElements(); }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,624,public final Iterator<JsonNode> iterator() { return elements(); }
False,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,604,ublic Iterator<JsonNode> getElements() { return NO_NODES.iterator(); }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,632,public Iterator<JsonNode> elements() { return NO_NODES.iterator(); }
False,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,610,ublic Iterator<String> getFieldNames() { return NO_STRINGS.iterator(); }
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,638,public Iterator<String> fieldNames() { return NO_STRINGS.iterator(); }
False,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,616,"ublic Iterator<Map.Entry<String, JsonNode>> getFields() {"
True,src/main/java/com/fasterxml/jackson/core/JsonNode.java,src/main/java/com/fasterxml/jackson/core/JsonNode.java,644,"public Iterator<Map.Entry<String, JsonNode>> fields() {"
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,147,/* Basic accessors
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,152,* Accessor for finding {@link JsonFactory} codec will use.
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,154,* @since 2.0
True,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,src/main/java/com/fasterxml/jackson/core/ObjectCodec.java,156,public abstract JsonFactory getJsonFactory();

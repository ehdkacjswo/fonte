is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1176,"objectCodec, _rootByteSymbols, _rootCharSymbols,"
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1177,"sEnabled(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES),"
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1178,sEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES));
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1176,"_objectCodec, _rootByteSymbols, _rootCharSymbols, _factoryFeatures);"
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1195,"rootCharSymbols.makeChild(isEnabled(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES),"
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1196,sEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES)));
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1193,_rootCharSymbols.makeChild(_factoryFeatures));
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1208,"rootCharSymbols.makeChild(isEnabled(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES),"
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1209,"sEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES)),"
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1210,"ata, offset, offset+len,"
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1211,ecyclable);
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1205,"_rootCharSymbols.makeChild(_factoryFeatures),"
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1206,"data, offset, offset+len, recyclable);"
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1228,"objectCodec, _rootByteSymbols, _rootCharSymbols,"
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1229,"sEnabled(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES),"
False,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1230,sEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES));
True,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,src/main/java/com/fasterxml/jackson/core/JsonFactory.java,1223,"_objectCodec, _rootByteSymbols, _rootCharSymbols, _factoryFeatures);"
False,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,213,"oolean canonicalize, boolean intern) throws IOException"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,213,int factoryFeatures) throws IOException
False,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,221,f (canonicalize) {
False,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,222,"ytesToNameCanonicalizer can = rootByteSymbols.makeChild(canonicalize, intern);"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,221,if (JsonFactory.Feature.CANONICALIZE_FIELD_NAMES.enabledIn(factoryFeatures)) {
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,222,BytesToNameCanonicalizer can = rootByteSymbols.makeChild(factoryFeatures);
False,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,228,"ootCharSymbols.makeChild(canonicalize, intern));"
True,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java,228,rootCharSymbols.makeChild(factoryFeatures));
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,6,import com.fasterxml.jackson.core.JsonFactory;
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,337, @param intern Whether canonical symbol Strings should be interned
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,338,   or not
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,340,"ublic BytesToNameCanonicalizer makeChild(boolean canonicalize, boolean intern) {"
False,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,341,"eturn new BytesToNameCanonicalizer(this, intern, _seed, _tableInfo.get());"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,338,public BytesToNameCanonicalizer makeChild(int flags) {
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,339,"return new BytesToNameCanonicalizer(this, JsonFactory.Feature.INTERN_FIELD_NAMES.enabledIn(flags),"
True,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java,340,"_seed, _tableInfo.get());"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,4,import java.util.BitSet;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,6,import com.fasterxml.jackson.core.JsonFactory;
False,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,47, Note that with versions 2.3 and before used value of 33; but 2.4
False,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,48," changed it to 31 to align with default hash code, to more easily"
False,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,49, detect attempted DoS attacks (since HashMap would fall into it
False,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,50, if we used different hash multiplier).
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,49,"* Note that JDK uses 31; but it seems that 33 produces fewer collisions,"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,50,* at least with tests we have.
False,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,52,ublic final static int HASH_MULT = 31;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,52,public final static int HASH_MULT = 33;
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,205,/* Bit of DoS detection goodness
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,210,* Lazily constructed structure that is used to keep track of
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,211,* collision buckets that have overflowed once: this is used
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,212,* to detect likely attempts at denial-of-service attacks that
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,213,* uses hash collisions.
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,215,* @since 2.4
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,217,protected BitSet _overflows;
False,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,294,"ublic CharsToNameCanonicalizer makeChild(final boolean canonicalize, final boolean intern) {"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,310,public CharsToNameCanonicalizer makeChild(int flags) {
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,321,final boolean canon = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES.enabledIn(flags);
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,322,final boolean intern = canon && JsonFactory.Feature.INTERN_FIELD_NAMES.enabledIn(flags);
False,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,313,"eturn new CharsToNameCanonicalizer(this, canonicalize, intern,"
True,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java,332,"return new CharsToNameCanonicalizer(this, canon, intern,"
False,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,87,"makeChild(true, true);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,87,.makeChild(JsonFactory.Feature.collectDefaults());
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,5,import com.fasterxml.jackson.core.JsonFactory;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,7,"/ 11 3-char snippets that hash to 0xFFFF (with default JDK hashCode() calc),"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,8,/ and which can be combined as
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,9,"/ sequences, like, say, 11x11x11 (1331) 9-character thingies"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,10,inal static String[] CHAR_COLLISION_SNIPPETS_31 = {
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,11,"@~}"", ""@\u007f^"", ""A_}"", ""A`^"","
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,12,"Aa?"", ""B@}"", ""BA^"", ""BB?"","
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,13,"C!}"", ""C\""^"", ""C#?"""
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,16,inal static String[] CHAR_COLLISIONS;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,17,tatic {
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,18,inal String[] SNIPPETS = CHAR_COLLISION_SNIPPETS_31;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,20,inal int len = SNIPPETS.length;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,21,HAR_COLLISIONS = new String[len*len*len];
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,22,nt ix = 0;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,23,or (int i1 = 0; i1 < len; ++i1) {
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,24,or (int i2 = 0; i2 < len; ++i2) {
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,25,or (int i3 = 0; i3 < len; ++i3) {
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,26,HAR_COLLISIONS[ix++] = SNIPPETS[i1]+SNIPPETS[i2] + SNIPPETS[i3];
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,33,ublic void testCharBasedCollisions()
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,35,harsToNameCanonicalizer sym = CharsToNameCanonicalizer.createRoot(0);
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,37,"/ first, verify that we'd get a few collisions..."
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,38,ry {
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,39,nt firstHash = 0;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,40,or (String str : CHAR_COLLISIONS) {
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,41,nt hash = sym.calcHash(str);
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,42,f (firstHash == 0) {
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,43,irstHash = hash;
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,44, else {
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,45,"ssertEquals(firstHash, hash);"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,47,"ym.findSymbol(str.toCharArray(), 0, str.length(), hash);"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,49,"ail(""Should have thrown exception"");"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,50, catch (IllegalStateException e) {
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,51,"erifyException(e, ""exceeds maximum"");"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,52,/ should fail right after addition:
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,53,"ssertEquals(CharsToNameCanonicalizer.MAX_COLL_CHAIN_LENGTH+1, sym.maxCollisionLength());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,54,"ssertEquals(CharsToNameCanonicalizer.MAX_COLL_CHAIN_LENGTH+1, sym.collisionCount());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,55,"/ one ""non-colliding"" entry (head of collision chain), thus:"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,56,"ssertEquals(CharsToNameCanonicalizer.MAX_COLL_CHAIN_LENGTH+2, sym.size());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,82,"* 22-May-2014, tatu: With 33 we now should get 1401; but with"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,83,"   31 bit more, 1858."
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,85,"/        assertEquals(1401, symbols.collisionCount());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,86,"ssertEquals(1858, symbols.collisionCount());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,30,"assertEquals(1401, symbols.collisionCount()); // with 33"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,31,"//        assertEquals(1858, symbols.collisionCount()); // with 31"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,91,"/        assertEquals(4, symbols.maxCollisionLength());"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,92,"ssertEquals(5, symbols.maxCollisionLength());"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,36,"assertEquals(4, symbols.maxCollisionLength()); // 33"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,37,"//        assertEquals(5, symbols.maxCollisionLength()); // 31"
False,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,101,"ytesToNameCanonicalizer.createRoot(33333).makeChild(true, true);"
True,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,46,BytesToNameCanonicalizer.createRoot(33333).makeChild(JsonFactory.Feature.collectDefaults());
True,src/test/java/failing/TestHashCollision.java,src/test/java/failing/TestHashCollision.java,39,// ... only works if we use 31

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,15,* limitations under the License.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,18,package org.apache.commons.codec.binary;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,20,import org.apache.commons.codec.BinaryDecoder;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,21,import org.apache.commons.codec.BinaryEncoder;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,22,import org.apache.commons.codec.DecoderException;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,23,import org.apache.commons.codec.EncoderException;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,26,* Provides Base32 encoding and decoding as defined by RFC 4648.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,28,*                               <b>Initial implementation. API may change. Incomplete.</b>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,30,* <p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,31,* The class can be parameterized in the following manner with various constructors:
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,32,* <ul>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,33,* <li>Line length: Default 76. Line length that aren't multiples of 8 will still essentially end up being multiples of
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,34,* 8 in the encoded data.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,36,"* <li>Line separator: Default is CRLF (""\r\n"")</li>"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,37,* </ul>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,38,* </p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,39,* <p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,40,"* Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,41,"* character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc)."
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,42,* </p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,44,"* @see <a href=""http://www.ietf.org/rfc/rfc4648.txt"">RFC 4648</a>"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,46,* @since 1.5
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,47,* @version $Revision$
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,49,"public class Base32 implements BinaryEncoder, BinaryDecoder {"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,51,private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,53,private static final int DEFAULT_BUFFER_SIZE = 8192;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,56,* BASE32 characters are 5 bits in length.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,57,"* They are formed by taking a block of five octets to form a 40-bit string,"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,58,* which is converted into eight BASE32 characters.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,60,private static final int BITS_PER_ENCODED_CHAR = 5;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,61,private static final int BYTES_PER_UNENCODED_BLOCK = 5;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,62,private static final int BYTES_PER_ENCODED_BLOCK = 8;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,66,*  MIME chunk size per RFC 2045 section 6.8.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,68,* <p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,69,"* The {@value} character limit does not count the trailing CRLF, but counts all other characters, including any"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,70,* equal signs.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,71,* </p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,73,"* @see <a href=""http://www.ietf.org/rfc/rfc2045.txt"">RFC 2045 section 6.8</a>"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,75,public static final int MIME_CHUNK_SIZE = 76;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,78,* PEM chunk size per RFC 1421 section 4.3.2.4.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,80,* <p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,81,"* The {@value} character limit does not count the trailing CRLF, but counts all other characters, including any"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,82,* equal signs.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,83,* </p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,85,"* @see <a href=""http://tools.ietf.org/html/rfc1421"">RFC 1421 section 4.3.2.4</a>"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,87,public static final int PEM_CHUNK_SIZE = 64;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,90,* Chunk separator per RFC 2045 section 2.1.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,92,* <p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,93,* N.B. The next major release may break compatibility and make this field private.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,94,* </p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,96,"* @see <a href=""http://www.ietf.org/rfc/rfc2045.txt"">RFC 2045 section 2.1</a>"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,98,"private static final byte[] CHUNK_SEPARATOR = {'\r', '\n'};"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,101,"* This array is a lookup table that translates 5-bit positive integer index values into their ""Base32 Alphabet"""
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,102,* equivalents as specified in Table 3 of RFC 2045.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,104,private static final byte[] STANDARD_ENCODE_TABLE = {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,105,"'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,106,"'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,107,"'2', '3', '4', '5', '6', '7',"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,111,* Byte used to pad output.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,113,private static final byte PAD = '=';
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,116,"* This array is a lookup table that translates Unicode characters drawn from the ""Base32 Alphabet"" (as specified in"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,117,* Table 3 of RFC 2045) into their 5-bit positive integer equivalents. Characters that are not in the Base32
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,118,* alphabet but fall within the bounds of the array are translated to -1.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,121,private static final byte[] DECODE_TABLE = {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,122,//  0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,123,"-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 00-0f"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,124,"-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 10-1f"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,125,"-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, // 20-2f"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,126,"-1, -1, 26, 27, 28, 29, 30, 31, -1, -1, -1, -1, -1, -1, -1, -1, // 30-3f 2-7"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,127,"-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, // 40-4f A-N"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,128,"15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,                     // 50-5a O-Z"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,131,"/** Mask used to extract 5 bits, used when encoding Base32 bytes */"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,132,private static final int MASK_5BITS = 0x1f;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,134,"/** Mask used to extract 8 bits, used in decoding Base32 bytes */"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,135,private static final int MASK_8BITS = 0xff;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,137,// The static final fields above are used for the original static byte[] methods on Base32.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,138,"// The private member fields below are used with the new streaming approach, which requires"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,139,// some state be preserved between calls of encode() and decode().
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,142,* Encode table to use.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,144,private final byte[] encodeTable;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,147,* Line length for encoding. Not used when decoding. A value of zero or less implies no chunking of the Base32
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,148,* encoded data.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,150,private final int lineLength;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,153,* Line separator for encoding. Not used when decoding. Only used if lineLength > 0.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,155,private final byte[] lineSeparator;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,158,* Convenience variable to help us determine when our buffer is going to run out of room and needs resizing.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,159,* <code>decodeSize = 3 + lineSeparator.length;</code>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,160,* TODO 3?
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,162,private final int decodeSize;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,165,* Convenience variable to help us determine when our buffer is going to run out of room and needs resizing.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,166,* <code>encodeSize = 4 + lineSeparator.length;</code>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,167,* TODO 4? is that BYTES_PER_ENCODED_BLOCK? - probably yes
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,169,private final int encodeSize;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,172,* Buffer for streaming.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,174,private byte[] buffer;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,177,* Position where next character should be written in the buffer.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,179,private int pos;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,182,* Position where next character should be read from the buffer.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,184,private int readPos;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,187,* Variable tracks how many characters have been written to the current line. Only used when encoding. We use it to
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,188,* make sure each encoded line never goes beyond lineLength (if lineLength > 0).
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,190,private int currentLinePos;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,193,"* Writes to the buffer only occur after every 5 reads when encoding, and every 8 reads when decoding. This variable"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,194,* helps track that.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,196,private int modulus;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,199,"* Boolean flag to indicate the EOF has been reached. Once EOF has been reached, this Base32 object becomes useless,"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,200,* and must be thrown away.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,202,private boolean eof;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,205,* Place holder for the 8 bytes we're dealing with for our Base32 logic. Bitwise operations store and extract the
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,206,* Base32 encoding or decoding from this variable.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,208,private long x; // 64 bits; enough for 40 bits i.e. 5 octets unencoded
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,211,* Creates a Base32 codec used for decoding and encoding.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,212,* <p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,213,* When encoding the line length is 0 (no chunking).
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,214,* </p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,217,public Base32() {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,218,this(0);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,222,* Creates a Base32 codec used for decoding and encoding.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,223,* <p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,224,"* When encoding the line length is given in the constructor, the line separator is CRLF."
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,225,* </p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,227,* @param lineLength
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,228,*            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 8).
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,229,"*            If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding."
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,231,public Base32(int lineLength) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,232,"this(lineLength, CHUNK_SEPARATOR);"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,236,* Creates a Base32 codec used for decoding and encoding.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,237,* <p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,238,* When encoding the line length and line separator are given in the constructor.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,239,* </p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,240,* <p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,241,* Line lengths that aren't multiples of 8 will still essentially end up being multiples of 8 in the encoded data.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,242,* </p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,244,* @param lineLength
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,245,*            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 8).
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,246,"*            If lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding."
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,247,* @param lineSeparator
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,248,*            Each line of encoded data will end with this sequence of bytes.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,249,* @throws IllegalArgumentException
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,250,*             The provided lineSeparator included some Base32 characters. That's not going to work!
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,252,"public Base32(int lineLength, byte[] lineSeparator) {"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,253,if (lineSeparator == null) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,254,lineLength = 0;  // disable chunk-separating
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,255,lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,257,this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,258,this.lineSeparator = new byte[lineSeparator.length];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,259,"System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,260,if (lineLength > 0) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,261,this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,262,} else {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,263,this.encodeSize = BYTES_PER_ENCODED_BLOCK;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,265,this.decodeSize = this.encodeSize - 1;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,266,if (containsBase32Byte(lineSeparator)) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,267,String sep = StringUtils.newStringUtf8(lineSeparator);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,268,"throw new IllegalArgumentException(""lineSeperator must not contain Base32 characters: ["" + sep + ""]"");"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,270,"this.encodeTable = STANDARD_ENCODE_TABLE; // TODO - encodeTable could perhaps be removed, but might be useful if merging with Base64"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,274,* Returns true if this Base32 object has buffered data for reading.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,276,* @return true if there is Base32 object still available for reading.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,278,boolean hasData() {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,279,return this.buffer != null;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,283,* Returns the amount of buffered data available for reading.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,285,* @return The amount of buffered data available for reading.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,287,int avail() {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,288,return buffer != null ? pos - readPos : 0;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,291,/** Doubles our buffer. */
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,292,private void resizeBuffer() {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,293,if (buffer == null) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,294,buffer = new byte[DEFAULT_BUFFER_SIZE];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,295,pos = 0;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,296,readPos = 0;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,297,} else {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,298,byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,299,"System.arraycopy(buffer, 0, b, 0, buffer.length);"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,300,buffer = b;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,305,"* Extracts buffered data into the provided byte[] array, starting at position bPos, up to a maximum of bAvail"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,306,* bytes. Returns how many bytes were actually extracted.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,308,* @param b
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,309,*            byte[] array to extract the buffered data into.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,310,* @param bPos
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,311,*            position in byte[] array to start extraction at.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,312,* @param bAvail
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,313,*            amount of bytes we're allowed to extract. We may extract fewer (if fewer are available).
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,314,* @return The number of bytes successfully extracted into the provided byte[] array.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,316,"int readResults(byte[] b, int bPos, int bAvail) {"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,317,if (buffer != null) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,318,"int len = Math.min(avail(), bAvail);"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,319,"System.arraycopy(buffer, readPos, b, bPos, len);"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,320,readPos += len;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,321,if (readPos >= pos) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,322,buffer = null;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,324,return len;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,326,return eof ? -1 : 0;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,330,* <p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,331,"* Encodes all of the provided data, starting at inPos, for inAvail bytes. Must be called at least twice: once with"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,332,"* the data to encode, and once with inAvail set to ""-1"" to alert encoder that EOF has been reached, so flush last"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,333,* remaining bytes (if not multiple of 5).
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,334,* </p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,336,* @param in
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,337,*            byte[] array of binary data to Base32 encode.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,338,* @param inPos
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,339,*            Position to start reading data from.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,340,* @param inAvail
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,341,*            Amount of bytes available from input for encoding.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,343,"void encode(byte[] in, int inPos, int inAvail) {"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,344,if (eof) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,345,return;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,347,// inAvail < 0 is how we're informed of EOF in the underlying data we're
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,348,// encoding.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,349,if (inAvail < 0) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,350,eof = true;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,351,if (buffer == null || buffer.length - pos < encodeSize) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,352,resizeBuffer();
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,354,switch (modulus) { // % 5
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,355,case 1 : // Only 1 octet; take top 5 bits then remainder
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,356,buffer[pos++] = encodeTable[(int)(x >> 3) & MASK_5BITS]; // 8-1*5 = 3
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,357,buffer[pos++] = encodeTable[(int)(x << 2) & MASK_5BITS]; // 5-3=2
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,358,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,359,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,360,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,361,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,362,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,363,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,364,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,366,case 2 : // 2 octets = 16 bits to use
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,367,buffer[pos++] = encodeTable[(int)(x >> 11) & MASK_5BITS]; // 16-1*5 = 11
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,368,buffer[pos++] = encodeTable[(int)(x >>  6) & MASK_5BITS]; // 16-2*5 = 6
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,369,buffer[pos++] = encodeTable[(int)(x >>  1) & MASK_5BITS]; // 16-3*5 = 1
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,370,buffer[pos++] = encodeTable[(int)(x <<  4) & MASK_5BITS]; // 5-1 = 4
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,371,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,372,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,373,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,374,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,375,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,376,case 3 : // 3 octets = 24 bits to use
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,377,buffer[pos++] = encodeTable[(int)(x >> 19) & MASK_5BITS]; // 24-1*5 = 19
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,378,buffer[pos++] = encodeTable[(int)(x >> 14) & MASK_5BITS]; // 24-2*5 = 14
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,379,buffer[pos++] = encodeTable[(int)(x >>  9) & MASK_5BITS]; // 24-3*5 = 9
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,380,buffer[pos++] = encodeTable[(int)(x >>  4) & MASK_5BITS]; // 24-4*5 = 4
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,381,buffer[pos++] = encodeTable[(int)(x <<  1) & MASK_5BITS]; // 5-4 = 1
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,382,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,383,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,384,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,385,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,386,case 4 : // 4 octets = 32 bits to use
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,387,buffer[pos++] = encodeTable[(int)(x >> 27) & MASK_5BITS]; // 32-1*5 = 27
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,388,buffer[pos++] = encodeTable[(int)(x >> 22) & MASK_5BITS]; // 32-2*5 = 22
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,389,buffer[pos++] = encodeTable[(int)(x >> 17) & MASK_5BITS]; // 32-3*5 = 17
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,390,buffer[pos++] = encodeTable[(int)(x >> 12) & MASK_5BITS]; // 32-4*5 = 12
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,391,buffer[pos++] = encodeTable[(int)(x >>  7) & MASK_5BITS]; // 32-5*5 =  7
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,392,buffer[pos++] = encodeTable[(int)(x >>  2) & MASK_5BITS]; // 32-6*5 =  2
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,393,buffer[pos++] = encodeTable[(int)(x <<  3) & MASK_5BITS]; // 5-2 = 3
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,394,buffer[pos++] = PAD;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,395,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,397,"// Don't want to append the CRLF two times in a row, so make sure previous"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,398,// character is not from CRLF!
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,399,byte b = lineSeparator[lineSeparator.length - 1];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,400,if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,401,"System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,402,pos += lineSeparator.length;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,404,} else {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,405,for (int i = 0; i < inAvail; i++) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,406,if (buffer == null || buffer.length - pos < encodeSize) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,407,resizeBuffer();
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,409,modulus = (++modulus) % BITS_PER_ENCODED_CHAR;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,410,int b = in[inPos++];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,411,if (b < 0) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,412,b += 256;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,414,x = (x << 8) + b; // ??
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,415,if (0 == modulus) { // we have enough bytes to create our output
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,416,buffer[pos++] = encodeTable[(int)(x >> 35) & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,417,buffer[pos++] = encodeTable[(int)(x >> 30) & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,418,buffer[pos++] = encodeTable[(int)(x >> 25) & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,419,buffer[pos++] = encodeTable[(int)(x >> 20) & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,420,buffer[pos++] = encodeTable[(int)(x >> 15) & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,421,buffer[pos++] = encodeTable[(int)(x >> 10) & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,422,buffer[pos++] = encodeTable[(int)(x >> 5) & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,423,buffer[pos++] = encodeTable[(int)x & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,424,currentLinePos += BYTES_PER_ENCODED_BLOCK;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,425,if (lineLength > 0 && lineLength <= currentLinePos) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,426,"System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,427,pos += lineSeparator.length;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,428,currentLinePos = 0;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,436,* <p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,437,"* Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,438,"* with the data to decode, and once with inAvail set to ""-1"" to alert decoder that EOF has been reached. The ""-1"""
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,439,"* call is not necessary when decoding, but it doesn't hurt, either."
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,440,* </p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,441,* <p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,442,"* Ignores all non-Base32 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,443,"* silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,444,* garbage-out philosophy: it will not check the provided data for validity.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,445,* </p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,447,* @param in
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,448,*            byte[] array of ascii data to Base32 decode.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,449,* @param inPos
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,450,*            Position to start reading data from.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,451,* @param inAvail
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,452,*            Amount of bytes available from input for encoding.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,454,"* Output is written to {@link #buffer} as 8-bit octets, using {@link pos} as the buffer position"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,456,"void decode(byte[] in, int inPos, int inAvail) { // package protected for access from I/O streams"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,457,if (eof) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,458,return;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,460,if (inAvail < 0) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,461,eof = true;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,463,for (int i = 0; i < inAvail; i++) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,464,if (buffer == null || buffer.length - pos < decodeSize) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,465,resizeBuffer();
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,467,byte b = in[inPos++];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,468,if (b == PAD) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,469,// We're done.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,470,eof = true;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,471,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,472,} else {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,473,if (b >= 0 && b < DECODE_TABLE.length) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,474,int result = DECODE_TABLE[b];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,475,if (result >= 0) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,476,modulus = (++modulus) % BYTES_PER_ENCODED_BLOCK;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,477,x = (x << BITS_PER_ENCODED_CHAR) + result; // collect decoded bytes
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,478,if (modulus == 0) { // we can output the 5 bytes
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,479,buffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,480,buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,481,buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,482,buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,483,buffer[pos++] = (byte) (x & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,490,// Two forms of EOF as far as Base32 decoder is concerned: actual
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,491,// EOF (-1) and first time '=' character is encountered in stream.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,492,// This approach makes the '=' padding characters completely optional.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,493,if (eof && modulus != 0) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,494,if (buffer == null || buffer.length - pos < decodeSize) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,495,resizeBuffer();
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,498,"//  we ignore partial bytes, i.e. only multiples of 8 count"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,499,switch (modulus) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,500,"case 2 : // 10 bits, drop 2 and output one byte"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,501,buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,502,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,503,"case 3 : // 15 bits, drop 7 and output 1 byte"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,504,buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,505,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,506,case 4 : // 20 bits = 2*8 + 4
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,507,x = x >> 4; // drop 4 bits
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,508,buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,509,buffer[pos++] = (byte) ((x) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,510,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,511,case 5 : // 25bits = 3*8 + 1
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,512,x = x >> 1;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,513,buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,514,buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,515,buffer[pos++] = (byte) ((x) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,516,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,517,case 6 : // 30bits = 3*8 + 6
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,518,x = x >> 6;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,519,buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,520,buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,521,buffer[pos++] = (byte) ((x) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,522,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,523,case 7 : // 35 = 4*8 +3
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,524,x = x >> 3;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,525,buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,526,buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,527,buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,528,buffer[pos++] = (byte) ((x) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,529,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,535,* Returns whether or not the <code>octet</code> is in the Base32 alphabet.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,537,* @param octet
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,538,*            The value to test
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,539,"* @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise."
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,541,public static boolean isBase32(byte octet) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,542,return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,546,* Tests a given String to see if it contains only valid characters within the Base32 alphabet. Currently the
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,547,* method treats whitespace as valid.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,549,* @param base32
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,550,*            String to test
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,551,* @return <code>true</code> if all characters in the String are valid characters in the Base32 alphabet or if
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,552,"*         the String is empty; <code>false</code>, otherwise"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,554,public static boolean isBase32(String base32) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,555,return isBase32(StringUtils.getBytesUtf8(base32));
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,559,* Tests a given byte array to see if it contains only valid characters within the Base32 alphabet. Currently the
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,560,* method treats whitespace as valid.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,562,* @param arrayOctet
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,563,*            byte array to test
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,564,* @return <code>true</code> if all bytes are valid characters in the Base32 alphabet or if the byte array is empty;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,565,"*         <code>false</code>, otherwise"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,567,public static boolean isBase32(byte[] arrayOctet) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,568,for (int i = 0; i < arrayOctet.length; i++) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,569,if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,570,return false;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,573,return true;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,577,* Tests a given byte array to see if it contains only valid characters within the Base32 alphabet.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,578,* Does not allow white-space.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,580,* @param arrayOctet
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,581,*            byte array to test
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,582,* @return <code>true</code> if any byte is a valid character in the Base32 alphabet; <code>false</code> otherwise
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,584,private static boolean containsBase32Byte(byte[] arrayOctet) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,585,for (int i = 0; i < arrayOctet.length; i++) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,586,if (isBase32(arrayOctet[i])) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,587,return true;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,590,return false;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,594,* Encodes binary data using the Base32 algorithm but does not chunk the output.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,596,* @param binaryData
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,597,*            binary data to encode
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,598,* @return byte[] containing Base32 characters in their UTF-8 representation.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,600,public static byte[] encodeBase32(byte[] binaryData) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,601,"return encodeBase32(binaryData, false);"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,605,* Encodes binary data using the Base32 algorithm but does not chunk the output.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,607,* @param binaryData
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,608,*            binary data to encode
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,609,* @return String containing Base32 characters.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,611,public static String encodeBase32String(byte[] binaryData) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,612,"return StringUtils.newStringUtf8(encodeBase32(binaryData, false));"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,616,* Encodes binary data using the Base32 algorithm and chunks the encoded output into 76 character blocks
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,618,* @param binaryData
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,619,*            binary data to encode
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,620,* @return Base32 characters chunked in 76 character blocks
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,622,public static byte[] encodeBase32Chunked(byte[] binaryData) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,623,"return encodeBase32(binaryData, true);"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,627,* Decodes an Object using the Base32 algorithm. This method is provided in order to satisfy the requirements of the
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,628,"* Decoder interface, and will throw a DecoderException if the supplied object is not of type byte[] or String."
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,630,* @param pObject
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,631,*            Object to decode
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,632,* @return An object (of type byte[]) containing the binary data which corresponds to the byte[] or String supplied.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,633,* @throws DecoderException
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,634,*             if the parameter supplied is not of type byte[]
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,636,public Object decode(Object pObject) throws DecoderException {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,637,if (pObject instanceof byte[]) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,638,return decode((byte[]) pObject);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,639,} else if (pObject instanceof String) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,640,return decode((String) pObject);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,641,} else {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,642,"throw new DecoderException(""Parameter supplied to Base32 decode is not a byte[] or a String"");"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,647,* Decodes a String containing characters in the Base32 alphabet.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,649,* @param pArray
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,650,*            A String containing Base32 character data
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,651,* @return a byte array containing binary data
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,652,* @since 1.4
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,654,public byte[] decode(String pArray) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,655,return decode(StringUtils.getBytesUtf8(pArray));
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,659,* Decodes a byte[] containing characters in the Base32 alphabet.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,661,* @param pArray
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,662,*            A byte array containing Base32 character data
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,663,* @return a byte array containing binary data
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,665,public byte[] decode(byte[] pArray) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,666,reset();
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,667,if (pArray == null || pArray.length == 0) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,668,return pArray;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,670,"decode(pArray, 0, pArray.length);"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,671,"decode(pArray, 0, -1); // Notify decoder of EOF."
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,672,byte[] result = new byte[pos];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,673,"readResults(result, 0, result.length);"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,674,return result;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,678,"* Encodes binary data using the Base32 algorithm, optionally chunking the output into 76 character blocks."
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,680,* @param binaryData
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,681,*            Array containing binary data to encode.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,682,* @param isChunked
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,683,*            if <code>true</code> this encoder will chunk the Base32 output into 76 character blocks
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,684,* @return Base32-encoded data.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,685,* @throws IllegalArgumentException
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,686,*             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,688,"public static byte[] encodeBase32(byte[] binaryData, boolean isChunked) {"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,689,"return encodeBase32(binaryData, isChunked, Integer.MAX_VALUE);"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,693,"* Encodes binary data using the Base32 algorithm, optionally chunking the output into 76 character blocks."
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,695,* @param binaryData
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,696,*            Array containing binary data to encode.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,697,* @param isChunked
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,698,*            if <code>true</code> this encoder will chunk the Base32 output into 76 character blocks
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,699,* @param maxResultSize
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,700,*            The maximum result size to accept.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,701,* @return Base32-encoded data.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,702,* @throws IllegalArgumentException
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,703,*             Thrown when the input array needs an output array bigger than maxResultSize
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,704,* @since 1.4
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,706,"public static byte[] encodeBase32(byte[] binaryData, boolean isChunked, int maxResultSize) {"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,707,if (binaryData == null || binaryData.length == 0) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,708,return binaryData;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,711,"long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,712,if (len > maxResultSize) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,713,"throw new IllegalArgumentException(""Input array too big, the output array would be bigger ("" +"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,714,len +
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,715,""") than the specified maxium size of "" +"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,716,maxResultSize);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,719,"Base32 b64 = isChunked ? new Base32(MIME_CHUNK_SIZE, CHUNK_SEPARATOR) : new Base32(0, CHUNK_SEPARATOR);"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,720,return b64.encode(binaryData);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,724,* Decodes a Base32 String into octets
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,726,* @param base32String
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,727,*            String containing Base32 data
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,728,* @return Array containing decoded data.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,730,public static byte[] decodeBase32(String base32String) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,731,return new Base32().decode(base32String);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,735,* Decodes Base32 data into octets
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,737,* @param base32Data
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,738,*            Byte array containing Base32 data
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,739,* @return Array containing decoded data.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,741,public static byte[] decodeBase32(byte[] base32Data) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,742,return new Base32().decode(base32Data);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,746,* Checks if a byte value is whitespace or not.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,748,* @param byteToCheck
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,749,*            the byte to check
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,750,"* @return true if byte is whitespace, false otherwise"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,752,private static boolean isWhiteSpace(byte byteToCheck) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,753,switch (byteToCheck) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,754,case ' ' :
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,755,case '\n' :
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,756,case '\r' :
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,757,case '\t' :
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,758,return true;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,759,default :
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,760,return false;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,764,// Implementation of the Encoder Interface
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,767,* Encodes an Object using the Base32 algorithm. This method is provided in order to satisfy the requirements of the
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,768,"* Encoder interface, and will throw an EncoderException if the supplied object is not of type byte[]."
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,770,* @param pObject
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,771,*            Object to encode
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,772,* @return An object (of type byte[]) containing the Base32 encoded data which corresponds to the byte[] supplied.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,773,* @throws EncoderException
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,774,*             if the parameter supplied is not of type byte[]
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,776,public Object encode(Object pObject) throws EncoderException {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,777,if (!(pObject instanceof byte[])) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,778,"throw new EncoderException(""Parameter supplied to Base32 encode is not a byte[]"");"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,780,return encode((byte[]) pObject);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,784,"* Encodes a byte[] containing binary data, into a String containing characters in the Base32 alphabet."
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,786,* @param pArray
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,787,*            a byte array containing binary data
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,788,* @return A String containing only Base32 character data
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,790,public String encodeToString(byte[] pArray) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,791,return StringUtils.newStringUtf8(encode(pArray));
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,795,"* Encodes a byte[] containing binary data, into a byte[] containing characters in the Base32 alphabet."
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,797,* @param pArray
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,798,*            a byte array containing binary data
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,799,* @return A byte array containing only Base32 character data
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,801,public byte[] encode(byte[] pArray) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,802,reset();
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,803,if (pArray == null || pArray.length == 0) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,804,return pArray;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,806,"encode(pArray, 0, pArray.length);"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,807,"encode(pArray, 0, -1); // Notify encoder of EOF."
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,808,byte[] buf = new byte[pos - readPos];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,809,"readResults(buf, 0, buf.length);"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,810,return buf;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,814,* Pre-calculates the amount of space needed to Base32-encode the supplied array.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,816,* @param pArray byte[] array which will later be encoded
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,817,* @param chunkSize line-length of the output (<= 0 means no chunking) between each
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,818,*        chunkSeparator (e.g. CRLF).
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,819,* @param chunkSeparator the sequence of bytes used to separate chunks of output (e.g. CRLF).
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,821,* @return amount of space needed to encoded the supplied array.  Returns
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,822,*         a long since a max-len array will require Integer.MAX_VALUE + 33%.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,824,"private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,825,// Base32 always encodes to multiples of 8 (BYTES_PER_ENCODED_CHUNK).
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,826,chunkSize = (chunkSize / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,828,long len = (pArray.length * BYTES_PER_ENCODED_BLOCK) / BYTES_PER_UNENCODED_BLOCK;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,829,long mod = len % BYTES_PER_ENCODED_BLOCK;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,830,if (mod != 0) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,831,len += BYTES_PER_ENCODED_BLOCK - mod;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,833,if (chunkSize > 0) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,834,boolean lenChunksPerfectly = len % chunkSize == 0;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,835,len += (len / chunkSize) * chunkSeparator.length;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,836,if (!lenChunksPerfectly) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,837,len += chunkSeparator.length;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,840,return len;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,844,* Resets this Base32 object to its initial newly constructed state.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,846,private void reset() {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,847,buffer = null;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,848,pos = 0;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,849,readPos = 0;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,850,currentLinePos = 0;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,851,modulus = 0;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,852,eof = false;

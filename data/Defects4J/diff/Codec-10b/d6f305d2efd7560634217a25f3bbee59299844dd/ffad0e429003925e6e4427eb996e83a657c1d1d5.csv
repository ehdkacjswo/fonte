is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,49,rivate static final int BYTES_PER_UNENCODED_BLOCK = 5;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,50,private static final int BYTES_PER_UNENCODED_BLOCK = 5;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,60," This array is a lookup table that translates 5-bit positive integer index values into their ""Base32 Alphabet"""
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,61, equivalents as specified in Table 3 of RFC 2045.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,63,rivate static final byte[] BASE32_ENCODE_TABLE = {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,64,"A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,65,"N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,66,"2', '3', '4', '5', '6', '7',"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,70," This array is a lookup table that translates 5-bit positive integer index values into their ""Base32 Hex Alphabet"""
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,71, equivalents as specified in Table 3 of RFC 2045.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,73,rivate static final byte[] BASE32HEX_ENCODE_TABLE = {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,74,"0', '1', '2', '3', '4', '5', '6', '7', '8', '9',"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,75,"A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,76,"N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,85,rivate static final byte[] BASE32_DECODE_TABLE = {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,65,private static final byte[] DECODE_TABLE = {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,76,"* This array is a lookup table that translates 5-bit positive integer index values into their ""Base32 Alphabet"""
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,77,* equivalents as specified in Table 3 of RFC 2045.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,79,private static final byte[] ENCODE_TABLE = {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,80,"'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,81,"'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,82,"'2', '3', '4', '5', '6', '7',"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,101,rivate static final byte[] BASE32HEX_DECODE_TABLE = {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,91,private static final byte[] HEX_DECODE_TABLE = {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,102,"* This array is a lookup table that translates 5-bit positive integer index values into their ""Base32 Hex Alphabet"""
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,103,* equivalents as specified in Table 3 of RFC 2045.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,105,private static final byte[] HEX_ENCODE_TABLE = {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,106,"'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,107,"'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,108,"'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,119, Encode table to use.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,119,* Place holder for the bytes we're dealing with for our based logic.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,120,* Bitwise operations store and extract the encoding or decoding from this variable.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,121,rivate final byte[] encodeTable;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,122,private long bitWorkArea;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,124, Decode table to use.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,125,* Convenience variable to help us determine when our buffer is going to run out of room and needs resizing.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,126,* <code>decodeSize = {@link BYTES_PER_ENCODED_BLOCK} - 1 + lineSeparator.length;</code>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,126,rivate final byte[] decodeTable;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,128,private final int decodeSize;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,129, Line separator for encoding. Not used when decoding. Only used if lineLength > 0.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,131,* Decode table to use.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,131,rivate final byte[] lineSeparator;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,133,private final byte[] decodeTable;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,135, <code>decodeSize = {@link BYTES_PER_ENCODED_BLOCK} - 1 + lineSeparator.length;</code>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,137,* <code>encodeSize = {@link BYTES_PER_ENCODED_BLOCK} + lineSeparator.length;</code>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,137,rivate final int decodeSize;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,139,private final int encodeSize;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,140, Convenience variable to help us determine when our buffer is going to run out of room and needs resizing.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,141, <code>encodeSize = {@link BYTES_PER_ENCODED_BLOCK} + lineSeparator.length;</code>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,142,* Encode table to use.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,143,rivate final int encodeSize;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,144,private final byte[] encodeTable;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,146, Place holder for the bytes we're dealing with for our based logic.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,147, Bitwise operations store and extract the encoding or decoding from this variable.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,147,* Line separator for encoding. Not used when decoding. Only used if lineLength > 0.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,149,rivate long bitWorkArea;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,149,private final byte[] lineSeparator;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,232,his.encodeTable = BASE32HEX_ENCODE_TABLE;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,233,his.decodeTable = BASE32HEX_DECODE_TABLE;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,232,this.encodeTable = HEX_ENCODE_TABLE;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,233,this.decodeTable = HEX_DECODE_TABLE;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,235,his.encodeTable = BASE32_ENCODE_TABLE;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,236,his.decodeTable = BASE32_DECODE_TABLE;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,235,this.encodeTable = ENCODE_TABLE;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,236,this.decodeTable = DECODE_TABLE;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,258, Returns whether or not the <code>octet</code> is in the Base32 alphabet.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,258,* <p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,259,"* Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,260,"* with the data to decode, and once with inAvail set to ""-1"" to alert decoder that EOF has been reached. The ""-1"""
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,261,"* call is not necessary when decoding, but it doesn't hurt, either."
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,262,* </p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,263,* <p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,264,"* Ignores all non-Base32 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,265,"* silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,266,* garbage-out philosophy: it will not check the provided data for validity.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,267,* </p>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,260, @param octet
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,261,            The value to test
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,262, @return <code>true</code> if the value is defined in the the Base32 alphabet <code>false</code> otherwise.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,269,* @param in
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,270,*            byte[] array of ascii data to Base32 decode.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,271,* @param inPos
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,272,*            Position to start reading data from.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,273,* @param inAvail
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,274,*            Amount of bytes available from input for encoding.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,276,"* Output is written to {@link #buffer} as 8-bit octets, using {@link pos} as the buffer position"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,264,ublic boolean isInAlphabet(byte octet) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,265,eturn (octet >= 0 && octet < decodeTable.length && decodeTable[octet] != -1);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,278,"void decode(byte[] in, int inPos, int inAvail) { // package protected for access from I/O streams"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,279,if (eof) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,280,return;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,282,if (inAvail < 0) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,283,eof = true;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,285,for (int i = 0; i < inAvail; i++) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,286,byte b = in[inPos++];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,287,if (b == PAD) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,288,// We're done.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,289,eof = true;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,290,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,291,} else {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,292,ensureBufferSize(decodeSize);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,293,if (b >= 0 && b < this.decodeTable.length) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,294,int result = this.decodeTable[b];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,295,if (result >= 0) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,296,modulus = (modulus+1) % BYTES_PER_ENCODED_BLOCK;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,297,bitWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + result; // collect decoded bytes
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,298,if (modulus == 0) { // we can output the 5 bytes
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,299,buffer[pos++] = (byte) ((bitWorkArea >> 32) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,300,buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,301,buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,302,buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,303,buffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,310,// Two forms of EOF as far as Base32 decoder is concerned: actual
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,311,// EOF (-1) and first time '=' character is encountered in stream.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,312,// This approach makes the '=' padding characters completely optional.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,313,"if (eof && modulus >= 2) { // if modulus < 2, nothing to do"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,314,ensureBufferSize(decodeSize);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,316,"//  we ignore partial bytes, i.e. only multiples of 8 count"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,317,switch (modulus) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,318,"case 2 : // 10 bits, drop 2 and output one byte"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,319,buffer[pos++] = (byte) ((bitWorkArea >> 2) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,320,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,321,"case 3 : // 15 bits, drop 7 and output 1 byte"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,322,buffer[pos++] = (byte) ((bitWorkArea >> 7) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,323,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,324,case 4 : // 20 bits = 2*8 + 4
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,325,bitWorkArea = bitWorkArea >> 4; // drop 4 bits
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,326,buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,327,buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,328,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,329,case 5 : // 25bits = 3*8 + 1
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,330,bitWorkArea = bitWorkArea >> 1;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,331,buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,332,buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,333,buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,334,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,335,case 6 : // 30bits = 3*8 + 6
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,336,bitWorkArea = bitWorkArea >> 6;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,337,buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,338,buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,339,buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,340,break;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,341,case 7 : // 35 = 4*8 +3
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,342,bitWorkArea = bitWorkArea >> 3;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,343,buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,344,buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,345,buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,346,buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,347,break;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,374, <p>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,375," Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,376," with the data to decode, and once with inAvail set to ""-1"" to alert decoder that EOF has been reached. The ""-1"""
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,377," call is not necessary when decoding, but it doesn't hurt, either."
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,378, </p>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,379, <p>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,380," Ignores all non-Base32 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,381," silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,382, garbage-out philosophy: it will not check the provided data for validity.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,383, </p>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,458,* Returns whether or not the <code>octet</code> is in the Base32 alphabet.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,385, @param in
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,386,            byte[] array of ascii data to Base32 decode.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,387, @param inPos
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,388,            Position to start reading data from.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,389, @param inAvail
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,390,            Amount of bytes available from input for encoding.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,392," Output is written to {@link #buffer} as 8-bit octets, using {@link pos} as the buffer position"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,460,* @param octet
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,461,*            The value to test
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,462,* @return <code>true</code> if the value is defined in the the Base32 alphabet <code>false</code> otherwise.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,394,"oid decode(byte[] in, int inPos, int inAvail) { // package protected for access from I/O streams"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,395,f (eof) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,396,eturn;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,398,f (inAvail < 0) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,399,of = true;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,401,or (int i = 0; i < inAvail; i++) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,402,yte b = in[inPos++];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,403,f (b == PAD) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,404,/ We're done.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,405,of = true;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,406,reak;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,407, else {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,408,nsureBufferSize(decodeSize);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,409,f (b >= 0 && b < this.decodeTable.length) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,410,nt result = this.decodeTable[b];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,411,f (result >= 0) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,412,odulus = (modulus+1) % BYTES_PER_ENCODED_BLOCK;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,413,itWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + result; // collect decoded bytes
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,414,f (modulus == 0) { // we can output the 5 bytes
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,415,uffer[pos++] = (byte) ((bitWorkArea >> 32) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,416,uffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,417,uffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,418,uffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,419,uffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,426,/ Two forms of EOF as far as Base32 decoder is concerned: actual
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,427,/ EOF (-1) and first time '=' character is encountered in stream.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,428,/ This approach makes the '=' padding characters completely optional.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,429,"f (eof && modulus >= 2) { // if modulus < 2, nothing to do"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,430,nsureBufferSize(decodeSize);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,432,"/  we ignore partial bytes, i.e. only multiples of 8 count"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,433,witch (modulus) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,434,"ase 2 : // 10 bits, drop 2 and output one byte"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,435,uffer[pos++] = (byte) ((bitWorkArea >> 2) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,436,reak;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,437,"ase 3 : // 15 bits, drop 7 and output 1 byte"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,438,uffer[pos++] = (byte) ((bitWorkArea >> 7) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,439,reak;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,440,ase 4 : // 20 bits = 2*8 + 4
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,441,itWorkArea = bitWorkArea >> 4; // drop 4 bits
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,442,uffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,443,uffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,444,reak;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,445,ase 5 : // 25bits = 3*8 + 1
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,446,itWorkArea = bitWorkArea >> 1;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,447,uffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,448,uffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,449,uffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,450,reak;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,451,ase 6 : // 30bits = 3*8 + 6
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,452,itWorkArea = bitWorkArea >> 6;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,453,uffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,454,uffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,455,uffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,456,reak;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,457,ase 7 : // 35 = 4*8 +3
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,458,itWorkArea = bitWorkArea >> 3;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,459,uffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,460,uffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,461,uffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,462,uffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,463,reak;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,464,public boolean isInAlphabet(byte octet) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,465,return (octet >= 0 && octet < decodeTable.length && decodeTable[octet] != -1);

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,2,* Copyright 2001-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,14,* limitations under the License.
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,17,package org.apache.commons.codec.net;
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,19,import java.io.UnsupportedEncodingException;
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,20,import org.apache.commons.codec.DecoderException;
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,21,import org.apache.commons.codec.EncoderException;
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,22,import org.apache.commons.codec.StringDecoder;
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,23,import org.apache.commons.codec.StringEncoder;
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,24,import org.apache.commons.codec.binary.Base64;
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,27,* <p>
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,28,"* The ""B"" encoding is identical to the Base64 encoding defined by <a href=""http://www.ietf.org/rfc/rfc1521.txt"">RFC"
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,29,* 1521 </a> and allows a character set to be specified.
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,30,* </p>
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,32,* <p>
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,33,"* <a href=""http://www.ietf.org/rfc/rfc1522.txt"">RFC 1522 </a> describes techniques to allow the encoding of non-ASCII"
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,34,"* text in various portions of a RFC 822 [2] message header, in a manner which is unlikely to confuse existing message"
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,35,* handling software.
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,36,* </p>
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,38,"* @see <a href=""http://www.ietf.org/rfc/rfc1522.txt""> MIME (Multipurpose Internet Mail Extensions) Part Two: Message"
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,39,*          Header Extensions for Non-ASCII Text </a>
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,41,* @author Apache Software Foundation
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,42,* @since 1.3
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,43,"* @version $Id: BCodec.java,v 1.1 2004/03/29 07:59:57 ggregory Exp $"
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,45,"public class BCodec extends RFC1522Codec implements StringEncoder, StringDecoder {"
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,47,* The default charset used for string decoding and encoding.
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,49,private String charset = StringEncodings.UTF8;
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,52,* Default constructor.
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,54,public BCodec() {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,55,super();
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,59,* Constructor which allows for the selection of a default charset
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,61,* @param charset
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,62,*                  the default string charset to use.
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,64,"* @see <a href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE character"
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,65,*          encoding names</a>
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,67,public BCodec(final String charset) {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,68,super();
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,69,this.charset = charset;
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,72,protected String getEncoding() {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,73,"return ""B"";"
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,76,protected byte[] doEncoding(byte[] bytes) throws EncoderException {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,77,if (bytes == null) {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,78,return null;
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,80,return Base64.encodeBase64(bytes);
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,83,protected byte[] doDecoding(byte[] bytes) throws DecoderException {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,84,if (bytes == null) {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,85,return null;
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,87,return Base64.decodeBase64(bytes);
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,91,* Encodes a string into its Base64 form using the specified charset. Unsafe characters are escaped.
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,93,* @param value
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,94,*                  string to convert to Base64 form
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,95,* @param charset
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,96,*                  the charset for pString
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,97,* @return Base64 string
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,99,* @throws EncoderException
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,100,*                  thrown if a failure condition is encountered during the encoding process.
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,102,"public String encode(final String value, final String charset) throws EncoderException {"
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,103,if (value == null) {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,104,return null;
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,106,try {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,107,"return encodeText(value, charset);"
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,108,} catch (UnsupportedEncodingException e) {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,109,throw new EncoderException(e.getMessage());
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,114,* Encodes a string into its Base64 form using the default charset. Unsafe characters are escaped.
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,116,* @param value
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,117,*                  string to convert to Base64 form
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,118,* @return Base64 string
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,120,* @throws EncoderException
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,121,*                  thrown if a failure condition is encountered during the encoding process.
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,123,public String encode(String value) throws EncoderException {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,124,if (value == null) {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,125,return null;
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,127,"return encode(value, getDefaultCharset());"
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,131,* Decodes a Base64 string into its original form. Escaped characters are converted back to their original
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,132,* representation.
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,134,* @param value
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,135,*                  Base64 string to convert into its original form
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,137,* @return original string
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,139,* @throws DecoderException
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,140,*                  A decoder exception is thrown if a failure condition is encountered during the decode process.
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,142,public String decode(String value) throws DecoderException {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,143,if (value == null) {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,144,return null;
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,146,try {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,147,return decodeText(value);
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,148,} catch (UnsupportedEncodingException e) {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,149,throw new DecoderException(e.getMessage());
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,154,* Encodes an object into its Base64 form using the default charset. Unsafe characters are escaped.
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,156,* @param value
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,157,*                  object to convert to Base64 form
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,158,* @return Base64 object
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,160,* @throws EncoderException
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,161,*                  thrown if a failure condition is encountered during the encoding process.
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,163,public Object encode(Object value) throws EncoderException {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,164,if (value == null) {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,165,return null;
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,166,} else if (value instanceof String) {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,167,return encode((String) value);
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,168,} else {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,169,"throw new EncoderException(""Objects of type """
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,170,+ value.getClass().getName()
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,171,"+ "" cannot be encoded using BCodec"");"
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,176,* Decodes a Base64 object into its original form. Escaped characters are converted back to their original
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,177,* representation.
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,179,* @param value
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,180,*                  Base64 object to convert into its original form
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,182,* @return original object
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,184,* @throws DecoderException
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,185,*                  A decoder exception is thrown if a failure condition is encountered during the decode process.
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,187,public Object decode(Object value) throws DecoderException {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,188,if (value == null) {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,189,return null;
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,190,} else if (value instanceof String) {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,191,return decode((String) value);
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,192,} else {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,193,"throw new DecoderException(""Objects of type """
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,194,+ value.getClass().getName()
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,195,"+ "" cannot be decoded using BCodec"");"
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,200,* The default charset used for string decoding and encoding.
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,202,* @return the default string charset.
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,204,public String getDefaultCharset() {
True,src/java/org/apache/commons/codec/net/BCodec.java,src/java/org/apache/commons/codec/net/BCodec.java,205,return this.charset;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,2,* Copyright 2001-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,14,* limitations under the License.
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,17,package org.apache.commons.codec.net;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,19,import java.io.UnsupportedEncodingException;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,20,import java.util.BitSet;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,21,import org.apache.commons.codec.DecoderException;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,22,import org.apache.commons.codec.EncoderException;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,23,import org.apache.commons.codec.StringDecoder;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,24,import org.apache.commons.codec.StringEncoder;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,27,* <p>
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,28,"* The ""Q"" encoding is similar to the Quoted-Printable content-transfer-encoding defined in <a"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,29,"* href=""http://www.ietf.org/rfc/rfc1521.txt"">RFC 1521 </a>. It is designed to allow text containing mostly ASCII"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,30,* characters to be decipherable on an ASCII terminal without decoding.
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,31,* </p>
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,33,* <p>
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,34,"* <a href=""http://www.ietf.org/rfc/rfc1522.txt"">RFC 1522 </a> describes techniques to allow the encoding of non-ASCII"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,35,"* text in various portions of a RFC 822 [2] message header, in a manner which is unlikely to confuse existing message"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,36,* handling software.
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,37,* </p>
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,39,"* @see <a href=""http://www.ietf.org/rfc/rfc1522.txt""> MIME (Multipurpose Internet Mail Extensions) Part Two: Message"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,40,*          Header Extensions for Non-ASCII Text </a>
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,42,* @author Apache Software Foundation
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,43,* @since 1.3
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,44,"* @version $Id: QCodec.java,v 1.1 2004/03/29 07:59:57 ggregory Exp $"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,46,"public class QCodec extends RFC1522Codec implements StringEncoder, StringDecoder {"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,48,* The default charset used for string decoding and encoding.
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,50,private String charset = StringEncodings.UTF8;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,53,* BitSet of printable characters as defined in RFC 1522.
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,55,private static final BitSet PRINTABLE_CHARS = new BitSet(256);
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,56,// Static initializer for printable chars collection
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,57,static {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,58,// alpha characters
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,59,PRINTABLE_CHARS.set(' ');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,60,PRINTABLE_CHARS.set('!');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,61,"PRINTABLE_CHARS.set('""');"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,62,PRINTABLE_CHARS.set('#');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,63,PRINTABLE_CHARS.set('$');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,64,PRINTABLE_CHARS.set('%');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,65,PRINTABLE_CHARS.set('&');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,66,PRINTABLE_CHARS.set('\'');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,67,PRINTABLE_CHARS.set('(');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,68,PRINTABLE_CHARS.set(')');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,69,PRINTABLE_CHARS.set('*');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,70,PRINTABLE_CHARS.set('+');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,71,"PRINTABLE_CHARS.set(',');"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,72,PRINTABLE_CHARS.set('-');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,73,PRINTABLE_CHARS.set('.');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,74,PRINTABLE_CHARS.set('/');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,75,for (int i = '0'; i <= '9'; i++) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,76,PRINTABLE_CHARS.set(i);
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,78,PRINTABLE_CHARS.set(':');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,79,PRINTABLE_CHARS.set(';');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,80,PRINTABLE_CHARS.set('<');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,81,PRINTABLE_CHARS.set('>');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,82,PRINTABLE_CHARS.set('@');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,83,for (int i = 'A'; i <= 'Z'; i++) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,84,PRINTABLE_CHARS.set(i);
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,86,PRINTABLE_CHARS.set('[');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,87,PRINTABLE_CHARS.set('\\');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,88,PRINTABLE_CHARS.set(']');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,89,PRINTABLE_CHARS.set('^');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,90,PRINTABLE_CHARS.set('`');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,91,for (int i = 'a'; i <= 'z'; i++) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,92,PRINTABLE_CHARS.set(i);
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,94,PRINTABLE_CHARS.set('{');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,95,PRINTABLE_CHARS.set('|');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,96,PRINTABLE_CHARS.set('}');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,97,PRINTABLE_CHARS.set('~');
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,100,private static byte BLANK = 32;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,102,private static byte UNDERSCORE = 95;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,104,private boolean encodeBlanks = false;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,107,* Default constructor.
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,109,public QCodec() {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,110,super();
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,114,* Constructor which allows for the selection of a default charset
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,116,* @param charset
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,117,*                  the default string charset to use.
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,119,"* @see <a href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE character"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,120,*          encoding names</a>
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,122,public QCodec(final String charset) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,123,super();
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,124,this.charset = charset;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,127,protected String getEncoding() {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,128,"return ""Q"";"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,131,protected byte[] doEncoding(byte[] bytes) throws EncoderException {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,132,if (bytes == null) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,133,return null;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,135,"byte[] data = QuotedPrintableCodec.encodeQuotedPrintable(PRINTABLE_CHARS, bytes);"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,136,if (this.encodeBlanks) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,137,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,138,if (data[i] == BLANK) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,139,data[i] = UNDERSCORE;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,143,return data;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,146,protected byte[] doDecoding(byte[] bytes) throws DecoderException {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,147,if (bytes == null) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,148,return null;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,150,boolean hasUnderscores = false;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,151,for (int i = 0; i < bytes.length; i++) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,152,if (bytes[i] == UNDERSCORE) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,153,hasUnderscores = true;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,154,break;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,157,if (hasUnderscores) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,158,byte[] tmp = new byte[bytes.length];
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,159,for (int i = 0; i < bytes.length; i++) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,160,byte b = bytes[i];
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,161,if (b != UNDERSCORE) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,162,tmp[i] = b;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,163,} else {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,164,tmp[i] = BLANK;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,167,return QuotedPrintableCodec.decodeQuotedPrintable(tmp);
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,168,} else {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,169,return QuotedPrintableCodec.decodeQuotedPrintable(bytes);
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,174,* Encodes a string into its quoted-printable form using the specified charset. Unsafe characters are escaped.
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,176,* @param pString
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,177,*                  string to convert to quoted-printable form
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,178,* @param charset
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,179,*                  the charset for pString
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,180,* @return quoted-printable string
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,182,* @throws EncoderException
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,183,*                  thrown if a failure condition is encountered during the encoding process.
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,185,"public String encode(final String pString, final String charset) throws EncoderException {"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,186,if (pString == null) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,187,return null;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,189,try {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,190,"return encodeText(pString, charset);"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,191,} catch (UnsupportedEncodingException e) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,192,throw new EncoderException(e.getMessage());
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,197,* Encodes a string into its quoted-printable form using the default charset. Unsafe characters are escaped.
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,199,* @param pString
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,200,*                  string to convert to quoted-printable form
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,201,* @return quoted-printable string
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,203,* @throws EncoderException
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,204,*                  thrown if a failure condition is encountered during the encoding process.
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,206,public String encode(String pString) throws EncoderException {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,207,if (pString == null) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,208,return null;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,210,"return encode(pString, getDefaultCharset());"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,214,* Decodes a quoted-printable string into its original form. Escaped characters are converted back to their original
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,215,* representation.
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,217,* @param pString
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,218,*                  quoted-printable string to convert into its original form
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,220,* @return original string
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,222,* @throws DecoderException
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,223,*                  A decoder exception is thrown if a failure condition is encountered during the decode process.
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,225,public String decode(String pString) throws DecoderException {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,226,if (pString == null) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,227,return null;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,229,try {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,230,return decodeText(pString);
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,231,} catch (UnsupportedEncodingException e) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,232,throw new DecoderException(e.getMessage());
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,237,* Encodes an object into its quoted-printable form using the default charset. Unsafe characters are escaped.
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,239,* @param pObject
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,240,*                  object to convert to quoted-printable form
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,241,* @return quoted-printable object
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,243,* @throws EncoderException
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,244,*                  thrown if a failure condition is encountered during the encoding process.
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,246,public Object encode(Object pObject) throws EncoderException {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,247,if (pObject == null) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,248,return null;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,249,} else if (pObject instanceof String) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,250,return encode((String) pObject);
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,251,} else {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,252,"throw new EncoderException(""Objects of type """
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,253,+ pObject.getClass().getName()
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,254,"+ "" cannot be encoded using Q codec"");"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,259,* Decodes a quoted-printable object into its original form. Escaped characters are converted back to their original
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,260,* representation.
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,262,* @param pObject
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,263,*                  quoted-printable object to convert into its original form
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,265,* @return original object
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,267,* @throws DecoderException
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,268,*                  A decoder exception is thrown if a failure condition is encountered during the decode process.
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,270,public Object decode(Object pObject) throws DecoderException {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,271,if (pObject == null) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,272,return null;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,273,} else if (pObject instanceof String) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,274,return decode((String) pObject);
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,275,} else {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,276,"throw new DecoderException(""Objects of type """
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,277,+ pObject.getClass().getName()
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,278,"+ "" cannot be decoded using Q codec"");"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,283,* The default charset used for string decoding and encoding.
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,285,* @return the default string charset.
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,287,public String getDefaultCharset() {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,288,return this.charset;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,292,* Tests if optional tranformation of SPACE characters is to be used
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,294,"* @return <code>true</code> if SPACE characters are to be transformed, <code>false</code> otherwise"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,296,public boolean isEncodeBlanks() {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,297,return this.encodeBlanks;
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,301,* Defines whether optional tranformation of SPACE characters is to be used
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,303,* @param b
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,304,"*                  <code>true</code> if SPACE characters are to be transformed, <code>false</code> otherwise"
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,306,public void setEncodeBlanks(boolean b) {
True,src/java/org/apache/commons/codec/net/QCodec.java,src/java/org/apache/commons/codec/net/QCodec.java,307,this.encodeBlanks = b;
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,2,* Copyright 2001-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,14,* limitations under the License.
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,17,package org.apache.commons.codec.net;
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,19,import java.io.UnsupportedEncodingException;
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,21,import org.apache.commons.codec.DecoderException;
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,22,import org.apache.commons.codec.EncoderException;
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,25,* <p>
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,26,* Implements methods common to all codecs defined in RFC 1522.
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,27,* </p>
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,29,* <p>
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,30,"* <a href=""http://www.ietf.org/rfc/rfc1522.txt"">RFC 1522</a>"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,31,* describes techniques to allow the encoding of non-ASCII text in
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,32,"* various portions of a RFC 822 [2] message header, in a manner which"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,33,* is unlikely to confuse existing message handling software.
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,34,* </p>
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,36,"* @see <a href=""http://www.ietf.org/rfc/rfc1522.txt"">"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,37,* MIME (Multipurpose Internet Mail Extensions) Part Two:
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,38,* Message Header Extensions for Non-ASCII Text</a>
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,39,* </p>
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,41,* @author Apache Software Foundation
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,42,* @since 1.3
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,43,"* @version $Id: RFC1522Codec.java,v 1.1 2004/03/29 07:59:57 ggregory Exp $"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,45,abstract class RFC1522Codec {
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,48,* Applies an RFC 1522 compliant encoding scheme to the given string of text with the
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,49,"* given charset. This method constructs the ""encoded-word"" header common to all the"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,50,* RFC 1522 codecs and then invokes {@link #doEncoding(byte [])} method of a concrete
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,51,* class to perform the specific enconding.
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,53,* @param text a string to encode
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,54,* @param charset a charset to be used
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,56,"* @return RFC 1522 compliant ""encoded-word"""
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,58,* @throws EncoderException thrown if there is an error conidition during the Encoding
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,59,*  process.
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,60,* @throws UnsupportedEncodingException thrown if charset is not supported
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,62,"* @see <a href=""http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc"">JRE character"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,63,*          encoding names</a>
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,65,"protected String encodeText(final String text, final String charset)"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,66,"throws EncoderException, UnsupportedEncodingException"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,68,if (text == null) {
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,69,return null;
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,71,StringBuffer buffer = new StringBuffer();
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,72,"buffer.append(""=?"");"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,73,buffer.append(charset);
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,74,buffer.append('?');
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,75,buffer.append(getEncoding());
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,76,buffer.append('?');
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,77,byte [] rawdata = doEncoding(text.getBytes(charset));
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,78,"buffer.append(new String(rawdata, StringEncodings.US_ASCII));"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,79,"buffer.append(""?="");"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,80,return buffer.toString();
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,84,* Applies an RFC 1522 compliant decoding scheme to the given string of text. This method
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,85,"* processes the ""encoded-word"" header common to all the RFC 1522 codecs and then invokes"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,86,* {@link #doEncoding(byte [])} method of a concrete class to perform the specific deconding.
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,88,* @param text a string to decode
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,90,* @throws DecoderException thrown if there is an error conidition during the Decoding
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,91,*  process.
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,92,"* @throws UnsupportedEncodingException thrown if charset specified in the ""encoded-word"""
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,93,*  header is not supported
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,95,protected String decodeText(final String text)
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,96,"throws DecoderException, UnsupportedEncodingException"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,98,if (text == null) {
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,99,return null;
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,101,"if ((!text.startsWith(""=?"")) || (!text.endsWith(""?=""))) {"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,102,"throw new DecoderException(""RFC 1521 violation: malformed encoded content"");"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,104,int termnator = text.length() - 2;
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,105,int from = 2;
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,106,"int to = text.indexOf(""?"", from);"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,107,if ((to == -1) || (to == termnator)) {
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,108,"throw new DecoderException(""RFC 1521 violation: charset token not found"");"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,110,"String charset = text.substring(from, to);"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,111,from = to + 1;
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,112,"to = text.indexOf(""?"", from);"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,113,if ((to == -1) || (to == termnator)) {
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,114,"throw new DecoderException(""RFC 1521 violation: encoding token not found"");"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,116,"String encoding = text.substring(from, to);"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,117,if (!getEncoding().equalsIgnoreCase(encoding)) {
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,118,"throw new DecoderException(""This codec cannot decode "" +"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,119,"encoding + "" encoded content"");"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,121,from = to + 1;
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,122,"to = text.indexOf(""?"", from);"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,123,if ((to == -1) || (to != termnator)) {
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,124,"throw new DecoderException(""RFC 1521 violation: encoded content not found"");"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,126,"byte[] data = text.substring(from, to).getBytes(StringEncodings.US_ASCII);"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,127,data = doDecoding(data);
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,128,"return new String(data, charset);"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,132,* Returns the codec name (referred to as encoding in the RFC 1522)
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,134,* @return name of the codec
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,136,protected abstract String getEncoding();
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,139,* Encodes an array of bytes using the defined encoding scheme
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,141,* @param bytes Data to be encoded
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,143,* @return A byte array containing the encoded data
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,145,* @throws EncoderException thrown if the Encoder encounters a failure condition
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,146,*  during the encoding process.
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,148,protected abstract byte[] doEncoding(byte[] bytes) throws EncoderException;
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,151,* Decodes an array of bytes using the defined encoding scheme
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,153,* @param bytes Data to be decoded
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,155,* @return a byte array that contains decoded data
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,157,* @throws DecoderException A decoder exception is thrown if a Decoder encounters a
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,158,*  failure condition during the decode process.
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,160,protected abstract byte[] doDecoding(byte[] bytes) throws DecoderException;

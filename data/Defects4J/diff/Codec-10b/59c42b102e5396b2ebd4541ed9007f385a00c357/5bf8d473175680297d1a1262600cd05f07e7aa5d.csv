is_addition,old_file_path,new_file_path,line_num,content
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,18,package org.apache.commons.codec.binary;
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,20,import java.io.ByteArrayInputStream;
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,21,import java.io.IOException;
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,22,import java.io.InputStream;
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,23,import java.util.Arrays;
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,25,import junit.framework.TestCase;
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,27,public class Base32InputStreamTest extends TestCase {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,29,"private final static byte[] CRLF = {(byte) '\r', (byte) '\n'};"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,31,private final static byte[] LF = {(byte) '\n'};
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,34,* Construct a new instance of this test case.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,36,* @param name
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,37,*            Name of the test case
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,39,public Base32InputStreamTest(String name) {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,40,super(name);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,44,* Tests the bug reported in CODEC-105. Bad interactions with InputStream when reading one byte at a time.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,46,public void testCodec105() throws IOException {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,47,"Base32InputStream in = new Base32InputStream(new Codec105ErrorInputStream(), true, 0, null);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,48,for (int i = 0; i < 5; i++) {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,49,in.read();
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,54,//     * Test for the CODEC-101 bug:  InputStream.read(byte[]) should never return 0
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,55,//     * because Java's builtin InputStreamReader hates that.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,57,//     * @throws Exception for some failure scenarios.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,59,//    public void testCodec101() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,60,//        byte[] codec101 = StringUtils.getBytesUtf8(Base32TestData.CODEC_101_MULTIPLE_OF_3);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,61,//        ByteArrayInputStream bais = new ByteArrayInputStream(codec101);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,62,//        Base32InputStream in = new Base32InputStream(bais);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,63,//        byte[] result = new byte[8192];
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,64,//        int c = in.read(result);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,65,"//        assertTrue(""Codec101: First read successful [c="" + c + ""]"", c > 0);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,67,//        c = in.read(result);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,68,"//        assertTrue(""Codec101: Second read should report end-of-stream [c="" + c + ""]"", c < 0);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,72,* Another test for the CODEC-101 bug:
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,73,* In commons-codec-1.4 this test shows InputStreamReader explicitly hating an
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,74,* InputStream.read(byte[]) return of 0:
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,76,* java.io.IOException: Underlying input stream returned zero bytes
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,77,* at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:268)
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,78,* at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:306)
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,79,* at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:158)
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,80,* at java.io.InputStreamReader.read(InputStreamReader.java:167)
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,81,* at java.io.BufferedReader.fill(BufferedReader.java:136)
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,82,* at java.io.BufferedReader.readLine(BufferedReader.java:299)
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,83,* at java.io.BufferedReader.readLine(BufferedReader.java:362)
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,84,* at org.apache.commons.codec.binary.Base32InputStreamTest.testInputStreamReader(Base32InputStreamTest.java:75)
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,86,* But in commons-codec-1.5 it's fixed.  :-)
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,88,* @throws Exception for some failure scenarios.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,90,//    public void testInputStreamReader() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,91,//        byte[] codec101 = StringUtils.getBytesUtf8(Base32TestData.CODEC_101_MULTIPLE_OF_3);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,92,//        ByteArrayInputStream bais = new ByteArrayInputStream(codec101);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,93,//        Base32InputStream in = new Base32InputStream(bais);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,94,//        InputStreamReader isr = new InputStreamReader(in);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,95,//        BufferedReader br = new BufferedReader(isr);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,96,//        String line = br.readLine();
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,97,"//        assertNotNull(""Codec101:  InputStreamReader works!"", line);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,101,* Test the Base32InputStream implementation against the special NPE inducing input
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,102,* identified in the CODEC-98 bug.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,104,* @throws Exception for some failure scenarios.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,106,//    public void testCodec98NPE() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,107,//        byte[] codec98 = StringUtils.getBytesUtf8(Base32TestData.CODEC_98_NPE);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,108,//        ByteArrayInputStream data = new ByteArrayInputStream(codec98);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,109,//        Base32InputStream stream = new Base32InputStream(data);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,111,//        // This line causes an NPE in commons-codec-1.4.jar:
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,112,"//        byte[] decodedBytes = Base32TestData.streamToBytes(stream, new byte[1024]);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,114,//        String decoded = StringUtils.newStringUtf8(decodedBytes);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,115,//        assertEquals(
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,116,"//            ""codec-98 NPE Base32InputStream"", Base32TestData.CODEC_98_NPE_DECODED, decoded"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,121,* Tests the Base32InputStream implementation against empty input.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,123,* @throws Exception
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,124,*             for some failure scenarios.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,126,public void testBase32EmptyInputStreamMimeChuckSize() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,127,testBase32EmptyInputStream(Base32.MIME_CHUNK_SIZE);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,131,* Tests the Base32InputStream implementation against empty input.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,133,* @throws Exception
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,134,*             for some failure scenarios.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,136,public void testBase32EmptyInputStreamPemChuckSize() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,137,testBase32EmptyInputStream(Base32.PEM_CHUNK_SIZE);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,140,private void testBase32EmptyInputStream(int chuckSize) throws Exception {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,141,byte[] emptyEncoded = new byte[0];
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,142,byte[] emptyDecoded = new byte[0];
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,143,"testByteByByte(emptyEncoded, emptyDecoded, chuckSize, CRLF);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,144,"testByChunk(emptyEncoded, emptyDecoded, chuckSize, CRLF);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,148,* Tests the Base32InputStream implementation.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,150,* @throws Exception
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,151,*             for some failure scenarios.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,153,public void testBase32InputStreamByChunk() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,154,// Hello World test.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,155,byte[] encoded = StringUtils.getBytesUtf8(Base32TestData.BASE32_FIXTURE);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,156,byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,157,"testByChunk(encoded, decoded, Base32.MIME_CHUNK_SIZE, CRLF);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,159,// Single Byte test.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,160,"encoded = StringUtils.getBytesUtf8(""AA==\r\n"");"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,161,decoded = new byte[]{(byte) 0};
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,162,"//        testByChunk(encoded, decoded, Base32.MIME_CHUNK_SIZE, CRLF);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,164,//        // OpenSSL interop test.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,165,//        encoded = StringUtils.getBytesUtf8(Base32TestData.ENCODED_32_CHARS_PER_LINE);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,166,//        decoded = Base32TestData.DECODED;
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,167,"//        testByChunk(encoded, decoded, Base32.PEM_CHUNK_SIZE, LF);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,169,//        // Single Line test.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,170,"//        String singleLine = Base32TestData.ENCODED_32_CHARS_PER_LINE.replaceAll(""\n"", """");"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,171,//        encoded = StringUtils.getBytesUtf8(singleLine);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,172,//        decoded = Base32TestData.DECODED;
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,173,"//        testByChunk(encoded, decoded, 0, LF);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,175,// test random data of sizes 0 thru 150
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,176,for (int i = 0; i <= 150; i++) {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,177,"byte[][] randomData = Base32TestData.randomData(i, false);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,178,encoded = randomData[1];
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,179,decoded = randomData[0];
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,180,"testByChunk(encoded, decoded, 0, LF);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,185,* Tests the Base32InputStream implementation.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,187,* @throws Exception
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,188,*             for some failure scenarios.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,190,public void testBase32InputStreamByteByByte() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,191,// Hello World test.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,192,byte[] encoded = StringUtils.getBytesUtf8(Base32TestData.BASE32_FIXTURE);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,193,byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,194,"testByteByByte(encoded, decoded, Base32.MIME_CHUNK_SIZE, CRLF);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,196,// Single Byte test.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,197,"encoded = StringUtils.getBytesUtf8(""AA==\r\n"");"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,198,decoded = new byte[]{(byte) 0};
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,199,"//        testByteByByte(encoded, decoded, Base32.MIME_CHUNK_SIZE, CRLF);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,201,//        // Single Line test.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,202,"//        String singleLine = Base32TestData.ENCODED_32_CHARS_PER_LINE.replaceAll(""\n"", """");"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,203,//        encoded = StringUtils.getBytesUtf8(singleLine);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,204,//        decoded = Base32TestData.DECODED;
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,205,"//        testByteByByte(encoded, decoded, 0, LF);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,207,// test random data of sizes 0 thru 150
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,208,for (int i = 0; i <= 150; i++) {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,209,"byte[][] randomData = Base32TestData.randomData(i, false);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,210,encoded = randomData[1];
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,211,decoded = randomData[0];
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,212,"testByteByByte(encoded, decoded, 0, LF);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,217,* Tests method does three tests on the supplied data: 1. encoded ---[DECODE]--> decoded 2. decoded ---[ENCODE]-->
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,218,* encoded 3. decoded ---[WRAP-WRAP-WRAP-etc...] --> decoded
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,219,* <p/>
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,220,"* By ""[WRAP-WRAP-WRAP-etc...]"" we mean situation where the Base32InputStream wraps itself in encode and decode mode"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,221,* over and over again.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,223,* @param encoded
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,224,*            base32 encoded data
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,225,* @param decoded
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,226,"*            the data from above, but decoded"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,227,* @param chunkSize
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,228,*            chunk size (line-length) of the base32 encoded data.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,229,* @param seperator
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,230,*            Line separator in the base32 encoded data.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,231,* @throws Exception
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,232,*             Usually signifies a bug in the Base32 commons-codec implementation.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,234,"private void testByChunk(byte[] encoded, byte[] decoded, int chunkSize, byte[] seperator) throws Exception {"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,236,// Start with encode.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,237,InputStream in = new ByteArrayInputStream(decoded);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,238,"in = new Base32InputStream(in, true, chunkSize, seperator);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,239,byte[] output = Base32TestData.streamToBytes(in);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,241,"assertEquals(""EOF"", -1, in.read());"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,242,"assertEquals(""Still EOF"", -1, in.read());"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,243,"assertTrue(""Streaming base32 encode"", Arrays.equals(output, encoded));"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,245,// Now let's try decode.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,246,in = new ByteArrayInputStream(encoded);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,247,in = new Base32InputStream(in);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,248,output = Base32TestData.streamToBytes(in);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,250,"assertEquals(""EOF"", -1, in.read());"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,251,"assertEquals(""Still EOF"", -1, in.read());"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,252,"assertTrue(""Streaming base32 decode"", Arrays.equals(output, decoded));"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,254,// I always wanted to do this! (wrap encoder with decoder etc etc).
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,255,in = new ByteArrayInputStream(decoded);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,256,for (int i = 0; i < 10; i++) {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,257,"in = new Base32InputStream(in, true, chunkSize, seperator);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,258,"in = new Base32InputStream(in, false);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,260,output = Base32TestData.streamToBytes(in);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,262,"assertEquals(""EOF"", -1, in.read());"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,263,"assertEquals(""Still EOF"", -1, in.read());"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,264,"assertTrue(""Streaming base32 wrap-wrap-wrap!"", Arrays.equals(output, decoded));"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,268,* Tests method does three tests on the supplied data: 1. encoded ---[DECODE]--> decoded 2. decoded ---[ENCODE]-->
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,269,* encoded 3. decoded ---[WRAP-WRAP-WRAP-etc...] --> decoded
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,270,* <p/>
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,271,"* By ""[WRAP-WRAP-WRAP-etc...]"" we mean situation where the Base32InputStream wraps itself in encode and decode mode"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,272,* over and over again.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,274,* @param encoded
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,275,*            base32 encoded data
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,276,* @param decoded
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,277,"*            the data from above, but decoded"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,278,* @param chunkSize
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,279,*            chunk size (line-length) of the base32 encoded data.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,280,* @param seperator
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,281,*            Line separator in the base32 encoded data.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,282,* @throws Exception
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,283,*             Usually signifies a bug in the Base32 commons-codec implementation.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,285,"private void testByteByByte(byte[] encoded, byte[] decoded, int chunkSize, byte[] seperator) throws Exception {"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,287,// Start with encode.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,288,InputStream in = new ByteArrayInputStream(decoded);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,289,"in = new Base32InputStream(in, true, chunkSize, seperator);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,290,byte[] output = new byte[encoded.length];
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,291,for (int i = 0; i < output.length; i++) {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,292,output[i] = (byte) in.read();
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,295,"assertEquals(""EOF"", -1, in.read());"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,296,"assertEquals(""Still EOF"", -1, in.read());"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,297,"assertTrue(""Streaming base32 encode"", Arrays.equals(output, encoded));"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,299,// Now let's try decode.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,300,in = new ByteArrayInputStream(encoded);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,301,in = new Base32InputStream(in);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,302,output = new byte[decoded.length];
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,303,for (int i = 0; i < output.length; i++) {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,304,output[i] = (byte) in.read();
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,307,"assertEquals(""EOF"", -1, in.read());"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,308,"assertEquals(""Still EOF"", -1, in.read());"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,309,"assertTrue(""Streaming base32 decode"", Arrays.equals(output, decoded));"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,311,// I always wanted to do this! (wrap encoder with decoder etc etc).
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,312,in = new ByteArrayInputStream(decoded);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,313,for (int i = 0; i < 10; i++) {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,314,"in = new Base32InputStream(in, true, chunkSize, seperator);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,315,"in = new Base32InputStream(in, false);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,317,output = new byte[decoded.length];
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,318,for (int i = 0; i < output.length; i++) {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,319,output[i] = (byte) in.read();
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,322,"assertEquals(""EOF"", -1, in.read());"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,323,"assertEquals(""Still EOF"", -1, in.read());"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,324,"assertTrue(""Streaming base32 wrap-wrap-wrap!"", Arrays.equals(output, decoded));"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,328,* Tests markSupported.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,330,* @throws Exception
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,332,public void testMarkSupported() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,333,byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,334,ByteArrayInputStream bin = new ByteArrayInputStream(decoded);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,335,"Base32InputStream in = new Base32InputStream(bin, true, 4, new byte[]{0, 0, 0});"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,336,// Always returns false for now.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,337,"assertFalse(""Base32InputStream.markSupported() is false"", in.markSupported());"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,341,* Tests read returning 0
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,343,* @throws Exception
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,345,public void testRead0() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,346,byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,347,byte[] buf = new byte[1024];
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,348,int bytesRead = 0;
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,349,ByteArrayInputStream bin = new ByteArrayInputStream(decoded);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,350,"Base32InputStream in = new Base32InputStream(bin, true, 4, new byte[]{0, 0, 0});"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,351,"bytesRead = in.read(buf, 0, 0);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,352,"assertEquals(""Base32InputStream.read(buf, 0, 0) returns 0"", 0, bytesRead);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,356,* Tests read with null.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,358,* @throws Exception
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,359,*             for some failure scenarios.
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,361,public void testReadNull() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,362,byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,363,ByteArrayInputStream bin = new ByteArrayInputStream(decoded);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,364,"Base32InputStream in = new Base32InputStream(bin, true, 4, new byte[]{0, 0, 0});"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,365,try {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,366,"in.read(null, 0, 0);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,367,"fail(""Base32InputStream.read(null, 0, 0) to throw a NullPointerException"");"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,368,} catch (NullPointerException e) {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,369,// Expected
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,374,* Tests read throwing IndexOutOfBoundsException
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,376,* @throws Exception
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,378,public void testReadOutOfBounds() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,379,byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,380,byte[] buf = new byte[1024];
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,381,ByteArrayInputStream bin = new ByteArrayInputStream(decoded);
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,382,"Base32InputStream in = new Base32InputStream(bin, true, 4, new byte[]{0, 0, 0});"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,384,try {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,385,"in.read(buf, -1, 0);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,386,"fail(""Expected Base32InputStream.read(buf, -1, 0) to throw IndexOutOfBoundsException"");"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,387,} catch (IndexOutOfBoundsException e) {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,388,// Expected
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,391,try {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,392,"in.read(buf, 0, -1);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,393,"fail(""Expected Base32InputStream.read(buf, 0, -1) to throw IndexOutOfBoundsException"");"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,394,} catch (IndexOutOfBoundsException e) {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,395,// Expected
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,398,try {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,399,"in.read(buf, buf.length + 1, 0);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,400,"fail(""Base32InputStream.read(buf, buf.length + 1, 0) throws IndexOutOfBoundsException"");"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,401,} catch (IndexOutOfBoundsException e) {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,402,// Expected
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,405,try {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,406,"in.read(buf, buf.length - 1, 2);"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,407,"fail(""Base32InputStream.read(buf, buf.length - 1, 2) throws IndexOutOfBoundsException"");"
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,408,} catch (IndexOutOfBoundsException e) {
True,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32InputStreamTest.java,409,// Expected
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,18,package org.apache.commons.codec.binary;
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,20,import java.io.ByteArrayOutputStream;
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,21,import java.io.OutputStream;
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,22,import java.util.Arrays;
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,24,import junit.framework.TestCase;
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,26,public class Base32OutputStreamTest extends TestCase {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,28,"private final static byte[] CRLF = {(byte) '\r', (byte) '\n'};"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,30,private final static byte[] LF = {(byte) '\n'};
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,33,* Construct a new instance of this test case.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,35,* @param name
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,36,*            Name of the test case
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,38,public Base32OutputStreamTest(String name) {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,39,super(name);
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,43,//     * Test the Base32OutputStream implementation against the special NPE inducing input
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,44,//     * identified in the CODEC-98 bug.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,46,//     * @throws Exception for some failure scenarios.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,48,//    public void testCodec98NPE() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,49,//        byte[] codec98 = StringUtils.getBytesUtf8(Base32TestData.CODEC_98_NPE);
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,50,//        byte[] codec98_1024 = new byte[1024];
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,51,"//        System.arraycopy(codec98, 0, codec98_1024, 0, codec98.length);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,52,//        ByteArrayOutputStream data = new ByteArrayOutputStream(1024);
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,53,"//        Base32OutputStream stream = new Base32OutputStream(data, false);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,54,"//        stream.write(codec98_1024, 0, 1024);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,55,//        stream.close();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,57,//        byte[] decodedBytes = data.toByteArray();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,58,//        String decoded = StringUtils.newStringUtf8(decodedBytes);
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,59,//        assertEquals(
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,60,"//            ""codec-98 NPE Base32OutputStream"", Base32TestData.CODEC_98_NPE_DECODED, decoded"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,66,* Test the Base32OutputStream implementation against empty input.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,68,* @throws Exception
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,69,*             for some failure scenarios.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,71,public void testBase32EmptyOutputStreamMimeChunkSize() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,72,testBase32EmptyOutputStream(Base32.MIME_CHUNK_SIZE);
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,76,* Test the Base32OutputStream implementation against empty input.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,78,* @throws Exception
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,79,*             for some failure scenarios.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,81,public void testBase32EmptyOutputStreamPemChunkSize() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,82,testBase32EmptyOutputStream(Base32.PEM_CHUNK_SIZE);
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,85,private void testBase32EmptyOutputStream(int chunkSize) throws Exception {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,86,byte[] emptyEncoded = new byte[0];
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,87,byte[] emptyDecoded = new byte[0];
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,88,"testByteByByte(emptyEncoded, emptyDecoded, chunkSize, CRLF);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,89,"testByChunk(emptyEncoded, emptyDecoded, chunkSize, CRLF);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,93,* Test the Base32OutputStream implementation
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,95,* @throws Exception
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,96,*             for some failure scenarios.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,98,public void testBase32OutputStreamByChunk() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,99,// Hello World test.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,100,byte[] encoded = StringUtils.getBytesUtf8(Base32TestData.BASE32_FIXTURE);
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,101,byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,102,"testByChunk(encoded, decoded, Base32.MIME_CHUNK_SIZE, CRLF);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,104,//        // Single Byte test.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,105,"//        encoded = StringUtils.getBytesUtf8(""AA==\r\n"");"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,106,//        decoded = new byte[]{(byte) 0};
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,107,"//        testByChunk(encoded, decoded, Base32.MIME_CHUNK_SIZE, CRLF);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,110,//        // Single Line test.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,111,"//        String singleLine = Base32TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(""\n"", """");"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,112,//        encoded = StringUtils.getBytesUtf8(singleLine);
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,113,//        decoded = Base32TestData.DECODED;
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,114,"//        testByChunk(encoded, decoded, 0, LF);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,116,// test random data of sizes 0 thru 150
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,117,for (int i = 0; i <= 150; i++) {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,118,"byte[][] randomData = Base32TestData.randomData(i, false);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,119,encoded = randomData[1];
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,120,decoded = randomData[0];
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,121,"testByChunk(encoded, decoded, 0, LF);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,126,* Test the Base32OutputStream implementation
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,128,* @throws Exception
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,129,*             for some failure scenarios.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,131,public void testBase32OutputStreamByteByByte() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,132,// Hello World test.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,133,byte[] encoded = StringUtils.getBytesUtf8(Base32TestData.BASE32_FIXTURE);
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,134,byte[] decoded = StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,135,"testByteByByte(encoded, decoded, 76, CRLF);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,137,//        // Single Byte test.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,138,"//        encoded = StringUtils.getBytesUtf8(""AA==\r\n"");"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,139,//        decoded = new byte[]{(byte) 0};
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,140,"//        testByteByByte(encoded, decoded, 76, CRLF);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,143,//        // Single Line test.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,144,"//        String singleLine = Base32TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(""\n"", """");"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,145,//        encoded = StringUtils.getBytesUtf8(singleLine);
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,146,//        decoded = Base32TestData.DECODED;
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,147,"//        testByteByByte(encoded, decoded, 0, LF);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,149,// test random data of sizes 0 thru 150
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,150,for (int i = 0; i <= 150; i++) {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,151,"byte[][] randomData = Base32TestData.randomData(i, false);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,152,encoded = randomData[1];
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,153,decoded = randomData[0];
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,154,"testByteByByte(encoded, decoded, 0, LF);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,159,* Test method does three tests on the supplied data: 1. encoded ---[DECODE]--> decoded 2. decoded ---[ENCODE]-->
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,160,* encoded 3. decoded ---[WRAP-WRAP-WRAP-etc...] --> decoded
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,161,* <p/>
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,162,"* By ""[WRAP-WRAP-WRAP-etc...]"" we mean situation where the Base32OutputStream wraps itself in encode and decode"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,163,* mode over and over again.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,165,* @param encoded
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,166,*            Base32 encoded data
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,167,* @param decoded
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,168,"*            the data from above, but decoded"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,169,* @param chunkSize
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,170,*            chunk size (line-length) of the Base32 encoded data.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,171,* @param seperator
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,172,*            Line separator in the Base32 encoded data.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,173,* @throws Exception
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,174,*             Usually signifies a bug in the Base32 commons-codec implementation.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,176,"private void testByChunk(byte[] encoded, byte[] decoded, int chunkSize, byte[] seperator) throws Exception {"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,178,// Start with encode.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,179,ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,180,"OutputStream out = new Base32OutputStream(byteOut, true, chunkSize, seperator);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,181,out.write(decoded);
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,182,out.close();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,183,byte[] output = byteOut.toByteArray();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,184,"assertTrue(""Streaming chunked Base32 encode"", Arrays.equals(output, encoded));"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,186,// Now let's try decode.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,187,byteOut = new ByteArrayOutputStream();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,188,"out = new Base32OutputStream(byteOut, false);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,189,out.write(encoded);
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,190,out.close();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,191,output = byteOut.toByteArray();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,192,"assertTrue(""Streaming chunked Base32 decode"", Arrays.equals(output, decoded));"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,194,// I always wanted to do this! (wrap encoder with decoder etc etc).
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,195,byteOut = new ByteArrayOutputStream();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,196,out = byteOut;
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,197,for (int i = 0; i < 10; i++) {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,198,"out = new Base32OutputStream(out, false);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,199,"out = new Base32OutputStream(out, true, chunkSize, seperator);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,201,out.write(decoded);
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,202,out.close();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,203,output = byteOut.toByteArray();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,205,"assertTrue(""Streaming chunked Base32 wrap-wrap-wrap!"", Arrays.equals(output, decoded));"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,209,* Test method does three tests on the supplied data: 1. encoded ---[DECODE]--> decoded 2. decoded ---[ENCODE]-->
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,210,* encoded 3. decoded ---[WRAP-WRAP-WRAP-etc...] --> decoded
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,211,* <p/>
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,212,"* By ""[WRAP-WRAP-WRAP-etc...]"" we mean situation where the Base32OutputStream wraps itself in encode and decode"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,213,* mode over and over again.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,215,* @param encoded
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,216,*            Base32 encoded data
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,217,* @param decoded
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,218,"*            the data from above, but decoded"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,219,* @param chunkSize
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,220,*            chunk size (line-length) of the Base32 encoded data.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,221,* @param seperator
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,222,*            Line separator in the Base32 encoded data.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,223,* @throws Exception
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,224,*             Usually signifies a bug in the Base32 commons-codec implementation.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,226,"private void testByteByByte(byte[] encoded, byte[] decoded, int chunkSize, byte[] seperator) throws Exception {"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,228,// Start with encode.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,229,ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,230,"OutputStream out = new Base32OutputStream(byteOut, true, chunkSize, seperator);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,231,for (int i = 0; i < decoded.length; i++) {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,232,out.write(decoded[i]);
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,234,out.close();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,235,byte[] output = byteOut.toByteArray();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,236,"assertTrue(""Streaming byte-by-byte Base32 encode"", Arrays.equals(output, encoded));"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,238,// Now let's try decode.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,239,byteOut = new ByteArrayOutputStream();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,240,"out = new Base32OutputStream(byteOut, false);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,241,for (int i = 0; i < encoded.length; i++) {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,242,out.write(encoded[i]);
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,244,out.close();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,245,output = byteOut.toByteArray();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,246,"assertTrue(""Streaming byte-by-byte Base32 decode"", Arrays.equals(output, decoded));"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,248,// Now let's try decode with tonnes of flushes.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,249,byteOut = new ByteArrayOutputStream();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,250,"out = new Base32OutputStream(byteOut, false);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,251,for (int i = 0; i < encoded.length; i++) {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,252,out.write(encoded[i]);
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,253,out.flush();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,255,out.close();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,256,output = byteOut.toByteArray();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,257,"assertTrue(""Streaming byte-by-byte flush() Base32 decode"", Arrays.equals(output, decoded));"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,259,// I always wanted to do this! (wrap encoder with decoder etc etc).
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,260,byteOut = new ByteArrayOutputStream();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,261,out = byteOut;
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,262,for (int i = 0; i < 10; i++) {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,263,"out = new Base32OutputStream(out, false);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,264,"out = new Base32OutputStream(out, true, chunkSize, seperator);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,266,for (int i = 0; i < decoded.length; i++) {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,267,out.write(decoded[i]);
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,269,out.close();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,270,output = byteOut.toByteArray();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,272,"assertTrue(""Streaming byte-by-byte Base32 wrap-wrap-wrap!"", Arrays.equals(output, decoded));"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,276,* Tests Base32OutputStream.write for expected IndexOutOfBoundsException conditions.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,278,* @throws Exception
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,279,*             for some failure scenarios.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,281,public void testWriteOutOfBounds() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,282,byte[] buf = new byte[1024];
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,283,ByteArrayOutputStream bout = new ByteArrayOutputStream();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,284,Base32OutputStream out = new Base32OutputStream(bout);
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,286,try {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,287,"out.write(buf, -1, 1);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,288,"fail(""Expected Base32OutputStream.write(buf, -1, 1) to throw a IndexOutOfBoundsException"");"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,289,} catch (IndexOutOfBoundsException ioobe) {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,290,// Expected
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,293,try {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,294,"out.write(buf, 1, -1);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,295,"fail(""Expected Base32OutputStream.write(buf, 1, -1) to throw a IndexOutOfBoundsException"");"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,296,} catch (IndexOutOfBoundsException ioobe) {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,297,// Expected
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,300,try {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,301,"out.write(buf, buf.length + 1, 0);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,302,"fail(""Expected Base32OutputStream.write(buf, buf.length + 1, 0) to throw a IndexOutOfBoundsException"");"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,303,} catch (IndexOutOfBoundsException ioobe) {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,304,// Expected
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,307,try {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,308,"out.write(buf, buf.length - 1, 2);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,309,"fail(""Expected Base32OutputStream.write(buf, buf.length - 1, 2) to throw a IndexOutOfBoundsException"");"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,310,} catch (IndexOutOfBoundsException ioobe) {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,311,// Expected
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,316,* Tests Base32OutputStream.write(null).
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,318,* @throws Exception
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,319,*             for some failure scenarios.
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,321,public void testWriteToNullCoverage() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,322,ByteArrayOutputStream bout = new ByteArrayOutputStream();
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,323,Base32OutputStream out = new Base32OutputStream(bout);
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,324,try {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,325,"out.write(null, 0, 0);"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,326,"fail(""Expcted Base32OutputStream.write(null) to throw a NullPointerException"");"
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,327,} catch (NullPointerException e) {
True,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base32OutputStreamTest.java,328,// Expected
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,15,* limitations under the License.
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,18,package org.apache.commons.codec.binary;
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,20,import java.io.IOException;
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,21,import java.io.InputStream;
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,22,import java.util.Random;
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,25,* This random data was encoded by OpenSSL. Java had nothing to do with it. This data helps us test interop between
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,26,* Commons-Codec and OpenSSL. Notice that OpenSSL creates 64 character lines instead of the 76 of Commons-Codec.
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,28,"* @see <a href=""http://www.ietf.org/rfc/rfc2045.txt"">RFC 2045</a>"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,29,* @author Apache Software Foundation
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,30,* @version $Id $
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,31,* @since 1.4
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,33,public class Base32TestData {
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,35,"static final String STRING_FIXTURE = ""Hello World"";"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,37,"static final String BASE32_FIXTURE = ""JBSWY3DPEBLW64TMMQ======\r\n"";"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,38,"//  static final String BASE32HEX_FIXTURE = ""91IMOR3F41BMUSJCCG======"";"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,40,// Some utility code to help test chunked reads of the InputStream.
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,42,private final static int SIZE_KEY = 0;
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,43,private final static int LAST_READ_KEY = 1;
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,45,static byte[] streamToBytes(final InputStream in) throws IOException {
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,46,"// new byte[7] is obviously quite slow, but helps exercise the code."
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,47,"return streamToBytes(in, new byte[7]);"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,50,"static byte[] streamToBytes(final InputStream in, byte[] buf) throws IOException {"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,51,try {
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,52,"int[] status = fill(buf, 0, in);"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,53,int size = status[SIZE_KEY];
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,54,int lastRead = status[LAST_READ_KEY];
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,55,while (lastRead != -1) {
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,56,buf = resizeArray(buf);
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,57,"status = fill(buf, size, in);"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,58,size = status[SIZE_KEY];
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,59,lastRead = status[LAST_READ_KEY];
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,61,if (buf.length != size) {
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,62,byte[] smallerBuf = new byte[size];
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,63,"System.arraycopy(buf, 0, smallerBuf, 0, size);"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,64,buf = smallerBuf;
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,67,finally {
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,68,in.close();
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,70,return buf;
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,73,"private static int[] fill(final byte[] buf, final int offset, final InputStream in)"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,74,throws IOException {
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,75,"int read = in.read(buf, offset, buf.length - offset);"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,76,int lastRead = read;
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,77,if (read == -1) {
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,78,read = 0;
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,80,while (lastRead != -1 && read + offset < buf.length) {
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,81,"lastRead = in.read(buf, offset + read, buf.length - read - offset);"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,82,if (lastRead != -1) {
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,83,read += lastRead;
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,86,"return new int[]{offset + read, lastRead};"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,89,private static byte[] resizeArray(final byte[] bytes) {
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,90,byte[] biggerBytes = new byte[bytes.length * 2];
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,91,"System.arraycopy(bytes, 0, biggerBytes, 0, bytes.length);"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,92,return biggerBytes;
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,97,* Returns an encoded and decoded copy of the same random data.
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,99,* @param size amount of random data to generate and encode
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,100,* @param useHex true if encoding be hex
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,101,"* @return two byte[] arrays:  [0] = decoded, [1] = encoded"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,103,"static byte[][] randomData(int size, boolean useHex) {"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,104,Random r = new Random();
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,105,byte[] decoded = new byte[size];
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,106,r.nextBytes(decoded);
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,107,byte[] encoded = new Base32(useHex).encode(decoded);
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,108,"return new byte[][] {decoded, encoded};"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,112,* Tests the supplied byte[] array to see if it contains the specified byte c.
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,114,* @param bytes byte[] array to test
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,115,* @param c byte to look for
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,116,"* @return true if bytes contains c, false otherwise"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,118,"static boolean bytesContain(byte[] bytes, byte c) {"
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,119,for (int i = 0; i < bytes.length; i++) {
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,120,if (bytes[i] == c) { return true; }
True,src/test/org/apache/commons/codec/binary/Base32TestData.java,src/test/org/apache/commons/codec/binary/Base32TestData.java,122,return false;

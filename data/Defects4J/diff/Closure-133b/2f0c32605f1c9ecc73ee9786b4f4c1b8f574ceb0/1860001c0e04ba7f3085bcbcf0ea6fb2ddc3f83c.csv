is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,436,f (child.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,436,if (child.getType() != Token.NUMBER) {
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,437,"// Everything else are names: STRING, GET, SET"
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,456,/ The children of an OBJECTLIT node are alternating key/value pairs.
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,457,/ We skip the values.
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,457,"// The children of an OBJECTLIT node are keys, where the values"
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,458,// are the children of the keys.
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,462,f (key.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,463,if (key.getType() != Token.NUMBER) {
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,464,"// Everything else are names: STRING, GET, SET"
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,21,import com.google.javascript.jscomp.CompilerOptions.LanguageMode;
False,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,60,eturn new CompilerOptions(); // no missing properties check
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,61,// no missing properties check
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,62,CompilerOptions options = new CompilerOptions();
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,63,options.languageIn = LanguageMode.ECMASCRIPT5;
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,64,return options;
False,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,63,ublic void testOneVar() {
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,67,public void testOneVar1() {
False,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,68,ublic void testTwoVar() {
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,72,public void testOneVar2() {
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,73,"testSame(""/** @constructor */ var Foo = function(){};"" +"
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,74,"""Foo.prototype = {b: 0};"");"
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,77,public void testOneVar3() {
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,78,"testSame(""/** @constructor */ var Foo = function(){};"" +"
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,79,"""Foo.prototype = {get b() {return 0}};"");"
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,82,public void testOneVar4() {
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,83,"testSame(""/** @constructor */ var Foo = function(){};"" +"
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,84,"""Foo.prototype = {set b(a) {}};"");"
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,87,public void testTwoVar1() {
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,101,public void testTwoVar2() {
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,102,"String js = """""
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,103,"+ ""/** @constructor */ var Foo = function(){};\n"""
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,104,"+ ""Foo.prototype={z:0, z:1, x:0};\n"";"
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,105,// TODO(johnlenz): It would be nice to handle this type of declaration.
True,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,106,testSame(js);

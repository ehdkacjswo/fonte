is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,20,import com.google.common.collect.Sets;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,23,import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,24,import com.google.javascript.jscomp.graph.Graph.GraphEdge;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,25,import com.google.javascript.jscomp.graph.LinkedUndirectedGraph;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,26,import com.google.javascript.jscomp.graph.UndiGraph;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,27,import com.google.javascript.jscomp.graph.UndiGraph.UndiGraphEdge;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,28,import com.google.javascript.jscomp.graph.UndiGraph.UndiGraphNode;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,26,mport java.util.*;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,33,import java.util.ArrayList;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,34,import java.util.Arrays;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,35,import java.util.Collection;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,36,import java.util.Comparator;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,37,import java.util.HashMap;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,38,import java.util.HashSet;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,39,import java.util.Iterator;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,40,import java.util.List;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,41,import java.util.Map;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,42,import java.util.Set;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,43,import java.util.TreeSet;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,84,* A graph of property affinity information.
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,86,* Suppose property X and Y are access in the same function N times.
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,88,* The graph would have X -> Y with the edge of N.
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,90,"private final UndiGraph<Property, PropertyAffinity> affinityGraph ="
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,91,LinkedUndirectedGraph.createWithoutAnnotations();
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,74," Sorts Property objects by their count, breaking ties alphabetically to"
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,75, ensure a deterministic total ordering.
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,78,ew Comparator<Property>() {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,79,"ublic int compare(Property p1, Property p2) {"
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,80,f (p1.numOccurrences != p2.numOccurrences) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,81,eturn p2.numOccurrences - p1.numOccurrences;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,83,eturn p1.oldName.compareTo(p2.oldName);
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,101,new Comparator<Property>() {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,102,"public int compare(Property p1, Property p2) {"
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,105,* First a frequently used names would always be picked first.
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,107,if (p1.numOccurrences != p2.numOccurrences) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,108,return p2.numOccurrences - p1.numOccurrences;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,111,* If both properties are used equally frequent. We'll let the property
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,112,* with a high affinity score get a name first.
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,114,* see #computeAffinityScores() for how the score is computed.
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,116,} else if (p1.affinityScore != p2.affinityScore) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,117,return p2.affinityScore - p1.affinityScore;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,121,"* Finally, for determinism, we compare them based on the old name."
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,123,return p1.oldName.compareTo(p2.oldName);
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,214,computeAffinityScores();
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,289,* A X property gets an affinity score:
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,291,* score = sum (# of times X appears Y * frequency(Y)) for all Y where
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,292,*   frequency(Y) > frequency (X).
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,294,* This way a property would have a name closer to all high frequency names.
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,295,* Also two property of the same frequency would have very close names if
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,296,* they always appear together.
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,298,private void computeAffinityScores() {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,299,for (Property p : propertyMap.values()) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,300,"UndiGraphNode<Property, PropertyAffinity> node ="
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,301,affinityGraph.getUndirectedGraphNode(p);
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,303,int affinityScore = 0;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,304,"for (Iterator<UndiGraphEdge<Property, PropertyAffinity>> edgeIterator ="
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,305,node.getNeighborEdgesIterator(); edgeIterator.hasNext();) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,306,"UndiGraphEdge<Property,PropertyAffinity> edge = edgeIterator.next();"
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,307,affinityScore += edge.getValue().affinity +
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,308,(node == edge.getNodeA() ?
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,309,edge.getNodeB().getValue().numOccurrences :
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,310,edge.getNodeA().getValue().numOccurrences);
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,312,node.getValue().affinityScore = affinityScore;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,323,rivate class ProcessProperties extends AbstractPostOrderCallback {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,391,private class ProcessProperties extends AbstractPostOrderCallback implements
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,392,ScopedCallback {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,394,private Set<Property> currentHighAffinityProperties = null;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,516,affinityGraph.createNode(prop);
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,519,if (currentHighAffinityProperties != null) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,520,currentHighAffinityProperties.add(prop);
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,524,@Override
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,525,public void enterScope(NodeTraversal t) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,526,if (!t.inGlobalScope() && t.getScope().getParent().isGlobal()) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,527,currentHighAffinityProperties = Sets.newHashSet();
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,531,@Override
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,532,public void exitScope(NodeTraversal t) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,533,if (!t.inGlobalScope() && t.getScope().getParent().isGlobal()) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,534,for (Property p1 : currentHighAffinityProperties) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,535,for (Property p2 : currentHighAffinityProperties) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,536,if (p1.oldName.compareTo(p2.oldName) < 0) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,537,"GraphEdge<Property,PropertyAffinity> edge ="
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,538,"affinityGraph.getFirstEdge(p1, p2);"
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,539,if (edge == null) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,540,"affinityGraph.connect(p1, new PropertyAffinity(1), p2);"
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,541,} else {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,542,edge.getValue().increase();
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,547,currentHighAffinityProperties = null;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,561,int affinityScore = 0;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,568,private class PropertyAffinity {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,569,private int affinity = 0;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,571,private PropertyAffinity(int affinity) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,572,this.affinity = affinity;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,575,private void increase() {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,576,affinity++;
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,25,import com.google.javascript.jscomp.graph.UndiGraph.UndiGraphEdge;
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,299,"public Iterator<UndiGraphEdge<N, E>> getNeighborEdgesIterator() {"
True,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java,300,return neighborList.iterator();
True,src/com/google/javascript/jscomp/graph/UndiGraph.java,src/com/google/javascript/jscomp/graph/UndiGraph.java,20,import java.util.Iterator;
False,src/com/google/javascript/jscomp/graph/UndiGraph.java,src/com/google/javascript/jscomp/graph/UndiGraph.java,37,"bstract UndiGraphNode<N, E> getUndirectedGraphNode(N nodeValue);"
True,src/com/google/javascript/jscomp/graph/UndiGraph.java,src/com/google/javascript/jscomp/graph/UndiGraph.java,38,"public abstract UndiGraphNode<N, E> getUndirectedGraphNode(N nodeValue);"
False,src/com/google/javascript/jscomp/graph/UndiGraph.java,src/com/google/javascript/jscomp/graph/UndiGraph.java,48,"ist<UndiGraphEdge<N, E>> getNeighborEdges();"
True,src/com/google/javascript/jscomp/graph/UndiGraph.java,src/com/google/javascript/jscomp/graph/UndiGraph.java,49,"public List<UndiGraphEdge<N, E>> getNeighborEdges();"
True,src/com/google/javascript/jscomp/graph/UndiGraph.java,src/com/google/javascript/jscomp/graph/UndiGraph.java,50,"public Iterator<UndiGraphEdge<N, E>> getNeighborEdgesIterator();"
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,256,public void testPropertyAffinity() {
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,257,// 'y' gets to be 'b' because it appears with z often.
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,258,"// Other wise, 'x' gets to be 'b' because of alphabetical ordering."
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,260,"test(""var foo={};foo.x=1;foo.y=2;foo.z=3;"" +"
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,261,"""function f1() { foo.z; foo.z; foo.z; foo.y}"" +"
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,262,"""function f2() {                      foo.x}"","
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,265,"""var foo={};foo.c=1;foo.b=2;foo.a=3;"" +"
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,266,"""function f1() { foo.a; foo.a; foo.a; foo.b}"" +"
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,267,"""function f2() {                      foo.c}"");"
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,269,"test(""var foo={};foo.x=1;foo.y=2;foo.z=3;"" +"
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,270,"""function f1() { foo.z; foo.z; foo.z; foo.y}"" +"
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,271,"""function f2() { foo.z; foo.z; foo.z; foo.x}"","
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,274,"""var foo={};foo.b=1;foo.c=2;foo.a=3;"" +"
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,275,"""function f1() { foo.a; foo.a; foo.a; foo.c}"" +"
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,276,"""function f2() { foo.a; foo.a; foo.a; foo.b}"");"

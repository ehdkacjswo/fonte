is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,958,* Removes an input file from AST.
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,959,* @param name The name of the file to be removed.
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,961,protected void removeInput(String name) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,962,CompilerInput input = getInput(name);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,963,if (input == null) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,964,return;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,966,inputsByName.remove(name);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,967,Node root = input.getAstRoot(this);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,968,if (root != null) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,969,root.detachFromParent();
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1514,rivate PassFactory inlineSimpleMethods =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1514,private final PassFactory inlineSimpleMethods =
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1523,rivate PassFactory deadAssignmentsElimination =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1523,private final PassFactory deadAssignmentsElimination =
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1532,rivate PassFactory inlineFunctions =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1532,private final PassFactory inlineFunctions =
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1547,rivate PassFactory removeUnusedVars =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1547,private final PassFactory removeUnusedVars =
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1566,rivate PassFactory crossModuleCodeMotion =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1566,private final PassFactory crossModuleCodeMotion =
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1577,rivate PassFactory crossModuleMethodMotion =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1577,private final PassFactory crossModuleMethodMotion =
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1592,rivate PassFactory specializeInitialModule =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1592,private final PassFactory specializeInitialModule =
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,2,* Copyright 2011 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,19,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,22,* Interface for compiler passes that can be used in a hot-swap fashion.
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,24,* <p>The only method is {@code hotSwapScript} which runs this pass on
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,25,* a subtree of the AST. Each pass that is intended to support hot-swap
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,26,* style should implement this interface.
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,28,* <p>It is assumed that {@code Node} argument of {@code hotSwapScript} is the
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,29,* root of a sub-tree in AST that represents a js file and so is of type
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,30,* {@code Token.SCRIPT}. Also the global-scope is supposed to be updated based
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,31,* on new js file prior to this call.
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,33,* @author bashir@google.com (Bashir Sadjad)
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,35,public interface HotSwapCompilerPass {
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,38,* Process the JS with root node root. This is supposed to be significantly
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,39,* faster compared to corresponding full-compiler passes.
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,40,"* @param root Root node corresponding to the file that is modified, should be"
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,41,*     of type {@code Token.SCRIPT}.
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,42,* @param globalScope The global scope which is not necessarily types.
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,44,"void hotSwapScript(Node root, Scope globalScope);"
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,34,lass VarCheck extends AbstractPostOrderCallback implements CompilerPass {
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,34,"class VarCheck extends AbstractPostOrderCallback implements CompilerPass,"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,35,HotSwapCompilerPass {
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,37,/** Name of the synthetic script that holds undefined variables. */
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,38,"static final String SYNTHETIC_VARS_DECLAR = ""{SyntheticVarsDeclar}"";"
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,75,rivate Set<String> varsToDeclareInExterns = Sets.newHashSet();
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,79,private final Set<String> varsToDeclareInExterns = Sets.newHashSet();
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,83,rivate boolean strictExternCheck;
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,87,private final boolean strictExternCheck;
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,116,@Override
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,117,"public void hotSwapScript(Node root, Scope globalScope) {"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,118,Preconditions.checkState(root.getType() == Token.SCRIPT);
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,119,"NodeTraversal t = new NodeTraversal(compiler, this);"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,120,"// Note we use the global scope to prevent wrong ""undefined-var errors"" on"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,121,// variables that are defined in other js files.
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,122,"t.traverseWithScope(root, globalScope);"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,123,// TODO(bashir) Check if we need to createSynthesizedExternVar like process.
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,265,"ompiler.newExternInput(""{SyntheticVarsDeclar}"");"
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,279,compiler.newExternInput(SYNTHETIC_VARS_DECLAR);

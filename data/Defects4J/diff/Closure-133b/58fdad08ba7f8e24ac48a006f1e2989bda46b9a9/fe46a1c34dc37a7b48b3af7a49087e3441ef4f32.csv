is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,121,* Returns true if the current node's type implies side effects.
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,123,* This is a non-recursive version of the may have side effects
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,124,* check; used to check wherever the current node's type is one of
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,125,* the reason's why a subtree has side effects.
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,127,boolean nodeTypeMayHaveSideEffects(Node n) {
True,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java,128,"return NodeUtil.nodeTypeMayHaveSideEffects(n, compiler);"
False,src/com/google/javascript/jscomp/CheckSideEffects.java,src/com/google/javascript/jscomp/CheckSideEffects.java,112,oolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
True,src/com/google/javascript/jscomp/CheckSideEffects.java,src/com/google/javascript/jscomp/CheckSideEffects.java,112,boolean isSimpleOp = NodeUtil.isSimpleOperator(n);
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,151,onconditionalExpr);
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,151,"nonconditionalExpr, compiler);"
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,750,oolean seenSideEffects = NodeUtil.mayHaveSideEffects(subExpression);
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,750,boolean seenSideEffects = NodeUtil.mayHaveSideEffects(
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,751,"subExpression, compiler);"
False,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,892,eturn NodeUtil.mayHaveSideEffects(n);
True,src/com/google/javascript/jscomp/ExpressionDecomposer.java,src/com/google/javascript/jscomp/ExpressionDecomposer.java,893,"return NodeUtil.mayHaveSideEffects(n, compiler);"
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,326,f (NodeUtil.mayHaveSideEffects(def.getLastChild())) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,326,"if (NodeUtil.mayHaveSideEffects(def.getLastChild(), compiler)) {"
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,726,f (NodeUtil.mayEffectMutableState(cArg)
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,726,"if (NodeUtil.mayEffectMutableState(cArg, compiler)"
False,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,740,f (NodeUtil.mayHaveSideEffects(cArg)) {
True,src/com/google/javascript/jscomp/FunctionInjector.java,src/com/google/javascript/jscomp/FunctionInjector.java,740,"if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {"
False,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,245,f (!NodeUtil.nodeTypeMayHaveSideEffects(node)) {
True,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,245,"if (!NodeUtil.nodeTypeMayHaveSideEffects(node, compiler)) {"
False,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,276,f (NodeUtil.mayHaveSideEffects(right)) {
True,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,276,"if (NodeUtil.mayHaveSideEffects(right, compiler)) {"
False,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,296,oolean thenHasSideEffects = NodeUtil.mayHaveSideEffects(ifBranch);
False,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,297,oolean elseHasSideEffects = NodeUtil.mayHaveSideEffects(elseBranch);
True,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,296,boolean thenHasSideEffects = NodeUtil.mayHaveSideEffects(
True,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,297,"ifBranch, compiler);"
True,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,298,boolean elseHasSideEffects = NodeUtil.mayHaveSideEffects(
True,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,src/com/google/javascript/jscomp/GatherSideEffectSubexpressionsCallback.java,299,"elseBranch, compiler);"
False,src/com/google/javascript/jscomp/InlineSimpleMethods.java,src/com/google/javascript/jscomp/InlineSimpleMethods.java,94,NodeUtil.mayHaveSideEffects(callNode.getFirstChild())) {
True,src/com/google/javascript/jscomp/InlineSimpleMethods.java,src/com/google/javascript/jscomp/InlineSimpleMethods.java,94,!NodeUtil.mayHaveSideEffects(
True,src/com/google/javascript/jscomp/InlineSimpleMethods.java,src/com/google/javascript/jscomp/InlineSimpleMethods.java,95,"callNode.getFirstChild(), compiler)) {"
False,src/com/google/javascript/jscomp/InlineSimpleMethods.java,src/com/google/javascript/jscomp/InlineSimpleMethods.java,99,NodeUtil.mayHaveSideEffects(callNode.getFirstChild())) {
True,src/com/google/javascript/jscomp/InlineSimpleMethods.java,src/com/google/javascript/jscomp/InlineSimpleMethods.java,100,!NodeUtil.mayHaveSideEffects(
True,src/com/google/javascript/jscomp/InlineSimpleMethods.java,src/com/google/javascript/jscomp/InlineSimpleMethods.java,101,"callNode.getFirstChild(), compiler)) {"
False,src/com/google/javascript/jscomp/InlineSimpleMethods.java,src/com/google/javascript/jscomp/InlineSimpleMethods.java,270,f (NodeUtil.mayHaveSideEffects(currentChild)) {
True,src/com/google/javascript/jscomp/InlineSimpleMethods.java,src/com/google/javascript/jscomp/InlineSimpleMethods.java,272,"if (NodeUtil.mayHaveSideEffects(currentChild, compiler)) {"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,45, NodeUtil contains utilities that get properties from the Node object.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,45,* NodeUtil contains generally useful AST utilities.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,50,"tatic final long MAX_POSITIVE_INTEGER_NUMBER = (long)Math.pow(2, 53);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,50,"static final long MAX_POSITIVE_INTEGER_NUMBER = (long) Math.pow(2, 53);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,52,"inal static String JSC_PROPERTY_NAME_FN = ""JSCompiler_renameProperty"";"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,52,"static final String JSC_PROPERTY_NAME_FN = ""JSCompiler_renameProperty"";"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,54,/ TODO(user): Eliminate this class and make all of the static methods
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,55,/ instance methods of com.google.javascript.rhino.Node.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,54,static final char LARGEST_BASIC_LATIN = 0x7f;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,523,ublic static boolean isSymmetricOperation(Node n) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,522,static boolean isSymmetricOperation(Node n) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,540,ublic static boolean isRelationalOperation(Node n) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,539,static boolean isRelationalOperation(Node n) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,555,ublic static int getInverseOperator(int type) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,554,static int getInverseOperator(int type) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,755,ublic static Node newExpr(Node child) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,754,static Node newExpr(Node child) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,875,f (isSimpleOperatorType(n.getType())) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,874,if (isSimpleOperator(n)) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1043,param.isString() || param.isRegExp()))
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1044,eturn false;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1042,(param.isString() || param.isRegExp())) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1043,return false;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1243,static boolean isUndefined(Node n) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1244,switch (n.getType()) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1245,case Token.VOID:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1246,return true;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1247,case Token.NAME:
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1248,"return n.getString().equals(""undefined"");"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1250,return false;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1253,static boolean isNullOrUndefined(Node n) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1254,return n.isNull() || isUndefined(n);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1361,tatic boolean isUndefined(Node n) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1362,witch (n.getType()) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1363,ase Token.VOID:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1364,eturn true;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1365,ase Token.NAME:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1366,"eturn n.getString().equals(""undefined"");"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1368,eturn false;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1371,tatic boolean isNullOrUndefined(Node n) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1372,eturn n.isNull() || isUndefined(n);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1807,"ode.toString() + "" of ""+ parent.toString());"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1809,"node.toString() + "" of "" + parent.toString());"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1861, Is this node or any of its children a CALL?
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1863,tatic boolean containsCall(Node n) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1864,"eturn containsType(n, Token.CALL);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1985, @return Whether the callNode represents an expression in the form of:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1986,    x.apply(...)
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1987,    x['apply'](...)
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1988,  or
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1989,    x.call(...)
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1990,    x['call'](...)
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1992,tatic boolean isFunctionObjectCallOrApply(Node callNode) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1993,eturn isFunctionObjectCall(callNode) || isFunctionObjectApply(callNode);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1997, @return Whether the callNode represents an expression in the form of:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1998,    x.call(...)
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1999,    x['call'](...)
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2000, where x is a NAME node.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2002,tatic boolean isSimpleFunctionObjectCall(Node callNode) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2003,f (isFunctionObjectCall(callNode)) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2004,f (callNode.getFirstChild().getFirstChild().isName()) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2005,eturn true;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2009,eturn false;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2337,ublic static Node getRootOfQualifiedName(Node qName) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2304,static Node getRootOfQualifiedName(Node qName) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2420,har LARGEST_BASIC_LATIN = 0x7f;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2434,ublic static boolean isValidSimpleName(String name) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2399,static boolean isValidSimpleName(String name) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2492,ublic static Collection<Node> getVarsDeclaredInBranch(Node root) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2457,static Collection<Node> getVarsDeclaredInBranch(Node root) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2478,* @return Whether the node represents a qualified prototype property.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3183,* @return An appropriate AST node for the boolean value.
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3190,* @return An appropriate AST node for the double value.
False,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,144,f (NodeUtil.mayHaveSideEffects(rhs)
True,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java,144,if (mayHaveSideEffects(rhs)
False,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,235,f (!NodeUtil.nodeTypeMayHaveSideEffects(n)) {
True,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java,235,if (!nodeTypeMayHaveSideEffects(n)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,554,& !NodeUtil.mayHaveSideEffects(n));
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,554,&& !mayHaveSideEffects(n));
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,266,NodeUtil.mayHaveSideEffects(value)) {
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,266,"!NodeUtil.mayHaveSideEffects(value, compiler)) {"
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,839,odeUtil.mayHaveSideEffects(nameNode.getFirstChild())) {
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,839,"NodeUtil.mayHaveSideEffects(nameNode.getFirstChild(), compiler)) {"
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,46,rivate static boolean canFuseIntoOneStatement(Node block) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,46,private boolean canFuseIntoOneStatement(Node block) {
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,79,NodeUtil.mayHaveSideEffects(last.getFirstChild());
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,79,!mayHaveSideEffects(last.getFirstChild());
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,104,removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n))) {
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,104,"(removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n, compiler))) {"

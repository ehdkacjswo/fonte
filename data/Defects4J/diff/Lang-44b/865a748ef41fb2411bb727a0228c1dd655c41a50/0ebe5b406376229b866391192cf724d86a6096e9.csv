is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,66," @version $Id: RandomStringUtils.java,v 1.7 2002/12/23 00:32:24 scolebourne Exp $"
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,66,"* @version $Id: RandomStringUtils.java,v 1.8 2003/02/02 03:46:13 bayard Exp $"
False,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,196, <p>Creates a random string based on a variety of options.</p>
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,196,"* <p>Creates a random string based on a variety of options, using"
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,197,* default source of randomness.</p>
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,199,* This method has exactly the same semantics as {@link
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,200,"* #random(int,int,int,boolean,boolean,char[],Random)}, but"
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,201,* instead of depending on internal source of randomness ({@link
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,202,* #RANDOM}) it uses externally supplied instance of {@link
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,203,* Random} class.
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,205,* @param count length of random string to create
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,206,* @param start position in set of chars to start at
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,207,* @param end position in set of chars to end before
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,208,* @param letters only allow letters?
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,209,* @param numbers only allow numbers?
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,210,"* @param set set of chars to choose randoms from. If <code>null</code>,"
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,211,*  then it will use the set of all chars.
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,212,* @return the random string
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,213,* @throws ArrayIndexOutOfBoundsException if there are not
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,214,*  <code>(end - start) + 1</code> characters in the set array.
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,216,"public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set) {"
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,217,"return random(count,start,end,letters,numbers,set,RANDOM);"
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,221,"* <p>Creates a random string based on a variety of options, using"
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,222,* supplied source of randomness.</p>
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,233,* <p>As a source of randomness is used supplied {@link Random}
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,234,"* instance. This makes method behave predictively, and allows"
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,235,* usage of <code>RandomStringUtils</code> in situations that need
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,236,* repetitive behaviour.</p>
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,245,* @param random source of randomness.
False,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,218,"ublic static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set) {"
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,250,"public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {"
False,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,234,h = (char)(RANDOM.nextInt(gap) + start);
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,266,ch = (char)(random.nextInt(gap) + start);
False,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,236,h = set[RANDOM.nextInt(gap) + start];
True,src/java/org/apache/commons/lang/RandomStringUtils.java,src/java/org/apache/commons/lang/RandomStringUtils.java,268,ch = set[random.nextInt(gap) + start];
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,57,import java.util.Random;
False,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,64," @version $Id: RandomStringUtilsTest.java,v 1.2 2002/10/08 19:01:39 sullis Exp $"
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,66,"* @version $Id: RandomStringUtilsTest.java,v 1.3 2003/02/02 03:46:13 bayard Exp $"
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,154,long seed = System.currentTimeMillis();
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,155,"r1 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed));"
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,156,"r2 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed));"
True,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,src/test/org/apache/commons/lang/RandomStringUtilsTest.java,157,"assertEquals(""r1.equals(r2)"", r1, r2);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,16,ackage org.apache.commons.lang;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,16,package org.apache.commons.lang.text;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,73," @version $Id: Tokenizer.java,v 1.10 2004/09/02 07:52:35 scolebourne Exp $"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,73,"* @version $Id: StrTokenizer.java,v 1.1 2004/10/06 22:29:24 scolebourne Exp $"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,75,"ublic class Tokenizer implements ListIterator, Cloneable {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,75,"public class StrTokenizer implements ListIterator, Cloneable {"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,97,"ublic static final Matcher SPLIT_MATCHER = new CharSetMatcher("" \t\n\r\f"");"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,97,"public static final Matcher SPLIT_MATCHER = createCharSetMatcher("" \t\n\r\f"");"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,99,* A Matcher which matches the double quote character.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,100,* Best used for <code>quote</code>.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,102,public static final Matcher SINGLE_QUOTE_MATCHER = new CharMatcher('\'');
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,114,rivate static final Tokenizer CSV_TOKENIZER_PROTOTYPE;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,115,rivate static final Tokenizer TSV_TOKENIZER_PROTOTYPE;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,119,private static final StrTokenizer CSV_TOKENIZER_PROTOTYPE;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,120,private static final StrTokenizer TSV_TOKENIZER_PROTOTYPE;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,118,SV_TOKENIZER_PROTOTYPE = new Tokenizer(StringUtils.EMPTY);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,122,CSV_TOKENIZER_PROTOTYPE = new StrTokenizer();
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,125,SV_TOKENIZER_PROTOTYPE = new Tokenizer(StringUtils.EMPTY);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,129,TSV_TOKENIZER_PROTOTYPE = new StrTokenizer();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,159,* Constructor that creates a matcher from a set of characters.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,161,"* @param chars  the characters to match, must not be null"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,162,* @throws IllegalArgumentException if the character set is null or empty
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,164,public static Matcher createCharSetMatcher(char[] chars) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,165,if (chars == null || chars.length == 0) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,166,"throw new IllegalArgumentException(""Characters must not be null or empty"");"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,168,if (chars.length == 1) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,169,return new CharMatcher(chars[0]);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,171,return new CharSetMatcher(chars);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,175,* Constructor that creates a matcher from a string representing a set of characters.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,177,"* @param chars  the characters to match, must not be null"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,178,* @throws IllegalArgumentException if the character set is null or empty
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,180,public static Matcher createCharSetMatcher(String chars) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,181,if (chars == null || chars.length() == 0) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,182,"throw new IllegalArgumentException(""Characters must not be null or empty"");"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,184,if (chars.length() == 1) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,185,return new CharMatcher(chars.charAt(0));
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,187,return new CharSetMatcher(chars.toCharArray());
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,191,* Constructor that creates a matcher from a character.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,193,"* @param ch  the character to match, must not be null"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,195,public static Matcher createCharMatcher(char ch) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,196,return new CharMatcher(ch);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,200,* Constructor that creates a matcher from a string.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,202,"* @param str  the string to match, must not be null"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,203,* @throws IllegalArgumentException if the string is null or empty
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,205,public static Matcher createStringMatcher(String str) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,206,if (str == null || str.length() == 0) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,207,"throw new IllegalArgumentException(""String must not be null or empty"");"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,209,return new StringMatcher(str);
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,158,ublic static final Tokenizer getCSVInstance() {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,159,eturn (Tokenizer)(CSV_TOKENIZER_PROTOTYPE.clone());
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,217,public static StrTokenizer getCSVInstance() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,218,return (StrTokenizer)(CSV_TOKENIZER_PROTOTYPE.clone());
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,168,ublic static final Tokenizer getCSVInstance(String input) {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,169,okenizer tok = (Tokenizer)(CSV_TOKENIZER_PROTOTYPE.clone());
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,227,public static StrTokenizer getCSVInstance(String input) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,228,StrTokenizer tok = (StrTokenizer)(CSV_TOKENIZER_PROTOTYPE.clone());
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,180,ublic static final Tokenizer getCSVInstance(char[] input) {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,181,okenizer tok = (Tokenizer)(CSV_TOKENIZER_PROTOTYPE.clone());
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,239,public static StrTokenizer getCSVInstance(char[] input) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,240,StrTokenizer tok = (StrTokenizer)(CSV_TOKENIZER_PROTOTYPE.clone());
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,190,ublic static final Tokenizer getTSVInstance() {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,191,eturn (Tokenizer)(TSV_TOKENIZER_PROTOTYPE.clone());
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,249,public static StrTokenizer getTSVInstance() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,250,return (StrTokenizer)(TSV_TOKENIZER_PROTOTYPE.clone());
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,200,ublic static final Tokenizer getTSVInstance(String input) {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,201,okenizer tok = (Tokenizer)(TSV_TOKENIZER_PROTOTYPE.clone());
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,259,public static StrTokenizer getTSVInstance(String input) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,260,StrTokenizer tok = (StrTokenizer)(TSV_TOKENIZER_PROTOTYPE.clone());
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,212,ublic static final Tokenizer getTSVInstance(char[] input) {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,213,okenizer tok = (Tokenizer)(TSV_TOKENIZER_PROTOTYPE.clone());
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,271,public static StrTokenizer getTSVInstance(char[] input) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,272,StrTokenizer tok = (StrTokenizer)(TSV_TOKENIZER_PROTOTYPE.clone());
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,279,"* Constructs a tokenizer splitting on space, tab, newline and formfeed"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,280,"* as per StringTokenizer, but with no text to tokenize."
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,281,* <p>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,282,* This constructor is normally used with {@link #reset(String)}.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,284,public StrTokenizer() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,285,super();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,286,"this.text = """";"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,287,this.chars = new char[0];
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,225,ublic Tokenizer(String input) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,296,public StrTokenizer(String input) {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,237,"ublic Tokenizer(String input, char delim) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,308,"public StrTokenizer(String input, char delim) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,314,* Constructs a tokenizer splitting on the specified delimiter string.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,316,* @param input  the string which is to be parsed
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,317,* @param delim  the field delimiter string
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,319,"public StrTokenizer(String input, String delim) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,320,this(input);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,321,setDelimiterString(delim);
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,248,"ublic Tokenizer(String input, Matcher delim) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,330,"public StrTokenizer(String input, Matcher delim) {"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,261,"ublic Tokenizer(String input, char delim, char quote) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,343,"public StrTokenizer(String input, char delim, char quote) {"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,274,"ublic Tokenizer(String input, Matcher delim, Matcher quote) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,356,"public StrTokenizer(String input, Matcher delim, Matcher quote) {"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,282, <p>
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,283, This method is designed for use when you are using a character array in
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,284," your own code. The input is not cloned, so using the tokenizer in this way"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,285, is not thread-safe.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,287, @param input  the string which is to be parsed
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,365,"* @param input  the string which is to be parsed, cloned"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,289,ublic Tokenizer(char[] input) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,367,public StrTokenizer(char[] input) {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,292,his.chars = input;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,370,this.chars = (char[]) input.clone();
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,296, Constructs a tokenizer splitting on the specified delimiter character.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,297, <p>
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,298, This method is designed for use when you are using a character array in
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,299," your own code. The input is not cloned, so using the tokenizer in this way"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,300, is not thread-safe.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,374,* Constructs a tokenizer splitting on the specified character.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,302, @param input  the string which is to be parsed
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,376,"* @param input  the string which is to be parsed, cloned"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,305,"ublic Tokenizer(char[] input, char delim) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,379,"public StrTokenizer(char[] input, char delim) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,385,* Constructs a tokenizer splitting on the specified string.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,387,"* @param input  the string which is to be parsed, cloned"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,388,* @param delim the field delimiter string
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,390,"public StrTokenizer(char[] input, String delim) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,391,this(input);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,392,setDelimiterString(delim);
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,312, <p>
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,313, This method is designed for use when you are using a character array in
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,314," your own code. The input is not cloned, so using the tokenizer in this way"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,315, is not thread-safe.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,317, @param input  the string which is to be parsed
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,398,"* @param input  the string which is to be parsed, cloned"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,320,"ublic Tokenizer(char[] input, Matcher delim) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,401,"public StrTokenizer(char[] input, Matcher delim) {"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,328, <p>
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,329, This method is designed for use when you are using a character array in
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,330," your own code. The input is not cloned, so using the tokenizer in this way"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,331, is not thread-safe.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,333, @param input  the string which is to be parsed
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,410,"* @param input  the string which is to be parsed, cloned"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,337,"ublic Tokenizer(char[] input, char delim, char quote) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,414,"public StrTokenizer(char[] input, char delim, char quote) {"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,346, @param input  the string which is to be parsed
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,423,"* @param input  the string which is to be parsed, cloned"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,350,"ublic Tokenizer(char[] input, Matcher delim, Matcher quote) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,427,"public StrTokenizer(char[] input, Matcher delim, Matcher quote) {"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,430, <p>
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,431, This method is designed for use when you are using a character array in
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,432," your own code. The input is not cloned, so using the tokenizer in this way"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,433, is not thread-safe.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,440,hars = input;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,513,chars = (char[]) input.clone();
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,566,f (start == len && delim.isMatch(chars[start - 1])) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,639,"if (start == len && delim.isMatch(chars, len, start - 1) == 1) {"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,569,"ddToken(tokens, StringUtils.EMPTY);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,642,"addToken(tokens, """");"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,583,f (StringUtils.isEmpty(tok)) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,656,if (tok == null || tok.length() == 0) {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,611,nt current = start;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,612,hile (current < len &&
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,613,gnored.isMatch(chars[current]) &&
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,614,delim.isMatch(chars[current]) &&
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,615,quote.isMatch(chars[current])) {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,616,urrent++;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,684,int ignoreLen = 0;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,685,int delimLen = 0;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,686,int quoteLen = 0;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,687,while (start < len &&
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,688,"(ignoreLen = ignored.isMatch(chars, len, start)) >= 1 &&"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,689,"(delimLen = delim.isMatch(chars, len, start)) < 1 &&"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,690,"(quoteLen = quote.isMatch(chars, len, start)) < 1) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,691,start += ignoreLen;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,619,tart = current;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,621,/ Read the token depending on what the first
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,622,/ character is like
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,623,f (delim.isMatch(chars[start])) {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,624,"tart = readEmpty(start, token);"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,625, else if (quote.isMatch(chars[start])) {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,626,"tart = readQuoted(start, cbuf, token);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,694,if (start >= len) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,695,return start;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,628,"tart = readUnquoted(start, token);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,697,// lengths not setup
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,698,"if ((delimLen = delim.isMatch(chars, len, start)) >= 1) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,699,start += delimLen;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,700,"} else if ((quoteLen = quote.isMatch(chars, len, start)) >= 1) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,701,"start = readQuoted(start + quoteLen, cbuf, token);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,702,} else {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,703,"start = readUnquoted(start, token);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,707,//            // lengths not setup
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,708,"//            if ((delimLen = delim.isMatch(chars, start)) >= 1) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,709,//                start += delimLen;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,710,"//            } else if ((quoteLen = quote.isMatch(chars, start)) >= 1) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,711,"//                start = readQuoted(start + quoteLen, cbuf, token);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,712,//            } else {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,713,"//                start = readUnquoted(start, token);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,715,//        } else {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,716,//            if (delimLen > 0) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,717,//                start += delimLen;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,718,//            } else if (quoteLen >= 1) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,719,"//                start = readQuoted(start + quoteLen, cbuf, token);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,720,//            } else {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,721,"//                start = readUnquoted(start, token);"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,637, @param start The first character of field (this will be the quote
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,638,              character)
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,731,"* @param start The first character of field, immediately after any quote"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,650,nt pos = start + 1;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,743,int pos = start;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,747,int delimLen = 0;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,748,int quoteLen = 0;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,666,f (quote.isMatch(chars[pos]) &&
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,667,os + 1 < len &&
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,668,hars[pos + 1] == chars[pos]) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,761,"if ((quoteLen = quote.isMatch(chars, len, pos)) >= 1) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,762,if (pos + 1 < len && chars[pos + 1] == chars[pos]) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,763,cbuf[cbufcnt++] = chars[pos];
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,764,pos += 2;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,765,} else {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,766,// End the quoting if we get to this condition
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,767,quoting = false;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,768,pos += quoteLen;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,770,} else {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,771,"// Otherwise, just put the character into the token"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,672,/ End the quoting if we get to this condition
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,673,lse if (quote.isMatch(chars[pos])) {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,674,uoting = false;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,676,"/ Otherwise, just put the character into the token"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,677,lse {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,678,buf[cbufcnt++] = chars[pos];
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,680,os++;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,688,f (delim.isMatch(chars[pos])) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,782,"if ((delimLen = delim.isMatch(chars, len, pos)) >= 1) {"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,691,f (quote.isMatch(chars[pos])) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,785,"if ((quoteLen = quote.isMatch(chars, len, pos)) >= 1) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,787,pos += quoteLen;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,790,pos++;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,696,os++;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,703,eturn pos + 1;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,798,return pos + delimLen;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,811,// Find delimiter or end of string
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,812,char[] chars = this.chars;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,717,"/ Skip ahead until we get to a delimiter character, or"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,718,/ the end of the input
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,719,nt pos = start + 1;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,720,hile (pos < len && !delim.isMatch(chars[pos])) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,814,int pos = start;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,815,int delimLen = 0;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,816,"while (pos < len && (delimLen = delim.isMatch(chars, len, pos)) < 1) {"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,726,eturn pos + 1;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,730," Read an empty string (basically, if a delimiter is found right"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,731, after another delimiter).
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,733, @param start  the first character of field (this will be the delimiter
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,734,  character)
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,735, @param token  a StringBuffer where the output token will go.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,736, @return The starting position of the next field (the character
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,737,"  immediately after the delimiter, or if end of string found,"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,738,  then the length of string.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,740,"rivate int readEmpty(int start, StringBuffer token) {"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,741,oken.setLength(0);
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,742,eturn start + 1;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,822,return pos + delimLen;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,761," @param delim  the delimiter matcher to use, null ignored"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,841,* @param delim  the delimiter matcher to use
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,764,f (delim != null) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,844,if (delim == null) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,845,this.delim = NONE_MATCHER;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,846,} else {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,861,* Sets the field delimiter character
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,863,* @param delim  the delimiter character to use
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,865,public void setDelimiterString(String delim) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,866,if (delim == null || delim.length() == 0) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,867,setDelimiterMatcher(NONE_MATCHER);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,868,} else if (delim.length() == 1) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,869,setDelimiterMatcher(new CharMatcher(delim.charAt(0)));
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,870,} else {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,871,setDelimiterMatcher(new StringMatcher(delim));
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,922,okenizer cloned = (Tokenizer) super.clone();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1019,StrTokenizer cloned = (StrTokenizer) super.clone();
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,934, Class used to define a set of characters for matching purposes.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1031,* Defines the interface used to match a set of characters during tokenization.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1032,* Standard implementations of this interface are provided in the library.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1033,* These are accessed via the create*() factory methods on StrTokenizer.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1034,"* If your application needs more unusual matching, implement this interface directly."
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,938, Returns true if the specified character matches.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1038,* Returns true if the specified character position matches.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1039,* <p>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1040,* This method is called to check for a match.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1041,* The parameter <code>pos</code> represents the current position to be
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1042,* checked in the string <code>text</code> (a character array which must
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1043,* not be changed).
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1044,* The text length is also provided for efficiency.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1045,* The API guarantees that <code>pos</code> is a valid index for <code>text</code>.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1046,* <p>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1047,* The matching code may check one character or many.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1048,"* It must return zero for no match, or a positive number if a match was found."
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1049,* The number indicates the number of characters that matched.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,940, @param ch  the character to check for
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,941, @return true if matches
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1051,"* @param text  the text content to match against, do not change"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1052,* @param textLen  the length of the text
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1053,"* @param pos  the starting position for the match, valid for text"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1054,"* @return the number of matching characters, zero for no match"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,943,oolean isMatch(char ch);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1056,"int isMatch(char[] text, int textLen, int pos);"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,950,ublic static final class CharSetMatcher implements Matcher {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,951,rivate char chars[];
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1063,static final class CharSetMatcher implements Matcher {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1064,private char[] chars;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,958,ublic CharSetMatcher(char chars[]) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1071,CharSetMatcher(char chars[]) {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,965, Constructor that creates a matcher from a String.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,967," @param chars  the characters to match, must not be null"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,969,ublic CharSetMatcher(String chars) {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,970,uper();
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,971,his.chars = chars.toCharArray();
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,972,rrays.sort(this.chars);
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,976, Gets the characters being matched.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,978, @return the characters being matched
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,980,ublic char[] getChars() {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,981,eturn (char[]) chars.clone();
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,987, @param ch the character to match.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,988, @return whether or not the given charatcer matches.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1080,* @param text  the text content to match against
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1081,* @param textLen  the length of the text
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1082,* @param pos  the starting position
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1083,"* @return the number of matching characters, zero for no match"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,990,ublic boolean isMatch(char ch) {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,991,"eturn (Arrays.binarySearch(chars, ch) >= 0);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1085,"public int isMatch(char[] text, int textLen, int pos) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1086,"return (Arrays.binarySearch(chars, text[pos]) >= 0 ? 1 : 0);"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,999,ublic static final class CharMatcher implements Matcher {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1094,static final class CharMatcher implements Matcher {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1007,ublic CharMatcher(char ch) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1102,CharMatcher(char ch) {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1013, Gets the character being matched.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1108,* Returns whether or not the given character matches.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1110,* @param text  the text content to match against
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1111,* @param textLen  the length of the text
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1112,* @param pos  the starting position
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1113,"* @return the number of matching characters, zero for no match"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1115,"public int isMatch(char[] text, int textLen, int pos) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1116,return (ch == text[pos] ? 1 : 0);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1122,* Class used to define a set of characters for matching purposes.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1124,static final class StringMatcher implements Matcher {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1125,private char[] chars;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1128,* Constructor that creates a matcher from a String.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1015, @return the character being matched
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1130,"* @param chars  the characters to match, must not be null"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1017,ublic char getChar() {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1018,eturn this.ch;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1132,StringMatcher(String str) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1133,super();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1134,chars = str.toCharArray();
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1022, Returns whether or not the given character matches.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1138,* Returns whether or not the given text matches the stored string.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1024, @param ch the character to match.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1025, @return whether or not the given charatcer matches.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1140,* @param text  the text content to match against
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1141,* @param textLen  the length of the text
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1142,* @param pos  the starting position
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1143,"* @return the number of matching characters, zero for no match"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1027,ublic boolean isMatch(char ch) {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1028,eturn (this.ch == ch);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1145,"public int isMatch(char[] text, int textLen, int pos) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1146,int len = chars.length;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1147,if (pos + len >= textLen) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1148,return 0;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1150,"for (int i = 0; i < chars.length; i++, pos++) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1151,if (chars[i] != text[pos]) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1152,return 0;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1155,return len;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1045, @param ch the character to match.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1046, @return Always returns <code>false</code>.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1172,* @param text  the text content to match against
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1173,* @param textLen  the length of the text
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1174,* @param pos  the starting position
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1175,"* @return the number of matching characters, zero for no match"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1048,ublic boolean isMatch(char ch) {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1049,eturn false;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1177,"public int isMatch(char[] text, int textLen, int pos) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1178,return 0;
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1066, @param ch the character to match.
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1067, @return whether or not the given charatcer matches.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1195,* @param text  the text content to match against
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1196,* @param textLen  the length of the text
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1197,* @param pos  the starting position
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1198,"* @return the number of matching characters, zero for no match"
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1069,ublic boolean isMatch(char ch) {
False,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1070,eturn (ch <= 32);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1200,"public int isMatch(char[] text, int textLen, int pos) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1201,return (text[pos] <= 32 ? 1 : 0);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,16,ackage org.apache.commons.lang;
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,16,package org.apache.commons.lang.text;
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,23,import org.apache.commons.lang.ObjectUtils;
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,28,ublic class TokenizerTest extends TestCase {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,30,public class StrTokenizerTest extends TestCase {
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,34,ublic TokenizerTest(String name) {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,36,public StrTokenizerTest(String name) {
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,39,estSuite suite = new TestSuite(TokenizerTest.class);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,41,TestSuite suite = new TestSuite(StrTokenizerTest.class);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,53,okenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,55,StrTokenizer tok = new StrTokenizer(input);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,56,ok.setIgnoredMatcher(Tokenizer.TRIM_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,58,tok.setIgnoredMatcher(StrTokenizer.TRIM_MATCHER);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,86,okenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,88,StrTokenizer tok = new StrTokenizer(input);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,89,ok.setIgnoredMatcher(Tokenizer.NONE_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,91,tok.setIgnoredMatcher(StrTokenizer.NONE_MATCHER);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,119,okenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,121,StrTokenizer tok = new StrTokenizer(input);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,122,ok.setIgnoredMatcher(Tokenizer.NONE_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,124,tok.setIgnoredMatcher(StrTokenizer.NONE_MATCHER);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,152,okenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,154,StrTokenizer tok = new StrTokenizer(input);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,155,ok.setIgnoredMatcher(Tokenizer.TRIM_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,157,tok.setIgnoredMatcher(StrTokenizer.TRIM_MATCHER);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,182,okenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,184,StrTokenizer tok = new StrTokenizer(input);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,185,ok.setIgnoredMatcher(Tokenizer.TRIM_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,187,tok.setIgnoredMatcher(StrTokenizer.TRIM_MATCHER);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,216,okenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,218,StrTokenizer tok = new StrTokenizer(input);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,219,ok.setIgnoredMatcher(Tokenizer.TRIM_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,221,tok.setIgnoredMatcher(StrTokenizer.TRIM_MATCHER);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,264,okenizer tok = new Tokenizer(input);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,265,ok.setDelimiterMatcher(Tokenizer.SPACE_MATCHER);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,266,ok.setQuoteMatcher(Tokenizer.DOUBLE_QUOTE_MATCHER);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,267,ok.setIgnoredMatcher(Tokenizer.NONE_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,266,StrTokenizer tok = new StrTokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,267,tok.setDelimiterMatcher(StrTokenizer.SPACE_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,268,tok.setQuoteMatcher(StrTokenizer.DOUBLE_QUOTE_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,269,tok.setIgnoredMatcher(StrTokenizer.NONE_MATCHER);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,297,okenizer tok = new Tokenizer(input);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,298,ok.setDelimiterMatcher(Tokenizer.SPACE_MATCHER);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,299,ok.setQuoteMatcher(Tokenizer.DOUBLE_QUOTE_MATCHER);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,300,ok.setIgnoredMatcher(Tokenizer.NONE_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,299,StrTokenizer tok = new StrTokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,300,tok.setDelimiterMatcher(StrTokenizer.SPACE_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,301,tok.setQuoteMatcher(StrTokenizer.DOUBLE_QUOTE_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,302,tok.setIgnoredMatcher(StrTokenizer.NONE_MATCHER);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,325,okenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,327,StrTokenizer tok = new StrTokenizer(input);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,333,okenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,335,StrTokenizer tok = new StrTokenizer(input);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,341,okenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,343,StrTokenizer tok = new StrTokenizer(input);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,349,okenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,351,StrTokenizer tok = new StrTokenizer(input);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,357,"okenizer tok = new Tokenizer(input, ' ', '""');"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,359,"StrTokenizer tok = new StrTokenizer(input, ' ', '""');"
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,365,"okenizer tok = new Tokenizer(input, ':');"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,367,"StrTokenizer tok = new StrTokenizer(input, ':');"
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,373,"okenizer tok = new Tokenizer(input, ',');"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,375,"StrTokenizer tok = new StrTokenizer(input, ',');"
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,379,okenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,381,StrTokenizer tok = new StrTokenizer(input);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,389,okenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,391,StrTokenizer tok = new StrTokenizer(input);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,400,okenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,402,StrTokenizer tok = new StrTokenizer(input);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,403,ok = new Tokenizer(input.toCharArray());
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,405,tok = new StrTokenizer(input.toCharArray());
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,409,okenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,411,StrTokenizer tok = new StrTokenizer(input);
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,426,"ssertEquals(true, Tokenizer.SPACE_MATCHER.isMatch(' '));"
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,427,"ssertEquals(false, Tokenizer.SPACE_MATCHER.isMatch('\n'));"
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,428,"ssertEquals(false, Tokenizer.SPACE_MATCHER.isMatch('\u0001'));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,428,"assertEquals(1, StrTokenizer.SPACE_MATCHER.isMatch(new char[] {' '}, 1, 0));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,429,"assertEquals(0, StrTokenizer.SPACE_MATCHER.isMatch(new char[] {'\n'}, 1, 0));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,430,"assertEquals(0, StrTokenizer.SPACE_MATCHER.isMatch(new char[] {'\u0001'}, 1, 0));"
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,430,"ssertEquals(true, Tokenizer.TRIM_MATCHER.isMatch(' '));"
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,431,"ssertEquals(true, Tokenizer.TRIM_MATCHER.isMatch('\n'));"
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,432,"ssertEquals(true, Tokenizer.TRIM_MATCHER.isMatch('\u0001'));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,432,"assertEquals(1, StrTokenizer.TRIM_MATCHER.isMatch(new char[] {' '}, 1, 0));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,433,"assertEquals(1, StrTokenizer.TRIM_MATCHER.isMatch(new char[] {'\n'}, 1, 0));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,434,"assertEquals(1, StrTokenizer.TRIM_MATCHER.isMatch(new char[] {'\u0001'}, 1, 0));"
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,434,"ssertEquals(true, Tokenizer.SPLIT_MATCHER.isMatch(' '));"
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,435,"ssertEquals(true, Tokenizer.SPLIT_MATCHER.isMatch('\n'));"
False,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,436,"ssertEquals(false, Tokenizer.SPLIT_MATCHER.isMatch('\u0001'));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,436,"assertEquals(1, StrTokenizer.SPLIT_MATCHER.isMatch(new char[] {' '}, 1, 0));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,437,"assertEquals(1, StrTokenizer.SPLIT_MATCHER.isMatch(new char[] {'\n'}, 1, 0));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,438,"assertEquals(0, StrTokenizer.SPLIT_MATCHER.isMatch(new char[] {'\u0001'}, 1, 0));"
False,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,27," @version $Id: TextTestSuite.java,v 1.1 2004/09/05 00:56:31 bayard Exp $"
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,27,"* @version $Id: TextTestSuite.java,v 1.2 2004/10/06 22:29:24 scolebourne Exp $"
True,src/test/org/apache/commons/lang/text/TextTestSuite.java,src/test/org/apache/commons/lang/text/TextTestSuite.java,52,suite.addTest(StrTokenizerTest.suite());

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,32,* <p>DateUtils contains a lot of common methods considering manipulations of Dates or Calendars.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,33,* Some methods require some extra explanation.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,34,"* The truncate and round methods could be considered the Math.floor(), Math.ceil() or Math.round versions for dates"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,35,* This way date-fields will be ignored in bottom-up order.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,36,* As a complement to these methods we've introduced some fragment-methods. With these methods the Date-fields will be ignored in top-down order.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,37,"* Since a date without a year is not a valid date, you have to decide in what kind of date-field you want your result, for instance milliseconds or days."
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,38,* </p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,47,* @author Robert Scholte
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1052,* <p>Returns the number of milliseconds within the
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1053,* fragment. All datefields greater than the fragment will be ignored.</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1055,* <p>Asking the milliseconds of any date will only return the number of milliseconds
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1056,* of the current second (resulting in a number between 0 and 999). This
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1057,* method will retrieve the number of milliseconds for any fragment.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1058,"* For example, if you want to calculate the number of milliseconds past today,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1059,* your fragment is Calendar.DATE or Calendar.DAY_OF_YEAR. The result will
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1060,"* be all milliseconds of the past hour(s), minutes(s) and second(s).</p>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1062,"* <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1063,"* Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1064,"* Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1065,* A fragment less than or equal to a SECOND field will return 0.</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1067,* <p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1068,* <ul>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1069,"*  <li>January 1, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1070,"*  <li>January 6, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1071,"*  <li>January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10538 (10*1000 + 538)</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1072,"*  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in milliseconds)</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1073,* </ul>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1074,* </p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1076,"* @param date the date to work with, not null"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1077,* @param fragment the Calendar field part of date to calculate
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1078,* @return number of milliseconds within the fragment of date
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1079,* @throws IllegalArgumentException if the date is <code>null</code> or
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1080,* fragment is not supported
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1081,* @since 2.4
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1083,"public static long getFragmentInMilliseconds(Date date, int fragment) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1084,"return getFragment(date, fragment, Calendar.MILLISECOND);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1088,* <p>Returns the number of seconds within the
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1089,* fragment. All datefields greater than the fragment will be ignored.</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1091,* <p>Asking the seconds of any date will only return the number of seconds
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1092,* of the current minute (resulting in a number between 0 and 59). This
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1093,* method will retrieve the number of seconds for any fragment.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1094,"* For example, if you want to calculate the number of seconds past today,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1095,* your fragment is Calendar.DATE or Calendar.DAY_OF_YEAR. The result will
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1096,* be all seconds of the past hour(s) and minutes(s).</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1098,"* <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1099,"* Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1100,"* Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1101,* A fragment less than or equal to a SECOND field will return 0.</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1103,* <p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1104,* <ul>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1105,"*  <li>January 1, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10 (equivalent to deprecated date.getSeconds())</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1106,"*  <li>January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10 (equivalent to deprecated date.getSeconds())</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1107,"*  <li>January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 26110 (7*3600 + 15*60 + 10)</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1108,"*  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in seconds)</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1109,* </ul>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1110,* </p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1112,"* @param date the date to work with, not null"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1113,* @param fragment the Calendar field part of date to calculate
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1114,* @return number of seconds within the fragment of date
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1115,* @throws IllegalArgumentException if the date is <code>null</code> or
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1116,* fragment is not supported
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1117,* @since 2.4
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1119,"public static long getFragmentInSeconds(Date date, int fragment) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1120,"return getFragment(date, fragment, Calendar.SECOND);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1124,* <p>Returns the number of minutes within the
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1125,* fragment. All datefields greater than the fragment will be ignored.</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1127,* <p>Asking the minutes of any date will only return the number of minutes
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1128,* of the current hour (resulting in a number between 0 and 59). This
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1129,* method will retrieve the number of minutes for any fragment.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1130,"* For example, if you want to calculate the number of minutes past this month,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1131,* your fragment is Calendar.MONTH. The result will be all minutes of the
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1132,* past day(s) and hour(s).</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1134,"* <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1135,"* Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1136,"* Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1137,* A fragment less than or equal to a MINUTE field will return 0.</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1139,* <p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1140,* <ul>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1141,"*  <li>January 1, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15 (equivalent to deprecated date.getMinutes())</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1142,"*  <li>January 6, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15 (equivalent to deprecated date.getMinutes())</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1143,"*  <li>January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 15</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1144,"*  <li>January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 435 (7*60 + 15)</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1145,"*  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in minutes)</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1146,* </ul>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1147,* </p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1149,"* @param date the date to work with, not null"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1150,* @param fragment the Calendar field part of date to calculate
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1151,* @return number of minutes within the fragment of date
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1152,* @throws IllegalArgumentException if the date is <code>null</code> or
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1153,* fragment is not supported
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1154,* @since 2.4
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1156,"public static long getFragmentInMinutes(Date date, int fragment) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1157,"return getFragment(date, fragment, Calendar.MINUTE);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1161,* <p>Returns the number of hours within the
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1162,* fragment. All datefields greater than the fragment will be ignored.</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1164,* <p>Asking the hours of any date will only return the number of hours
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1165,* of the current day (resulting in a number between 0 and 23). This
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1166,* method will retrieve the number of hours for any fragment.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1167,"* For example, if you want to calculate the number of hours past this month,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1168,* your fragment is Calendar.MONTH. The result will be all hours of the
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1169,* past day(s).</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1171,"* <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1172,"* Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1173,"* Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1174,* A fragment less than or equal to a HOUR field will return 0.</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1176,* <p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1177,* <ul>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1178,"*  <li>January 1, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7 (equivalent to deprecated date.getHours())</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1179,"*  <li>January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7 (equivalent to deprecated date.getHours())</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1180,"*  <li>January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 7</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1181,"*  <li>January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 127 (5*24 + 7)</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1182,"*  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in hours)</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1183,* </ul>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1184,* </p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1186,"* @param date the date to work with, not null"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1187,* @param fragment the Calendar field part of date to calculate
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1188,* @return number of hours within the fragment of date
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1189,* @throws IllegalArgumentException if the date is <code>null</code> or
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1190,* fragment is not supported
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1191,* @since 2.4
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1193,"public static long getFragmentInHours(Date date, int fragment) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1194,"return getFragment(date, fragment, Calendar.HOUR_OF_DAY);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1198,* <p>Returns the number of days within the
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1199,* fragment. All datefields greater than the fragment will be ignored.</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1201,* <p>Asking the days of any date will only return the number of days
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1202,* of the current month (resulting in a number between 1 and 31). This
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1203,* method will retrieve the number of days for any fragment.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1204,"* For example, if you want to calculate the number of days past this year,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1205,* your fragment is Calendar.YEAR. The result will be all days of the
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1206,* past month(s).</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1208,"* <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1209,"* Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1210,"* Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1211,* A fragment less than or equal to a DAY field will return 0.</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1213,* <p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1214,* <ul>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1215,"*  <li>January 28, 2008 with Calendar.MONTH as fragment will return 28 (equivalent to deprecated date.getDay())</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1216,"*  <li>February 28, 2008 with Calendar.MONTH as fragment will return 28 (equivalent to deprecated date.getDay())</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1217,"*  <li>January 28, 2008 with Calendar.YEAR as fragment will return 28</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1218,"*  <li>February 28, 2008 with Calendar.YEAR as fragment will return 59</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1219,"*  <li>January 28, 2008 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in days)</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1220,* </ul>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1221,* </p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1223,"* @param date the date to work with, not null"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1224,* @param fragment the Calendar field part of date to calculate
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1225,* @return number of days  within the fragment of date
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1226,* @throws IllegalArgumentException if the date is <code>null</code> or
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1227,* fragment is not supported
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1228,* @since 2.4
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1230,"public static long getFragmentInDays(Date date, int fragment) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1231,"return getFragment(date, fragment, Calendar.DAY_OF_YEAR);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1235,* <p>Returns the number of milliseconds within the
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1236,* fragment. All datefields greater than the fragment will be ignored.</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1238,* <p>Asking the milliseconds of any date will only return the number of milliseconds
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1239,* of the current second (resulting in a number between 0 and 999). This
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1240,* method will retrieve the number of milliseconds for any fragment.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1241,"* For example, if you want to calculate the number of seconds past today,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1242,* your fragment is Calendar.DATE or Calendar.DAY_OF_YEAR. The result will
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1243,"* be all seconds of the past hour(s), minutes(s) and second(s).</p>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1245,"* <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1246,"* Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1247,"* Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1248,* A fragment less than or equal to a MILLISECOND field will return 0.</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1250,* <p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1251,* <ul>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1252,"*  <li>January 1, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538 (equivalent to calendar.get(Calendar.MILLISECOND))</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1253,"*  <li>January 6, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538 (equivalent to calendar.get(Calendar.MILLISECOND))</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1254,"*  <li>January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10538 (10*1000 + 538)</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1255,"*  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in milliseconds)</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1256,* </ul>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1257,* </p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1259,"* @param calendar the calendar to work with, not null"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1260,* @param fragment the Calendar field part of calendar to calculate
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1261,* @return number of milliseconds within the fragment of date
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1262,* @throws IllegalArgumentException if the date is <code>null</code> or
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1263,* fragment is not supported
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1264,* @since 2.4
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1266,"public static long getFragmentInMilliseconds(Calendar calendar, int fragment) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1267,"return getFragment(calendar, fragment, Calendar.MILLISECOND);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1270,* <p>Returns the number of seconds within the
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1271,* fragment. All datefields greater than the fragment will be ignored.</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1273,* <p>Asking the seconds of any date will only return the number of seconds
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1274,* of the current minute (resulting in a number between 0 and 59). This
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1275,* method will retrieve the number of seconds for any fragment.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1276,"* For example, if you want to calculate the number of seconds past today,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1277,* your fragment is Calendar.DATE or Calendar.DAY_OF_YEAR. The result will
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1278,* be all seconds of the past hour(s) and minutes(s).</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1280,"* <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1281,"* Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1282,"* Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1283,* A fragment less than or equal to a SECOND field will return 0.</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1285,* <p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1286,* <ul>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1287,"*  <li>January 1, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10 (equivalent to calendar.get(Calendar.SECOND))</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1288,"*  <li>January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10 (equivalent to calendar.get(Calendar.SECOND))</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1289,"*  <li>January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 26110 (7*3600 + 15*60 + 10)</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1290,"*  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in seconds)</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1291,* </ul>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1292,* </p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1294,"* @param calendar the calendar to work with, not null"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1295,* @param fragment the Calendar field part of calendar to calculate
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1296,* @return number of seconds within the fragment of date
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1297,* @throws IllegalArgumentException if the date is <code>null</code> or
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1298,* fragment is not supported
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1299,* @since 2.4
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1301,"public static long getFragmentInSeconds(Calendar calendar, int fragment) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1302,"return getFragment(calendar, fragment, Calendar.SECOND);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1306,* <p>Returns the number of minutes within the
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1307,* fragment. All datefields greater than the fragment will be ignored.</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1309,* <p>Asking the minutes of any date will only return the number of minutes
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1310,* of the current hour (resulting in a number between 0 and 59). This
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1311,* method will retrieve the number of minutes for any fragment.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1312,"* For example, if you want to calculate the number of minutes past this month,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1313,* your fragment is Calendar.MONTH. The result will be all minutes of the
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1314,* past day(s) and hour(s).</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1316,"* <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1317,"* Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1318,"* Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1319,* A fragment less than or equal to a MINUTE field will return 0.</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1321,* <p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1322,* <ul>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1323,"*  <li>January 1, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15 (equivalent to calendar.get(Calendar.MINUTES))</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1324,"*  <li>January 6, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15 (equivalent to calendar.get(Calendar.MINUTES))</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1325,"*  <li>January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 15</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1326,"*  <li>January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 435 (7*60 + 15)</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1327,"*  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in minutes)</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1328,* </ul>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1329,* </p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1331,"* @param calendar the calendar to work with, not null"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1332,* @param fragment the Calendar field part of calendar to calculate
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1333,* @return number of minutes within the fragment of date
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1334,* @throws IllegalArgumentException if the date is <code>null</code> or
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1335,* fragment is not supported
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1336,* @since 2.4
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1338,"public static long getFragmentInMinutes(Calendar calendar, int fragment) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1339,"return getFragment(calendar, fragment, Calendar.MINUTE);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1343,* <p>Returns the number of hours within the
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1344,* fragment. All datefields greater than the fragment will be ignored.</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1346,* <p>Asking the hours of any date will only return the number of hours
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1347,* of the current day (resulting in a number between 0 and 23). This
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1348,* method will retrieve the number of hours for any fragment.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1349,"* For example, if you want to calculate the number of hours past this month,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1350,* your fragment is Calendar.MONTH. The result will be all hours of the
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1351,* past day(s).</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1353,"* <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1354,"* Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1355,"* Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1356,* A fragment less than or equal to a HOUR field will return 0.</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1358,* <p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1359,* <ul>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1360,"*  <li>January 1, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7 (equivalent to calendar.get(Calendar.HOUR_OF_DAY))</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1361,"*  <li>January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7 (equivalent to calendar.get(Calendar.HOUR_OF_DAY))</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1362,"*  <li>January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 7</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1363,"*  <li>January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 127 (5*24 + 7)</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1364,"*  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in hours)</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1365,* </ul>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1366,* </p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1368,"* @param calendar the calendar to work with, not null"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1369,* @param fragment the Calendar field part of calendar to calculate
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1370,* @return number of hours within the fragment of date
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1371,* @throws IllegalArgumentException if the date is <code>null</code> or
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1372,* fragment is not supported
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1373,* @since 2.4
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1375,"public static long getFragmentInHours(Calendar calendar, int fragment) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1376,"return getFragment(calendar, fragment, Calendar.HOUR_OF_DAY);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1380,* <p>Returns the number of days within the
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1381,* fragment. All datefields greater than the fragment will be ignored.</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1383,* <p>Asking the days of any date will only return the number of days
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1384,* of the current month (resulting in a number between 1 and 31). This
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1385,* method will retrieve the number of days for any fragment.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1386,"* For example, if you want to calculate the number of days past this year,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1387,* your fragment is Calendar.YEAR. The result will be all days of the
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1388,* past month(s).</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1390,"* <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1391,"* Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1392,"* Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1393,* A fragment less than or equal to a DAY field will return 0.</p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1395,* <p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1396,* <ul>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1397,"*  <li>January 28, 2008 with Calendar.MONTH as fragment will return 28 (equivalent to calendar.get(Calendar.DAY_OF_MONTH))</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1398,"*  <li>February 28, 2008 with Calendar.MONTH as fragment will return 28 (equivalent to calendar.get(Calendar.DAY_OF_MONTH))</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1399,"*  <li>January 28, 2008 with Calendar.YEAR as fragment will return 28 (equivalent to calendar.get(Calendar.DAY_OF_YEAR))</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1400,"*  <li>February 28, 2008 with Calendar.YEAR as fragment will return 59 (equivalent to calendar.get(Calendar.DAY_OF_YEAR))</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1401,"*  <li>January 28, 2008 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in days)</li>"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1402,* </ul>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1403,* </p>
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1405,"* @param calendar the calendar to work with, not null"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1406,* @param fragment the Calendar field part of calendar to calculate
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1407,* @return number of days within the fragment of date
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1408,* @throws IllegalArgumentException if the date is <code>null</code> or
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1409,* fragment is not supported
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1410,* @since 2.4
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1412,"public static long getFragmentInDays(Calendar calendar, int fragment) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1413,"return getFragment(calendar, fragment, Calendar.DAY_OF_YEAR);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1417,* Date-version for fragment-calculation in any unit
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1419,"* @param date the date to work with, not null"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1420,* @param fragment the Calendar field part of date to calculate
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1421,* @param unit Calendar field defining the unit
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1422,* @return number of units within the fragment of the date
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1423,* @throws IllegalArgumentException if the date is <code>null</code> or
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1424,* fragment is not supported
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1425,* @since 2.4
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1427,"private static long getFragment(Date date, int fragment, int unit) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1428,if(date == null) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1429,"throw  new IllegalArgumentException(""The date must not be null"");"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1431,Calendar calendar = Calendar.getInstance();
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1432,calendar.setTime(date);
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1433,"return getFragment(calendar, fragment, unit);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1437,* Calendar-version for fragment-calculation in any unit
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1439,"* @param calendar the calendar to work with, not null"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1440,* @param fragment the Calendar field part of calendar to calculate
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1441,* @param unit Calendar field defining the unit
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1442,* @return number of units within the fragment of the calendar
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1443,* @throws IllegalArgumentException if the date is <code>null</code> or
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1444,* fragment is not supported
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1445,* @since 2.4
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1447,"private static long getFragment(Calendar calendar, int fragment, int unit) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1448,if(calendar == null) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1449,"throw  new IllegalArgumentException(""The date must not be null"");"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1451,long millisPerUnit = getMillisPerUnit(unit);
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1452,long result = 0;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1454,// Fragments bigger than a day require a breakdown to days
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1455,switch (fragment) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1456,case Calendar.YEAR:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1457,result += (calendar.get(Calendar.DAY_OF_YEAR) * MILLIS_PER_DAY) / millisPerUnit;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1458,break;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1459,case Calendar.MONTH:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1460,result += (calendar.get(Calendar.DAY_OF_MONTH) * MILLIS_PER_DAY) / millisPerUnit;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1461,break;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1464,switch (fragment) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1465,// Number of days already calculated for these cases
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1466,case Calendar.YEAR:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1467,case Calendar.MONTH:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1469,// The rest of the valid cases
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1470,case Calendar.DAY_OF_YEAR:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1471,case Calendar.DATE:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1472,result += (calendar.get(Calendar.HOUR_OF_DAY) * MILLIS_PER_HOUR) / millisPerUnit;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1473,case Calendar.HOUR_OF_DAY:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1474,result += (calendar.get(Calendar.MINUTE) * MILLIS_PER_MINUTE) / millisPerUnit;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1475,case Calendar.MINUTE:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1476,result += (calendar.get(Calendar.SECOND) * MILLIS_PER_SECOND) / millisPerUnit;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1477,case Calendar.SECOND:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1478,result += (calendar.get(Calendar.MILLISECOND) * 1) / millisPerUnit;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1479,break;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1480,case Calendar.MILLISECOND: break;//never useful
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1481,"default: throw new IllegalArgumentException(""The fragment "" + fragment + "" is not supported"");"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1483,return result;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1487,"* Returns the number of millis of a datefield, if this is a constant value"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1489,* @param unit A Calendar field which is a valid unit for a fragment
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1490,* @return number of millis
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1491,* @throws IllegalArgumentException if date can't be represented in millisenconds
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1492,* @since 2.4
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1494,private static long getMillisPerUnit(int unit) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1495,long result = Long.MAX_VALUE;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1496,switch (unit) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1497,case Calendar.DAY_OF_YEAR:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1498,case Calendar.DATE:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1499,result = MILLIS_PER_DAY;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1500,break;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1501,case Calendar.HOUR_OF_DAY:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1502,result = MILLIS_PER_HOUR;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1503,break;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1504,case Calendar.MINUTE:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1505,result = MILLIS_PER_MINUTE;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1506,break;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1507,case Calendar.SECOND:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1508,result = MILLIS_PER_SECOND;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1509,break;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1510,case Calendar.MILLISECOND:
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1511,result = 1;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1512,break;
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1513,"default: throw new IllegalArgumentException(""The unit "" + unit + "" cannot be represented is milleseconds"");"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1515,return result;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,1,package org.apache.commons.lang.time;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,3,import java.util.Calendar;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,4,import java.util.Date;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,6,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,7,import junit.framework.Test;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,8,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,10,import org.apache.commons.lang.StringUtils;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,11,import org.apache.commons.lang.time.DateFormatUtils;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,13,public class DateUtilsFragmentTest extends TestCase {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,15,public static Test suite() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,16,TestSuite suite = new TestSuite(DateUtilsFragmentTest.class);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,17,"suite.setName(""DateUtils Fragment Tests"");"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,18,return suite;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,21,private static final int months = 7;   // second final prime before 12
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,22,private static final int days = 23;    // second final prime before 31 (and valid)
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,23,private static final int hours = 19;   // second final prime before 24
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,24,private static final int minutes = 53; // second final prime before 60
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,25,private static final int seconds = 47; // third final prime before 60
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,26,private static final int millis = 991; // second final prime before 1000
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,28,private Date aDate;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,29,private Calendar aCalendar;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,31,protected void setUp() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,32,aCalendar = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,33,"aCalendar.set(2005, months, days, hours, minutes, seconds);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,34,"aCalendar.set(Calendar.MILLISECOND, millis);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,35,aDate = aCalendar.getTime();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,38,public void testNullDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,39,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,40,"DateUtils.getFragmentInMilliseconds((Date) null, Calendar.MILLISECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,41,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,42,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,44,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,45,"DateUtils.getFragmentInSeconds((Date) null, Calendar.MILLISECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,46,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,47,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,49,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,50,"DateUtils.getFragmentInMinutes((Date) null, Calendar.MILLISECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,51,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,52,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,54,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,55,"DateUtils.getFragmentInHours((Date) null, Calendar.MILLISECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,56,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,57,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,59,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,60,"DateUtils.getFragmentInDays((Date) null, Calendar.MILLISECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,61,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,62,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,65,public void testNullCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,66,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,67,"DateUtils.getFragmentInMilliseconds((Calendar) null, Calendar.MILLISECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,68,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,69,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,71,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,72,"DateUtils.getFragmentInSeconds((Calendar) null, Calendar.MILLISECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,73,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,74,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,76,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,77,"DateUtils.getFragmentInMinutes((Calendar) null, Calendar.MILLISECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,78,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,79,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,81,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,82,"DateUtils.getFragmentInHours((Calendar) null, Calendar.MILLISECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,83,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,84,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,86,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,87,"DateUtils.getFragmentInDays((Calendar) null, Calendar.MILLISECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,88,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,89,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,92,public void testInvalidFragmentWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,93,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,94,"DateUtils.getFragmentInMilliseconds(aDate, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,95,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,96,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,98,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,99,"DateUtils.getFragmentInSeconds(aDate, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,100,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,101,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,103,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,104,"DateUtils.getFragmentInMinutes(aDate, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,105,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,106,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,108,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,109,"DateUtils.getFragmentInHours(aDate, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,110,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,111,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,113,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,114,"DateUtils.getFragmentInDays(aDate, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,115,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,116,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,119,public void testInvalidFragmentWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,120,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,121,"DateUtils.getFragmentInMilliseconds(aCalendar, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,122,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,123,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,125,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,126,"DateUtils.getFragmentInSeconds(aCalendar, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,127,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,128,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,130,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,131,"DateUtils.getFragmentInMinutes(aCalendar, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,132,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,133,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,135,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,136,"DateUtils.getFragmentInHours(aCalendar, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,137,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,138,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,140,try {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,141,"DateUtils.getFragmentInDays(aCalendar, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,142,fail();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,143,} catch(IllegalArgumentException iae) {}
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,146,public void testMillisecondFragmentInLargerUnitWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,147,"assertEquals(0, DateUtils.getFragmentInMilliseconds(aDate, Calendar.MILLISECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,148,"assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.MILLISECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,149,"assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MILLISECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,150,"assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MILLISECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,151,"assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MILLISECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,154,public void testMillisecondFragmentInLargerUnitWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,155,"assertEquals(0, DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MILLISECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,156,"assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.MILLISECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,157,"assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MILLISECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,158,"assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MILLISECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,159,"assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MILLISECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,162,public void testSecondFragmentInLargerUnitWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,163,"assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,164,"assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,165,"assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,166,"assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,169,public void testSecondFragmentInLargerUnitWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,170,"assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,171,"assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,172,"assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,173,"assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.SECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,176,public void testMinuteFragmentInLargerUnitWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,177,"assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,178,"assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,179,"assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,182,public void testMinuteFragmentInLargerUnitWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,183,"assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MINUTE));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,184,"assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MINUTE));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,185,"assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MINUTE));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,188,public void testHourOfDayFragmentInLargerUnitWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,189,"assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.HOUR_OF_DAY));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,190,"assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.HOUR_OF_DAY));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,193,public void testHourOfDayFragmentInLargerUnitWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,194,"assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.HOUR_OF_DAY));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,195,"assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.HOUR_OF_DAY));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,198,public void testDayOfYearFragmentInLargerUnitWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,199,"assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DAY_OF_YEAR));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,202,public void testDayOfYearFragmentInLargerUnitWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,203,"assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DAY_OF_YEAR));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,206,public void testDateFragmentInLargerUnitWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,207,"assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DATE));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,210,public void testDateFragmentInLargerUnitWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,211,"assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DATE));"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,214,//Calendar.SECOND as useful fragment
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,216,public void testMillisecondsOfSecondWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,217,"long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.SECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,218,"assertEquals(millis, testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,221,public void testMillisecondsOfSecondWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,222,"long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.SECOND);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,223,"assertEquals(millis, testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,224,"assertEquals(aCalendar.get(Calendar.MILLISECOND), testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,227,//Calendar.MINUTE as useful fragment
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,229,public void testMillisecondsOfMinuteWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,230,"long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MINUTE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,231,"assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,234,public void testMillisecondsOfMinuteWithCalender() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,235,"long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MINUTE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,236,"assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,239,public void testSecondsofMinuteWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,240,"long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MINUTE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,241,"assertEquals(seconds, testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,244,public void testSecondsofMinuteWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,245,"long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MINUTE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,246,"assertEquals(seconds, testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,247,"assertEquals(aCalendar.get(Calendar.SECOND), testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,250,//Calendar.HOUR_OF_DAY as useful fragment
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,252,public void testMillisecondsOfHourWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,253,"long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.HOUR_OF_DAY);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,254,"assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,257,public void testMillisecondsOfHourWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,258,"long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.HOUR_OF_DAY);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,259,"assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,262,public void testSecondsofHourWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,263,"long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.HOUR_OF_DAY);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,264,assertEquals(
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,265,seconds
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,266,+ (minutes
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,267,"* DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,268,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,271,public void testSecondsofHourWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,272,"long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.HOUR_OF_DAY);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,273,assertEquals(
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,274,seconds
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,275,+ (minutes
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,276,"* DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,277,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,280,public void testMinutesOfHourWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,281,"long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.HOUR_OF_DAY);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,282,"assertEquals(minutes, testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,285,public void testMinutesOfHourWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,286,"long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.HOUR_OF_DAY);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,287,"assertEquals(minutes, testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,290,//Calendar.DATE and Calendar.DAY_OF_YEAR as useful fragment
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,291,public void testMillisecondsOfDayWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,292,"long testresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DATE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,293,long expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,294,"assertEquals(expectedValue, testresult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,295,"testresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DAY_OF_YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,296,"assertEquals(expectedValue, testresult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,299,public void testMillisecondsOfDayWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,300,"long testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DATE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,301,long expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,302,"assertEquals(expectedValue, testresult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,303,"testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DAY_OF_YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,304,"assertEquals(expectedValue, testresult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,307,public void testSecondsOfDayWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,308,"long testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DATE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,309,long expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,310,"assertEquals(expectedValue, testresult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,311,"testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DAY_OF_YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,312,"assertEquals(expectedValue, testresult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,315,public void testSecondsOfDayWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,316,"long testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DATE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,317,long expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,318,"assertEquals(expectedValue, testresult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,319,"testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DAY_OF_YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,320,"assertEquals(expectedValue, testresult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,323,public void testMinutesOfDayWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,324,"long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DATE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,325,long expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,326,"assertEquals(expectedValue,testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,327,"testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DAY_OF_YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,328,"assertEquals(expectedValue,testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,331,public void testMinutesOfDayWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,332,"long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DATE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,333,long expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,334,"assertEquals(expectedValue, testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,335,"testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DAY_OF_YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,336,"assertEquals(expectedValue, testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,339,public void testHoursOfDayWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,340,"long testResult = DateUtils.getFragmentInHours(aDate, Calendar.DATE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,341,long expectedValue = hours;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,342,"assertEquals(expectedValue,testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,343,"testResult = DateUtils.getFragmentInHours(aDate, Calendar.DAY_OF_YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,344,"assertEquals(expectedValue,testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,347,public void testHoursOfDayWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,348,"long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DATE);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,349,long expectedValue = hours;
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,350,"assertEquals(expectedValue, testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,351,"testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DAY_OF_YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,352,"assertEquals(expectedValue, testResult);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,356,//Calendar.MONTH as useful fragment
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,357,public void testMillisecondsOfMonthWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,358,"long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MONTH);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,359,assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,360,"+ (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY),"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,361,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,364,public void testMillisecondsOfMonthWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,365,"long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MONTH);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,366,assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,367,"+ (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY),"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,368,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,371,public void testSecondsOfMonthWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,372,"long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MONTH);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,373,assertEquals(
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,374,seconds
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,375,+ ((minutes * DateUtils.MILLIS_PER_MINUTE)
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,376,+ (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,377,"/ DateUtils.MILLIS_PER_SECOND,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,378,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,381,public void testSecondsOfMonthWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,382,"long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MONTH);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,383,assertEquals(
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,384,seconds
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,385,+ ((minutes * DateUtils.MILLIS_PER_MINUTE)
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,386,+ (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,387,"/ DateUtils.MILLIS_PER_SECOND,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,388,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,391,public void testMinutesOfMonthWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,392,"long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.MONTH);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,393,assertEquals(minutes
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,394,+ ((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,395,"/ DateUtils.MILLIS_PER_MINUTE,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,396,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,399,public void testMinutesOfMonthWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,400,"long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.MONTH);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,401,assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,402,"/ DateUtils.MILLIS_PER_MINUTE,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,403,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,406,public void testHoursOfMonthWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,407,"long testResult = DateUtils.getFragmentInHours(aDate, Calendar.MONTH);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,408,assertEquals(hours + ((days * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,409,"/ DateUtils.MILLIS_PER_HOUR,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,410,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,413,public void testHoursOfMonthWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,414,"long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.MONTH);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,415,assertEquals( hours +((days * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,416,"/ DateUtils.MILLIS_PER_HOUR,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,417,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,420,//Calendar.YEAR as useful fragment
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,421,public void testMillisecondsOfYearWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,422,"long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,423,Calendar cal = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,424,cal.setTime(aDate);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,425,assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,426,"+ (hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY),"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,427,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,430,public void testMillisecondsOfYearWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,431,"long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,432,assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,433,"+ (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY),"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,434,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,437,public void testSecondsOfYearWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,438,"long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,439,Calendar cal = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,440,cal.setTime(aDate);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,441,assertEquals(
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,442,seconds
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,443,+ ((minutes * DateUtils.MILLIS_PER_MINUTE)
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,444,+ (hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,445,"/ DateUtils.MILLIS_PER_SECOND,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,446,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,449,public void testSecondsOfYearWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,450,"long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,451,assertEquals(
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,452,seconds
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,453,+ ((minutes * DateUtils.MILLIS_PER_MINUTE)
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,454,+ (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,455,"/ DateUtils.MILLIS_PER_SECOND,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,456,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,459,public void testMinutesOfYearWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,460,"long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,461,Calendar cal = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,462,cal.setTime(aDate);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,463,assertEquals(minutes
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,464,+ ((hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,465,"/ DateUtils.MILLIS_PER_MINUTE,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,466,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,469,public void testMinutesOfYearWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,470,"long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,471,assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,472,"/ DateUtils.MILLIS_PER_MINUTE,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,473,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,476,public void testHoursOfYearWithDate() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,477,"long testResult = DateUtils.getFragmentInHours(aDate, Calendar.YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,478,Calendar cal = Calendar.getInstance();
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,479,cal.setTime(aDate);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,480,assertEquals(hours + ((cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,481,"/ DateUtils.MILLIS_PER_HOUR,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,482,testResult);
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,485,public void testHoursOfYearWithCalendar() {
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,486,"long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.YEAR);"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,487,assertEquals( hours +((aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,488,"/ DateUtils.MILLIS_PER_HOUR,"
True,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java,489,testResult);
True,src/test/org/apache/commons/lang/time/TimeTestSuite.java,src/test/org/apache/commons/lang/time/TimeTestSuite.java,57,suite.addTest(DateUtilsFragmentTest.suite());

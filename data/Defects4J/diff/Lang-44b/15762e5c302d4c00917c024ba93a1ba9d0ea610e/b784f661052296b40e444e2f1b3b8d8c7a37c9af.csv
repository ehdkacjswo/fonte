is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,4,* Copyright (c) 2002-2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,5,* reserved.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,9,* are met:
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,17,*    distribution.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,20,"*    any, must include the following acknowledgement:"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,54,package org.apache.commons.lang;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,56,import java.util.ArrayList;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,57,import java.util.Arrays;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,58,import java.util.List;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,59,import java.util.ListIterator;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,62,* Tokenizes a string based based on delimiters (separators)
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,63,* and supporting quoting and ignored character concepts.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,64,* <p>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,65,* This class can split a String into many smaller strings. It aims to do a
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,66,"* similar job to java util StringTokenizer, however it offers much more"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,67,* control and flexibility.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,68,* <p>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,69,* The input String is split into a number of <i>tokens</i>.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,70,* Each token is separated from the next String by a <i>delimiter</i>.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,71,* One or more delimiter characters must be specified.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,72,* <p>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,73,* The processing then strips all the <i>ignored</i> characters from each side of the token.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,74,* The token may also have <i>quotes</i> to mark an area not to be stripped or tokenized.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,75,* Empty tokens may be removed or returned as null.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,76,* <pre>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,77,"* ""a,b,c""       - Three tokens ""a"",""b"",""c"" (comma delimiter)"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,78,"* ""a, b , c""    - Three tokens ""a"",""b"",""c"" (ignored space characters stripped)"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,79,"* ""a, "" b "", c"" - Three tokens ""a"","" b "",""c"" (quoted text untouched)"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,80,* </pre>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,81,* <p>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,82,"* By default, this tokenizer has the following properties:"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,83,* <pre>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,84,* Property                     Default
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,86,"* delimiter                    ,  (comma)"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,87,"* quote                        ""  (double quote)"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,88,* ignored                      char &lt;= 32 (as per trim)
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,89,* emptyTokenAsNull             false
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,90,* ignoreEmptyTokens            false
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,91,* </pre>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,93,* @author Matthew Inger
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,94,* @author Stephen Colebourne
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,96,public class Tokenizer implements ListIterator {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,97,// TODO: Constructors
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,98,// TODO: Tests
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,99,// TODO: Static factories CSV/StringTokenizer
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,102,* A Matcher which matches the comma character.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,103,* Best used for <code>delimiter</code>.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,105,"public static final Matcher COMMA_MATCHER = new CharMatcher(',');"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,107,* A Matcher which matches the double quote character.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,108,* Best used for <code>quote</code>.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,110,"public static final Matcher DOUBLE_QUOTE_MATCHER = new CharMatcher('""');"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,112,* A Matcher which matches the String trim() whitespace characters.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,113,* Best used for <code>ignored</code>.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,115,public static final Matcher SPACES_MATCHER = new TrimMatcher();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,117,* A Matcher that matches no characters. Don't use this for delimiters!
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,118,* Best used for <code>ignored</code>.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,120,public static final Matcher NONE_MATCHER = new NoMatcher();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,122,/** The text to work on */
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,123,private char chars[];
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,124,/** The parsed tokens */
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,125,private String tokens[];
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,126,/** The current iteration position */
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,127,private int tokenPos;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,129,/** The delimiter matcher */
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,130,private Matcher delim = COMMA_MATCHER;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,131,/** The quote matcher */
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,132,private Matcher quote = DOUBLE_QUOTE_MATCHER;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,133,/** The ignored matcher */
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,134,private Matcher ignored = SPACES_MATCHER;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,135,/** Whether to return empty tokens as null */
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,136,private boolean emptyAsNull = false;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,137,/** Whether to ignore empty tokens */
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,138,private boolean ignoreEmptyTokens = false;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,142,* Constructor.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,144,* @param input  the string which is to be parsed
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,146,public Tokenizer(String input) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,147,this(input.toCharArray());
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,151,* Constructor.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,153,* @param input  the string which is to be parsed
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,154,* @param delim  the field delimiter character
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,156,"public Tokenizer(String input, char delim) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,157,"this(input.toCharArray(), delim);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,161,* Constructor.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,163,* @param input  the string which is to be parsed
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,164,* @param delim  the field delimiter character
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,166,"public Tokenizer(String input, CharSetMatcher delim) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,167,"this(input.toCharArray(), delim);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,171,* Constructor.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,173,* @param input  the string which is to be parsed
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,174,* @param delim  the field delimiter character
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,175,* @param quote  the field quoted string character
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,177,"public Tokenizer(String input, char delim, char quote) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,178,"this(input.toCharArray(), delim, quote);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,182,* Constructor.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,184,* @param input  the string which is to be parsed
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,185,* @param delim  the field delimiter character
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,186,* @param quote  the field quoted string character
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,188,"public Tokenizer(String input, CharSetMatcher delim, CharSetMatcher quote) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,189,"this(input.toCharArray(), delim, quote);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,193,* Constructor.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,195,* @param input  the string which is to be parsed
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,197,public Tokenizer(char[] input) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,198,super();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,199,this.chars = (char[]) input.clone();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,200,this.tokenPos = 0;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,204,* Constructor.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,206,* @param input  the string which is to be parsed
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,207,* @param delim the field delimiter character
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,209,"public Tokenizer(char[] input, char delim) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,210,this(input);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,211,setDelimiterChar(delim);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,215,* Constructor.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,217,* @param input  the string which is to be parsed
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,218,* @param delim  the field delimiter character
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,220,"public Tokenizer(char[] input, CharSetMatcher delim) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,221,this(input);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,222,setDelimiterMatcher(delim);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,226,* Constructor.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,228,* @param input  the string which is to be parsed
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,229,* @param delim  the field delimiter character
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,230,* @param quote  the field quoted string character
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,232,"public Tokenizer(char[] input, char delim, char quote) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,233,"this(input, delim);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,234,setQuoteChar(quote);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,238,* Constructor.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,240,* @param input  the string which is to be parsed
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,241,* @param delim  the field delimiter character
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,242,* @param quote  the field quoted string character
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,244,"public Tokenizer(char[] input, CharSetMatcher delim, CharSetMatcher quote) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,245,"this(input, delim);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,246,setQuoteMatcher(quote);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,249,// API
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,252,* Gets the number of tokens found in the String.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,254,* @return the number of matched tokens
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,256,public int size() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,257,tokenize();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,258,return tokens.length;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,262,* Gets the next token from the String.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,264,"* @return the next sequential token, or null when no more tokens are found"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,266,public String nextToken() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,267,if (hasNext()) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,268,return tokens[tokenPos++];
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,269,} else {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,270,return null;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,275,* Gets the previous token from the String.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,277,"* @return the previous sequential token, or null when no more tokens are found"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,279,public String previousToken() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,280,if (hasPrevious()) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,281,return tokens[--tokenPos];
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,282,} else {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,283,return null;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,288,* Gets a copy of the full token list.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,290,* @return the tokens as a String array
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,292,public String[] getAllTokens() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,293,tokenize();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,294,return (String[]) tokens.clone();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,298,"* Resets this tokenizer, forgetting all parsing and iteration already completed."
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,299,* <p>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,300,* This method allows the same tokenizer to be reused for the same String.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,302,public void reset() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,303,tokenPos = 0;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,304,tokens = null;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,307,// ListIterator
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,310,* Checks whether there are any more tokens.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,312,* @return true if there are more tokens
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,314,public boolean hasNext() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,315,tokenize();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,316,return (tokenPos < tokens.length);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,320,* Gets the next token. This method is equivalent to {@link #nextToken()}.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,322,* @return the next String token
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,324,public Object next() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,325,return nextToken();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,329,* Gets the index of the next token to return.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,331,* @return the next token index
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,333,public int nextIndex() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,334,return tokenPos;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,338,* Checks whether there are any previous tokens that can be iterated to.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,340,* @return true if there are previous tokens
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,342,public boolean hasPrevious() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,343,tokenize();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,344,return (tokenPos > 0);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,348,* Gets the token previous to the last returned token.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,350,* @return the previous token
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,352,public Object previous() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,353,return previousToken();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,357,* Gets the index of the previous token.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,359,* @return the previous token index
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,361,public int previousIndex() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,362,return (tokenPos - 1);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,366,* Unsupported ListIterator operation.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,368,* @throws UnsupportedOperationException always
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,370,public void remove() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,371,"throw new UnsupportedOperationException(""remove() is unsupported"");"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,375,* Unsupported ListIterator operation.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,377,* @throws UnsupportedOperationException always
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,379,public void set(Object obj) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,380,"throw new UnsupportedOperationException(""set() is unsupported"");"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,384,* Unsupported ListIterator operation.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,386,* @throws UnsupportedOperationException always
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,388,public void add(Object obj) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,389,"throw new UnsupportedOperationException(""add() is unsupported"");"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,392,// Implementation
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,395,* Performs the tokenization if it hasn't already been done.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,397,private void tokenize() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,398,if (tokens == null) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,399,this.tokens = readTokens();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,404,* Read all the tokens.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,406,private String[] readTokens() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,407,int len = chars.length;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,408,char cbuf[] = new char[len];
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,409,StringBuffer token = new StringBuffer();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,410,int start = 0;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,411,List tokens = new ArrayList();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,412,String tok = null;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,414,// Keep going until we run out of characters
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,415,while (start < len) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,416,// read the next token
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,417,"start = readNextToken(start, cbuf, token);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,418,tok = token.toString();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,420,"// Add the token, following the rules"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,421,// in this object
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,422,"addToken(tokens, tok);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,424,// Reset the string buffer to zero length
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,425,token.setLength(0);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,427,// Handle the special case where the very last
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,428,"// character is a delimiter, in which case, we"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,429,// need another empty string
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,430,if (start == len && delim.isMatch(chars[start - 1])) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,431,"// Add the token, following the rules"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,432,// in this object
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,433,"addToken(tokens, new String());"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,437,return (String[]) tokens.toArray(new String[tokens.size()]);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,441,"* Adds a token to a list, paying attention to the parameters we've set."
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,443,* @param list  the list to add to
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,444,* @param tok  the token to add
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,446,"private void addToken(List list, String tok) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,447,if (tok == null || tok.length() == 0) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,448,if (ignoreEmptyTokens) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,449,return;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,451,if (emptyAsNull) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,452,tok = null;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,455,list.add(tok);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,459,* Reads character by character through the String to get the next token.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,461,* @param start  the first character of field
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,462,* @param cbuf  a character buffer for temporary computations (so we
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,463,*  don't have to keep recreating one)
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,464,* @param token  a StringBuffer where the output token will go
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,465,* @return the starting position of the next field (the character
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,466,"*  immediately after the delimiter, or if end of string found,"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,467,*  then the length of string
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,469,"private int readNextToken(int start, char cbuf[], StringBuffer token) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,470,token.setLength(0);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,471,int len = chars.length;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,473,"// skip all leading whitespace, unless it is the"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,474,// field delimiter or the quote character
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,475,while (start < len &&
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,476,ignored.isMatch(chars[start]) &&
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,477,!delim.isMatch(chars[start]) &&
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,478,!quote.isMatch(chars[start])) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,479,start++;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,482,// Read the token depending on what the first
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,483,// character is like
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,484,if (delim.isMatch(chars[start])) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,485,"start = readEmpty(start, token);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,486,} else if (quote.isMatch(chars[start])) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,487,"start = readQuoted(start, cbuf, token);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,488,} else {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,489,"start = readUnquoted(start, token);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,492,return start;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,496,* Reads a quoted string token.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,498,* @param start The first character of field (this will be the quote
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,499,*              character)
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,500,* @param cbuf A character buffer for temporary computations (so we
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,501,*             don't have to keep recreating one)
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,502,* @param token A StringBuffer where the output token will go.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,503,* @return The starting position of the next field (the character
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,504,"*         immediately after the delimiter, or if end of string found,"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,505,*         then the length of string.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,507,"private int readQuoted(int start, char cbuf[], StringBuffer token) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,508,// Loop until we've found the end of the quoted
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,509,// string or the end of the input
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,510,int cbufcnt = 0;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,511,int nd = start + 1;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,512,boolean done = false;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,513,boolean quoting = true;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,514,int len = chars.length;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,516,while (nd < len && !done) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,517,// Quoting mode can occur several times throughout
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,518,"// a given string, so must switch between quoting"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,519,// and non-quoting until we encounter a non-quoted
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,520,"// delimiter, or end of string, which inidicates end"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,521,// of token.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,522,if (quoting) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,523,"// If we've found a quote character, see if it's"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,524,"// followed by a second quote.  If so, then we need"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,525,// to actually put the quote character into the token
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,526,// rather than end the token.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,527,if (quote.isMatch(chars[nd]) &&
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,528,nd + 1 < len &&
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,529,chars[nd + 1] == chars[nd]) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,530,cbuf[cbufcnt++] = chars[nd];
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,531,nd++;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,533,// End the quoting if we get to this condition
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,534,else if (quote.isMatch(chars[nd])) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,535,quoting = false;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,537,"// Otherwise, just put the character into the token"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,538,else {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,539,cbuf[cbufcnt++] = chars[nd];
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,541,nd++;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,543,"// If we're not in quoting mode, if we encounter"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,544,"// a delimiter, the token is ended.  If we encounter"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,545,"// a quote, we start quoting mode, otherwise, just append"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,546,// the character
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,547,else {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,548,// If we're
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,549,if (delim.isMatch(chars[nd])) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,550,done = true;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,551,} else {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,552,if (quote.isMatch(chars[nd])) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,553,quoting = true;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,554,} else {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,555,cbuf[cbufcnt++] = chars[nd];
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,557,nd++;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,562,"token.append(cbuf, 0, cbufcnt);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,564,return nd + 1;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,568,* Read an unquoted string until a delimiter is found.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,570,* @param start  the first character of field
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,571,* @param token  a StringBuffer where the output token will go.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,572,* @return  the starting position of the next field (the character
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,573,"*  immediately after the delimiter, or if end of string found,"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,574,*  then the length of string.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,576,"private int readUnquoted(int start, StringBuffer token) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,577,int len = chars.length;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,578,"// Skip ahead until we get to a delimiter character, or"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,579,// the end of the input
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,580,int nd = start + 1;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,581,while (nd < len && !delim.isMatch(chars[nd])) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,582,nd++;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,585,"token.append(chars, start, Math.min(nd, len) - start);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,587,return nd + 1;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,591,"* Read an empty string (basically, if a delimiter is found right"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,592,* after another delimiter).
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,594,* @param start  the first character of field (this will be the delimiter
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,595,*  character)
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,596,* @param token  a StringBuffer where the output token will go.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,597,* @return The starting position of the next field (the character
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,598,"*  immediately after the delimiter, or if end of string found,"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,599,*  then the length of string.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,601,"private int readEmpty(int start, StringBuffer token) {"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,602,token.setLength(0);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,603,return start + 1;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,606,// Delimiter
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,609,* Gets the field delimiter matcher.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,611,* @return the delimiter matcher in use
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,613,public Matcher getDelimiterMatcher() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,614,return delim;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,618,* Sets the field delimiter matcher.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,619,* <p>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,620,* The delimitier is used to separate one token from another.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,622,"* @param delim  the delimiter matcher to use, null ignored"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,624,public void setDelimiterMatcher(Matcher delim) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,625,if (delim != null) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,626,this.delim = delim;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,631,* Sets the field delimiter character
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,633,* @param delim  the delimiter character to use
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,635,public void setDelimiterChar(char delim) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,636,setDelimiterMatcher(new CharMatcher(delim));
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,639,// Quote
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,642,* Gets the quote matcher currently in use.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,643,* <p>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,644,* The quote character is used to wrap data between the tokens.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,645,* This enables delimiters to be entered as data.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,646,"* The default value is '""' (double quote)."
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,648,* @return the quote matcher in use
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,650,public Matcher getQuoteMatcher() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,651,return quote;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,655,* Set the quote matcher to use.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,656,* <p>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,657,* The quote character is used to wrap data between the tokens.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,658,* This enables delimiters to be entered as data.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,660,"* @param quote  the quote matcher to use, null ignored"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,662,public void setQuoteMatcher(Matcher quote) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,663,if (quote != null) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,664,this.quote = quote;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,669,* Sets the quote character to use.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,670,* <p>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,671,* The quote character is used to wrap data between the tokens.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,672,* This enables delimiters to be entered as data.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,674,* @param quote  the quote character to use
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,676,public void setQuoteChar(char quote) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,677,setQuoteMatcher(new CharMatcher(quote));
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,680,// Ignored
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,683,* Gets the ignored character matcher.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,684,* <p>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,685,"* These characters are ignored when parsing the String, unless they are"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,686,* within a quoted region.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,687,* The default value is space (' ') and all char control characters (32 and less).
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,689,* @return the ignored matcher in use
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,691,public Matcher getIgnoredMatcher() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,692,return ignored;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,696,* Set the matcher for characters to ignore.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,697,* <p>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,698,"* These characters are ignored when parsing the String, unless they are"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,699,* within a quoted region.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,701,"* @param ignored  the ignored matcher to use, null ignored"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,703,public void setIgnoredMatcher(Matcher ignored) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,704,if (ignored != null) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,705,this.ignored = ignored;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,710,* Set the character to ignore.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,711,* <p>
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,712,"* This character is ignored when parsing the String, unless it is"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,713,* within a quoted region.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,715,* @param quote  the ignored character to use
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,717,public void setIgnoredChar(char ignored) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,718,setIgnoredMatcher(new CharMatcher(ignored));
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,723,* Gets whether the tokenizer currently returns empty tokens as null.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,724,* The default for this property is false.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,726,* @return true if empty tokens are returned as null
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,728,public boolean isEmptyTokenAsNull() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,729,return emptyAsNull;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,733,* Sets whether the tokenizer should return empty tokens as null.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,734,* The default for this property is false.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,736,* @return emptyAsNull  whether empty tokens are returned as null
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,738,public void setEmptyTokenAsNull(boolean emptyAsNull) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,739,this.emptyAsNull = emptyAsNull;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,744,* Gets whether the tokenizer currently ignores empty tokens.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,745,* The default for this property is false.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,747,* @return true if empty tokens are not returned
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,749,public boolean isIgnoreEmptyTokens() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,750,return ignoreEmptyTokens;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,754,* Sets whether the tokenizer should ignore and not return empty tokens.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,755,* The default for this property is false.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,757,* @return ignoreEmptyTokens  whether empty tokens are not returned
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,759,public void setIgnoreEmptyTokens(boolean ignoreEmptyTokens) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,760,this.ignoreEmptyTokens = ignoreEmptyTokens;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,765,* Class used to define a set of characters for matching purposes.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,767,public static interface Matcher {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,769,* Returns true if the specified character matches.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,771,* @param ch  the character to check for
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,772,* @return true if matches
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,774,boolean isMatch(char ch);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,779,* Class used to define a set of characters for matching purposes.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,781,public static final class CharSetMatcher implements Matcher {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,782,private char chars[];
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,785,* Constructor that creates a matcher from a character array.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,787,"* @param chars  the characters to match, must not be null"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,789,public CharSetMatcher(char chars[]) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,790,super();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,791,this.chars = (char[]) chars.clone();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,792,Arrays.sort(this.chars);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,796,* Constructor that creates a matcher from a String.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,798,"* @param chars  the characters to match, must not be null"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,800,public CharSetMatcher(String chars) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,801,this(chars.toCharArray());
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,805,* Gets the characters being matched.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,807,* @return the characters being matched
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,809,public char[] getChars() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,810,return (char[]) chars.clone();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,813,public boolean isMatch(char c) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,814,"return (Arrays.binarySearch(chars, c) >= 0);"
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,820,* Class used to define a character for matching purposes.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,822,public static final class CharMatcher implements Matcher {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,823,private char ch;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,826,* Constructor that creates a matcher that matches a single character.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,828,* @param chars  the character to match
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,830,public CharMatcher(char ch) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,831,super();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,832,this.ch = ch;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,836,* Gets the character being matched.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,838,* @return the character being matched
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,840,public char getChar() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,841,return this.ch;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,844,public boolean isMatch(char ch) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,845,return (this.ch == ch);
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,851,* Class used to match no characters.
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,853,static final class NoMatcher implements Matcher {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,855,NoMatcher() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,856,super();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,859,public boolean isMatch(char ch) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,860,return false;
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,866,* Class used to match whitespace as per trim().
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,868,static final class TrimMatcher implements Matcher {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,870,TrimMatcher() {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,871,super();
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,874,public boolean isMatch(char ch) {
True,src/java/org/apache/commons/lang/Tokenizer.java,src/java/org/apache/commons/lang/Tokenizer.java,875,return (ch <= 32);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,4,* Copyright (c) 2002-2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,5,* reserved.
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,9,* are met:
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,17,*    distribution.
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,20,"*    any, must include the following acknowledgement:"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,23,"*    Alternately, this acknowledgement may appear in the software itself,"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,24,*    if and wherever such third-party acknowledgements normally appear.
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,54,package org.apache.commons.lang;
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,59,import junit.textui.TestRunner;
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,62,* Unit test for Tokenizer.
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,64,* @author Matthew Inger
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,66,public class TokenizerTest extends TestCase {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,69,* JUnit constructor.
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,70,* @param name
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,72,public TokenizerTest(String name) {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,73,super(name);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,76,public static Test suite() {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,77,TestSuite suite = new TestSuite(TokenizerTest.class);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,78,"suite.setName(""TokenizerTest Tests"");"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,79,return suite;
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,83,public static void main(String[] args) {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,84,TestRunner.run(suite());
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,88,public void test1() {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,90,"String input = ""a;b;c;\""d;\""\""e\"";f; ; ;"";"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,91,Tokenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,92,tok.setDelimiterChar(';');
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,93,String tokens [] = tok.getAllTokens();
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,95,String expected[] = new String[]
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,97,"""a"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,98,"""b"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,99,"""c"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,100,"""d;\""e"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,101,"""f"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,107,assertTrue(tokens.length == expected.length);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,108,for (int i = 0; i < expected.length; i++) {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,109,"assertTrue(""token["" + i + ""] was '"" + tokens[i]"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,110,"+ ""' but was expected to be '"" + expected[i]"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,112,"ObjectUtils.equals(expected[i], tokens[i]));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,118,public void test2() {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,120,"String input = ""a;b;c ;\""d;\""\""e\"";f; ; ;"";"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,121,Tokenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,122,tok.setDelimiterChar(';');
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,123,tok.setIgnoredMatcher(Tokenizer.NONE_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,124,String tokens [] = tok.getAllTokens();
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,126,String expected[] = new String[]
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,128,"""a"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,129,"""b"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,130,"""c "","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,131,"""d;\""e"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,132,"""f"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,138,assertTrue(tokens.length == expected.length);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,139,for (int i = 0; i < expected.length; i++) {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,140,"assertTrue(""token["" + i + ""] was '"" + tokens[i]"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,141,"+ ""' but was expected to be '"" + expected[i]"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,143,"ObjectUtils.equals(expected[i], tokens[i]));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,149,public void test3() {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,151,"String input = ""a;b; c;\""d;\""\""e\"";f; ; ;"";"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,152,Tokenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,153,tok.setDelimiterChar(';');
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,154,tok.setIgnoredMatcher(Tokenizer.NONE_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,155,String tokens [] = tok.getAllTokens();
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,157,String expected[] = new String[]
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,159,"""a"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,160,"""b"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,161,""" c"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,162,"""d;\""e"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,163,"""f"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,169,assertTrue(tokens.length == expected.length);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,170,for (int i = 0; i < expected.length; i++) {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,171,"assertTrue(""token["" + i + ""] was '"" + tokens[i]"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,172,"+ ""' but was expected to be '"" + expected[i]"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,174,"ObjectUtils.equals(expected[i], tokens[i]));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,180,public void test4() {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,182,"String input = ""a;b; c;\""d;\""\""e\"";f; ; ;"";"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,183,Tokenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,184,tok.setDelimiterChar(';');
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,185,tok.setIgnoreEmptyTokens(true);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,186,String tokens [] = tok.getAllTokens();
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,188,String expected[] = new String[]
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,190,"""a"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,191,"""b"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,192,"""c"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,193,"""d;\""e"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,194,"""f"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,197,assertTrue(tokens.length == expected.length);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,198,for (int i = 0; i < expected.length; i++) {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,199,"assertTrue(""token["" + i + ""] was '"" + tokens[i]"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,200,"+ ""' but was expected to be '"" + expected[i]"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,202,"ObjectUtils.equals(expected[i], tokens[i]));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,208,public void test5() {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,210,"String input = ""a;b; c;\""d;\""\""e\"";f; ; ;"";"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,211,Tokenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,212,tok.setDelimiterChar(';');
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,213,tok.setEmptyTokenAsNull(true);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,214,String tokens [] = tok.getAllTokens();
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,216,String expected[] = new String[]
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,218,"""a"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,219,"""b"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,220,"""c"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,221,"""d;\""e"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,222,"""f"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,223,"null,"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,224,"null,"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,225,"null,"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,228,assertTrue(tokens.length == expected.length);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,229,for (int i = 0; i < expected.length; i++) {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,230,"assertTrue(""token["" + i + ""] was '"" + tokens[i]"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,231,"+ ""' but was expected to be '"" + expected[i]"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,233,"ObjectUtils.equals(expected[i], tokens[i]));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,239,public void test6() {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,241,"String input = ""a;b; c;\""d;\""\""e\"";f; ; ;"";"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,242,Tokenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,243,tok.setDelimiterChar(';');
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,244,//        tok.setTreatingEmptyAsNull(true);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,245,String tokens [] = tok.getAllTokens();
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,247,String expected[] = new String[]
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,249,"""a"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,250,"""b"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,251,""" c"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,252,"""d;\""e"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,253,"""f"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,254,"null,"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,255,"null,"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,256,"null,"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,259,int nextCount = 0;
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,260,while (tok.hasNext()) {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,261,tok.next();
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,262,nextCount++;
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,265,int prevCount = 0;
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,266,while (tok.hasPrevious()) {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,267,tok.previous();
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,268,prevCount++;
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,271,assertTrue(tokens.length == expected.length);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,273,"assertTrue(""could not cycle through entire token list"""
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,274,"+ "" using the 'hasNext' and 'next' methods"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,275,nextCount == expected.length);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,277,"assertTrue(""could not cycle through entire token list"""
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,278,"+ "" using the 'hasPrevious' and 'previous' methods"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,279,prevCount == expected.length);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,284,public void test7() {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,286,"String input = ""a   b c \""d e\"" f "";"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,287,Tokenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,288,tok.setDelimiterMatcher(Tokenizer.SPACES_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,289,tok.setIgnoredMatcher(Tokenizer.NONE_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,290,tok.setIgnoreEmptyTokens(false);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,291,String tokens [] = tok.getAllTokens();
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,293,String expected[] = new String[]
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,295,"""a"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,298,"""b"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,299,"""c"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,300,"""d e"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,301,"""f"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,305,assertTrue(tokens.length == expected.length);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,306,for (int i = 0; i < expected.length; i++) {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,307,"assertTrue(""token["" + i + ""] was '"" + tokens[i]"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,308,"+ ""' but was expected to be '"" + expected[i]"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,310,"ObjectUtils.equals(expected[i], tokens[i]));"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,316,public void test8() {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,318,"String input = ""a   b c \""d e\"" f "";"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,319,Tokenizer tok = new Tokenizer(input);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,320,tok.setDelimiterMatcher(Tokenizer.SPACES_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,321,tok.setIgnoredMatcher(Tokenizer.NONE_MATCHER);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,322,tok.setIgnoreEmptyTokens(true);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,323,String tokens [] = tok.getAllTokens();
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,325,String expected[] = new String[]
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,327,"""a"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,328,"""b"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,329,"""c"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,330,"""d e"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,331,"""f"","
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,334,assertTrue(tokens.length == expected.length);
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,335,for (int i = 0; i < expected.length; i++) {
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,336,"assertTrue(""token["" + i + ""] was '"" + tokens[i]"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,337,"+ ""' but was expected to be '"" + expected[i]"
True,src/test/org/apache/commons/lang/TokenizerTest.java,src/test/org/apache/commons/lang/TokenizerTest.java,339,"ObjectUtils.equals(expected[i], tokens[i]));"

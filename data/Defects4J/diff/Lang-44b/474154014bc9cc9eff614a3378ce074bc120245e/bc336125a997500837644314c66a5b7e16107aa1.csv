is_addition,old_file_path,new_file_path,line_num,content
True,src/test/org/apache/commons/lang/math/MathTestSuite.java,src/test/org/apache/commons/lang/math/MathTestSuite.java,58,suite.addTest(RangeTest.suite());
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,56,public void testConstructorExceptions() {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,57,try {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,58,new NumberRange (new Double (Double.NaN));
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,59,"fail(""no illegal argument exception"");"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,60,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,63,try {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,64,"new NumberRange (new Double (Double.NaN), new Double (12.2));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,65,"fail(""no illegal argument exception"");"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,66,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,69,try {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,70,"new NumberRange (new Double (12.2), new Double (Double.NaN));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,71,"fail(""no illegal argument exception"");"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,72,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,75,try {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,76,new NumberRange (new Float (Float.NaN));
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,77,"fail(""no illegal argument exception"");"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,78,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,81,try {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,82,"new NumberRange (new Float (Float.NaN), new Float(12.2));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,83,"fail(""no illegal argument exception"");"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,84,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,87,try {
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,88,"new NumberRange (new Float(12.2), new Float (Float.NaN));"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,89,"fail(""no illegal argument exception"");"
True,src/test/org/apache/commons/lang/math/NumberRangeTest.java,src/test/org/apache/commons/lang/math/NumberRangeTest.java,90,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,174,"assertEquals(""createNumber(String) 3 failed"", new Double(""1234.5""), NumberUtils.createNumber(""1234.5d""));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,176,"assertEquals(""createNumber(String) 4 failed"", new Float(""1234.5""), NumberUtils.createNumber(""1234.5f""));"
True,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,src/test/org/apache/commons/lang/math/NumberUtilsTest.java,179,"assertEquals(""createNumber(String) 6 failed"", new Long(12345), NumberUtils.createNumber(""12345l""));"
True,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,src/test/org/apache/commons/lang/math/RandomUtilsTest.java,50,assertTrue (RandomUtils.nextInt() >= 0);
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,2,* Copyright 2002-2005 The Apache Software Foundation.
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,17,package org.apache.commons.lang.math;
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,19,import junit.framework.Test;
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,21,import junit.framework.TestSuite;
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,24,* <p>
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,25,* Tests the base methods in the {@link org.apache.commons.lang.math.Range} class.
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,26,* </p>
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,28,* @author Nathan Beyer
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,29,* @version $Id$
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,31,public class RangeTest extends TestCase {
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,33,private static class RangeTestFixture extends Range {
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,34,private byte max;
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,36,private byte min;
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,38,"RangeTestFixture(byte min, byte max) {"
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,39,super();
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,40,this.min = min;
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,41,this.max = max;
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,44,public boolean containsNumber(Number number) {
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,45,if (number.byteValue() >= min && number.byteValue() <= max) {
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,46,return true;
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,48,return false;
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,51,public Number getMaximumNumber() {
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,52,return new Byte(max);
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,55,public Number getMinimumNumber() {
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,56,return new Byte(min);
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,60,public static Test suite() {
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,61,TestSuite suite = new TestSuite(RangeTest.class);
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,62,"suite.setName(""Range Tests"");"
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,63,return suite;
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,66,public RangeTest(String name) {
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,67,super(name);
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,70,protected void setUp() throws Exception {
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,71,super.setUp();
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,74,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,75,super.tearDown();
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,79,* Test method for 'org.apache.commons.lang.math.Range.equals(Object)'
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,81,public void testEqualsObject() {
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,82,"RangeTestFixture r1 = new RangeTestFixture((byte) 0, (byte) 5);"
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,83,"RangeTestFixture r2 = new RangeTestFixture((byte) 0, (byte) 5);"
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,84,"RangeTestFixture r3 = new RangeTestFixture((byte) 0, (byte) 10);"
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,86,"assertEquals(r1, r2);"
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,87,assertFalse(r2.equals(r3));
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,91,* Test method for 'org.apache.commons.lang.math.Range.hashCode()'
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,93,public void testHashCode() {
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,94,"RangeTestFixture r1 = new RangeTestFixture((byte) 0, (byte) 5);"
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,95,"RangeTestFixture r2 = new RangeTestFixture((byte) 0, (byte) 5);"
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,96,"RangeTestFixture r3 = new RangeTestFixture((byte) 0, (byte) 10);"
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,98,"assertEquals(r1.hashCode(), r2.hashCode());"
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,99,assertFalse(r1.hashCode() == r3.hashCode());
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,103,* Test method for 'org.apache.commons.lang.math.Range.toString()'
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,105,public void testToString() {
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,106,"RangeTestFixture r1 = new RangeTestFixture((byte) 0, (byte) 5);"
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,107,assertNotNull(r1.toString());
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,108,assertNotNull(r1.toString());
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,109,"RangeTestFixture r2 = new RangeTestFixture((byte) 0, (byte) 5);"
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,110,assertNotNull(r2.toString());
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,111,assertNotNull(r2.toString());
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,112,"RangeTestFixture r3 = new RangeTestFixture((byte) 0, (byte) 10);"
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,113,assertNotNull(r3.toString());
True,src/test/org/apache/commons/lang/math/RangeTest.java,src/test/org/apache/commons/lang/math/RangeTest.java,114,assertNotNull(r3.toString());

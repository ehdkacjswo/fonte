is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,29, {@link SimpleScalarValueChecker} and {@link SimpleScalarPointChecker}. The first
True,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java,29,* {@link SimpleScalarValueChecker} and {@link SimpleRealPointChecker}. The first
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,18,package org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,20,import org.apache.commons.math.util.MathUtils;
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,23,* Simple implementation of the {@link RealConvergenceChecker} interface using
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,24,* only point coordinates.
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,25,* <p>
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,26,* Convergence is considered to have been reached if either the relative
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,27,* difference between each point coordinate are smaller than a threshold
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,28,* or if either the absolute difference between the point coordinates are
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,29,* smaller than another threshold.
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,30,* </p>
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,31,"* @version $Revision: 757180 $ $Date: 2009-03-22 13:54:45 +0100 (dim., 22 mars 2009) $"
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,32,* @since 2.0
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,34,public class SimpleRealPointChecker implements RealConvergenceChecker {
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,36,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,37,private static final long serialVersionUID = 2490271385513842607L;
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,39,/** Default relative threshold. */
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,40,private static final double DEFAULT_RELATIVE_THRESHOLD = 100 * MathUtils.EPSILON;
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,42,/** Default absolute threshold. */
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,43,private static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * MathUtils.SAFE_MIN;
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,45,/** Relative tolerance threshold. */
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,46,private final double relativeThreshold;
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,48,/** Absolute tolerance threshold. */
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,49,private final double absoluteThreshold;
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,51,/** Build an instance with default threshold.
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,53,public SimpleRealPointChecker() {
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,54,this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,55,this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,58,/** Build an instance with a specified threshold.
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,59,* <p>
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,60,"* In order to perform only relative checks, the absolute tolerance"
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,61,* must be set to a negative value. In order to perform only absolute
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,62,"* checks, the relative tolerance must be set to a negative value."
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,63,* </p>
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,64,* @param relativeThreshold relative tolerance threshold
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,65,* @param absoluteThreshold absolute tolerance threshold
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,67,"public SimpleRealPointChecker(final double relativeThreshold,"
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,68,final double absoluteThreshold) {
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,69,this.relativeThreshold = relativeThreshold;
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,70,this.absoluteThreshold = absoluteThreshold;
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,73,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,74,"public boolean converged(final int iteration,"
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,75,"final RealPointValuePair previous,"
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,76,final RealPointValuePair current) {
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,77,final double[] p        = previous.getPoint();
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,78,final double[] c        = current.getPoint();
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,79,for (int i = 0; i < p.length; ++i) {
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,80,final double difference = Math.abs(p[i] - c[i]);
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,81,"final double size       = Math.max(Math.abs(p[i]), Math.abs(c[i]));"
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,82,if ((difference > (size * relativeThreshold)) && (difference > absoluteThreshold)) {
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,83,return false;
True,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,86,return true;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,18,package org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,20,import org.apache.commons.math.util.MathUtils;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,23,* Simple implementation of the {@link VectorialConvergenceChecker} interface using
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,24,* only point coordinates.
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,25,* <p>
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,26,* Convergence is considered to have been reached if either the relative
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,27,* difference between each point coordinate are smaller than a threshold
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,28,* or if either the absolute difference between the point coordinates are
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,29,* smaller than another threshold.
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,30,* </p>
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,31,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,32,* @since 2.0
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,34,public class SimpleVectorialPointChecker implements VectorialConvergenceChecker {
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,36,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,37,private static final long serialVersionUID = 6571098732056285089L;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,39,/** Default relative threshold. */
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,40,private static final double DEFAULT_RELATIVE_THRESHOLD = 100 * MathUtils.EPSILON;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,42,/** Default absolute threshold. */
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,43,private static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * MathUtils.SAFE_MIN;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,45,/** Relative tolerance threshold. */
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,46,private final double relativeThreshold;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,48,/** Absolute tolerance threshold. */
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,49,private final double absoluteThreshold;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,51,/** Build an instance with default threshold.
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,53,public SimpleVectorialPointChecker() {
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,54,this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,55,this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,58,/** Build an instance with a specified threshold.
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,59,* <p>
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,60,"* In order to perform only relative checks, the absolute tolerance"
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,61,* must be set to a negative value. In order to perform only absolute
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,62,"* checks, the relative tolerance must be set to a negative value."
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,63,* </p>
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,64,* @param relativeThreshold relative tolerance threshold
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,65,* @param absoluteThreshold absolute tolerance threshold
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,67,"public SimpleVectorialPointChecker(final double relativeThreshold,"
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,68,final double absoluteThreshold) {
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,69,this.relativeThreshold = relativeThreshold;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,70,this.absoluteThreshold = absoluteThreshold;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,73,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,74,"public boolean converged(final int iteration,"
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,75,"final VectorialPointValuePair previous,"
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,76,final VectorialPointValuePair current) {
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,77,final double[] p = previous.getPointRef();
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,78,final double[] c = current.getPointRef();
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,79,for (int i = 0; i < p.length; ++i) {
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,80,final double pi         = p[i];
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,81,final double ci         = c[i];
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,82,final double difference = Math.abs(pi - ci);
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,83,"final double size       = Math.max(Math.abs(pi), Math.abs(ci));"
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,84,if ((difference > (size * relativeThreshold)) &&
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,85,(difference > absoluteThreshold)) {
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,86,return false;
True,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,89,return true;

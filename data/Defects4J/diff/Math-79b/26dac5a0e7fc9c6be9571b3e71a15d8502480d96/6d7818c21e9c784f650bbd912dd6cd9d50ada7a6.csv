is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/ArgumentOutsideDomainException.java,src/main/java/org/apache/commons/math/ArgumentOutsideDomainException.java,34, @param argument  the failing function argument
True,src/main/java/org/apache/commons/math/ArgumentOutsideDomainException.java,src/main/java/org/apache/commons/math/ArgumentOutsideDomainException.java,34,* @param argument  the failing function argument
False,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,75, the solver or is otherwise deemed unreasonable.
True,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,75,* the solver or is otherwise deemed unreasonable.
False,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,105,  the algorithm or is otherwise deemed unreasonable.
True,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,src/main/java/org/apache/commons/math/ConvergingAlgorithm.java,105,*  the algorithm or is otherwise deemed unreasonable.
False,src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,57, @throws IllegalArgumentException if f is null or the
True,src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,57,* @throws IllegalArgumentException if f is null or the
False,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,41, @param argument  the failing function argument
True,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,41,* @param argument  the failing function argument
False,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,52, @param argument  the failing function argument
True,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,52,* @param argument  the failing function argument
False,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,63, @param argument  the failing function argument
True,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,63,* @param argument  the failing function argument
False,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,77, @param argument  the failing function argument
True,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,77,* @param argument  the failing function argument
False,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,92, @param argument  the failing function argument
True,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,92,* @param argument  the failing function argument
False,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,104, @param argument  the failing function argument
True,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,104,* @param argument  the failing function argument
False,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,116, @param argument  the failing function argument
True,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,116,* @param argument  the failing function argument
False,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,132, @param argument  the failing function argument
True,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,src/main/java/org/apache/commons/math/FunctionEvaluationException.java,132,* @param argument  the failing function argument
False,src/main/java/org/apache/commons/math/MathException.java,src/main/java/org/apache/commons/math/MathException.java,85,"eturn (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);"
True,src/main/java/org/apache/commons/math/MathException.java,src/main/java/org/apache/commons/math/MathException.java,85,"return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);"
False,src/main/java/org/apache/commons/math/MathRuntimeException.java,src/main/java/org/apache/commons/math/MathRuntimeException.java,87,"eturn (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);"
True,src/main/java/org/apache/commons/math/MathRuntimeException.java,src/main/java/org/apache/commons/math/MathRuntimeException.java,87,"return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);"
False,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,436,/ org.apache.commons.math.stat.inference.ChiSquareTestImpl
True,src/main/java/org/apache/commons/math/MessagesResources_fr.java,src/main/java/org/apache/commons/math/MessagesResources_fr.java,436,// org.apache.commons.math.stat.inference.ChiSquareTestImpl
False,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,93,elativeAccuracy * (Math.abs(olds) + Math.abs(s)) * 0.5;
True,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,93,relativeAccuracy * (Math.abs(olds) + Math.abs(s)) * 0.5;
False,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,91,elativeAccuracy * (Math.abs(olds) + Math.abs(s)) * 0.5;
True,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,91,relativeAccuracy * (Math.abs(olds) + Math.abs(s)) * 0.5;
False,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,125,elativeAccuracy * (Math.abs(oldt) + Math.abs(t)) * 0.5;
True,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,125,relativeAccuracy * (Math.abs(oldt) + Math.abs(t)) * 0.5;
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,78,"ouble integrate(double min, double max) throws ConvergenceException,"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,78,"double integrate(double min, double max) throws ConvergenceException,"
False,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,95,"ouble integrate(UnivariateRealFunction f, double min, double max) throws ConvergenceException,"
True,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java,95,"double integrate(UnivariateRealFunction f, double min, double max) throws ConvergenceException,"
False,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,84, <p>
True,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java,84,* <p>
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,284,"/ An arraycopy and a sort are completely tractable here,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,284,"// An arraycopy and a sort are completely tractable here,"
False,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,331, Compute the
True,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java,331,* Compute the
False,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,27," consisting of n cubic polynomials, defined over the subintervals determined by the x values,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,27,"* consisting of n cubic polynomials, defined over the subintervals determined by the x values,"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,37, <li>The value of the PolynomialSplineFunction at each of the input x values equals the
True,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,37,* <li>The value of the PolynomialSplineFunction at each of the input x values equals the
False,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,39," <li>Adjacent polynomials are equal through two derivatives at the knot points (i.e., adjacent polynomials"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,39,"* <li>Adjacent polynomials are equal through two derivatives at the knot points (i.e., adjacent polynomials"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,43," The cubic spline interpolation algorithm implemented is as described in R.L. Burden, J.D. Faires,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,43,"* The cubic spline interpolation algorithm implemented is as described in R.L. Burden, J.D. Faires,"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,70,nt n = x.length - 1;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java,70,int n = x.length - 1;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,42," The coefficients of the polynomial, ordered by degree -- i.e.,"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,43, coefficients[0] is the constant term and coefficients[n] is the
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,42,"* The coefficients of the polynomial, ordered by degree -- i.e.,"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,43,* coefficients[0] is the constant term and coefficients[n] is the
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,53, are null.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,53,* are null.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,118, @return  the value of the polynomial
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,118,* @return  the value of the polynomial
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,40, coefficients[0] is the constant term and coefficients[n] is the
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,40,* coefficients[0] is the constant term and coefficients[n] is the
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,144, Evaluate the Lagrange polynomial using
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,144,* Evaluate the Lagrange polynomial using
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,40, coefficients[0] is the constant term and coefficients[n] is the
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,40,* coefficients[0] is the constant term and coefficients[n] is the
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,29, A <strong>polynomial spline function</strong> consists of a set of
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,30, <i>interpolating polynomials</i> and an ascending array of domain
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,29,* A <strong>polynomial spline function</strong> consists of a set of
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,30,* <i>interpolating polynomials</i> and an ascending array of domain
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,34, points.  The value consistency constraints are not currently enforced by
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,34,* points.  The value consistency constraints are not currently enforced by
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,39, centered on the knot points to compute the spline function values.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,39,* centered on the knot points to compute the spline function values.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,42, The domain of the polynomial spline function is
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,42,* The domain of the polynomial spline function is
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,60,ublic class PolynomialSplineFunction
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,60,public class PolynomialSplineFunction
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,77,  = number of partition points - 1
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,77,*  = number of partition points - 1
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,92," @throws IllegalArgumentException if knots has length less than 2,"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,92,"* @throws IllegalArgumentException if knots has length less than 2,"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,174, Returns the number of spline segments = the number of polynomials
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,174,* Returns the number of spline segments = the number of polynomials
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,208,eturn out;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,208,return out;
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,25, bisection algorithm</a> for finding zeros of univariate real functions.
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,25,* bisection algorithm</a> for finding zeros of univariate real functions.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,87, is exceeded
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,87,* is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,149, function
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,149,* function
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,155,"hrows MaxIterationsExceededException,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,155,"throws MaxIterationsExceededException,"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,181,"in, max, yMin, yMax);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,181,"min, max, yMin, yMax);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,213, the function
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,213,* the function
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,289,"/ Save old X1, Y1"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,289,"// Save old X1, Y1"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,150, function
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,150,* function
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,218, function
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,218,* function
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,242, function
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,242,* function
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,291, function
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,291,* function
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,131, function
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,131,* function
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,238, function
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,238,* function
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,272, function
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,272,* function
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,28, Newton's Method</a> for finding zeros of real univariate functions.
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,29, <p>
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,28,* Newton's Method</a> for finding zeros of real univariate functions.
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,29,* <p>
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,59,"hrows MaxIterationsExceededException,"
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,59,"throws MaxIterationsExceededException,"
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,78, @throws MaxIterationsExceededException if the maximum iteration count is exceeded
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,78,* @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,97, @throws MaxIterationsExceededException if the maximum iteration count is exceeded
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,97,* @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,118, function
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,118,* function
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,27, Implements a modified version of the
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,27,* Implements a modified version of the
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,29, for approximating a zero of a real univariate function.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,29,* for approximating a zero of a real univariate function.
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,34, general outperform the
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,34,* general outperform the
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,88, function
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,88,* function
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,106, function
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,106,* function
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,132,"in, max, y0, y1);"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,132,"min, max, y0, y1);"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,174,"/ New bracket is (x0,x1)."
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,174,"// New bracket is (x0,x1)."
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,45, the solver or is otherwise deemed unreasonable.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,45,* the solver or is otherwise deemed unreasonable.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,80,"ouble solve(double min, double max) throws ConvergenceException,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,80,"double solve(double min, double max) throws ConvergenceException,"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,102,"hrows ConvergenceException,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,102,"throws ConvergenceException,"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,63, @throws IllegalArgumentException if f is null or the
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,63,* @throws IllegalArgumentException if f is null or the
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,88, @throws IllegalArgumentException if f is null or the
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,88,* @throws IllegalArgumentException if f is null or the
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,172, @param lower  the lower endpoint
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,172,* @param lower  the lower endpoint
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,176, @throws FunctionEvaluationException if an error occurs evaluating the
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,176,* @throws FunctionEvaluationException if an error occurs evaluating the
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,179,"rotected boolean isBracketing(final double lower, final double upper,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,179,"protected boolean isBracketing(final double lower, final double upper,"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,200," Verifies that the endpoints specify an interval,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,200,"* Verifies that the endpoints specify an interval,"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,240, @throws FunctionEvaluationException if an error occurs evaluating the
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,240,* @throws FunctionEvaluationException if an error occurs evaluating the
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,243,"rotected void verifyBracketing(final double lower, final double upper,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,243,"protected void verifyBracketing(final double lower, final double upper,"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,252,"ower, upper, function.value(lower), function.value(upper));"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,252,"lower, upper, function.value(lower), function.value(upper));"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,39, solver is used.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,39,* solver is used.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,59, solver is used.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,59,* solver is used.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,69," @throws IllegalArgumentException if f is null, the endpoints do not"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,69,"* @throws IllegalArgumentException if f is null, the endpoints do not"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,74,"ouble absoluteAccuracy) throws ConvergenceException,"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,75,unctionEvaluationException {
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,74,"double absoluteAccuracy) throws ConvergenceException,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,75,FunctionEvaluationException {
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,91, The algorithm starts by setting
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,91,* The algorithm starts by setting
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,94, the endpoints out by one unit each time through a loop that terminates
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,94,* the endpoints out by one unit each time through a loop that terminates
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,97, <li> <code> a = lower </code> and <code> b = upper</code>
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,97,* <li> <code> a = lower </code> and <code> b = upper</code>
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,99, <li> <code> Integer.MAX_VALUE</code> iterations elapse
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,99,* <li> <code> Integer.MAX_VALUE</code> iterations elapse
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,103, <strong>Note: </strong> this method can take
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,104, <code>Integer.MAX_VALUE</code> iterations to throw a
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,103,* <strong>Note: </strong> this method can take
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,104,* <code>Integer.MAX_VALUE</code> iterations to throw a
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,107," near <code>initial,</code> it is better to use"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,108," {@link #bracket(UnivariateRealFunction, double, double, double, int)},"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,107,"* near <code>initial,</code> it is better to use"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,108,"* {@link #bracket(UnivariateRealFunction, double, double, double, int)},"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,124,"ublic static double[] bracket(UnivariateRealFunction function,"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,125,"ouble initial, double lowerBound, double upperBound)"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,124,"public static double[] bracket(UnivariateRealFunction function,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,125,"double initial, double lowerBound, double upperBound)"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,139, The algorithm starts by setting
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,139,* The algorithm starts by setting
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,142, the endpoints out by one unit each time through a loop that terminates
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,142,* the endpoints out by one unit each time through a loop that terminates
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,145, <li> <code> a = lower </code> and <code> b = upper</code>
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,145,* <li> <code> a = lower </code> and <code> b = upper</code>
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,147, <li> <code> maximumIterations</code> iterations elapse
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,147,* <li> <code> maximumIterations</code> iterations elapse
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,160, @throws FunctionEvaluationException if an error occurs evaluating the
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,160,* @throws FunctionEvaluationException if an error occurs evaluating the
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,166,"ouble initial, double lowerBound, double upperBound,"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,167,"nt maximumIterations) throws ConvergenceException,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,166,"double initial, double lowerBound, double upperBound,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,167,"int maximumIterations) throws ConvergenceException,"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,195, while ((fa * fb > 0.0) && (numIterations < maximumIterations) &&
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,195,} while ((fa * fb > 0.0) && (numIterations < maximumIterations) &&
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,215, @return the midpoint.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,215,* @return the midpoint.
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,29, Representation of a Complex number - a number which has both a
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,29,* Representation of a Complex number - a number which has both a
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,35, infinite values in real or imaginary parts as these arise in computation.
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,35,* infinite values in real or imaginary parts as these arise in computation.
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,38, {@link #equals} identifies all values with <code>NaN</code> in either real
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,38,* {@link #equals} identifies all values with <code>NaN</code> in either real
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,51,"** The square root of -1. A number representing ""0.0 + 1.0i"" */"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,51,"/** The square root of -1. A number representing ""0.0 + 1.0i"" */"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,62,"** A complex number representing ""1.0 + 0.0i"" */"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,62,"/** A complex number representing ""1.0 + 0.0i"" */"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,65,"** A complex number representing ""0.0 + 0.0i"" */"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,65,"/** A complex number representing ""0.0 + 0.0i"" */"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,69, The imaginary part
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,69,* The imaginary part
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,74, The real part
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,74,* The real part
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,141, Uses the definitional formula
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,141,* Uses the definitional formula
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,149, {@link java.lang.Double} arithmetic.</p>
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,149,* {@link java.lang.Double} arithmetic.</p>
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,155,ublic Complex add(Complex rhs) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,155,public Complex add(Complex rhs) {
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,162," ""A + Bi"" is ""A - Bi""."
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,162,"* ""A + Bi"" is ""A - Bi""."
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,167," If the imaginary part is infinite, and the real part is not NaN,"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,167,"* If the imaginary part is infinite, and the real part is not NaN,"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,190, but uses
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,190,* but uses
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,205,"  <code>rhs</code> is infinite (one or both parts infinite),"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,205,"*  <code>rhs</code> is infinite (one or both parts infinite),"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,259," to <code>Double.NaN</code>, the complex number is equal to"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,259,"* to <code>Double.NaN</code>, the complex number is equal to"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,272,f (this == other) {
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,272,if (this == other) {
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,282,et = (real == rhs.real) && (imaginary == rhs.imaginary);
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,282,ret = (real == rhs.real) && (imaginary == rhs.imaginary);
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,305,eturn 37 * (17 * MathUtils.hash(imaginary) +
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,305,return 37 * (17 * MathUtils.hash(imaginary) +
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,335,eturn isNaN;
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,335,return isNaN;
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,340, takes an infinite value (either <code>Double.POSITIVE_INFINITY</code> or
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,340,* takes an infinite value (either <code>Double.POSITIVE_INFINITY</code> or
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,348,eturn isInfinite;
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,348,return isInfinite;
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,449, Uses the definitional formula
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,449,* Uses the definitional formula
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,473, Compute the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,473,* Compute the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,480, Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,480,* Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,496, Compute the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,496,* Compute the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,503, Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,503,* Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,519, Compute the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,519,* Compute the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,526, Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,526,* Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,542, Compute the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,542,* Compute the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,550," {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,550,"* {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,553, Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,553,* Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,558, Examples:
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,558,* Examples:
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,577, Compute the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,577,* Compute the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,584," {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,584,"* {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,587, Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,587,* Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,592, Examples:
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,592,* Examples:
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,621, Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,621,* Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,626, Examples:
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,626,* Examples:
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,646, Compute the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,646,* Compute the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,656, Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,656,* Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,661, Examples:
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,661,* Examples:
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,680,"ath.atan2(imaginary, real));"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,680,"Math.atan2(imaginary, real));"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,687, <code> y<sup>x</sup> = exp(x&middot;log(y))</code></pre>
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,687,* <code> y<sup>x</sup> = exp(x&middot;log(y))</code></pre>
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,691, Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,691,* Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,708, Compute the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,708,* Compute the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,716," {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,716,"* {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,719, Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,719,* Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,724, Examples:
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,724,* Examples:
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,743, Compute the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,743,* Compute the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,750," {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,750,"* {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,753, Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,753,* Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,758, Examples:
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,758,* Examples:
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,777, Compute the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,777,* Compute the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,781, Implements the following algorithm to compute <code>sqrt(a + bi)</code>:
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,781,* Implements the following algorithm to compute <code>sqrt(a + bi)</code>:
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,792, Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,792,* Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,797, Examples:
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,797,* Examples:
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,828, Compute the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,828,* Compute the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,833, Computes the result directly as
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,833,* Computes the result directly as
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,836, Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,836,* Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,850, Compute the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,850,* Compute the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,857," {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,857,"* {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,860, Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,860,* Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,865, Examples:
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,865,* Examples:
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,895," {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,895,"* {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,898, Returns {@link Complex#NaN} if either real or imaginary part of the
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,898,* Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,903, Examples:
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,903,* Examples:
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,931, representing this number in the complex plane. The value returned is between -PI (not inclusive)
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,931,* representing this number in the complex plane. The value returned is between -PI (not inclusive)
False,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1015, <p>Subclasses will need to override {@link #createComplex} to deserialize properly</p>
True,src/main/java/org/apache/commons/math/complex/Complex.java,src/main/java/org/apache/commons/math/complex/Complex.java,1015,* <p>Subclasses will need to override {@link #createComplex} to deserialize properly</p>
False,src/main/java/org/apache/commons/math/complex/ComplexField.java,src/main/java/org/apache/commons/math/complex/ComplexField.java,73,eturn LazyHolder.INSTANCE;
True,src/main/java/org/apache/commons/math/complex/ComplexField.java,src/main/java/org/apache/commons/math/complex/ComplexField.java,73,return LazyHolder.INSTANCE;
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,118, <p>This is the same set as the {@link NumberFormat} set.</p>
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,118,* <p>This is the same set as the {@link NumberFormat} set.</p>
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,171, Formats a object to produce a string.  <code>obj</code> must be either a
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,171,* Formats a object to produce a string.  <code>obj</code> must be either a
False,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,194, else {
True,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,src/main/java/org/apache/commons/math/complex/ComplexFormat.java,194,} else {
False,src/main/java/org/apache/commons/math/complex/ComplexUtils.java,src/main/java/org/apache/commons/math/complex/ComplexUtils.java,23, Static implementations of common
True,src/main/java/org/apache/commons/math/complex/ComplexUtils.java,src/main/java/org/apache/commons/math/complex/ComplexUtils.java,23,* Static implementations of common
False,src/main/java/org/apache/commons/math/complex/ComplexUtils.java,src/main/java/org/apache/commons/math/complex/ComplexUtils.java,43," If either <code>r</code> or <code>theta</code> is NaN, or"
True,src/main/java/org/apache/commons/math/complex/ComplexUtils.java,src/main/java/org/apache/commons/math/complex/ComplexUtils.java,43,"* If either <code>r</code> or <code>theta</code> is NaN, or"
False,src/main/java/org/apache/commons/math/complex/ComplexUtils.java,src/main/java/org/apache/commons/math/complex/ComplexUtils.java,46," If <code>r</code> is infinite and <code>theta</code> is finite,"
True,src/main/java/org/apache/commons/math/complex/ComplexUtils.java,src/main/java/org/apache/commons/math/complex/ComplexUtils.java,46,"* If <code>r</code> is infinite and <code>theta</code> is finite,"
False,src/main/java/org/apache/commons/math/complex/ComplexUtils.java,src/main/java/org/apache/commons/math/complex/ComplexUtils.java,49, Examples:
True,src/main/java/org/apache/commons/math/complex/ComplexUtils.java,src/main/java/org/apache/commons/math/complex/ComplexUtils.java,49,* Examples:
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,80,"/ Try to bracket root, test domain endoints if this fails"
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,80,"// Try to bracket root, test domain endoints if this fails"
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,130,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,130,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,141,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,141,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,25, Base class for probability distributions.
True,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java,25,* Base class for probability distributions.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,51," If <code>x</code> does not represent an integer value, the CDF is"
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,51,"* If <code>x</code> does not represent an integer value, the CDF is"
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,61,eturn cumulativeProbability((int) Math.floor(x));
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,61,return cumulativeProbability((int) Math.floor(x));
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,90,int) Math.floor(x1));
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,90,(int) Math.floor(x1));
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,101, @return PDF for this distribution.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,101,* @return PDF for this distribution.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,132, @return the cumulative probability.
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,132,* @return the cumulative probability.
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,201,eturn x0;
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,201,return x0;
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,211,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,211,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,222,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,222,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,106,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,106,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,119,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,119,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,129, @return PDF for this distribution.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,129,* @return PDF for this distribution.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,154, @return PMF for this distribution.
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,154,* @return PMF for this distribution.
False,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,190,eturn Integer.MAX_VALUE;
True,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,190,return Integer.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,31,ublic class CauchyDistributionImpl extends AbstractContinuousDistribution
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,31,public class CauchyDistributionImpl extends AbstractContinuousDistribution
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,45, equal to one.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,45,* equal to one.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,65, @return CDF evaluted at <code>x</code>.
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,65,* @return CDF evaluted at <code>x</code>.
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,91, Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,91,* Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,143,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,143,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,165,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java,165,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,35,** Internal Gamma distribution. */
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,35,/** Internal Gamma distribution. */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,87, @return CDF for this distribution.
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,87,* @return CDF for this distribution.
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,127,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,127,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,141,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,141,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,31, @return x.
True,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/ContinuousDistribution.java,31,* @return x.
False,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,48," will take a value between <code>x0</code> and <code>x1</code>,"
True,src/main/java/org/apache/commons/math/distribution/Distribution.java,src/main/java/org/apache/commons/math/distribution/Distribution.java,48,"* will take a value between <code>x0</code> and <code>x1</code>,"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,136, bracket a CDF root.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,136,* bracket a CDF root.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,149, bracket a CDF root.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,149,* bracket a CDF root.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,153,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,153,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,171, bracket a CDF root.
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,171,* bracket a CDF root.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,67, @return CDF for this distribution.
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,67,* @return CDF for this distribution.
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,100,ublic double inverseCumulativeProbability(final double p)
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,100,public double inverseCumulativeProbability(final double p)
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,118,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,118,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,132,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java,132,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,66, @return CDF for this distribution.
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,66,* @return CDF for this distribution.
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,96,ublic double inverseCumulativeProbability(final double p)
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,96,public double inverseCumulativeProbability(final double p)
False,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,184,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,184,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,31,"mplements HypergeometricDistribution, Serializable"
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,31,"implements HypergeometricDistribution, Serializable"
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,74, @return PDF for this distribution.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,74,* @return PDF for this distribution.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,102,         hypergeometric distribution.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,102,*         hypergeometric distribution.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,117,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,117,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,131,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,131,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,144, @return the lowest domain value of the hypergeometric distribution.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,144,* @return the lowest domain value of the hypergeometric distribution.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,179, @return the highest domain value of the hypergeometric distribution.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,179,* @return the highest domain value of the hypergeometric distribution.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,189, @return PMF for this distribution.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,189,* @return PMF for this distribution.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,216, @return PMF for the distribution.
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,216,* @return PMF for the distribution.
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,294," x0, x0 + 1, x0 + 2, ..., x1, in the order directed by dx."
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,294,"* x0, x0 + 1, x0 + 2, ..., x1, in the order directed by dx."
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,302, @return P(x0 &le; X &le; x1).
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,302,* @return P(x0 &le; X &le; x1).
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,44, @return PDF for this distribution.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,44,* @return PDF for this distribution.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,54, @return the cumulative probability.
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,54,* @return the cumulative probability.
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,69," no such value <code>m,  Integer.MIN_VALUE</code> is"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,69,"* no such value <code>m,  Integer.MIN_VALUE</code> is"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,72," P(X &le; M) =1, then <code>M</code> is returned by"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,72,"* P(X &le; M) =1, then <code>M</code> is returned by"
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,74," If there is no such value, <code>M, Integer.MAX_VALUE</code> is"
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,74,"* If there is no such value, <code>M, Integer.MAX_VALUE</code> is"
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,33,ublic class NormalDistributionImpl extends AbstractContinuousDistribution
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,33,public class NormalDistributionImpl extends AbstractContinuousDistribution
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,61, deviation equal to one.
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,61,* deviation equal to one.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,119, @return CDF evaluted at <code>x</code>.
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,119,* @return CDF evaluted at <code>x</code>.
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,143, Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,143,* Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,154,ublic double inverseCumulativeProbability(final double p)
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,154,public double inverseCumulativeProbability(final double p)
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,172,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,172,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,194,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,194,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,45, The parameter value must be positive; otherwise an
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,45,* The parameter value must be positive; otherwise an
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,47, The mean value must be positive; otherwise an
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,47,* The mean value must be positive; otherwise an
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,59, The mean value must be positive; otherwise an
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,59,* The mean value must be positive; otherwise an
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,84, The mean value must be positive; otherwise an
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,84,* The mean value must be positive; otherwise an
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,111,"eturn Math.pow(getMean(), x) /"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,111,"return Math.pow(getMean(), x) /"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,131,"eturn Gamma.regularizedGammaQ((double)x + 1, mean,"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java,131,"return Gamma.regularizedGammaQ((double)x + 1, mean,"
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,74, @return CDF evaluted at <code>x</code>.
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,74,* @return CDF evaluted at <code>x</code>.
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,102, Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,102,* Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,113,ublic double inverseCumulativeProbability(final double p)
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,113,public double inverseCumulativeProbability(final double p)
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,131,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,131,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,145,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java,145,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,58, @return CDF evaluted at <code>x</code>.
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,58,* @return CDF evaluted at <code>x</code>.
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,90, Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,90,* Returns <code>Double.NEGATIVE_INFINITY</code> for p=0 and
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,147,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,147,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,161,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java,161,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,25," <li><a href=""http://mathworld.wolfram.com/ZipfDistribution.html"">Zipf"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,25,"* <li><a href=""http://mathworld.wolfram.com/ZipfDistribution.html"">Zipf"
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,42, The parameter value must be positive; otherwise an
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,42,* The parameter value must be positive; otherwise an
False,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,59, The parameter value must be positive; otherwise an
True,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/main/java/org/apache/commons/math/distribution/ZipfDistribution.java,59,* The parameter value must be positive; otherwise an
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,29,ublic class ZipfDistributionImpl extends AbstractIntegerDistribution
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,29,public class ZipfDistributionImpl extends AbstractIntegerDistribution
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,42, Create a new Zipf distribution with the given number of elements and
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,43, exponent. Both values must be positive; otherwise an
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,42,* Create a new Zipf distribution with the given number of elements and
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,43,* exponent. Both values must be positive; otherwise an
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,67, The parameter value must be positive; otherwise an
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,67,* The parameter value must be positive; otherwise an
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,94, The parameter value must be positive; otherwise an
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,94,* The parameter value must be positive; otherwise an
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,149,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,149,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,162,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,162,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,171, Calculates the Nth generalized harmonic number. See
False,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,172," <a href=""http://mathworld.wolfram.com/HarmonicSeries.html"">Harmonic"
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,171,* Calculates the Nth generalized harmonic number. See
True,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,172,"* <a href=""http://mathworld.wolfram.com/HarmonicSeries.html"">Harmonic"
False,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,70,his.convergence          = DEFAULT_CONVERGENCE;
True,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java,70,this.convergence          = DEFAULT_CONVERGENCE;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,490,ork1[pj] *= diag[pj] / dxNorm;
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,490,work1[pj] *= diag[pj] / dxNorm;
False,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,565,ork1[pj] = work3[pj] * diag[pj] / dxNorm;
True,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java,565,work1[pj] = work3[pj] * diag[pj] / dxNorm;
False,src/main/java/org/apache/commons/math/fraction/AbstractFormat.java,src/main/java/org/apache/commons/math/fraction/AbstractFormat.java,46, for the numerator and denominator.
True,src/main/java/org/apache/commons/math/fraction/AbstractFormat.java,src/main/java/org/apache/commons/math/fraction/AbstractFormat.java,46,* for the numerator and denominator.
False,src/main/java/org/apache/commons/math/fraction/AbstractFormat.java,src/main/java/org/apache/commons/math/fraction/AbstractFormat.java,76," customizing is the maximum number of BigFraction digits, which is set to 0."
True,src/main/java/org/apache/commons/math/fraction/AbstractFormat.java,src/main/java/org/apache/commons/math/fraction/AbstractFormat.java,76,"* customizing is the maximum number of BigFraction digits, which is set to 0."
False,src/main/java/org/apache/commons/math/fraction/AbstractFormat.java,src/main/java/org/apache/commons/math/fraction/AbstractFormat.java,86," customizing is the maximum number of BigFraction digits, which is set to 0."
True,src/main/java/org/apache/commons/math/fraction/AbstractFormat.java,src/main/java/org/apache/commons/math/fraction/AbstractFormat.java,86,"* customizing is the maximum number of BigFraction digits, which is set to 0."
False,src/main/java/org/apache/commons/math/fraction/AbstractFormat.java,src/main/java/org/apache/commons/math/fraction/AbstractFormat.java,181, Formats a double value as a fraction and appends the result to a StringBuffer.
True,src/main/java/org/apache/commons/math/fraction/AbstractFormat.java,src/main/java/org/apache/commons/math/fraction/AbstractFormat.java,181,* Formats a double value as a fraction and appends the result to a StringBuffer.
False,src/main/java/org/apache/commons/math/fraction/AbstractFormat.java,src/main/java/org/apache/commons/math/fraction/AbstractFormat.java,198, Formats a long value as a fraction and appends the result to a StringBuffer.
True,src/main/java/org/apache/commons/math/fraction/AbstractFormat.java,src/main/java/org/apache/commons/math/fraction/AbstractFormat.java,198,* Formats a long value as a fraction and appends the result to a StringBuffer.
False,src/main/java/org/apache/commons/math/fraction/BigFractionField.java,src/main/java/org/apache/commons/math/fraction/BigFractionField.java,73,eturn LazyHolder.INSTANCE;
True,src/main/java/org/apache/commons/math/fraction/BigFractionField.java,src/main/java/org/apache/commons/math/fraction/BigFractionField.java,73,return LazyHolder.INSTANCE;
False,src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java,47, for the numerator and denominator.
True,src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java,47,* for the numerator and denominator.
False,src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java,74, is the same set as the {@link NumberFormat} set.
True,src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java,74,* is the same set as the {@link NumberFormat} set.
False,src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java,175, else {
True,src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java,175,} else {
False,src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java,204, This method expects the string to be formatted as an improper BigFraction.
True,src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java,src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java,204,* This method expects the string to be formatted as an improper BigFraction.
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,238, Create a fraction from an int.
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,238,* Create a fraction from an int.
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,293,eturn ret;
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,293,return ret;
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,331,f (this == other) {
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,331,if (this == other) {
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,450," <p>Subtracts the value of another fraction from the value of this one,"
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,450,"* <p>Subtracts the value of another fraction from the value of this one,"
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,501,"isAdd ? MathUtils.addAndCheck(uvp, upv) :"
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,501,"(isAdd ? MathUtils.addAndCheck(uvp, upv) :"
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,524,"eturn new Fraction (w.intValue(),"
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,525,"athUtils.mulAndCheck(denominator/d1,"
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,524,"return new Fraction (w.intValue(),"
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,525,"MathUtils.mulAndCheck(denominator/d1,"
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,530," <p>Multiplies the value of this fraction by another, returning the"
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,530,"* <p>Multiplies the value of this fraction by another, returning the"
False,src/main/java/org/apache/commons/math/fraction/FractionConversionException.java,src/main/java/org/apache/commons/math/fraction/FractionConversionException.java,48, @param p current numerator
True,src/main/java/org/apache/commons/math/fraction/FractionConversionException.java,src/main/java/org/apache/commons/math/fraction/FractionConversionException.java,48,* @param p current numerator
False,src/main/java/org/apache/commons/math/fraction/FractionField.java,src/main/java/org/apache/commons/math/fraction/FractionField.java,73,eturn LazyHolder.INSTANCE;
True,src/main/java/org/apache/commons/math/fraction/FractionField.java,src/main/java/org/apache/commons/math/fraction/FractionField.java,73,return LazyHolder.INSTANCE;
False,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,44, for the numerator and denominator.
True,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,44,* for the numerator and denominator.
False,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,71, is the same set as the {@link NumberFormat} set.
True,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,71,* is the same set as the {@link NumberFormat} set.
False,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,126," customizing is the maximum number of fraction digits, which is set to 0."
True,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,126,"* customizing is the maximum number of fraction digits, which is set to 0."
False,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,158, Formats an object and appends the result to a StringBuffer. <code>obj</code> must be either a
True,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,158,* Formats an object and appends the result to a StringBuffer. <code>obj</code> must be either a
False,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,186, else {
True,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,186,} else {
False,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,215, expects the string to be formatted as an improper fraction.
True,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,src/main/java/org/apache/commons/math/fraction/FractionFormat.java,215,* expects the string to be formatted as an improper fraction.
False,src/main/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/main/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,47," the whole, numerator, and denominator."
True,src/main/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,src/main/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java,47,"* the whole, numerator, and denominator."
False,src/main/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/main/java/org/apache/commons/math/fraction/ProperFractionFormat.java,47," the whole, numerator, and denominator."
True,src/main/java/org/apache/commons/math/fraction/ProperFractionFormat.java,src/main/java/org/apache/commons/math/fraction/ProperFractionFormat.java,47,"* the whole, numerator, and denominator."
False,src/main/java/org/apache/commons/math/genetics/BinaryMutation.java,src/main/java/org/apache/commons/math/genetics/BinaryMutation.java,37,"hrow new IllegalArgumentException(""Binary mutation works on BinaryChromosome only."");"
True,src/main/java/org/apache/commons/math/genetics/BinaryMutation.java,src/main/java/org/apache/commons/math/genetics/BinaryMutation.java,37,"throw new IllegalArgumentException(""Binary mutation works on BinaryChromosome only."");"
False,src/main/java/org/apache/commons/math/genetics/Chromosome.java,src/main/java/org/apache/commons/math/genetics/Chromosome.java,26, @version $Revision:$ $Date:$
True,src/main/java/org/apache/commons/math/genetics/Chromosome.java,src/main/java/org/apache/commons/math/genetics/Chromosome.java,26,* @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/genetics/Chromosome.java,src/main/java/org/apache/commons/math/genetics/Chromosome.java,71, false -- override it in your implementation if you need it.
True,src/main/java/org/apache/commons/math/genetics/Chromosome.java,src/main/java/org/apache/commons/math/genetics/Chromosome.java,71,* false -- override it in your implementation if you need it.
False,src/main/java/org/apache/commons/math/genetics/ChromosomePair.java,src/main/java/org/apache/commons/math/genetics/ChromosomePair.java,66,ublic String toString() {
True,src/main/java/org/apache/commons/math/genetics/ChromosomePair.java,src/main/java/org/apache/commons/math/genetics/ChromosomePair.java,66,public String toString() {
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,57,            next generation [in %]
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,57,*            next generation [in %]
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,66, <code>{@link #elitismRate}<code> percents of the best
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,66,* <code>{@link #elitismRate}<code> percents of the best
False,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,78,"/ index of the last ""not good enough"" chromosome"
True,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java,78,"// index of the last ""not good enough"" chromosome"
False,src/main/java/org/apache/commons/math/genetics/Fitness.java,src/main/java/org/apache/commons/math/genetics/Fitness.java,22, @version $Revision:$ $Date:$
True,src/main/java/org/apache/commons/math/genetics/Fitness.java,src/main/java/org/apache/commons/math/genetics/Fitness.java,22,* @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,20, Stops after a fixed number of generations.  Each time
True,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,20,* Stops after a fixed number of generations.  Each time
False,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,22, incremented.  Once the counter reaches the configured
True,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,22,* incremented.  Once the counter reaches the configured
False,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,42,f (maxGenerations <= 0)
True,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,src/main/java/org/apache/commons/math/genetics/FixedGenerationCount.java,42,if (maxGenerations <= 0)
False,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,33, Set the randomGenerator seed to get reproducible results.
True,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,src/main/java/org/apache/commons/math/genetics/GeneticAlgorithm.java,33,* Set the randomGenerator seed to get reproducible results.
False,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,100,hromosome bestChromosome = this.chromosomes.get(0);
True,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,100,Chromosome bestChromosome = this.chromosomes.get(0);
False,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,130,ublic int getPopulationSize() {
True,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,130,public int getPopulationSize() {
False,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,147,ublic Iterator<Chromosome> iterator() {
True,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,src/main/java/org/apache/commons/math/genetics/ListPopulation.java,147,public Iterator<Chromosome> iterator() {
False,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,40," This policy works only on {@link AbstractListChromosome}, and therefore it"
True,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,40,"* This policy works only on {@link AbstractListChromosome}, and therefore it"
False,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,87,f (length != second.getLength())
True,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,src/main/java/org/apache/commons/math/genetics/OnePointCrossover.java,87,if (length != second.getLength())
False,src/main/java/org/apache/commons/math/genetics/Population.java,src/main/java/org/apache/commons/math/genetics/Population.java,23, @version $Revision:$ $Date:$
True,src/main/java/org/apache/commons/math/genetics/Population.java,src/main/java/org/apache/commons/math/genetics/Population.java,23,* @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,174,Override
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,174,@Override
False,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,247, @throws IllegalArgumentException iff the <code>permutedData</code> and <code>originalData</code> contains different data
True,src/main/java/org/apache/commons/math/genetics/RandomKey.java,src/main/java/org/apache/commons/math/genetics/RandomKey.java,247,* @throws IllegalArgumentException iff the <code>permutedData</code> and <code>originalData</code> contains different data
False,src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java,36, @throws IllegalArgumentException if <code>original</code> is not a
True,src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java,src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java,36,* @throws IllegalArgumentException if <code>original</code> is not a
False,src/main/java/org/apache/commons/math/genetics/SelectionPolicy.java,src/main/java/org/apache/commons/math/genetics/SelectionPolicy.java,23, @version $Revision:$ $Date:$
True,src/main/java/org/apache/commons/math/genetics/SelectionPolicy.java,src/main/java/org/apache/commons/math/genetics/SelectionPolicy.java,23,* @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/genetics/StoppingCondition.java,src/main/java/org/apache/commons/math/genetics/StoppingCondition.java,23, @version $Revision:$ $Date:$
True,src/main/java/org/apache/commons/math/genetics/StoppingCondition.java,src/main/java/org/apache/commons/math/genetics/StoppingCondition.java,23,* @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,26, fittest chromosome among them.
True,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,src/main/java/org/apache/commons/math/genetics/TournamentSelection.java,26,* fittest chromosome among them.
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,116, Build a vector from another one and a scale factor.
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,116,* Build a vector from another one and a scale factor.
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,379,eturn Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,379,return Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,389,eturn !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y) || Double.isInfinite(z));
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,389,return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y) || Double.isInfinite(z));
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,414,f (this == other) {
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,414,if (this == other) {
False,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,429,eturn (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
True,src/main/java/org/apache/commons/math/geometry/Vector3D.java,src/main/java/org/apache/commons/math/geometry/Vector3D.java,429,return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,51,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,51,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,54,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,54,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,69,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,69,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,90,"[] dummyRow = (T[]) Array.newInstance(field.getZero().getClass(), 0);"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,91,"eturn (T[][]) Array.newInstance(dummyRow.getClass(), rows);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,90,"T[] dummyRow = (T[]) Array.newInstance(field.getZero().getClass(), 0);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,91,"return (T[][]) Array.newInstance(dummyRow.getClass(), rows);"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,399,"ublic void setSubMatrix(final T[][] subMatrix, final int row, final int column)"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,399,"public void setSubMatrix(final T[][] subMatrix, final int row, final int column)"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,404,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,404,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,409,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,409,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,416,"Cols, subMatrix[r].length);"
True,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java,416,"nCols, subMatrix[r].length);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,372,"ublic void setSubMatrix(final double[][] subMatrix, final int row, final int column)"
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,372,"public void setSubMatrix(final double[][] subMatrix, final int row, final int column)"
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,377,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,377,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,382,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,382,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,389,"Cols, subMatrix[r].length);"
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,389,"nCols, subMatrix[r].length);"
False,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1063,et = ret * 31 + (11 * (row+1) + 17 * (col+1)) *
True,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java,1063,ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,114,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,114,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,118,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,118,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,304,"ublic void setSubMatrix(final T[][] subMatrix, final int row, final int column)"
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,304,"public void setSubMatrix(final T[][] subMatrix, final int row, final int column)"
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,319,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,319,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,324,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,324,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,331,"Cols, subMatrix[i].length);"
True,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java,331,"nCols, subMatrix[i].length);"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,38, The LU decomposition is cached and reused on subsequent calls.
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,38,* The LU decomposition is cached and reused on subsequent calls.
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,41," discarded.  In this case, you need to explicitly invoke"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,41,"* discarded.  In this case, you need to explicitly invoke"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,123,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,123,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,127,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,127,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,312,"ublic void setSubMatrix(final double[][] subMatrix, final int row, final int column)"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,312,"public void setSubMatrix(final double[][] subMatrix, final int row, final int column)"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,327,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,327,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,332,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,332,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,339,"Cols, subMatrix[i].length);"
True,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java,339,"nCols, subMatrix[i].length);"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,100,"vector must have at least one element"");"
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,100,"""vector must have at least one element"");"
False,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,746,f (this == other) {
True,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java,746,if (this == other) {
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,101,"hrow MathRuntimeException.createIllegalArgumentException(""vector must have at least one element"");"
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,101,"throw MathRuntimeException.createIllegalArgumentException(""vector must have at least one element"");"
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,939,inal double delta = data[i] - v.getEntry(i);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,939,final double delta = data[i] - v.getEntry(i);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,985,inal double delta = data[i] - v.getEntry(i);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,985,final double delta = data[i] - v.getEntry(i);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1031,inal double delta = data[i] - v.getEntry(i);
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1031,final double delta = data[i] - v.getEntry(i);
False,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1351,f (this == other) {
True,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,src/main/java/org/apache/commons/math/linear/ArrayRealVector.java,1351,if (this == other) {
False,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,57, Build the transformation to bi-diagonal shape of a matrix.
True,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,57,* Build the transformation to bi-diagonal shape of a matrix.
False,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,82, Returns the matrix U of the transform.
True,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,82,* Returns the matrix U of the transform.
False,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,132, Returns the bi-diagonal matrix B of the transform.
True,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,132,* Returns the bi-diagonal matrix B of the transform.
False,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,163, Returns the matrix V of the transform.
True,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java,163,* Returns the matrix V of the transform.
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,82, @throws     IllegalArgumentException
True,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,82,* @throws     IllegalArgumentException
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,225, Row and column indices start at 0 and must satisfy
True,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,225,* Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,232, @param row  row location of entry to be fetched
True,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,232,* @param row  row location of entry to be fetched
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,242, Row and column indices start at 0 and must satisfy
True,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,242,* Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,267, @throws org.apache.commons.math.linear.InvalidMatrixException if
True,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,267,* @throws org.apache.commons.math.linear.InvalidMatrixException if
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,276,@throws org.apache.commons.math.linear.InvalidMatrixException if
True,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,276,*@throws org.apache.commons.math.linear.InvalidMatrixException if
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,313, @throws IllegalArgumentException if this.rowDimension != b.length
True,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,313,* @throws IllegalArgumentException if this.rowDimension != b.length
False,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,321, <code>b</code>.
True,src/main/java/org/apache/commons/math/linear/BigMatrix.java,src/main/java/org/apache/commons/math/linear/BigMatrix.java,321,* <code>b</code>.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,27, LU decompostion</a> to support linear system
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,27,* LU decompostion</a> to support linear system
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,158,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,158,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,163,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,163,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,169,"Cols, d[r].length);"
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,169,"nCols, d[r].length);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,191,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,191,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,196,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,196,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,202,"Cols, d[row].length);"
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,202,"nCols, d[row].length);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,210, Create a new BigMatrix using the values represented by the strings in
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,210,* Create a new BigMatrix using the values represented by the strings in
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,221,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,221,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,226,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,226,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,232,"Cols, d[row].length);"
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,232,"nCols, d[row].length);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,241, data for the unique column of the <code>v.length x 1</code> matrix
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,241,* data for the unique column of the <code>v.length x 1</code> matrix
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,676, <p>
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,676,* <p>
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,683," and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking"
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,683,"* and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,693, @throws MatrixIndexException  if subMatrix does not fit into this
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,694,"    matrix from element in (row, column)"
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,693,* @throws MatrixIndexException  if subMatrix does not fit into this
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,694,"*    matrix from element in (row, column)"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,700,"ublic void setSubMatrix(BigDecimal[][] subMatrix, int row, int column)"
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,700,"public void setSubMatrix(BigDecimal[][] subMatrix, int row, int column)"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,705,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,705,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,710,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,710,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,717,"Cols, subMatrix[r].length);"
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,717,"nCols, subMatrix[r].length);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,733,"ystem.arraycopy(subMatrix, 0, data, 0, subMatrix.length);"
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,733,"System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,759,inal BigDecimal[][] out = new BigDecimal[1][ncols];
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,759,final BigDecimal[][] out = new BigDecimal[1][ncols];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,775,inal BigDecimal[][] out = new BigDecimal[nRows][1];
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,775,final BigDecimal[][] out = new BigDecimal[nRows][1];
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,865, Row and column indices start at 0 and must satisfy
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,865,* Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,872, @param row  row location of entry to be fetched
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,872,* @param row  row location of entry to be fetched
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,891, Row and column indices start at 0 and must satisfy
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,891,* Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1089, <code>b</code>.
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1089,* <code>b</code>.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1116, <code>b</code>.
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1116,* <code>b</code>.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1135, <code>b</code>.
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1135,* <code>b</code>.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1201, Computes a new
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1201,* Computes a new
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1203," LU decompostion</a> for this matrix, storing the result for use by other methods."
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1203,"* LU decompostion</a> for this matrix, storing the result for use by other methods."
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1326, Returns true iff <code>object</code> is a
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1326,* Returns true iff <code>object</code> is a
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1374,et = ret * 31 + (11 * (row+1) + 17 * (col+1)) *
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1374,ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1385,  Returns a fresh copy of the cached LU matrix if this has been computed;
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1386,  otherwise the composition is computed and cached for use by other methods.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1387,"  Since a copy is returned in either case, changes to the returned matrix do not"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1388,  affect the LU decomposition property.
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1385,*  Returns a fresh copy of the cached LU matrix if this has been computed;
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1386,*  otherwise the composition is computed and cached for use by other methods.
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1387,"*  Since a copy is returned in either case, changes to the returned matrix do not"
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1388,*  affect the LU decomposition property.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1390, The matrix returned is a compact representation of the LU decomposition.
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1391," Elements below the main diagonal correspond to entries of the ""L"" matrix;"
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1390,* The matrix returned is a compact representation of the LU decomposition.
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1391,"* Elements below the main diagonal correspond to entries of the ""L"" matrix;"
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1398,         2  3  1                   1  0  0            2  3  1
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1398,*         2  3  1                   1  0  0            2  3  1
False,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1400,         1  7  8                   1  7  1            0  0  8
True,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java,1400,*         1  7  8                   1  7  1            0  0  8
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,222,"olumns, length);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,222,"columns, length);"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,791,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,791,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,800,"efLength, subRow.length);"
True,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java,800,"refLength, subRow.length);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,217,"olumns, length);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,217,"columns, length);"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,814,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,814,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,823,"efLength, subRow.length);"
True,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java,823,"refLength, subRow.length);"
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,22, An interface to classes that implement an algorithm to calculate the
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,22,* An interface to classes that implement an algorithm to calculate the
False,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,46, Returns the matrix L of the decomposition.
True,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,src/main/java/org/apache/commons/math/linear/CholeskyDecomposition.java,46,* Returns the matrix L of the decomposition.
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,22, An interface to classes that implement an algorithm to calculate the
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,22,* An interface to classes that implement an algorithm to calculate the
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,47, Returns the matrix V of the decomposition.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,47,* Returns the matrix V of the decomposition.
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,55, Returns the block diagonal matrix D of the decomposition.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,55,* Returns the block diagonal matrix D of the decomposition.
False,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,66, Returns the transpose of the matrix V of the decomposition.
True,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,src/main/java/org/apache/commons/math/linear/EigenDecomposition.java,66,* Returns the transpose of the matrix V of the decomposition.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,153, Calculates the eigen decomposition of the given symmetric matrix.
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,153,* Calculates the eigen decomposition of the given symmetric matrix.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,176, Calculates the eigen decomposition of the given tridiagonal symmetric matrix.
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,176,* Calculates the eigen decomposition of the given tridiagonal symmetric matrix.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,227, Decompose a tridiagonal symmetric matrix.
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,227,* Decompose a tridiagonal symmetric matrix.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,380,his.eigenvectors    = eigenvectors;
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,380,this.eigenvectors    = eigenvectors;
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,771,"hrow new InvalidMatrixException(""cannot solve degree {0} equation"", 3);"
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,771,"throw new InvalidMatrixException(""cannot solve degree {0} equation"", 3);"
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1022, = work[k - 3] * work[k - 5] / (t + Math.sqrt(t * (t + s)));
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1022,s = work[k - 3] * work[k - 5] / (t + Math.sqrt(t * (t + s)));
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1436,ase 0 : // no realEigenvalues deflated.
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1436,case 0 : // no realEigenvalues deflated.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1444,/ cases 2 and 3.
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1444,// cases 2 and 3.
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1575,f (dMin1 == dN1 && dMin2 == dN2) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1575,if (dMin1 == dN1 && dMin2 == dN2) {
False,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1621,f (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {
True,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java,1621,if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,23, An interface to classes that implement an algorithm to calculate the
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,23,* An interface to classes that implement an algorithm to calculate the
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,51, Returns the matrix L of the decomposition.
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,51,* Returns the matrix L of the decomposition.
False,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,58, Returns the matrix U of the decomposition.
True,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,src/main/java/org/apache/commons/math/linear/FieldLUDecomposition.java,58,* Returns the matrix U of the decomposition.
False,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,67, Calculates the LU-decomposition of the given matrix.
True,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java,67,* Calculates the LU-decomposition of the given matrix.
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,182, <p>
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,182,* <p>
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,189," and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking"
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,189,"* and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking"
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,199, @throws MatrixIndexException  if subMatrix does not fit into this
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,200,"    matrix from element in (row, column)"
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,199,* @throws MatrixIndexException  if subMatrix does not fit into this
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,200,"*    matrix from element in (row, column)"
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,206,"oid setSubMatrix(T[][] subMatrix, int row, int column)"
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,206,"void setSubMatrix(T[][] subMatrix, int row, int column)"
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,357, Row and column indices start at 0 and must satisfy
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,357,* Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,374, Row and column indices start at 0 and must satisfy
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,374,* Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,392, Row and column indices start at 0 and must satisfy
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,392,* Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,410, Row and column indices start at 0 and must satisfy
True,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,src/main/java/org/apache/commons/math/linear/FieldMatrix.java,410,* Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,22, An interface to classes that implement an algorithm to calculate the
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,22,* An interface to classes that implement an algorithm to calculate the
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,49, Returns the matrix L of the decomposition.
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,49,* Returns the matrix L of the decomposition.
False,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,56, Returns the matrix U of the decomposition.
True,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,src/main/java/org/apache/commons/math/linear/LUDecomposition.java,56,* Returns the matrix U of the decomposition.
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,61, Calculates the LU-decomposition of the given matrix.
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,61,* Calculates the LU-decomposition of the given matrix.
False,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,71, Calculates the LU-decomposition of the given matrix.
True,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java,71,* Calculates the LU-decomposition of the given matrix.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,299, Creates a {@link RealVector} using the data from the input array.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,299,* Creates a {@link RealVector} using the data from the input array.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,311, Creates a {@link FieldVector} using the data from the input array.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,311,* Creates a {@link FieldVector} using the data from the input array.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,325, array.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,325,* array.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,343, array.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,343,* array.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,355,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,355,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,366, array.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,366,* array.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,386, array.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,386,* array.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,404, array.
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,404,* array.
False,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,454,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,src/main/java/org/apache/commons/math/linear/MatrixUtils.java,454,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,1236,** {@inheritDoc}
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,1236,/** {@inheritDoc}
False,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,1260," it is possible for {@code a.subtract(b}} to be the zero vector, while"
True,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java,1260,"* it is possible for {@code a.subtract(b}} to be the zero vector, while"
False,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,22, An interface to classes that implement an algorithm to calculate the
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,22,* An interface to classes that implement an algorithm to calculate the
False,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,42, Returns the matrix R of the decomposition.
True,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,src/main/java/org/apache/commons/math/linear/QRDecomposition.java,42,* Returns the matrix R of the decomposition.
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,67, Calculates the QR-decomposition of the given matrix.
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,67,* Calculates the QR-decomposition of the given matrix.
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,190," Q = Q1 Q2 ... Q_m, so Q is formed by first constructing Q_m and then"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,191," applying the Householder transformations Q_(m-1),Q_(m-2),...,Q1 in"
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,192, succession to the result
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,190,"* Q = Q1 Q2 ... Q_m, so Q is formed by first constructing Q_m and then"
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,191,"* applying the Householder transformations Q_(m-1),Q_(m-2),...,Q1 in"
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,192,* succession to the result
False,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,389,inal double factor     = 1.0 / (rDiag[minor] * qrtMinor[minor]);
True,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java,389,final double factor     = 1.0 / (rDiag[minor] * qrtMinor[minor]);
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,188, <p>
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,188,* <p>
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,195," and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking"
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,195,"* and <code>subMatrix = {{3, 4} {5,6}}</code>, invoking"
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,205, @throws MatrixIndexException  if subMatrix does not fit into this
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,206,"    matrix from element in (row, column)"
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,205,* @throws MatrixIndexException  if subMatrix does not fit into this
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,206,"*    matrix from element in (row, column)"
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,212,"oid setSubMatrix(double[][] subMatrix, int row, int column)"
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,212,"void setSubMatrix(double[][] subMatrix, int row, int column)"
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,363, Row and column indices start at 0 and must satisfy
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,363,* Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,380, Row and column indices start at 0 and must satisfy
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,380,* Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,398, Row and column indices start at 0 and must satisfy
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,398,* Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,416, Row and column indices start at 0 and must satisfy
True,src/main/java/org/apache/commons/math/linear/RealMatrix.java,src/main/java/org/apache/commons/math/linear/RealMatrix.java,416,* Row and column indices start at 0 and must satisfy
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,38, The LU decomposition is cached and reused on subsequent calls.
True,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,38,* The LU decomposition is cached and reused on subsequent calls.
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,41," discarded.  In this case, you need to explicitly invoke"
True,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,41,"* discarded.  In this case, you need to explicitly invoke"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,125,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,125,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,129,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,129,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,314,"ublic void setSubMatrix(final double[][] subMatrix, final int row, final int column)"
True,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,314,"public void setSubMatrix(final double[][] subMatrix, final int row, final int column)"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,329,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
True,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,329,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,334,"hrow MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
True,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,334,"throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");"
False,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,341,"Cols, subMatrix[i].length);"
True,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java,341,"nCols, subMatrix[i].length);"
False,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,23, An interface to classes that implement an algorithm to calculate the
True,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,23,* An interface to classes that implement an algorithm to calculate the
False,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,53, Returns the matrix U of the decomposition.
True,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,53,* Returns the matrix U of the decomposition.
False,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,61, Returns the transpose of the matrix U of the decomposition.
True,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,61,* Returns the transpose of the matrix U of the decomposition.
False,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,69, Returns the diagonal matrix &Sigma; of the decomposition.
True,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,69,* Returns the diagonal matrix &Sigma; of the decomposition.
False,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,85, Returns the matrix V of the decomposition.
True,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,85,* Returns the matrix V of the decomposition.
False,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,93, Returns the transpose of the matrix V of the decomposition.
True,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java,93,* Returns the transpose of the matrix V of the decomposition.
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,79, Calculates the Singular Value Decomposition of the given matrix.
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,79,* Calculates the Singular Value Decomposition of the given matrix.
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,137,/ we reuse the array from matrix E to store the result
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,137,// we reuse the array from matrix E to store the result
False,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,217,/ we reuse the array from matrix E to store the result
True,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,217,// we reuse the array from matrix E to store the result
False,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,85, Returns the matrix Q of the transform.
True,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,85,* Returns the matrix Q of the transform.
False,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,97, Returns the transpose of the matrix Q of the transform.
True,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,97,* Returns the transpose of the matrix Q of the transform.
False,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,142, Returns the tridiagonal matrix T of the transform.
True,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java,142,* Returns the tridiagonal matrix T of the transform.
False,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,332,** Compare a step interval and a double.
True,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java,332,/** Compare a step interval and a double.
False,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,87, <p>The discrete events are generated when the sign of this
True,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,src/main/java/org/apache/commons/math/ode/events/EventHandler.java,87,* <p>The discrete events are generated when the sign of this
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,328,equence[k] = 2 * (k + 1);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,328,sequence[k] = 2 * (k + 1);
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,380,/ read the base class
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,380,// read the base class
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,152,/ read the base class
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,152,// read the base class
False,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,118,/ read the base class
True,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,118,// read the base class
False,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,255,/ read the base class
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,255,// read the base class
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,97, odd elements (i.e. reciprocals of variances).
True,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,97,* odd elements (i.e. reciprocals of variances).
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,498,ork1[pj] *= diag[pj] / dxNorm;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,498,work1[pj] *= diag[pj] / dxNorm;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,573,ork1[pj] = work3[pj] * diag[pj] / dxNorm;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,573,work1[pj] = work3[pj] * diag[pj] / dxNorm;
False,src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,191,f (this == other) {
True,src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,src/main/java/org/apache/commons/math/optimization/linear/LinearConstraint.java,191,if (this == other) {
False,src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,108,f (this == other) {
True,src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,src/main/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java,108,if (this == other) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,32,** Default amount of error to accept in floating point comparisons. */
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,32,/** Default amount of error to accept in floating point comparisons. */
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,35,** Amount of error to accept in floating point comparisons. */
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,36,rotected final double epsilon;
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,35,/** Amount of error to accept in floating point comparisons. */
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,36,protected final double epsilon;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,86,inRatioPos = i;
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,86,minRatioPos = i;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,89,** Amount of error to accept in floating point comparisons. */
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,89,/** Amount of error to accept in floating point comparisons. */
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,177,atrix[0][getArtificialVariableOffset() + artificialVar] = 1;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,178,atrix[row][getArtificialVariableOffset() + artificialVar++] = 1;
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,177,matrix[0][getArtificialVariableOffset() + artificialVar] = 1;
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,178,matrix[row][getArtificialVariableOffset() + artificialVar++] = 1;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,217,"eturn new LinearConstraint(constraint.getCoefficients(),"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,217,"return new LinearConstraint(constraint.getCoefficients(),"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,332,"ystem.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,332,"System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,348,/ if multiple variables can take a given value
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,348,// if multiple variables can take a given value
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,513,f (this == other) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,513,if (this == other) {
False,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,57, @throws IllegalArgumentException if f is null or the
True,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,57,* @throws IllegalArgumentException if f is null or the
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,83, the function.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,83,* the function.
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,24, {@link #setSeed(long)} are provided.
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,24,* {@link #setSeed(long)} are provided.
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,38, Cached random normal value.  The default implementation for
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,38,* Cached random normal value.  The default implementation for
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,55, Clears the cache used by the default implementation of
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,55,* Clears the cache used by the default implementation of
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,82, Sets the seed of the underyling random number generator using a
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,82,* Sets the seed of the underyling random number generator using a
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,86, Implementations that do not override the default implementation of
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,86,* Implementations that do not override the default implementation of
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,92,ublic abstract void setSeed(long seed);
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,92,public abstract void setSeed(long seed);
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,95, Generates random bytes and places them into a user-supplied
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,96, byte array.  The number of random bytes produced is equal to
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,95,* Generates random bytes and places them into a user-supplied
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,96,* byte array.  The number of random bytes produced is equal to
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,102, @param bytes the non-null byte array in which to put the
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,102,* @param bytes the non-null byte array in which to put the
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,123, value from this random number generator's sequence.
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,123,* value from this random number generator's sequence.
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,125, should be produced with  (approximately) equal probability.
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,125,* should be produced with  (approximately) equal probability.
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,127, The default implementation provided here returns
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,127,* The default implementation provided here returns
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,142, this random number generator's sequence.
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,143, <p>
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,144, The default implementation returns
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,142,* this random number generator's sequence.
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,143,* <p>
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,144,* The default implementation returns
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,166, value from this random number generator's sequence.  All
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,167," 2<font size=""-1""><sup>64</sup></font> possible <tt>long</tt> values"
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,168, should be produced with (approximately) equal probability.
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,169, <p>
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,170, The default implementation returns
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,166,* value from this random number generator's sequence.  All
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,167,"* 2<font size=""-1""><sup>64</sup></font> possible <tt>long</tt> values"
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,168,* should be produced with (approximately) equal probability.
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,169,* <p>
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,170,* The default implementation returns
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,185, sequence.
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,186, <p>
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,187, The default implementation returns
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,185,* sequence.
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,186,* <p>
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,187,* The default implementation returns
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,203, number generator's sequence.
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,204, <p>
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,205, The default implementation returns
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,203,* number generator's sequence.
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,204,* <p>
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,205,* The default implementation returns
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,219," Returns the next pseudorandom, uniformly distributed"
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,219,"* Returns the next pseudorandom, uniformly distributed"
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,221, <code>1.0</code> from this random number generator's sequence.
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,221,* <code>1.0</code> from this random number generator's sequence.
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,224, other methods.</p>
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,224,* other methods.</p>
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,226," @return  the next pseudorandom, uniformly distributed"
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,226,"* @return  the next pseudorandom, uniformly distributed"
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,230,ublic abstract double nextDouble();
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,230,public abstract double nextDouble();
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,238," due to G.E.P. Box, M.E. Muller and G. Marsaglia, as described in"
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,238,"* due to G.E.P. Box, M.E. Muller and G. Marsaglia, as described in"
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,244, make sure to call {@link #clear} to clear the cached value in the
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,244,* make sure to call {@link #clear} to clear the cached value in the
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,261,hile (s >=1 ) {
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,262,1 = 2 * nextDouble() - 1;
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,263,2 = 2 * nextDouble() - 1;
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,261,while (s >=1 ) {
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,262,v1 = 2 * nextDouble() - 1;
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,263,v2 = 2 * nextDouble() - 1;
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,267, = Math.sqrt(-2 * Math.log(s) / s);
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,267,s = Math.sqrt(-2 * Math.log(s) / s);
False,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,270,eturn v1 * s;
True,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java,270,return v1 * s;
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,77,ytes[i++] = (byte) (random & 0xff);
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,77,bytes[i++] = (byte) (random & 0xff);
False,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,26, A {@link RandomVectorGenerator} that generates vectors with with
True,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,26,* A {@link RandomVectorGenerator} that generates vectors with with
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,88, Returns a
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,89, {@link org.apache.commons.math.stat.descriptive.StatisticalSummary}
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,88,* Returns a
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,89,* {@link org.apache.commons.math.stat.descriptive.StatisticalSummary}
False,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,115, Returns a list of
True,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/main/java/org/apache/commons/math/random/EmpiricalDistribution.java,115,* Returns a list of
False,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,406,"ath.max((int) Math.ceil((value- min) / delta) - 1, 0),"
True,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,406,"Math.max((int) Math.ceil((value- min) / delta) - 1, 0),"
False,src/main/java/org/apache/commons/math/random/JDKRandomGenerator.java,src/main/java/org/apache/commons/math/random/JDKRandomGenerator.java,22, Extension of <code>java.util.Random</code> to implement
True,src/main/java/org/apache/commons/math/random/JDKRandomGenerator.java,src/main/java/org/apache/commons/math/random/JDKRandomGenerator.java,22,* Extension of <code>java.util.Random</code> to implement
False,src/main/java/org/apache/commons/math/random/MersenneTwister.java,src/main/java/org/apache/commons/math/random/MersenneTwister.java,56,   <li>The names of its contributors may not be used to endorse or promote
False,src/main/java/org/apache/commons/math/random/MersenneTwister.java,src/main/java/org/apache/commons/math/random/MersenneTwister.java,57,       products derived from this software without specific prior written
True,src/main/java/org/apache/commons/math/random/MersenneTwister.java,src/main/java/org/apache/commons/math/random/MersenneTwister.java,56,*   <li>The names of its contributors may not be used to endorse or promote
True,src/main/java/org/apache/commons/math/random/MersenneTwister.java,src/main/java/org/apache/commons/math/random/MersenneTwister.java,57,*       products derived from this software without specific prior written
False,src/main/java/org/apache/commons/math/random/MersenneTwister.java,src/main/java/org/apache/commons/math/random/MersenneTwister.java,146,ongMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;
True,src/main/java/org/apache/commons/math/random/MersenneTwister.java,src/main/java/org/apache/commons/math/random/MersenneTwister.java,146,longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;
False,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,23, {@link RandomGenerator}.
True,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,23,* {@link RandomGenerator}.
False,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,65, sequence.
True,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,65,* sequence.
False,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,77, Generates random bytes and places them into a user-supplied
False,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,78, byte array.  The number of random bytes produced is equal to
True,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,77,* Generates random bytes and places them into a user-supplied
True,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,78,* byte array.  The number of random bytes produced is equal to
False,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,81, @param bytes the non-null byte array in which to put the
True,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,81,* @param bytes the non-null byte array in which to put the
False,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,90," Returns the next pseudorandom, uniformly distributed"
True,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,90,"* Returns the next pseudorandom, uniformly distributed"
False,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,92, <code>1.0</code> from this random number generator's sequence.
True,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,92,* <code>1.0</code> from this random number generator's sequence.
False,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,94," @return  the next pseudorandom, uniformly distributed"
True,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,94,"* @return  the next pseudorandom, uniformly distributed"
False,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,106, number generator's sequence.
True,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,106,* number generator's sequence.
False,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,134, value from this random number generator's sequence.
True,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,134,* value from this random number generator's sequence.
False,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,136, should be produced with  (approximately) equal probability.
True,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,136,* should be produced with  (approximately) equal probability.
False,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,149, this random number generator's sequence.
True,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,149,* this random number generator's sequence.
False,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,164, value from this random number generator's sequence.  All
False,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,165," 2<font size=""-1""><sup>64</sup></font> possible <tt>long</tt> values"
False,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,166, should be produced with (approximately) equal probability.
True,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,164,* value from this random number generator's sequence.  All
True,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,165,"* 2<font size=""-1""><sup>64</sup></font> possible <tt>long</tt> values"
True,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,src/main/java/org/apache/commons/math/random/RandomAdaptor.java,166,* should be produced with (approximately) equal probability.
False,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,22, implemented by {@link AbstractRandomGenerator}.
True,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,22,* implemented by {@link AbstractRandomGenerator}.
False,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,60, Generates random bytes and places them into a user-supplied
False,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,61, byte array.  The number of random bytes produced is equal to
True,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,60,* Generates random bytes and places them into a user-supplied
True,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,61,* byte array.  The number of random bytes produced is equal to
False,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,64, @param bytes the non-null byte array in which to put the
True,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,64,* @param bytes the non-null byte array in which to put the
False,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,71, value from this random number generator's sequence.
True,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,71,* value from this random number generator's sequence.
False,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,73, should be produced with  (approximately) equal probability.
True,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,73,* should be produced with  (approximately) equal probability.
False,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,83, this random number generator's sequence.
True,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,83,* this random number generator's sequence.
False,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,95, value from this random number generator's sequence.  All
False,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,96," 2<font size=""-1""><sup>64</sup></font> possible <tt>long</tt> values"
False,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,97, should be produced with (approximately) equal probability.
True,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,95,* value from this random number generator's sequence.  All
True,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,96,"* 2<font size=""-1""><sup>64</sup></font> possible <tt>long</tt> values"
True,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,97,* should be produced with (approximately) equal probability.
False,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,107, sequence.
True,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,107,* sequence.
False,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,118, number generator's sequence.
True,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,118,* number generator's sequence.
False,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,127," Returns the next pseudorandom, uniformly distributed"
True,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,127,"* Returns the next pseudorandom, uniformly distributed"
False,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,129, <code>1.0</code> from this random number generator's sequence.
True,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,129,* <code>1.0</code> from this random number generator's sequence.
False,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,131," @return  the next pseudorandom, uniformly distributed"
True,src/main/java/org/apache/commons/math/random/RandomGenerator.java,src/main/java/org/apache/commons/math/random/RandomGenerator.java,131,"* @return  the next pseudorandom, uniformly distributed"
False,src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,77,ouble[] random = new double[mean.length];
True,src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,src/main/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java,77,double[] random = new double[mean.length];
False,src/main/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/main/java/org/apache/commons/math/random/UniformRandomGenerator.java,23, from a uniform distribution with mean equal to 0 and standard
True,src/main/java/org/apache/commons/math/random/UniformRandomGenerator.java,src/main/java/org/apache/commons/math/random/UniformRandomGenerator.java,23,* from a uniform distribution with mean equal to 0 and standard
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,83," @param maxIterations Maximum number of ""iterations"" to complete."
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,83,"* @param maxIterations Maximum number of ""iterations"" to complete."
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,112," @param maxIterations Maximum number of ""iterations"" to complete."
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,112,"* @param maxIterations Maximum number of ""iterations"" to complete."
False,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,184," @param maxIterations Maximum number of ""iterations"" to complete."
True,src/main/java/org/apache/commons/math/special/Beta.java,src/main/java/org/apache/commons/math/special/Beta.java,184,"* @param maxIterations Maximum number of ""iterations"" to complete."
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,147," @param maxIterations Maximum number of ""iterations"" to complete."
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,147,"* @param maxIterations Maximum number of ""iterations"" to complete."
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,151,"ublic static double regularizedGammaP(double a,"
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,152,"ouble x,"
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,153,"ouble epsilon,"
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,154,nt maxIterations)
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,151,"public static double regularizedGammaP(double a,"
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,152,"double x,"
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,153,"double epsilon,"
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,154,int maxIterations)
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,222," @param maxIterations Maximum number of ""iterations"" to complete."
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,222,"* @param maxIterations Maximum number of ""iterations"" to complete."
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,226,"ublic static double regularizedGammaQ(final double a,"
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,227,"ouble x,"
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,228,"ouble epsilon,"
False,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,229,nt maxIterations)
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,226,"public static double regularizedGammaQ(final double a,"
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,227,"double x,"
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,228,"double epsilon,"
True,src/main/java/org/apache/commons/math/special/Gamma.java,src/main/java/org/apache/commons/math/special/Gamma.java,229,int maxIterations)
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,30," Accepts int, long, char or Comparable values.  New values added must be"
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,31," comparable to those that have been added, otherwise the add method will"
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,30,"* Accepts int, long, char or Comparable values.  New values added must be"
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,31,"* comparable to those that have been added, otherwise the add method will"
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,34," Integer values (int, long, Integer, Long) are not distinguished by type --"
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,34,"* Integer values (int, long, Integer, Long) are not distinguished by type --"
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,43," The values are ordered using the default (natural order), unless a"
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,43,"* The values are ordered using the default (natural order), unless a"
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,107," @throws IllegalArgumentException if <code>v</code> is not Comparable,"
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,107,"* @throws IllegalArgumentException if <code>v</code> is not Comparable,"
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,114,ddValue((Comparable<?>) v);
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,114,addValue((Comparable<?>) v);
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,144, catch (ClassCastException ex) {
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,144,} catch (ClassCastException ex) {
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,196," If added values are integral (i.e., integers, longs, Integers, or Longs),"
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,196,"* If added values are integral (i.e., integers, longs, Integers, or Longs),"
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,247,ry {
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,247,try {
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,319,eturn (double) getCount(v) / (double) sumFreq;
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,319,return (double) getCount(v) / (double) sumFreq;
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,330,eturn getPct(Long.valueOf(v));
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,330,return getPct(Long.valueOf(v));
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,341,eturn getPct(Long.valueOf(v));
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,341,return getPct(Long.valueOf(v));
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,352,eturn getPct(Character.valueOf(v));
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,352,return getPct(Character.valueOf(v));
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,431,eturn getCumFreq(Long.valueOf(v));
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,431,return getCumFreq(Long.valueOf(v));
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,443,eturn getCumFreq(Long.valueOf(v));
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,443,return getCumFreq(Long.valueOf(v));
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,455,eturn getCumFreq(Character.valueOf(v));
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,455,return getCumFreq(Character.valueOf(v));
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,494,eturn (double) getCumFreq(v) / (double) sumFreq;
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,494,return (double) getCumFreq(v) / (double) sumFreq;
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,507,eturn getCumPct(Long.valueOf(v));
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,507,return getCumPct(Long.valueOf(v));
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,520,eturn getCumPct(Long.valueOf(v));
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,520,return getCumPct(Long.valueOf(v));
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,533,eturn getCumPct(Character.valueOf(v));
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,533,return getCumPct(Character.valueOf(v));
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,550, @param  o1 the first object
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,550,* @param  o1 the first object
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,553," @throws NullPointerException when <i>o1</i> is <code>null</code>,"
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,553,"* @throws NullPointerException when <i>o1</i> is <code>null</code>,"
False,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,555," @throws ClassCastException when <i>o1</i> is not a {@link Comparable Comparable},"
True,src/main/java/org/apache/commons/math/stat/Frequency.java,src/main/java/org/apache/commons/math/stat/Frequency.java,555,"* @throws ClassCastException when <i>o1</i> is not a {@link Comparable Comparable},"
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,34, stored in double[] arrays.
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,34,* stored in double[] arrays.
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,106,"ublic static double sum(final double[] values, final int begin,"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,106,"public static double sum(final double[] values, final int begin,"
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,112," Returns the sum of the squares of the entries in the input array, or"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,112,"* Returns the sum of the squares of the entries in the input array, or"
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,146," Returns the product of the entries in the input array, or"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,146,"* Returns the product of the entries in the input array, or"
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,179," Returns the sum of the natural logs of the entries in the input array, or"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,179,"* Returns the sum of the natural logs of the entries in the input array, or"
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,188, @return the sum of the natural logs of the values or Double.NaN if
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,188,* @return the sum of the natural logs of the values or Double.NaN if
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,209, @return the sum of the natural logs of the values or Double.NaN if
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,209,* @return the sum of the natural logs of the values or Double.NaN if
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,220," Returns the arithmetic mean of the entries in the input array, or"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,220,"* Returns the arithmetic mean of the entries in the input array, or"
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,259," Returns the geometric mean of the entries in the input array, or"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,259,"* Returns the geometric mean of the entries in the input array, or"
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,299," Returns the variance of the entries in the input array, or"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,299,"* Returns the variance of the entries in the input array, or"
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,344," the input array, using the precomputed mean value.  Returns"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,344,"* the input array, using the precomputed mean value.  Returns"
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,368,"ublic static double variance(final double[] values, final double mean,"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,368,"public static double variance(final double[] values, final double mean,"
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,370,"eturn VARIANCE.evaluate(values, mean, begin, length);"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,370,"return VARIANCE.evaluate(values, mean, begin, length);"
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,376, is empty.
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,376,* is empty.
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,379, details on the computing algorithm.</p>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,379,* details on the computing algorithm.</p>
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,396,"eturn VARIANCE.evaluate(values, mean);"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,396,"return VARIANCE.evaluate(values, mean);"
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,400," Returns the maximum of the entries in the input array, or"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,400,"* Returns the maximum of the entries in the input array, or"
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,406, <li>The result is <code>NaN</code> iff all values are <code>NaN</code>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,406,* <li>The result is <code>NaN</code> iff all values are <code>NaN</code>
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,408," <li>If any of the values equals <code>Double.POSITIVE_INFINITY</code>,"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,408,"* <li>If any of the values equals <code>Double.POSITIVE_INFINITY</code>,"
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,429, <li>The result is <code>NaN</code> iff all values are <code>NaN</code>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,429,* <li>The result is <code>NaN</code> iff all values are <code>NaN</code>
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,431," <li>If any of the values equals <code>Double.POSITIVE_INFINITY</code>,"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,431,"* <li>If any of the values equals <code>Double.POSITIVE_INFINITY</code>,"
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,448," Returns the minimum of the entries in the input array, or"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,448,"* Returns the minimum of the entries in the input array, or"
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,454, <li>The result is <code>NaN</code> iff all values are <code>NaN</code>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,454,* <li>The result is <code>NaN</code> iff all values are <code>NaN</code>
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,456," <li>If any of the values equals <code>Double.NEGATIVE_INFINITY</code>,"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,456,"* <li>If any of the values equals <code>Double.NEGATIVE_INFINITY</code>,"
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,477, <li>The result is <code>NaN</code> iff all values are <code>NaN</code>
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,477,* <li>The result is <code>NaN</code> iff all values are <code>NaN</code>
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,479," <li>If any of the values equals <code>Double.NEGATIVE_INFINITY</code>,"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,479,"* <li>If any of the values equals <code>Double.NEGATIVE_INFINITY</code>,"
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,500, <li>Returns <code>Double.NaN</code> if <code>values</code> has length
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,500,* <li>Returns <code>Double.NaN</code> if <code>values</code> has length
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,515, @throws IllegalArgumentException if <code>values</code> is null
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,515,* @throws IllegalArgumentException if <code>values</code> is null
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,533,"  is null , <code>begin</code> or <code>length</code> is invalid, or"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,533,"*  is null , <code>begin</code> or <code>length</code> is invalid, or"
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,549,"ublic static double percentile(final double[] values, final int begin,"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,549,"public static double percentile(final double[] values, final int begin,"
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,600, @param meanDifference   the mean difference between corresponding entries
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,600,* @param meanDifference   the mean difference between corresponding entries
False,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,606,"ublic static double varianceDifference(final double[] sample1, final double[] sample2,"
True,src/main/java/org/apache/commons/math/stat/StatUtils.java,src/main/java/org/apache/commons/math/stat/StatUtils.java,606,"public static double varianceDifference(final double[] sample1, final double[] sample2,"
False,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,60,inal int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,60,final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;
False,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,116,"/ For each data point x, compute D(x), the distance between x and"
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,116,"// For each data point x, compute D(x), the distance between x and"
False,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,28, <p>The constructors that take <code>RealMatrix</code> or
True,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,28,* <p>The constructors that take <code>RealMatrix</code> or
False,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,214," @param biasCorrected if true, returned value will be bias-corrected"
False,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,215, @return returns the covariance for the two arrays
True,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,214,"* @param biasCorrected if true, returned value will be bias-corrected"
True,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,215,* @return returns the covariance for the two arrays
False,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,219,"ublic double covariance(final double[] xArray, final double[] yArray, boolean biasCorrected)"
True,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,219,"public double covariance(final double[] xArray, final double[] yArray, boolean biasCorrected)"
False,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,250, @return returns the covariance for the two arrays
True,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,250,* @return returns the covariance for the two arrays
False,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,254,"ublic double covariance(final double[] xArray, final double[] yArray)"
True,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,src/main/java/org/apache/commons/math/stat/correlation/Covariance.java,254,"public double covariance(final double[] xArray, final double[] yArray)"
False,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,31, <p>The constructors that take <code>RealMatrix</code> or
True,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,31,* <p>The constructors that take <code>RealMatrix</code> or
False,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,120,eturn correlationMatrix;
True,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,120,return correlationMatrix;
False,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,130, where <code>r</code> is the estimated correlation coefficient and
True,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,130,* where <code>r</code> is the estimated correlation coefficient and
False,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,154, <p>The values in the matrix are sometimes referred to as the
True,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,154,* <p>The values in the matrix are sometimes referred to as the
False,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,220, @return Returns Pearson's correlation coefficient for the two arrays
True,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,220,* @return Returns Pearson's correlation coefficient for the two arrays
False,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,243," <code>r(X,Y) = cov(X,Y)/s(X)s(Y)</code> where"
True,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,243,"* <code>r(X,Y) = cov(X,Y)/s(X)s(Y)</code> where"
False,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,257,"ouble entry = covarianceMatrix.getEntry(i, j) /"
True,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java,257,"double entry = covarianceMatrix.getEntry(i, j) /"
False,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,39,ublic class SpearmansCorrelation {
True,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,39,public class SpearmansCorrelation {
False,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,59,his.data = dataMatrix.copy();
True,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,59,this.data = dataMatrix.copy();
False,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,79,ata = null;
True,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,79,data = null;
False,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,85, Calculate the Spearman Rank Correlation Matrix.
True,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,85,* Calculate the Spearman Rank Correlation Matrix.
False,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,97, is equivalent to
True,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,97,* is equivalent to
False,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,142, @return Returns Spearman's rank correlation coefficient for the two arrays
True,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,142,* @return Returns Spearman's rank correlation coefficient for the two arrays
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,38," This default implementation calls {@link #clear}, then invokes"
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,39," {@link #increment} in a loop over the the input array, and then uses"
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,40, {@link #getResult} to compute the return value.
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,38,"* This default implementation calls {@link #clear}, then invokes"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,39,"* {@link #increment} in a loop over the the input array, and then uses"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,40,* {@link #getResult} to compute the return value.
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,64," This default implementation calls {@link #clear}, then invokes"
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,65, {@link #increment} in a loop over the specified portion of the input
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,66," array, and then uses {@link #getResult} to compute the return value."
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,64,"* This default implementation calls {@link #clear}, then invokes"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,65,* {@link #increment} in a loop over the specified portion of the input
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,66,"* array, and then uses {@link #getResult} to compute the return value."
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,76," If the array is null or the index parameters are not valid, an"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,76,"* If the array is null or the index parameters are not valid, an"
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,116, the input array.
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,116,* the input array.
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,153, Returns true iff <code>object</code> is an
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,153,* Returns true iff <code>object</code> is an
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,168,"eturn (MathUtils.equals(stat.getResult(), this.getResult()) &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,168,"return (MathUtils.equals(stat.getResult(), this.getResult()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,22, Abstract base class for all implementations of the
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,22,* Abstract base class for all implementations of the
False,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,25," Provides a default implementation of <code>evaluate(double[]),</code>"
True,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,25,"* Provides a default implementation of <code>evaluate(double[]),</code>"
False,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,42," instances to be aggregated concurrently, the created instances'"
True,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,42,"* instances to be aggregated concurrently, the created instances'"
False,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,61, contributing to this aggregate
True,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,61,* contributing to this aggregate
False,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,89,      means that other objects are initialized by copying this object's state.
True,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,89,*      means that other objects are initialized by copying this object's state.
False,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,111,      means that other objects are initialized by copying this object's state.
True,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,111,*      means that other objects are initialized by copying this object's state.
False,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,267,"eturn new StatisticalSummaryValues(getMean(), getVariance(), getN(),"
True,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,267,"return new StatisticalSummaryValues(getMean(), getVariance(), getN(),"
False,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,274, aggregated with those of this {@code AggregateSummaryStatistics}.
True,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,274,* aggregated with those of this {@code AggregateSummaryStatistics}.
False,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,330,2 = m2 + current.getSecondMoment() + meanDiff * meanDiff * oldN * curN / n;
True,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,330,m2 = m2 + current.getSecondMoment() + meanDiff * meanDiff * oldN * curN / n;
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,40, property sets a limit on the number of values that can be stored in the
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,40,* property sets a limit on the number of values that can be stored in the
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,43," will grow without bound in this case.  For very large datasets,"
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,43,"* will grow without bound in this case.  For very large datasets,"
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,47," added in a ""rolling"" manner, with new values replacing the ""oldest"" values"
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,47,"* added in a ""rolling"" manner, with new values replacing the ""oldest"" values"
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,50, <p>Note: this class is not threadsafe.  Use
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,50,* <p>Note: this class is not threadsafe.  Use
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,137, @param v the value to be added
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,137,* @param v the value to be added
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,171, arithmetic mean </a> of the available values
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,171,* arithmetic mean </a> of the available values
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,181," @return The geometricMean, Double.NaN if no values have been added,"
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,181,"* @return The geometricMean, Double.NaN if no values have been added,"
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,190," @return The variance, Double.NaN if no values have been added"
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,191, or 0.0 for a single value set.
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,190,"* @return The variance, Double.NaN if no values have been added"
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,191,* or 0.0 for a single value set.
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,199," @return The standard deviation, Double.NaN if no values have been added"
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,200, or 0.0 for a single value set.
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,199,"* @return The standard deviation, Double.NaN if no values have been added"
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,200,* or 0.0 for a single value set.
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,215, Returns the skewness of the available values. Skewness is a
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,215,* Returns the skewness of the available values. Skewness is a
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,217," @return The skewness, Double.NaN if no values have been added"
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,218, or 0.0 for a value set &lt;=2.
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,217,"* @return The skewness, Double.NaN if no values have been added"
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,218,* or 0.0 for a value set &lt;=2.
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,225, Returns the Kurtosis of the available values. Kurtosis is a
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,225,* Returns the Kurtosis of the available values. Kurtosis is a
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,227," @return The kurtosis, Double.NaN if no values have been added, or 0.0"
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,228, for a value set &lt;=3.
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,227,"* @return The kurtosis, Double.NaN if no values have been added, or 0.0"
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,228,* for a value set &lt;=3.
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,268, @return The sum of the squares or Double.NaN if no
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,268,* @return The sum of the squares or Double.NaN if no
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,294, WindowSize controls the number of values which contribute
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,295," to the reported statistics.  For example, if"
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,296," windowSize is set to 3 and the values {1,2,3,4,5}"
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,297, have been added <strong> in that order</strong>
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,294,* WindowSize controls the number of values which contribute
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,295,"* to the reported statistics.  For example, if"
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,296,"* windowSize is set to 3 and the values {1,2,3,4,5}"
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,297,* have been added <strong> in that order</strong>
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,313,/ from the front of the array.  If the windowSize is less than
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,313,// from the front of the array.  If the windowSize is less than
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,321, Returns the current set of values in an array of double primitives.
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,321,* Returns the current set of values in an array of double primitives.
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,326, @return returns the current set of numbers in the order in which they
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,326,* @return returns the current set of numbers in the order in which they
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,334," Returns the current set of values in an array of double primitives,"
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,334,"* Returns the current set of values in an array of double primitives,"
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,338, @return returns the current set of
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,339, numbers sorted in ascending order
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,338,* @return returns the current set of
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,339,* numbers sorted in ascending order
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,357, Returns an estimate for the pth percentile of the stored values.
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,357,* Returns an estimate for the pth percentile of the stored values.
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,363, <li><code>0 &lt; p &le; 100</code> (otherwise an
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,363,* <li><code>0 &lt; p &le; 100</code> (otherwise an
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,370, @return An estimate for the pth percentile of the stored data
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,370,* @return An estimate for the pth percentile of the stored data
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,380,"ercentileImpl.getClass().getMethod(""setQuantile"","
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,380,"percentileImpl.getClass().getMethod(""setQuantile"","
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,392,hrow MathRuntimeException.createIllegalArgumentException(e3.getCause());
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,392,throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,552, <code>setQuantile(double)</code> method; otherwise
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,552,* <code>setQuantile(double)</code> method; otherwise
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,563,"ercentileImpl.getClass().getMethod(""setQuantile"","
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,563,"percentileImpl.getClass().getMethod(""setQuantile"","
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,566, catch (NoSuchMethodException e1) {
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,566,} catch (NoSuchMethodException e1) {
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,575,hrow MathRuntimeException.createIllegalArgumentException(e3.getCause());
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,575,throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
False,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,674,eturn result;
True,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java,674,return result;
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,36, <p>Computes summary statistics for a stream of n-tuples added using the
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,36,* <p>Computes summary statistics for a stream of n-tuples added using the
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,45, parameters to these methods must implement the
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,45,* parameters to these methods must implement the
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,51, MultivariateStatistics instance with dimension n and then use
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,51,* MultivariateStatistics instance with dimension n and then use
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,61, <p>Note: This class is not thread-safe. Use
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,61,* <p>Note: This class is not thread-safe. Use
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,192, i<sup>th</sup> entries of the arrays that have been added using
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,192,* i<sup>th</sup> entries of the arrays that have been added using
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,203, i<sup>th</sup> entries of the arrays that have been added using
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,203,* i<sup>th</sup> entries of the arrays that have been added using
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,214, i<sup>th</sup> entries of the arrays that have been added using
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,214,* i<sup>th</sup> entries of the arrays that have been added using
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,225, i<sup>th</sup> entries of the arrays that have been added using
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,225,* i<sup>th</sup> entries of the arrays that have been added using
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,236, i<sup>th</sup> entries of the arrays that have been added using
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,236,* i<sup>th</sup> entries of the arrays that have been added using
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,259, @return the covariance matrix
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,259,* @return the covariance matrix
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,267, i<sup>th</sup> entries of the arrays that have been added using
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,267,* i<sup>th</sup> entries of the arrays that have been added using
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,278, i<sup>th</sup> entries of the arrays that have been added using
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,278,* i<sup>th</sup> entries of the arrays that have been added using
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,289, i<sup>th</sup> entries of the arrays that have been added using
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,289,* i<sup>th</sup> entries of the arrays that have been added using
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,372,"eturn (MathUtils.equals(stat.getGeometricMean(),"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,372,"return (MathUtils.equals(stat.getGeometricMean(),"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,374,"athUtils.equals(stat.getMax(), this.getMax()) &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,374,"MathUtils.equals(stat.getMax(), this.getMax()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,434, before {@link #addValue(double[]) addValue} has been used to add data;
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,434,* before {@link #addValue(double[]) addValue} has been used to add data;
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,461, before {@link #addValue(double[]) addValue} has been used to add data;
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,461,* before {@link #addValue(double[]) addValue} has been used to add data;
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,488, before {@link #addValue(double[]) addValue} has been used to add data;
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,488,* before {@link #addValue(double[]) addValue} has been used to add data;
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,515, before {@link #addValue(double[]) addValue} has been used to add data;
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,515,* before {@link #addValue(double[]) addValue} has been used to add data;
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,542, before {@link #addValue(double[]) addValue} has been used to add data;
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,542,* before {@link #addValue(double[]) addValue} has been used to add data;
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,549, @throws IllegalStateException if data has already been added
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,549,* @throws IllegalStateException if data has already been added
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,569, before {@link #addValue(double[]) addValue} has been used to add data;
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,569,* before {@link #addValue(double[]) addValue} has been used to add data;
False,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,596, before {@link #addValue(double[]) addValue} has been used to add data;
True,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,596,* before {@link #addValue(double[]) addValue} has been used to add data;
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,44, have been added or a zeroed matrix for a single value set.
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,44,* have been added or a zeroed matrix for a single value set.
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,27, arithmetic mean </a> of the available values
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,27,* arithmetic mean </a> of the available values
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,33," @return The variance, Double.NaN if no values have been added"
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,34, or 0.0 for a single value set.
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,33,"* @return The variance, Double.NaN if no values have been added"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,34,* or 0.0 for a single value set.
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,39," @return The standard deviation, Double.NaN if no values have been added"
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,40, or 0.0 for a single value set.
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,39,"* @return The standard deviation, Double.NaN if no values have been added"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java,40,* or 0.0 for a single value set.
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,27,"ublic class StatisticalSummaryValues implements Serializable,"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,27,"public class StatisticalSummaryValues implements Serializable,"
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,56, @param n  the number of observations in the sample
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,56,* @param n  the number of observations in the sample
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,122, Returns true iff <code>object</code> is a
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,122,* Returns true iff <code>object</code> is a
False,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,138,"eturn (MathUtils.equals(stat.getMax(), this.getMax()) &&"
True,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java,138,"return (MathUtils.equals(stat.getMax(), this.getMax()) &&"
False,src/main/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java,20, Extends the definition of {@link UnivariateStatistic} with
True,src/main/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java,20,* Extends the definition of {@link UnivariateStatistic} with
False,src/main/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java,22, values and updating internal state.
True,src/main/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java,22,* values and updating internal state.
False,src/main/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java,51," clear the statistic first -- i.e., the values are added"
True,src/main/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java,src/main/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.java,51,"* clear the statistic first -- i.e., the values are added"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,137,"eturn new StatisticalSummaryValues(getMean(), getVariance(), getN(),"
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,137,"return new StatisticalSummaryValues(getMean(), getVariance(), getN(),"
False,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,645,eturn result;
True,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java,645,return result;
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java,27, the instance nor compute another statistic.
True,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java,27,* the instance nor compute another statistic.
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java,149,ynchronizedDescriptiveStatistics result =
True,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java,149,SynchronizedDescriptiveStatistics result =
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java,152,eturn result;
True,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedDescriptiveStatistics.java,152,return result;
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,27, the instance nor compute another statistic.
True,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,27,* the instance nor compute another statistic.
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,309,ynchronizedSummaryStatistics result =
True,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,309,SynchronizedSummaryStatistics result =
False,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,312,eturn result;
True,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/main/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,312,return result;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,40, <strong>Note that this implementation is not synchronized.</strong> If
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,40,* <strong>Note that this implementation is not synchronized.</strong> If
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,42, one of the threads invokes the <code>increment()</code> or
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,42,* one of the threads invokes the <code>increment()</code> or
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,47,ublic class FirstMoment extends AbstractStorelessUnivariateStatistic
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,47,public class FirstMoment extends AbstractStorelessUnivariateStatistic
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,142,eturn result;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,142,return result;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,23, what is computed is the sum of
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,23,* what is computed is the sum of
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,27, where the x_i are the
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,27,* where the x_i are the
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,46, <strong>Note that this implementation is not synchronized.</strong> If
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,46,* <strong>Note that this implementation is not synchronized.</strong> If
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,48, one of the threads invokes the <code>increment()</code> or
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/FourthMoment.java,48,* one of the threads invokes the <code>increment()</code> or
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,34, <li>If all values are non-negative and less than
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,35," <code>Double.POSITIVE_INFINITY</code>,  but at least one value is 0, the"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,34,* <li>If all values are non-negative and less than
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,35,"* <code>Double.POSITIVE_INFINITY</code>,  but at least one value is 0, the"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,37, <li>If both <code>Double.POSITIVE_INFINITY</code> and
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,37,* <li>If both <code>Double.POSITIVE_INFINITY</code> and
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,42, <strong>Note that this implementation is not synchronized.</strong> If
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,42,* <strong>Note that this implementation is not synchronized.</strong> If
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,44, one of the threads invokes the <code>increment()</code> or
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,44,* one of the threads invokes the <code>increment()</code> or
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,53,rivate static final long serialVersionUID = -8178734905303459453L;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,53,private static final long serialVersionUID = -8178734905303459453L;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,155, before {@link #increment(double) increment} has been used to add data;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,155,* before {@link #increment(double) increment} has been used to add data;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,160, @throws IllegalStateException if data has already been added
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,160,* @throws IllegalStateException if data has already been added
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,38, <strong>Note that this implementation is not synchronized.</strong> If
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,38,* <strong>Note that this implementation is not synchronized.</strong> If
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,40, one of the threads invokes the <code>increment()</code> or
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,40,* one of the threads invokes the <code>increment()</code> or
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,48,rivate static final long serialVersionUID = 2784465764798260919L;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,48,private static final long serialVersionUID = 2784465764798260919L;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,147, input array.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,147,* input array.
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,163,/ Initialize the kurtosis
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,164,ouble kurt = Double.NaN;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,166,"f (test(values, begin, length) && length > 3) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,163,// Initialize the kurtosis
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,164,double kurt = Double.NaN;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,166,"if (test(values, begin, length) && length > 3) {"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,51, <strong>Note that this implementation is not synchronized.</strong> If
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,51,* <strong>Note that this implementation is not synchronized.</strong> If
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,53, one of the threads invokes the <code>increment()</code> or
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,53,* one of the threads invokes the <code>increment()</code> or
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,58,ublic class Mean extends AbstractStorelessUnivariateStatistic
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,58,public class Mean extends AbstractStorelessUnivariateStatistic
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,62,rivate static final long serialVersionUID = -1296043746617791564L;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,62,private static final long serialVersionUID = -1296043746617791564L;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,38, <strong>Note that this implementation is not synchronized.</strong> If
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,38,* <strong>Note that this implementation is not synchronized.</strong> If
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,40, one of the threads invokes the <code>increment()</code> or
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,40,* one of the threads invokes the <code>increment()</code> or
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,48,rivate static final long serialVersionUID = 3942403127395076445L;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,48,private static final long serialVersionUID = 3942403127395076445L;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,108,eturn result;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/SecondMoment.java,108,return result;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,30," where n is the number of values, mean is the {@link Mean} and std is the"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,30,"* where n is the number of values, mean is the {@link Mean} and std is the"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,33, <strong>Note that this implementation is not synchronized.</strong> If
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,33,* <strong>Note that this implementation is not synchronized.</strong> If
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,35, one of the threads invokes the <code>increment()</code> or
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,35,* one of the threads invokes the <code>increment()</code> or
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,43,rivate static final long serialVersionUID = 7101857578996691352L;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,43,private static final long serialVersionUID = 7101857578996691352L;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,150,"ublic double evaluate(final double[] values,final int begin,"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java,150,"public double evaluate(final double[] values,final int begin,"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,28," compute both the ""sample standard deviation"" (the square root of the"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,28,"* compute both the ""sample standard deviation"" (the square root of the"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,30," (the square root of the non-bias-corrected ""population variance""). See"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,31, {@link Variance} for more information.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,30,"* (the square root of the non-bias-corrected ""population variance""). See"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,31,* {@link Variance} for more information.
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,33, <strong>Note that this implementation is not synchronized.</strong> If
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,33,* <strong>Note that this implementation is not synchronized.</strong> If
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,35, one of the threads invokes the <code>increment()</code> or
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,35,* one of the threads invokes the <code>increment()</code> or
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,44,rivate static final long serialVersionUID = 5728716329662425188L;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,44,private static final long serialVersionUID = 5728716329662425188L;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,78, <code>isBiasCorrected</code> property.  If this property is set to
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,78,* <code>isBiasCorrected</code> property.  If this property is set to
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,137," Returns the Standard Deviation of the entries in the input array, or"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java,137,"* Returns the Standard Deviation of the entries in the input array, or"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,40, <strong>Note that this implementation is not synchronized.</strong> If
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,40,* <strong>Note that this implementation is not synchronized.</strong> If
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,42, one of the threads invokes the <code>increment()</code> or
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,42,* one of the threads invokes the <code>increment()</code> or
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,50,rivate static final long serialVersionUID = -7818711964045118679L;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,50,private static final long serialVersionUID = -7818711964045118679L;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,56, Square of deviation of most recently added value from previous first
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,57," moment, normalized by previous sample size.  Retained to prevent"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,56,* Square of deviation of most recently added value from previous first
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,57,"* moment, normalized by previous sample size.  Retained to prevent"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,122,eturn result;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java,122,return result;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,59, <strong>Note that this implementation is not synchronized.</strong> If
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,59,* <strong>Note that this implementation is not synchronized.</strong> If
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,61, one of the threads invokes the <code>increment()</code> or
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,61,* one of the threads invokes the <code>increment()</code> or
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,69,rivate static final long serialVersionUID = -9111962718267217978L;
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,69,private static final long serialVersionUID = -9111962718267217978L;
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,27, <li>The result is <code>NaN</code> iff all values are <code>NaN</code>
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,27,* <li>The result is <code>NaN</code> iff all values are <code>NaN</code>
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,29," <li>If any of the values equals <code>Double.POSITIVE_INFINITY</code>,"
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,29,"* <li>If any of the values equals <code>Double.POSITIVE_INFINITY</code>,"
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,33, <strong>Note that this implementation is not synchronized.</strong> If
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,33,* <strong>Note that this implementation is not synchronized.</strong> If
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,35, one of the threads invokes the <code>increment()</code> or
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,35,* one of the threads invokes the <code>increment()</code> or
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,43,rivate static final long serialVersionUID = -5593383832225844641L;
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,43,private static final long serialVersionUID = -5593383832225844641L;
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,113, <li>The result is <code>NaN</code> iff all values are <code>NaN</code>
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,113,* <li>The result is <code>NaN</code> iff all values are <code>NaN</code>
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,115," <li>If any of the values equals <code>Double.POSITIVE_INFINITY</code>,"
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Max.java,115,"* <li>If any of the values equals <code>Double.POSITIVE_INFINITY</code>,"
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Median.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Median.java,26, <strong>Note that this implementation is not synchronized.</strong> If
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Median.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Median.java,26,* <strong>Note that this implementation is not synchronized.</strong> If
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Median.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Median.java,28, one of the threads invokes the <code>increment()</code> or
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Median.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Median.java,28,* one of the threads invokes the <code>increment()</code> or
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Median.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Median.java,36,rivate static final long serialVersionUID = -3961477041290915687L;
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Median.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Median.java,36,private static final long serialVersionUID = -3961477041290915687L;
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,27, <li>The result is <code>NaN</code> iff all values are <code>NaN</code>
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,27,* <li>The result is <code>NaN</code> iff all values are <code>NaN</code>
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,29," <li>If any of the values equals <code>Double.NEGATIVE_INFINITY</code>,"
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,29,"* <li>If any of the values equals <code>Double.NEGATIVE_INFINITY</code>,"
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,33, <strong>Note that this implementation is not synchronized.</strong> If
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,33,* <strong>Note that this implementation is not synchronized.</strong> If
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,35, one of the threads invokes the <code>increment()</code> or
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,35,* one of the threads invokes the <code>increment()</code> or
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,43,rivate static final long serialVersionUID = -2941995784909003131L;
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,43,private static final long serialVersionUID = -2941995784909003131L;
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,113, <li>The result is <code>NaN</code> iff all values are <code>NaN</code>
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,113,* <li>The result is <code>NaN</code> iff all values are <code>NaN</code>
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,115," <li>If any of the values equals <code>Double.NEGATIVE_INFINITY</code>,"
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Min.java,115,"* <li>If any of the values equals <code>Double.NEGATIVE_INFINITY</code>,"
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,28, There are several commonly used methods for estimating percentiles (a.k.a.
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,29," quantiles) based on sample data.  For large samples, the different methods"
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,28,* There are several commonly used methods for estimating percentiles (a.k.a.
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,29,"* quantiles) based on sample data.  For large samples, the different methods"
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,33, <li>Let <code>n</code> be the length of the (sorted) array and
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,33,* <li>Let <code>n</code> be the length of the (sorted) array and
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,35, <li>If <code> n = 1 </code> return the unique array element (regardless of
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,35,* <li>If <code> n = 1 </code> return the unique array element (regardless of
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,37, <li>Compute the estimated percentile position
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,37,* <li>Compute the estimated percentile position
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,42, <li>Let <code>lower</code> be the element in position
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,42,* <li>Let <code>lower</code> be the element in position
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,51, by {@link java.lang.Double#compareTo(Double)}.  This ordering makes
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,52, <code>Double.NaN</code> larger than any other value (including
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,51,* by {@link java.lang.Double#compareTo(Double)}.  This ordering makes
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,52,* <code>Double.NaN</code> larger than any other value (including
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,54, (50th percentile) of
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,54,* (50th percentile) of
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,57, Since percentile estimation usually involves interpolation between array
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,57,* Since percentile estimation usually involves interpolation between array
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,61, <strong>Note that this implementation is not synchronized.</strong> If
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,61,* <strong>Note that this implementation is not synchronized.</strong> If
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,63, one of the threads invokes the <code>increment()</code> or
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,63,* one of the threads invokes the <code>increment()</code> or
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,71,rivate static final long serialVersionUID = -8091216485095130416L;
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,73,** Determines what percentile is computed when evaluate() is activated
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,71,private static final long serialVersionUID = -8091216485095130416L;
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,73,/** Determines what percentile is computed when evaluate() is activated
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,113, <li>Returns <code>Double.NaN</code> if <code>values</code> has length
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,113,* <li>Returns <code>Double.NaN</code> if <code>values</code> has length
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,128, @throws IllegalArgumentException if <code>values</code> is null
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,128,* @throws IllegalArgumentException if <code>values</code> is null
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,143, <li>Returns (for any value of <code>quantile</code>)
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,143,* <li>Returns (for any value of <code>quantile</code>)
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,146," is null,  or <code>start</code> or <code>length</code>"
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,146,"* is null,  or <code>start</code> or <code>length</code>"
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,179,"  is null , <code>begin</code> or <code>length</code> is invalid, or"
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,179,"*  is null , <code>begin</code> or <code>length</code> is invalid, or"
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,195,"ublic double evaluate(final double[] values, final int begin,"
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,195,"public double evaluate(final double[] values, final int begin,"
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,241, Sets the value of the quantile field (determines what percentile is
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,241,* Sets the value of the quantile field (determines what percentile is
False,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,244, @param p a value between 0 < p <= 100
True,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java,244,* @param p a value between 0 < p <= 100
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,26," If there are no values in the dataset, or any of the values are"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,26,"* If there are no values in the dataset, or any of the values are"
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,29, <strong>Note that this implementation is not synchronized.</strong> If
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,29,* <strong>Note that this implementation is not synchronized.</strong> If
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,31, one of the threads invokes the <code>increment()</code> or
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,31,* one of the threads invokes the <code>increment()</code> or
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,39,rivate static final long serialVersionUID = 2824226005990582538L;
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,39,private static final long serialVersionUID = 2824226005990582538L;
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,26," If there are no values in the dataset, or any of the values are"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,26,"* If there are no values in the dataset, or any of the values are"
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,29, <strong>Note that this implementation is not synchronized.</strong> If
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,29,* <strong>Note that this implementation is not synchronized.</strong> If
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,31, one of the threads invokes the <code>increment()</code> or
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,31,* one of the threads invokes the <code>increment()</code> or
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,39,rivate static final long serialVersionUID = -8231831954703408316L;
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,39,private static final long serialVersionUID = -8231831954703408316L;
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,24, Returns the sum of the natural logs for this collection of values.
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,24,* Returns the sum of the natural logs for this collection of values.
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,29, <li>If all values are non-negative and less than
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,29,* <li>If all values are non-negative and less than
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,32, <li>If both <code>Double.POSITIVE_INFINITY</code> and
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,32,* <li>If both <code>Double.POSITIVE_INFINITY</code> and
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,37, <strong>Note that this implementation is not synchronized.</strong> If
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,37,* <strong>Note that this implementation is not synchronized.</strong> If
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,39, one of the threads invokes the <code>increment()</code> or
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,39,* one of the threads invokes the <code>increment()</code> or
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,47,rivate static final long serialVersionUID = -370076995648386763L;
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,47,private static final long serialVersionUID = -370076995648386763L;
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,124, @return the sum of the natural logs of the values or Double.NaN if
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java,124,* @return the sum of the natural logs of the values or Double.NaN if
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,26," If there are no values in the dataset, or any of the values are"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,26,"* If there are no values in the dataset, or any of the values are"
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,29, <strong>Note that this implementation is not synchronized.</strong> If
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,29,* <strong>Note that this implementation is not synchronized.</strong> If
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,31, one of the threads invokes the <code>increment()</code> or
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,31,* one of the threads invokes the <code>increment()</code> or
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,39,rivate static final long serialVersionUID = 1460986908574398008L;
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java,39,private static final long serialVersionUID = 1460986908574398008L;
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,26, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,26,* @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,32, Chi-Square statistic</a> comparing <code>observed</code> and <code>expected</code>
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,33, frequency counts.
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,32,* Chi-Square statistic</a> comparing <code>observed</code> and <code>expected</code>
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,33,* frequency counts.
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,39, <li>Expected counts must all be positive.
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,39,* <li>Expected counts must all be positive.
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,41, <li>Observed counts must all be >= 0.
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,41,* <li>Observed counts must all be >= 0.
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,44, their common length must be at least 2.
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,44,* their common length must be at least 2.
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,46," If any of the preconditions are not met, an"
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,46,"* If any of the preconditions are not met, an"
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,54,"ouble chiSquare(double[] expected, long[] observed)"
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,54,"double chiSquare(double[] expected, long[] observed)"
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,60," p-value</a>, associated with a"
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,60,"* p-value</a>, associated with a"
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,62, Chi-square goodness of fit test</a> comparing the <code>observed</code>
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,62,* Chi-square goodness of fit test</a> comparing the <code>observed</code>
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,65, The number returned is the smallest significance level at which one can reject
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,66, the null hypothesis that the observed counts conform to the frequency distribution
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,65,* The number returned is the smallest significance level at which one can reject
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,66,* the null hypothesis that the observed counts conform to the frequency distribution
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,70, <li>Expected counts must all be positive.
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,70,* <li>Expected counts must all be positive.
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,72, <li>Observed counts must all be >= 0.
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,72,* <li>Observed counts must all be >= 0.
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,75, their common length must be at least 2.
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,75,* their common length must be at least 2.
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,77," If any of the preconditions are not met, an"
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,77,"* If any of the preconditions are not met, an"
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,86,"ouble chiSquareTest(double[] expected, long[] observed)"
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,86,"double chiSquareTest(double[] expected, long[] observed)"
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,91, Chi-square goodness of fit test</a> evaluating the null hypothesis that the observed counts
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,92," conform to the frequency distribution described by the expected counts, with"
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,91,* Chi-square goodness of fit test</a> evaluating the null hypothesis that the observed counts
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,92,"* conform to the frequency distribution described by the expected counts, with"
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,97, To test the hypothesis that <code>observed</code> follows
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,97,* To test the hypothesis that <code>observed</code> follows
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,102, <li>Expected counts must all be positive.
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,102,* <li>Expected counts must all be positive.
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,104, <li>Observed counts must all be >= 0.
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,104,* <li>Observed counts must all be >= 0.
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,107, their common length must be at least 2.
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,107,* their common length must be at least 2.
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,110," If any of the preconditions are not met, an"
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,110,"* If any of the preconditions are not met, an"
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,121,"oolean chiSquareTest(double[] expected, long[] observed, double alpha)"
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,121,"boolean chiSquareTest(double[] expected, long[] observed, double alpha)"
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,125,  Computes the Chi-Square statistic associated with a
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,125,*  Computes the Chi-Square statistic associated with a
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,128,"  array, viewed as a two-way table."
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,128,"*  array, viewed as a two-way table."
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,130, The rows of the 2-way table are
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,130,* The rows of the 2-way table are
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,134, <li>All counts must be >= 0.
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,134,* <li>All counts must be >= 0.
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,137,  must have the same length).
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,137,*  must have the same length).
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,143," If any of the preconditions are not met, an"
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,143,"* If any of the preconditions are not met, an"
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,150,ouble chiSquare(long[][] counts)
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,150,double chiSquare(long[][] counts)
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,156," p-value</a>, associated with a"
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,156,"* p-value</a>, associated with a"
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,159," array, viewed as a two-way table."
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,159,"* array, viewed as a two-way table."
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,161, The rows of the 2-way table are
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,161,* The rows of the 2-way table are
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,165, <li>All counts must be >= 0.
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,165,* <li>All counts must be >= 0.
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,167, <li>The count array must be rectangular (i.e. all count[i] subarrays must have the same length).
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,167,* <li>The count array must be rectangular (i.e. all count[i] subarrays must have the same length).
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,173," If any of the preconditions are not met, an"
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,173,"* If any of the preconditions are not met, an"
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,181,ouble chiSquareTest(long[][] counts)
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,181,double chiSquareTest(long[][] counts)
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,186, chi-square test of independence</a> evaluating the null hypothesis that the classifications
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,186,* chi-square test of independence</a> evaluating the null hypothesis that the classifications
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,191, The rows of the 2-way table are
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,191,* The rows of the 2-way table are
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,201, <li>All counts must be >= 0.
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,201,* <li>All counts must be >= 0.
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,203, <li>The count array must be rectangular (i.e. all count[i] subarrays must have the same length).
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,203,* <li>The count array must be rectangular (i.e. all count[i] subarrays must have the same length).
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,209," If any of the preconditions are not met, an"
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,209,"* If any of the preconditions are not met, an"
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,219,"oolean chiSquareTest(long[][] counts, double alpha)"
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,219,"boolean chiSquareTest(long[][] counts, double alpha)"
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,36, Construct a ChiSquareTestImpl
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,36,* Construct a ChiSquareTestImpl
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,54, <p><strong>Note: </strong>This implementation rescales the
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,54,* <p><strong>Note: </strong>This implementation rescales the
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,105, <p><strong>Note: </strong>This implementation rescales the
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,105,* <p><strong>Note: </strong>This implementation rescales the
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,124, <p><strong>Note: </strong>This implementation rescales the
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,124,* <p><strong>Note: </strong>This implementation rescales the
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,136,"ublic boolean chiSquareTest(double[] expected, long[] observed,"
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,136,"public boolean chiSquareTest(double[] expected, long[] observed,"
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,175,umSq += ((counts[row][col] - expected) *
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,176,counts[row][col] - expected)) / expected;
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,175,sumSq += ((counts[row][col] - expected) *
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,176,(counts[row][col] - expected)) / expected;
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,247,ountSum2 += observed2[i];
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,247,countSum2 += observed2[i];
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,252,"observed counts are all 0 in first observed array"");"
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,252,"""observed counts are all 0 in first observed array"");"
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,256,"observed counts are all 0 in second observed array"");"
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,256,"""observed counts are all 0 in second observed array"");"
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,23, An interface for one-way ANOVA (analysis of variance).
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,23,* An interface for one-way ANOVA (analysis of variance).
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,32, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,32,* @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,93, @return true if the null hypothesis can be rejected with
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnova.java,93,* @return true if the null hypothesis can be rejected with
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,33, <p>Uses the
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,33,* <p>Uses the
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,37, <p>This implementation is based on a description at
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,37,* <p>This implementation is based on a description at
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,58, This implementation computes the F statistic using the definitional
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,58,* This implementation computes the F statistic using the definitional
False,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,170,ouble sst = totsumsq.getResult() - totsum.getResult() *
True,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,170,double sst = totsumsq.getResult() - totsum.getResult() *
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,41, Input to tests can be either <code>double[]</code> arrays or
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,41,* Input to tests can be either <code>double[]</code> arrays or
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,45, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,45,* @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,49," Computes a paired, 2-sample t-statistic based on the data in the input"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,49,"* Computes a paired, 2-sample t-statistic based on the data in the input"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,52, <code>mu = 0</code> and the sample array consisting of the (signed)
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,53, differences between corresponding entries in <code>sample1</code> and
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,52,* <code>mu = 0</code> and the sample array consisting of the (signed)
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,53,* differences between corresponding entries in <code>sample1</code> and
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,71," Returns the <i>observed significance level</i>, or"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,72," <i> p-value</i>, associated with a paired, two-sample, two-tailed t-test"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,71,"* Returns the <i>observed significance level</i>, or"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,72,"* <i> p-value</i>, associated with a paired, two-sample, two-tailed t-test"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,77, differences is 0 in favor of the two-sided alternative that the mean paired
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,78," difference is not equal to 0. For a one-sided test, divide the returned"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,77,* differences is 0 in favor of the two-sided alternative that the mean paired
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,78,"* difference is not equal to 0. For a one-sided test, divide the returned"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,83, array consisting of the signed differences between corresponding elements of
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,83,* array consisting of the signed differences between corresponding elements of
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,88," t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,88,"* t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,106, Performs a paired t-test evaluating the null hypothesis that the
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,106,* Performs a paired t-test evaluating the null hypothesis that the
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,108, <code>sample2</code> is 0 in favor of the two-sided alternative that the
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,109," mean paired difference is not equal to 0, with significance level"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,108,* <code>sample2</code> is 0 in favor of the two-sided alternative that the
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,109,"* mean paired difference is not equal to 0, with significance level"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,112, Returns <code>true</code> iff the null hypothesis can be rejected with
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,113," confidence <code>1 - alpha</code>.  To perform a 1-sided test, use"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,112,* Returns <code>true</code> iff the null hypothesis can be rejected with
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,113,"* confidence <code>1 - alpha</code>.  To perform a 1-sided test, use"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,118," t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,118,"* t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,123, <li>The input array lengths must be the same and their common length
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,123,* <li>The input array lengths must be the same and their common length
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,132, @return true if the null hypothesis can be rejected with
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,132,* @return true if the null hypothesis can be rejected with
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,143," Computes a <a href=""http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula"">"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,143,"* Computes a <a href=""http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula"">"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,161, t statistic </a> to use in comparing the mean of the dataset described by
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,161,* t statistic </a> to use in comparing the mean of the dataset described by
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,178," Computes a 2-sample t statistic,  under the hypothesis of equal"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,178,"* Computes a 2-sample t statistic,  under the hypothesis of equal"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,189, where <strong><code>n1</code></strong> is the size of first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,190, <strong><code> n2</code></strong> is the size of second sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,191, <strong><code> m1</code></strong> is the mean of first sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,189,* where <strong><code>n1</code></strong> is the size of first sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,190,* <strong><code> n2</code></strong> is the size of second sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,191,* <strong><code> m1</code></strong> is the mean of first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,197, </p><p>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,197,* </p><p>
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,225, <strong><code> n2</code></strong> is the size of the second sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,226, <strong><code> m1</code></strong> is the mean of the first sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,225,* <strong><code> n2</code></strong> is the size of the second sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,226,* <strong><code> m1</code></strong> is the mean of the first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,229, <strong><code> var2</code></strong> is the variance of the second sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,229,* <strong><code> var2</code></strong> is the variance of the second sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,245, assumption of equal subpopulation variances.  Use
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,245,* assumption of equal subpopulation variances.  Use
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,256, where <strong><code>n1</code></strong> is the size of the first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,257, <strong><code> n2</code></strong> is the size of the second sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,258, <strong><code> m1</code></strong> is the mean of the first sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,256,* where <strong><code>n1</code></strong> is the size of the first sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,257,* <strong><code> n2</code></strong> is the size of the second sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,258,* <strong><code> m1</code></strong> is the mean of the first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,260, <strong><code> var1</code></strong> is the variance of the first sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,260,* <strong><code> var1</code></strong> is the variance of the first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,281," without the equal variances assumption, use"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,281,"* without the equal variances assumption, use"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,291, where <strong><code>n1</code></strong> is the size of first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,292, <strong><code> n2</code></strong> is the size of second sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,293, <strong><code> m1</code></strong> is the mean of first sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,291,* where <strong><code>n1</code></strong> is the size of first sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,292,* <strong><code> n2</code></strong> is the size of second sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,293,* <strong><code> m1</code></strong> is the mean of first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,298, </p><p>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,298,* </p><p>
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,317," Returns the <i>observed significance level</i>, or"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,318," <i>p-value</i>, associated with a one-sample, two-tailed t-test"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,317,"* Returns the <i>observed significance level</i>, or"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,318,"* <i>p-value</i>, associated with a one-sample, two-tailed t-test"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,322, at which one can reject the null hypothesis that the mean equals
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,322,* at which one can reject the null hypothesis that the mean equals
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,324," is different from <code>mu</code>. For a one-sided test, divide the"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,324,"* is different from <code>mu</code>. For a one-sided test, divide the"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,329," t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,329,"* t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,349, Returns <code>true</code> iff the null hypothesis can be
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,350, rejected with confidence <code>1 - alpha</code>.  To
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,349,* Returns <code>true</code> iff the null hypothesis can be
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,350,* rejected with confidence <code>1 - alpha</code>.  To
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,358," at the 99% level, first verify that the measured sample mean is less"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,359, than <code>mu</code> and then use
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,358,"* at the 99% level, first verify that the measured sample mean is less"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,359,* than <code>mu</code> and then use
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,364, The validity of the test depends on the assumptions of the one-sample
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,365," parametric t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,364,* The validity of the test depends on the assumptions of the one-sample
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,365,"* parametric t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,382," Returns the <i>observed significance level</i>, or"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,383," <i>p-value</i>, associated with a one-sample, two-tailed t-test"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,382,"* Returns the <i>observed significance level</i>, or"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,383,"* <i>p-value</i>, associated with a one-sample, two-tailed t-test"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,388, at which one can reject the null hypothesis that the mean equals
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,388,* at which one can reject the null hypothesis that the mean equals
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,390," is different from <code>mu</code>. For a one-sided test, divide the"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,390,"* is different from <code>mu</code>. For a one-sided test, divide the"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,395," t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,395,"* t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,426," at the 99% level, first verify that the measured sample mean is less"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,427, than <code>mu</code> and then use
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,426,"* at the 99% level, first verify that the measured sample mean is less"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,427,* than <code>mu</code> and then use
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,432, The validity of the test depends on the assumptions of the one-sample
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,433," parametric t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,432,* The validity of the test depends on the assumptions of the one-sample
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,433,"* parametric t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,453," Returns the <i>observed significance level</i>, or"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,454," <i>p-value</i>, associated with a two-sample, two-tailed t-test"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,453,"* Returns the <i>observed significance level</i>, or"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,454,"* <i>p-value</i>, associated with a two-sample, two-tailed t-test"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,459, equal in favor of the two-sided alternative that they are different.
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,459,* equal in favor of the two-sided alternative that they are different.
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,463, equal  and it uses approximated degrees of freedom computed from the
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,463,* equal  and it uses approximated degrees of freedom computed from the
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,466," to the degrees of freedom is used,"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,467, as described
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,466,"* to the degrees of freedom is used,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,467,* as described
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,474," t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,474,"* t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,491," Returns the <i>observed significance level</i>, or"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,492," <i>p-value</i>, associated with a two-sample, two-tailed t-test"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,491,"* Returns the <i>observed significance level</i>, or"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,492,"* <i>p-value</i>, associated with a two-sample, two-tailed t-test"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,500, equal in favor of the two-sided alternative that they are different.
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,500,* equal in favor of the two-sided alternative that they are different.
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,509," t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,509,"* t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,528, Performs a
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,528,* Performs a
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,530, two-sided t-test</a> evaluating the null hypothesis that <code>sample1</code>
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,531," and <code>sample2</code> are drawn from populations with the same mean,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,530,* two-sided t-test</a> evaluating the null hypothesis that <code>sample1</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,531,"* and <code>sample2</code> are drawn from populations with the same mean,"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,534," equal variances, use"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,534,"* equal variances, use"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,538, equal can be rejected with confidence <code>1 - alpha</code>.  To
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,538,* equal can be rejected with confidence <code>1 - alpha</code>.  To
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,548," the 95% level,  use"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,548,"* the 95% level,  use"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,553, is less than the mean of <code>sample 2</code> and then use
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,553,* is less than the mean of <code>sample 2</code> and then use
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,559," t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,559,"* t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,572, @return true if the null hypothesis can be rejected with
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,572,* @return true if the null hypothesis can be rejected with
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,583, Performs a
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,583,* Performs a
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,585, two-sided t-test</a> evaluating the null hypothesis that <code>sample1</code>
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,586," and <code>sample2</code> are drawn from populations with the same mean,"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,585,* two-sided t-test</a> evaluating the null hypothesis that <code>sample1</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,586,"* and <code>sample2</code> are drawn from populations with the same mean,"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,588, subpopulation variances are equal.  Use
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,588,* subpopulation variances are equal.  Use
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,593, equal can be rejected with confidence <code>1 - alpha</code>.  To
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,593,* equal can be rejected with confidence <code>1 - alpha</code>.  To
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,595," without the assumption of equal subpopulation variances, use"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,595,"* without the assumption of equal subpopulation variances, use"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,607," at the 99% level, first verify that the measured mean of"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,607,"* at the 99% level, first verify that the measured mean of"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,615," t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,615,"* t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,628, @return true if the null hypothesis can be rejected with
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,628,* @return true if the null hypothesis can be rejected with
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,639," Returns the <i>observed significance level</i>, or"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,640," <i>p-value</i>, associated with a two-sample, two-tailed t-test"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,639,"* Returns the <i>observed significance level</i>, or"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,640,"* <i>p-value</i>, associated with a two-sample, two-tailed t-test"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,646, equal in favor of the two-sided alternative that they are different.
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,646,* equal in favor of the two-sided alternative that they are different.
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,650, equal  and it uses approximated degrees of freedom computed from the
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,650,* equal  and it uses approximated degrees of freedom computed from the
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,652," equal variances, use"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,652,"* equal variances, use"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,657," t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,657,"* t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,677," Returns the <i>observed significance level</i>, or"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,678," <i>p-value</i>, associated with a two-sample, two-tailed t-test"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,677,"* Returns the <i>observed significance level</i>, or"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,678,"* <i>p-value</i>, associated with a two-sample, two-tailed t-test"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,686, equal in favor of the two-sided alternative that they are different.
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,686,* equal in favor of the two-sided alternative that they are different.
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,695," t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,695,"* t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,714, Performs a
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,714,* Performs a
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,716, two-sided t-test</a> evaluating the null hypothesis that
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,716,* two-sided t-test</a> evaluating the null hypothesis that
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,725, equal can be rejected with confidence <code>1 - alpha</code>.  To
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,725,* equal can be rejected with confidence <code>1 - alpha</code>.  To
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,735," the 95%, use"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,735,"* the 95%, use"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,739," at the 99% level,  first verify that the measured mean of"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,739,"* at the 99% level,  first verify that the measured mean of"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,741, and then use
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,741,* and then use
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,747," t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,747,"* t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,761, @return true if the null hypothesis can be rejected with
True,src/main/java/org/apache/commons/math/stat/inference/TTest.java,src/main/java/org/apache/commons/math/stat/inference/TTest.java,761,* @return true if the null hypothesis can be rejected with
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,58," Computes a paired, 2-sample t-statistic based on the data in the input"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,58,"* Computes a paired, 2-sample t-statistic based on the data in the input"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,61, <code>mu = 0</code> and the sample array consisting of the (signed)
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,62, differences between corresponding entries in <code>sample1</code> and
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,61,* <code>mu = 0</code> and the sample array consisting of the (signed)
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,62,* differences between corresponding entries in <code>sample1</code> and
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,82,"eturn t(meanDifference, 0,"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,82,"return t(meanDifference, 0,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,88," Returns the <i>observed significance level</i>, or"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,89," <i> p-value</i>, associated with a paired, two-sample, two-tailed t-test"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,88,"* Returns the <i>observed significance level</i>, or"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,89,"* <i> p-value</i>, associated with a paired, two-sample, two-tailed t-test"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,94, differences is 0 in favor of the two-sided alternative that the mean paired
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,95," difference is not equal to 0. For a one-sided test, divide the returned"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,94,* differences is 0 in favor of the two-sided alternative that the mean paired
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,95,"* difference is not equal to 0. For a one-sided test, divide the returned"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,100, array consisting of the signed differences between corresponding elements of
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,100,* array consisting of the signed differences between corresponding elements of
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,105," t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,105,"* t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,123,"eturn tTest(meanDifference, 0,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,124,"tatUtils.varianceDifference(sample1, sample2, meanDifference),"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,123,"return tTest(meanDifference, 0,"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,124,"StatUtils.varianceDifference(sample1, sample2, meanDifference),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,129, Performs a paired t-test evaluating the null hypothesis that the
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,129,* Performs a paired t-test evaluating the null hypothesis that the
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,131, <code>sample2</code> is 0 in favor of the two-sided alternative that the
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,132," mean paired difference is not equal to 0, with significance level"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,131,* <code>sample2</code> is 0 in favor of the two-sided alternative that the
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,132,"* mean paired difference is not equal to 0, with significance level"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,135, Returns <code>true</code> iff the null hypothesis can be rejected with
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,136," confidence <code>1 - alpha</code>.  To perform a 1-sided test, use"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,135,* Returns <code>true</code> iff the null hypothesis can be rejected with
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,136,"* confidence <code>1 - alpha</code>.  To perform a 1-sided test, use"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,141," t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,141,"* t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,146, <li>The input array lengths must be the same and their common length
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,146,* <li>The input array lengths must be the same and their common length
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,155, @return true if the null hypothesis can be rejected with
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,155,* @return true if the null hypothesis can be rejected with
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,167," Computes a <a href=""http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula"">"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,167,"* Computes a <a href=""http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula"">"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,190, t statistic </a> to use in comparing the mean of the dataset described by
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,190,* t statistic </a> to use in comparing the mean of the dataset described by
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,212," Computes a 2-sample t statistic,  under the hypothesis of equal"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,212,"* Computes a 2-sample t statistic,  under the hypothesis of equal"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,223, where <strong><code>n1</code></strong> is the size of first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,224, <strong><code> n2</code></strong> is the size of second sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,225, <strong><code> m1</code></strong> is the mean of first sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,223,* where <strong><code>n1</code></strong> is the size of first sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,224,* <strong><code> n2</code></strong> is the size of second sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,225,* <strong><code> m1</code></strong> is the mean of first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,231, </p><p>
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,231,* </p><p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,266, <strong><code> n2</code></strong> is the size of the second sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,267, <strong><code> m1</code></strong> is the mean of the first sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,266,* <strong><code> n2</code></strong> is the size of the second sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,267,* <strong><code> m1</code></strong> is the mean of the first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,270, <strong><code> var2</code></strong> is the variance of the second sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,270,* <strong><code> var2</code></strong> is the variance of the second sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,293, assumption of equal subpopulation variances.  Use
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,293,* assumption of equal subpopulation variances.  Use
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,304, where <strong><code>n1</code></strong> is the size of the first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,305, <strong><code> n2</code></strong> is the size of the second sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,306, <strong><code> m1</code></strong> is the mean of the first sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,304,* where <strong><code>n1</code></strong> is the size of the first sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,305,* <strong><code> n2</code></strong> is the size of the second sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,306,* <strong><code> m1</code></strong> is the mean of the first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,308, <strong><code> var1</code></strong> is the variance of the first sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,308,* <strong><code> var1</code></strong> is the variance of the first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,321,"ublic double t(StatisticalSummary sampleStats1,"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,321,"public double t(StatisticalSummary sampleStats1,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,326,"eturn t(sampleStats1.getMean(), sampleStats2.getMean(),"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,326,"return t(sampleStats1.getMean(), sampleStats2.getMean(),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,335," without the equal variances assumption, use"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,335,"* without the equal variances assumption, use"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,345, where <strong><code>n1</code></strong> is the size of first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,346, <strong><code> n2</code></strong> is the size of second sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,347, <strong><code> m1</code></strong> is the mean of first sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,345,* where <strong><code>n1</code></strong> is the size of first sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,346,* <strong><code> n2</code></strong> is the size of second sample;
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,347,* <strong><code> m1</code></strong> is the mean of first sample;
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,352, <p>
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,352,* <p>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,366,"ublic double homoscedasticT(StatisticalSummary sampleStats1,"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,366,"public double homoscedasticT(StatisticalSummary sampleStats1,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,371,"eturn homoscedasticT(sampleStats1.getMean(), sampleStats2.getMean(),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,372,"ampleStats1.getVariance(), sampleStats2.getVariance(),"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,371,"return homoscedasticT(sampleStats1.getMean(), sampleStats2.getMean(),"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,372,"sampleStats1.getVariance(), sampleStats2.getVariance(),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,377," Returns the <i>observed significance level</i>, or"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,378," <i>p-value</i>, associated with a one-sample, two-tailed t-test"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,377,"* Returns the <i>observed significance level</i>, or"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,378,"* <i>p-value</i>, associated with a one-sample, two-tailed t-test"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,382, at which one can reject the null hypothesis that the mean equals
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,382,* at which one can reject the null hypothesis that the mean equals
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,384," is different from <code>mu</code>. For a one-sided test, divide the"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,384,"* is different from <code>mu</code>. For a one-sided test, divide the"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,389," t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,389,"* t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,414, Returns <code>true</code> iff the null hypothesis can be
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,415, rejected with confidence <code>1 - alpha</code>.  To
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,414,* Returns <code>true</code> iff the null hypothesis can be
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,415,* rejected with confidence <code>1 - alpha</code>.  To
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,423," at the 99% level, first verify that the measured sample mean is less"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,424, than <code>mu</code> and then use
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,423,"* at the 99% level, first verify that the measured sample mean is less"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,424,* than <code>mu</code> and then use
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,429, The validity of the test depends on the assumptions of the one-sample
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,430," parametric t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,429,* The validity of the test depends on the assumptions of the one-sample
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,430,"* parametric t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,451," Returns the <i>observed significance level</i>, or"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,452," <i>p-value</i>, associated with a one-sample, two-tailed t-test"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,451,"* Returns the <i>observed significance level</i>, or"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,452,"* <i>p-value</i>, associated with a one-sample, two-tailed t-test"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,457, at which one can reject the null hypothesis that the mean equals
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,457,* at which one can reject the null hypothesis that the mean equals
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,459," is different from <code>mu</code>. For a one-sided test, divide the"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,459,"* is different from <code>mu</code>. For a one-sided test, divide the"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,464," t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,464,"* t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,500," at the 99% level, first verify that the measured sample mean is less"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,501, than <code>mu</code> and then use
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,500,"* at the 99% level, first verify that the measured sample mean is less"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,501,* than <code>mu</code> and then use
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,506, The validity of the test depends on the assumptions of the one-sample
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,507," parametric t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,506,* The validity of the test depends on the assumptions of the one-sample
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,507,"* parametric t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,529," Returns the <i>observed significance level</i>, or"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,530," <i>p-value</i>, associated with a two-sample, two-tailed t-test"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,529,"* Returns the <i>observed significance level</i>, or"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,530,"* <i>p-value</i>, associated with a two-sample, two-tailed t-test"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,535, equal in favor of the two-sided alternative that they are different.
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,535,* equal in favor of the two-sided alternative that they are different.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,539, equal  and it uses approximated degrees of freedom computed from the
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,539,* equal  and it uses approximated degrees of freedom computed from the
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,542," to the degrees of freedom is used,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,543, as described
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,542,"* to the degrees of freedom is used,"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,543,* as described
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,550," t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,550,"* t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,574," Returns the <i>observed significance level</i>, or"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,575," <i>p-value</i>, associated with a two-sample, two-tailed t-test"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,574,"* Returns the <i>observed significance level</i>, or"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,575,"* <i>p-value</i>, associated with a two-sample, two-tailed t-test"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,583, equal in favor of the two-sided alternative that they are different.
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,583,* equal in favor of the two-sided alternative that they are different.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,592," t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,592,"* t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,610,"eturn homoscedasticTTest(StatUtils.mean(sample1),"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,610,"return homoscedasticTTest(StatUtils.mean(sample1),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,612,"tatUtils.variance(sample2), sample1.length,"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,612,"StatUtils.variance(sample2), sample1.length,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,618, Performs a
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,618,* Performs a
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,620, two-sided t-test</a> evaluating the null hypothesis that <code>sample1</code>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,621," and <code>sample2</code> are drawn from populations with the same mean,"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,620,* two-sided t-test</a> evaluating the null hypothesis that <code>sample1</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,621,"* and <code>sample2</code> are drawn from populations with the same mean,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,624," equal variances, use"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,624,"* equal variances, use"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,628, equal can be rejected with confidence <code>1 - alpha</code>.  To
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,628,* equal can be rejected with confidence <code>1 - alpha</code>.  To
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,639," the 95% level,  use"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,639,"* the 95% level,  use"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,644, is less than the mean of <code>sample 2</code> and then use
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,644,* is less than the mean of <code>sample 2</code> and then use
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,650," t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,650,"* t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,663, @return true if the null hypothesis can be rejected with
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,663,* @return true if the null hypothesis can be rejected with
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,676, Performs a
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,676,* Performs a
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,678, two-sided t-test</a> evaluating the null hypothesis that <code>sample1</code>
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,679," and <code>sample2</code> are drawn from populations with the same mean,"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,678,* two-sided t-test</a> evaluating the null hypothesis that <code>sample1</code>
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,679,"* and <code>sample2</code> are drawn from populations with the same mean,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,681, subpopulation variances are equal.  Use
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,681,* subpopulation variances are equal.  Use
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,686, equal can be rejected with confidence <code>1 - alpha</code>.  To
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,686,* equal can be rejected with confidence <code>1 - alpha</code>.  To
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,688," without the assumption of equal subpopulation variances, use"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,688,"* without the assumption of equal subpopulation variances, use"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,700," at the 99% level, first verify that the measured mean of"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,700,"* at the 99% level, first verify that the measured mean of"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,708," t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,708,"* t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,721, @return true if the null hypothesis can be rejected with
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,721,* @return true if the null hypothesis can be rejected with
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,734," Returns the <i>observed significance level</i>, or"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,735," <i>p-value</i>, associated with a two-sample, two-tailed t-test"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,734,"* Returns the <i>observed significance level</i>, or"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,735,"* <i>p-value</i>, associated with a two-sample, two-tailed t-test"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,741, equal in favor of the two-sided alternative that they are different.
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,741,* equal in favor of the two-sided alternative that they are different.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,745, equal  and it uses approximated degrees of freedom computed from the
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,745,* equal  and it uses approximated degrees of freedom computed from the
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,747," equal variances, use"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,747,"* equal variances, use"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,752," t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,752,"* t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,772,"ampleStats2.getVariance(), sampleStats1.getN(),"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,772,"sampleStats2.getVariance(), sampleStats1.getN(),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,777," Returns the <i>observed significance level</i>, or"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,778," <i>p-value</i>, associated with a two-sample, two-tailed t-test"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,777,"* Returns the <i>observed significance level</i>, or"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,778,"* <i>p-value</i>, associated with a two-sample, two-tailed t-test"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,786, equal in favor of the two-sided alternative that they are different.
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,786,* equal in favor of the two-sided alternative that they are different.
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,795," t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,795,"* t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,809,"ublic double homoscedasticTTest(StatisticalSummary sampleStats1,"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,809,"public double homoscedasticTTest(StatisticalSummary sampleStats1,"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,816,"ampleStats2.getVariance(), sampleStats1.getN(),"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,816,"sampleStats2.getVariance(), sampleStats1.getN(),"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,821, Performs a
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,821,* Performs a
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,823, two-sided t-test</a> evaluating the null hypothesis that
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,823,* two-sided t-test</a> evaluating the null hypothesis that
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,832, equal can be rejected with confidence <code>1 - alpha</code>.  To
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,832,* equal can be rejected with confidence <code>1 - alpha</code>.  To
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,842," the 95%, use"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,842,"* the 95%, use"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,846," at the 99% level,  first verify that the measured mean of"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,846,"* at the 99% level,  first verify that the measured mean of"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,848, and then use
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,848,* and then use
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,854," t-test procedure, as discussed"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,854,"* t-test procedure, as discussed"
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,868, @return true if the null hypothesis can be rejected with
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,868,* @return true if the null hypothesis can be rejected with
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,880,/----------------------------------------------- Protected methods
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,880,//----------------------------------------------- Protected methods
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,942,ouble pooledVariance = ((n1  - 1) * v1 + (n2 -1) * v2 ) / (n1 + n2 - 2);
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,942,double pooledVariance = ((n1  - 1) * v1 + (n2 -1) * v2 ) / (n1 + n2 - 2);
False,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,978,"rotected double tTest(double m1, double m2, double v1, double v2,"
True,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java,978,"protected double tTest(double m1, double m2, double v1, double v2,"
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,28, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,28,* @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,42,rivate static ChiSquareTest chiSquareTest =
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,42,private static ChiSquareTest chiSquareTest =
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,46,rivate static UnknownDistributionChiSquareTest unknownDistributionChiSquareTest =
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,46,private static UnknownDistributionChiSquareTest unknownDistributionChiSquareTest =
False,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,312,ublic static double chiSquare(long[][] counts)
True,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,src/main/java/org/apache/commons/math/stat/inference/TestUtils.java,312,public static double chiSquare(long[][] counts)
False,src/main/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java,27, @since 1.2
True,src/main/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java,27,* @since 1.2
False,src/main/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java,32, <p>Computes a
True,src/main/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java,32,* <p>Computes a
False,src/main/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java,40, </code> where
True,src/main/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java,40,* </code> where
False,src/main/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java,71, bin frequency counts in <code>observed1</code> and
True,src/main/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java,71,* bin frequency counts in <code>observed1</code> and
False,src/main/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java,113," <p>See {@link #chiSquareDataSetsComparison(long[], long[])} for"
True,src/main/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java,src/main/java/org/apache/commons/math/stat/inference/UnknownDistributionChiSquareTest.java,113,"* <p>See {@link #chiSquareDataSetsComparison(long[], long[])} for"
False,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,34, are handled using the selected {@link TiesStrategy}.
True,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,34,* are handled using the selected {@link TiesStrategy}.
False,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,37," respectively. When using {@link TiesStrategy#RANDOM}, a"
True,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,37,"* respectively. When using {@link TiesStrategy#RANDOM}, a"
False,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,118,andomData = null;
True,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,118,randomData = null;
False,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,192,ntDoublePair[] ranks = new IntDoublePair[data.length];
True,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,192,IntDoublePair[] ranks = new IntDoublePair[data.length];
False,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,222,nt pos = 1;  // position in sorted array
True,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,222,int pos = 1;  // position in sorted array
False,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,282, Recodes NaN values to the given value.
True,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,282,* Recodes NaN values to the given value.
False,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,320, @param ranks array of ranks
True,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,320,* @param ranks array of ranks
False,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,322," -- that is, for any i and j in TiesTrace, <code> ranks[i] == ranks[j]"
True,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,322,"* -- that is, for any i and j in TiesTrace, <code> ranks[i] == ranks[j]"
False,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,347,anks[iterator.next()] =
True,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,347,ranks[iterator.next()] =
False,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,391,anks[iterator.next().intValue()] = Double.NaN;
True,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,391,ranks[iterator.next().intValue()] = Double.NaN;
False,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,409,eturn out;
True,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java,409,return out;
False,src/main/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/main/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,29, <li>AVERAGE - Tied values are assigned the average of the applicable ranks.
True,src/main/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,src/main/java/org/apache/commons/math/stat/ranking/TiesStrategy.java,29,* <li>AVERAGE - Tied values are assigned the average of the applicable ranks.
False,src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,33," Estimated by GLS,"
True,src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java,33,"* Estimated by GLS,"
False,src/main/java/org/apache/commons/math/stat/regression/MultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/MultipleLinearRegression.java,28," The notation is quite standard in literature,"
True,src/main/java/org/apache/commons/math/stat/regression/MultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/MultipleLinearRegression.java,28,"* The notation is quite standard in literature,"
False,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,29, <p>Implements ordinary least squares (OLS) to estimate the parameters of a
True,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,29,* <p>Implements ordinary least squares (OLS) to estimate the parameters of a
False,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,100," David C. Hoaglin and Roy E. Welsch,"
True,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,100,"* David C. Hoaglin and Roy E. Welsch,"
False,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,154," R included, where p = the length of the beta vector.</p>"
True,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,154,"* R included, where p = the length of the beta vector.</p>"
False,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,181,** TODO:  Find a home for the following methods in the linear package */
True,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,181,/** TODO:  Find a home for the following methods in the linear package */
False,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,188, <p>coefficients must upper-triangular and constants must be a column
True,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java,188,* <p>coefficients must upper-triangular and constants must be a column
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,32, Standard errors for <code>intercept</code> and <code>slope</code> are
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,32,* Standard errors for <code>intercept</code> and <code>slope</code> are
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,35," Observations (x,y pairs) can be added to the model one at a time or they"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,35,"* Observations (x,y pairs) can be added to the model one at a time or they"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,38, added to the model.</p>
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,38,* added to the model.</p>
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,42, there is no variation in the x values (i.e. all x values are the same)
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,42,* there is no variation in the x values (i.e. all x values are the same)
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,44, different x coordinates are requred to estimate a bivariate regression
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,44,* different x coordinates are requred to estimate a bivariate regression
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,49, and get updated statistics without using a new instance.  There is no
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,49,* and get updated statistics without using a new instance.  There is no
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,111, Uses updating formulas for means and sums of squares defined in
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,111,* Uses updating formulas for means and sums of squares defined in
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,113," Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,113,"* Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,147, Mirrors the addData method.  This method permits the use of
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,148, SimpleRegression instances in streaming mode where the regression
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,149," is applied to a sliding ""window"" of observations, however the caller is"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,147,* Mirrors the addData method.  This method permits the use of
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,148,* SimpleRegression instances in streaming mode where the regression
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,149,"* is applied to a sliding ""window"" of observations, however the caller is"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,177, Adds the observations represented by the elements in
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,177,* Adds the observations represented by the elements in
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,182, <p>
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,182,* <p>
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,186, <p>
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,187," To replace all data, use <code>clear()</code> before adding the new"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,186,* <p>
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,187,"* To replace all data, use <code>clear()</code> before adding the new"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,201, <p>
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,202," If the array is larger than the current n, only the first n elements are"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,203, processed.  This method permits the use of SimpleRegression instances in
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,204," streaming mode where the regression is applied to a sliding ""window"" of"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,205," observations, however the caller is responsible for maintaining the set"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,201,* <p>
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,202,"* If the array is larger than the current n, only the first n elements are"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,203,* processed.  This method permits the use of SimpleRegression instances in
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,204,"* streaming mode where the regression is applied to a sliding ""window"" of"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,205,"* observations, however the caller is responsible for maintaining the set"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,207, <p>
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,207,* <p>
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,240," Returns the ""predicted"" <code>y</code> value associated with the"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,240,"* Returns the ""predicted"" <code>y</code> value associated with the"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,248, must have been added before invoking this method. If this method is
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,248,* must have been added before invoking this method. If this method is
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,264, The least squares estimate of the intercept is computed using the
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,264,* The least squares estimate of the intercept is computed using the
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,270, must have been added before invoking this method. If this method is
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,270,* must have been added before invoking this method. If this method is
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,282, Returns the slope of the estimated regression line.
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,282,* Returns the slope of the estimated regression line.
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,284, The least squares estimate of the slope is computed using the
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,284,* The least squares estimate of the slope is computed using the
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,290, must have been added before invoking this method. If this method is
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,290,* must have been added before invoking this method. If this method is
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,299,eturn Double.NaN; //not enough data
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,299,return Double.NaN; //not enough data
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,309, sum of squared errors</a> (SSE) associated with the regression
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,309,* sum of squared errors</a> (SSE) associated with the regression
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,320, The sums are accumulated using the updating algorithm referenced in
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,320,* The sums are accumulated using the updating algorithm referenced in
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,323," The return value is constrained to be non-negative - i.e., if due to"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,324," rounding errors the computational formula returns a negative result,"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,323,"* The return value is constrained to be non-negative - i.e., if due to"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,324,"* rounding errors the computational formula returns a negative result,"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,329, must have been added before invoking this method. If this method is
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,329,* must have been added before invoking this method. If this method is
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,343, This is defined as SSTO
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,343,* This is defined as SSTO
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,381, Returns the sum of squared deviations of the predicted y values about
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,381,* Returns the sum of squared deviations of the predicted y values about
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,384, This is usually abbreviated SSR or SSM.  It is defined as SSM
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,384,* This is usually abbreviated SSR or SSM.  It is defined as SSM
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,389, must have been added before invoking this method. If this method is
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,389,* must have been added before invoking this method. If this method is
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,402, usually abbreviated MSE.
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,402,* usually abbreviated MSE.
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,405," or if there is no variation in <code>x</code>, this returns"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,405,"* or if there is no variation in <code>x</code>, this returns"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,420, usually denoted r.
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,420,* usually denoted r.
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,424, must have been added before invoking this method. If this method is
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,424,* must have been added before invoking this method. If this method is
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,441," Returns the <a href=""http://www.xycoon.com/coefficient1.htm"">"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,441,"* Returns the <a href=""http://www.xycoon.com/coefficient1.htm"">"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,443, usually denoted r-square.
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,443,* usually denoted r-square.
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,447, must have been added before invoking this method. If this method is
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,447,* must have been added before invoking this method. If this method is
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,461," standard error of the intercept estimate</a>,"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,462, usually denoted s(b0).
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,461,"* standard error of the intercept estimate</a>,"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,462,* usually denoted s(b0).
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,464, If there are fewer that <strong>three</strong> observations in the
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,465," model, or if there is no variation in x, this returns"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,464,* If there are fewer that <strong>three</strong> observations in the
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,465,"* model, or if there is no variation in x, this returns"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,478, usually denoted s(b1).
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,478,* usually denoted s(b1).
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,496," <code>(getSlope() - getSlopeConfidenceInterval(),"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,496,"* <code>(getSlope() - getSlopeConfidenceInterval(),"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,499, If there are fewer that <strong>three</strong> observations in the
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,500," model, or if there is no variation in x, this returns"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,499,* If there are fewer that <strong>three</strong> observations in the
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,500,"* model, or if there is no variation in x, this returns"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,504, The validity of this statistic depends on the assumption that the
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,504,* The validity of this statistic depends on the assumption that the
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,517, Returns the half-width of a (100-100*alpha)% confidence interval for
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,517,* Returns the half-width of a (100-100*alpha)% confidence interval for
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,522," <code>(getSlope() - getSlopeConfidenceInterval(),"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,522,"* <code>(getSlope() - getSlopeConfidenceInterval(),"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,525," To request, for example, a 99% confidence interval, use"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,525,"* To request, for example, a 99% confidence interval, use"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,529, The validity of this statistic depends on the assumption that the
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,529,* The validity of this statistic depends on the assumption that the
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,535, <li>If there are fewer that <strong>three</strong> observations in the
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,536," model, or if there is no variation in x, this returns"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,535,* <li>If there are fewer that <strong>three</strong> observations in the
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,536,"* model, or if there is no variation in x, this returns"
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,539, <li><code>(0 < alpha < 1)</code>; otherwise an
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,539,* <li><code>(0 < alpha < 1)</code>; otherwise an
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,541, </li></ul></p>
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,541,* </li></ul></p>
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,543, @param alpha the desired significance level
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,543,* @param alpha the desired significance level
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,559, Returns the significance level of the slope (equiv) correlation.
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,559,* Returns the significance level of the slope (equiv) correlation.
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,567, The validity of this statistic depends on the assumption that the
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,567,* The validity of this statistic depends on the assumption that the
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,572, If there are fewer that <strong>three</strong> observations in the
False,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,573," model, or if there is no variation in x, this returns"
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,572,* If there are fewer that <strong>three</strong> observations in the
True,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java,573,"* model, or if there is no variation in x, this returns"
False,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,776,** Computes the n<sup>th</sup> roots of unity.
True,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java,776,/** Computes the n<sup>th</sup> roots of unity.
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,115, <li>Construct a matrix with N rows and n+1 columns<br>   <b>hadm[n+1][N]</b>
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,115,* <li>Construct a matrix with N rows and n+1 columns<br>   <b>hadm[n+1][N]</b>
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,120, <br>The columns of D<sub>top</sub> are the pairwise mutually exclusive sums of the previous column
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,120,* <br>The columns of D<sub>top</sub> are the pairwise mutually exclusive sums of the previous column
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,124, <br>The columns of D<sub>bottom</sub> are the pairwise differences of the previous column
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,124,* <br>The columns of D<sub>bottom</sub> are the pairwise differences of the previous column
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,128, <li><i>Algorithm from: http://www.archive.chipcenter.com/dsp/DSP000517F1.html</i></li>
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,128,* <li><i>Algorithm from: http://www.archive.chipcenter.com/dsp/DSP000517F1.html</i></li>
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,181,or (int i = 0; i < halfN; ++i) {
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,181,for (int i = 0; i < halfN; ++i) {
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,187,or (int i = halfN; i < n; ++i) {
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,188,/ D<sub>bottom</sub>
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,187,for (int i = halfN; i < n; ++i) {
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,188,// D<sub>bottom</sub>
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,232,or (int i = 0; i < halfN; ++i) {
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,232,for (int i = 0; i < halfN; ++i) {
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,238,or (int i = halfN; i < n; ++i) {
False,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,239,/ D<sub>bottom</sub>
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,238,for (int i = halfN; i < n; ++i) {
True,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java,239,// D<sub>bottom</sub>
False,src/main/java/org/apache/commons/math/util/BigRealField.java,src/main/java/org/apache/commons/math/util/BigRealField.java,73,eturn LazyHolder.INSTANCE;
True,src/main/java/org/apache/commons/math/util/BigRealField.java,src/main/java/org/apache/commons/math/util/BigRealField.java,73,return LazyHolder.INSTANCE;
False,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,39, maximum number of fraction digits is set to 2.
True,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,39,* maximum number of fraction digits is set to 2.
False,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,49, customizing that the maximum number of fraction digits is set to 2.
True,src/main/java/org/apache/commons/math/util/CompositeFormat.java,src/main/java/org/apache/commons/math/util/CompositeFormat.java,49,* customizing that the maximum number of fraction digits is set to 2.
False,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,70, @return the value of the continued fraction evaluated at x.
True,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,70,* @return the value of the continued fraction evaluated at x.
False,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,81, @return the value of the continued fraction evaluated at x.
True,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,81,* @return the value of the continued fraction evaluated at x.
False,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,92, @return the value of the continued fraction evaluated at x.
True,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,92,* @return the value of the continued fraction evaluated at x.
False,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,122, @return the value of the continued fraction evaluated at x.
True,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,src/main/java/org/apache/commons/math/util/ContinuedFraction.java,122,* @return the value of the continued fraction evaluated at x.
False,src/main/java/org/apache/commons/math/util/DefaultTransformer.java,src/main/java/org/apache/commons/math/util/DefaultTransformer.java,25, A Default NumberTransformer for java.lang.Numbers and Numeric Strings. This
False,src/main/java/org/apache/commons/math/util/DefaultTransformer.java,src/main/java/org/apache/commons/math/util/DefaultTransformer.java,26, provides some simple conversion capabilities to turn any java.lang.Number
False,src/main/java/org/apache/commons/math/util/DefaultTransformer.java,src/main/java/org/apache/commons/math/util/DefaultTransformer.java,27, into a primitive double or to turn a String representation of a Number into
True,src/main/java/org/apache/commons/math/util/DefaultTransformer.java,src/main/java/org/apache/commons/math/util/DefaultTransformer.java,25,* A Default NumberTransformer for java.lang.Numbers and Numeric Strings. This
True,src/main/java/org/apache/commons/math/util/DefaultTransformer.java,src/main/java/org/apache/commons/math/util/DefaultTransformer.java,26,* provides some simple conversion capabilities to turn any java.lang.Number
True,src/main/java/org/apache/commons/math/util/DefaultTransformer.java,src/main/java/org/apache/commons/math/util/DefaultTransformer.java,27,* into a primitive double or to turn a String representation of a Number into
False,src/main/java/org/apache/commons/math/util/DefaultTransformer.java,src/main/java/org/apache/commons/math/util/DefaultTransformer.java,40, @throws org.apache.commons.math.MathException If it cannot successfully
True,src/main/java/org/apache/commons/math/util/DefaultTransformer.java,src/main/java/org/apache/commons/math/util/DefaultTransformer.java,40,* @throws org.apache.commons.math.MathException If it cannot successfully
False,src/main/java/org/apache/commons/math/util/DefaultTransformer.java,src/main/java/org/apache/commons/math/util/DefaultTransformer.java,65,f (this == other) {
True,src/main/java/org/apache/commons/math/util/DefaultTransformer.java,src/main/java/org/apache/commons/math/util/DefaultTransformer.java,65,if (this == other) {
False,src/main/java/org/apache/commons/math/util/DoubleArray.java,src/main/java/org/apache/commons/math/util/DoubleArray.java,31, that this may be different from the length of the internal storage array.
True,src/main/java/org/apache/commons/math/util/DoubleArray.java,src/main/java/org/apache/commons/math/util/DoubleArray.java,31,* that this may be different from the length of the internal storage array.
False,src/main/java/org/apache/commons/math/util/DoubleArray.java,src/main/java/org/apache/commons/math/util/DoubleArray.java,39, out of bounds index is supplied a ArrayIndexOutOfBoundsException
True,src/main/java/org/apache/commons/math/util/DoubleArray.java,src/main/java/org/apache/commons/math/util/DoubleArray.java,39,* out of bounds index is supplied a ArrayIndexOutOfBoundsException
False,src/main/java/org/apache/commons/math/util/DoubleArray.java,src/main/java/org/apache/commons/math/util/DoubleArray.java,52, is increased to <code>index +1</code> and additional storage is allocated
False,src/main/java/org/apache/commons/math/util/DoubleArray.java,src/main/java/org/apache/commons/math/util/DoubleArray.java,53, (if necessary) for the new element and all  (uninitialized) elements
True,src/main/java/org/apache/commons/math/util/DoubleArray.java,src/main/java/org/apache/commons/math/util/DoubleArray.java,52,* is increased to <code>index +1</code> and additional storage is allocated
True,src/main/java/org/apache/commons/math/util/DoubleArray.java,src/main/java/org/apache/commons/math/util/DoubleArray.java,53,* (if necessary) for the new element and all  (uninitialized) elements
False,src/main/java/org/apache/commons/math/util/DoubleArray.java,src/main/java/org/apache/commons/math/util/DoubleArray.java,89, Returns a double[] array containing the elements of this
False,src/main/java/org/apache/commons/math/util/DoubleArray.java,src/main/java/org/apache/commons/math/util/DoubleArray.java,90, <code>DoubleArray</code>.  If the underlying implementation is
False,src/main/java/org/apache/commons/math/util/DoubleArray.java,src/main/java/org/apache/commons/math/util/DoubleArray.java,91," array-based, this method should always return a copy, rather than a"
True,src/main/java/org/apache/commons/math/util/DoubleArray.java,src/main/java/org/apache/commons/math/util/DoubleArray.java,89,* Returns a double[] array containing the elements of this
True,src/main/java/org/apache/commons/math/util/DoubleArray.java,src/main/java/org/apache/commons/math/util/DoubleArray.java,90,* <code>DoubleArray</code>.  If the underlying implementation is
True,src/main/java/org/apache/commons/math/util/DoubleArray.java,src/main/java/org/apache/commons/math/util/DoubleArray.java,91,"* array-based, this method should always return a copy, rather than a"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,300, return the log of the exact value
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,300,* return the log of the exact value
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,302,f (n < 67) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,302,if (n < 67) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,310,f (n < 1030) {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,310,if (n < 1030) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,333,eturn logSum;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,333,return logSum;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,473,rivate static final long[] FACTORIALS = new long[]
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,473,private static final long[] FACTORIALS = new long[]
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,792, <p>Returns the
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,792,* <p>Returns the
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,796, <p>Returns <code>NaN<code> if either argument is negative.  If
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,796,* <p>Returns <code>NaN<code> if either argument is negative.  If
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,798," If <code>base</code> is positive and <code>x</code> is 0,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,798,"* If <code>base</code> is positive and <code>x</code> is 0,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,992, <p>Normalizes an array to make it sum to a specified value.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,992,* <p>Normalizes an array to make it sum to a specified value.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1035,"Array sums to zero"");"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1035,"""Array sums to zero"");"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1044,eturn out;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1044,return out;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1080,eturn x;
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1080,return x;
False,src/main/java/org/apache/commons/math/util/NumberTransformer.java,src/main/java/org/apache/commons/math/util/NumberTransformer.java,36, @throws MathException if the Object can not be transformed into a Double.
True,src/main/java/org/apache/commons/math/util/NumberTransformer.java,src/main/java/org/apache/commons/math/util/NumberTransformer.java,36,* @throws MathException if the Object can not be transformed into a Double.
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,26, A variable length {@link DoubleArray} implementation that automatically
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,27, handles expanding and contracting its internal storage array as elements
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,26,* A variable length {@link DoubleArray} implementation that automatically
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,27,* handles expanding and contracting its internal storage array as elements
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,33, The default initial capacity is 16.  Adding elements using
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,34, {@link #addElement(double)} appends elements to the end of the array.  When
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,35," there are no open entries at the end of the internal storage array, the"
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,36, array is expanded.  The size of the expanded array depends on the
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,37, <code>expansionMode</code> and <code>expansionFactor</code> properties.
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,38, The <code>expansionMode</code> determines whether the size of the array is
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,39, multiplied by the <code>expansionFactor</code> (MULTIPLICATIVE_MODE) or if
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,33,* The default initial capacity is 16.  Adding elements using
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,34,* {@link #addElement(double)} appends elements to the end of the array.  When
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,35,"* there are no open entries at the end of the internal storage array, the"
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,36,* array is expanded.  The size of the expanded array depends on the
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,37,* <code>expansionMode</code> and <code>expansionFactor</code> properties.
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,38,* The <code>expansionMode</code> determines whether the size of the array is
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,39,* multiplied by the <code>expansionFactor</code> (MULTIPLICATIVE_MODE) or if
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,41, storage locations added).  The default <code>expansionMode</code> is
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,41,* storage locations added).  The default <code>expansionMode</code> is
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,47," of the internal storage array and adjusts the ""usable window"" of the"
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,48, internal array forward by one position (effectively making what was the
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,47,"* of the internal storage array and adjusts the ""usable window"" of the"
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,48,* internal array forward by one position (effectively making what was the
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,53, of the internal storage array is compared to the number of addressable
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,53,* of the internal storage array is compared to the number of addressable
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,55," is too large, the internal array is contracted to size"
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,55,"* is too large, the internal array is contracted to size"
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,63, is compared to <code>contractionFactor.</code>
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,63,* is compared to <code>contractionFactor.</code>
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,66," To avoid cycles of expansions and contractions, the"
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,67, <code>expansionFactor</code> must not exceed the
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,66,"* To avoid cycles of expansions and contractions, the"
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,67,* <code>expansionFactor</code> must not exceed the
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,77,rivate static final long serialVersionUID = -3485529955529426875L;
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,77,private static final long serialVersionUID = -3485529955529426875L;
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,86, The contraction criteria determines when the internal array will be
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,86,* The contraction criteria determines when the internal array will be
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,93," The expansion factor of the array.  When the array needs to be expanded,"
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,94, the new array size will be
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,93,"* The expansion factor of the array.  When the array needs to be expanded,"
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,94,* the new array size will be
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,97, <code>internalArray.length + expansionFactor</code> if
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,97,* <code>internalArray.length + expansionFactor</code> if
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,164, Create a ResizableArray with the specified initial capacity
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,164,* Create a ResizableArray with the specified initial capacity
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,180, @param expansionFactor the array will be expanded based on this
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,180,* @param expansionFactor the array will be expanded based on this
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,193," Create a ResizableArray with the specified initialCapacity,"
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,193,"* Create a ResizableArray with the specified initialCapacity,"
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,205, @param expansionFactor the array will be expanded based on this
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,205,* @param expansionFactor the array will be expanded based on this
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,233, @param expansionFactor the array will be expanded based on this
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,233,* @param expansionFactor the array will be expanded based on this
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,314, Returns the value that has been replaced. If the array is empty (i.e.
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,314,* Returns the value that has been replaced. If the array is empty (i.e.
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,336, Checks the expansion factor and the contraction criteria and throws an
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,337, IllegalArgumentException if the contractionCriteria is less than the
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,336,* Checks the expansion factor and the contraction criteria and throws an
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,337,* IllegalArgumentException if the contractionCriteria is less than the
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,371," Clear the array, reset the size to the initialCapacity and the number"
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,371,"* Clear the array, reset the size to the initialCapacity and the number"
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,381, Contracts the storage array to the (size of the element set) + 1 - to
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,382, avoid a zero length array. This function also resets the startIndex to
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,383, zero.
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,381,* Contracts the storage array to the (size of the element set) + 1 - to
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,382,* avoid a zero length array. This function also resets the startIndex to
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,383,* zero.
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,398," if the array contains the elements 1,2,3,4, invoking"
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,399, <code>discardFrontElements(2)</code> will cause the first two elements
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,398,"* if the array contains the elements 1,2,3,4, invoking"
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,399,* <code>discardFrontElements(2)</code> will cause the first two elements
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,415," if the array contains the elements 1,2,3,4, invoking"
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,416, <code>discardMostRecentElements(2)</code> will cause the last two elements
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,415,"* if the array contains the elements 1,2,3,4, invoking"
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,416,* <code>discardMostRecentElements(2)</code> will cause the last two elements
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,433," For example, if the array contains the elements 1,2,3,4, invoking"
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,434," <code>discardExtremeElements(2,false)</code> will cause the last two elements"
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,433,"* For example, if the array contains the elements 1,2,3,4, invoking"
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,434,"* <code>discardExtremeElements(2,false)</code> will cause the last two elements"
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,436," For example, if the array contains the elements 1,2,3,4, invoking"
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,437," <code>discardExtremeElements(2,true)</code> will cause the first two elements"
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,436,"* For example, if the array contains the elements 1,2,3,4, invoking"
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,437,"* <code>discardExtremeElements(2,true)</code> will cause the first two elements"
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,445, of the array
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,445,* of the array
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,459,"/ ""Subtract"" this number of discarded from numElements"
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,459,"// ""Subtract"" this number of discarded from numElements"
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,479,"/ notice the use of Math.ceil(), this guarantees that we will always"
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,480,/ have an array of at least currentSize + 1.   Assume that the
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,479,"// notice the use of Math.ceil(), this guarantees that we will always"
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,480,// have an array of at least currentSize + 1.   Assume that the
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,482,/ is 1.000000000000000001.  The newly calculated size will be
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,482,// is 1.000000000000000001.  The newly calculated size will be
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,510, The contraction criteria defines when the internal array will contract
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,511, to store only the number of elements in the element array.
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,510,* The contraction criteria defines when the internal array will contract
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,511,* to store only the number of elements in the element array.
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,513, contraction is triggered when the ratio between storage array length
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,513,* contraction is triggered when the ratio between storage array length
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,516, number of excess storage locations is compared to
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,517, <code>contractionFactor.</code>
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,516,* number of excess storage locations is compared to
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,517,* <code>contractionFactor.</code>
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,548, Returns a double array containing the elements of this
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,548,* Returns a double array containing the elements of this
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,562, The expansion factor controls the size of a new array when an array
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,562,* The expansion factor controls the size of a new array when an array
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,564, determines whether the size of the array is multiplied by the
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,565, <code>expansionFactor</code> (MULTIPLICATIVE_MODE) or if
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,564,* determines whether the size of the array is multiplied by the
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,565,* <code>expansionFactor</code> (MULTIPLICATIVE_MODE) or if
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,567, storage locations added).  The default <code>expansionMode</code> is
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,567,* storage locations added).  The default <code>expansionMode</code> is
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,578, The <code>expansionMode</code> determines whether the internal storage
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,579, array grows additively (ADDITIVE_MODE) or multiplicatively
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,578,* The <code>expansionMode</code> determines whether the internal storage
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,579,* array grows additively (ADDITIVE_MODE) or multiplicatively
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,589, Notice the package scope on this method.   This method is simply here
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,590," for the JUnit test, it allows us check if the expansion is working"
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,591, properly after a number of expansions.  This is not meant to be a part
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,589,* Notice the package scope on this method.   This method is simply here
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,590,"* for the JUnit test, it allows us check if the expansion is working"
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,591,* properly after a number of expansions.  This is not meant to be a part
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,602, that this is different from the length of the internal storage array.
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,602,* that this is different from the length of the internal storage array.
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,644, Sets the contraction criteria for this ExpandContractDoubleArray.
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,644,* Sets the contraction criteria for this ExpandContractDoubleArray.
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,659, is increased to <code>index +1</code> and additional storage is allocated
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,660, (if necessary) for the new element and all  (uninitialized) elements
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,659,* is increased to <code>index +1</code> and additional storage is allocated
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,660,* (if necessary) for the new element and all  (uninitialized) elements
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,684, Sets the expansionFactor.  Throws IllegalArgumentException if the
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,684,* Sets the expansionFactor.  Throws IllegalArgumentException if the
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,710,f (expansionMode != MULTIPLICATIVE_MODE &&
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,710,if (expansionMode != MULTIPLICATIVE_MODE &&
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,742, This function allows you to control the number of elements contained
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,743," in this array, and can be used to ""throw out"" the last n values in an"
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,742,* This function allows you to control the number of elements contained
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,743,"* in this array, and can be used to ""throw out"" the last n values in an"
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,758,"/ Test the new num elements, check to see if the array needs to be"
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,758,"// Test the new num elements, check to see if the array needs to be"
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,769, Returns true if the internal storage array has too many unused
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,770, storage positions.
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,769,* Returns true if the internal storage array has too many unused
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,770,* storage positions.
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,775,f (expansionMode == MULTIPLICATIVE_MODE) {
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,775,if (expansionMode == MULTIPLICATIVE_MODE) {
False,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,868,f (!result) {
True,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java,868,if (!result) {
False,src/main/java/org/apache/commons/math/util/TransformerMap.java,src/main/java/org/apache/commons/math/util/TransformerMap.java,29, It provides a means to set NumberTransformers that will be selected
True,src/main/java/org/apache/commons/math/util/TransformerMap.java,src/main/java/org/apache/commons/math/util/TransformerMap.java,29,* It provides a means to set NumberTransformers that will be selected
False,src/main/java/org/apache/commons/math/util/TransformerMap.java,src/main/java/org/apache/commons/math/util/TransformerMap.java,123, Returns the Set of NumberTransformers used as values
True,src/main/java/org/apache/commons/math/util/TransformerMap.java,src/main/java/org/apache/commons/math/util/TransformerMap.java,123,* Returns the Set of NumberTransformers used as values
False,src/main/java/org/apache/commons/math/util/TransformerMap.java,src/main/java/org/apache/commons/math/util/TransformerMap.java,137, @throws MathException if the Object can not be transformed into a Double.
True,src/main/java/org/apache/commons/math/util/TransformerMap.java,src/main/java/org/apache/commons/math/util/TransformerMap.java,137,* @throws MathException if the Object can not be transformed into a Double.
False,src/main/java/org/apache/commons/math/util/TransformerMap.java,src/main/java/org/apache/commons/math/util/TransformerMap.java,158,f (this == other) {
True,src/main/java/org/apache/commons/math/util/TransformerMap.java,src/main/java/org/apache/commons/math/util/TransformerMap.java,158,if (this == other) {
False,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,89,"tring innerMsg = ""Caused by: "" +"
True,src/test/java/org/apache/commons/math/MathExceptionTest.java,src/test/java/org/apache/commons/math/MathExceptionTest.java,89,"String innerMsg = ""Caused by: "" +"
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,26," If one or more tests throw an AssertionFailedError, all tests are"
False,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,27, repeated one time.
True,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,26,"* If one or more tests throw an AssertionFailedError, all tests are"
True,src/test/java/org/apache/commons/math/RetryTestCase.java,src/test/java/org/apache/commons/math/RetryTestCase.java,27,* repeated one time.
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,192,ound = true;
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,192,found = true;
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,199,ssert.fail(msg +
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,199,Assert.fail(msg +
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,213,"ssertContains(null, values, z, epsilon);"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,213,"assertContains(null, values, z, epsilon);"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,231,ound = true;
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,231,found = true;
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,254,** verifies that two matrices are close (1-norm) */
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,254,/** verifies that two matrices are close (1-norm) */
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,262,f (expected.getColumnDimension() != observed.getColumnDimension() ||
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,262,if (expected.getColumnDimension() != observed.getColumnDimension() ||
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,265,"essageBuffer.append(""\nObserved has incorrect dimensions."");"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,265,"messageBuffer.append(""\nObserved has incorrect dimensions."");"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,283,** verifies that two matrices are equal */
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,283,/** verifies that two matrices are equal */
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,291,f (expected.getColumnDimension() != observed.getColumnDimension() ||
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,291,if (expected.getColumnDimension() != observed.getColumnDimension() ||
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,294,"essageBuffer.append(""Observed has incorrect dimensions."");"
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,294,"messageBuffer.append(""Observed has incorrect dimensions."");"
False,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,335,ut.append(observed[i]);
True,src/test/java/org/apache/commons/math/TestUtils.java,src/test/java/org/apache/commons/math/TestUtils.java,335,out.append(observed[i]);
False,src/test/java/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/java/org/apache/commons/math/analysis/MonitoredFunction.java,24, @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/java/org/apache/commons/math/analysis/MonitoredFunction.java,24,* @version $Revision$ $Date$
False,src/test/java/org/apache/commons/math/analysis/QuinticFunction.java,src/test/java/org/apache/commons/math/analysis/QuinticFunction.java,24, @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/analysis/QuinticFunction.java,src/test/java/org/apache/commons/math/analysis/QuinticFunction.java,24,* @version $Revision$ $Date$
False,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,33, @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java,33,* @version $Revision$ $Date$
False,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,32, @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java,32,* @version $Revision$ $Date$
False,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,32, @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java,32,* @version $Revision$ $Date$
False,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,38, @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java,38,* @version $Revision$ $Date$
False,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,38, @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java,38,* @version $Revision$ $Date$
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,32, @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,32,* @version $Revision$ $Date$
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,113,"estUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,113,"TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,141,     print(splinecoef)
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,141,*     print(splinecoef)
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,159,"estUtils.assertEquals(polynomials[7].getCoefficients(), target, coefficientTolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,159,"TestUtils.assertEquals(polynomials[7].getCoefficients(), target, coefficientTolerance);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,163,"ssertEquals(Math.sqrt(2d) / 2d,f.value(3d*Math.PI/4d),interpolationTolerance);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,163,"assertEquals(Math.sqrt(2d) / 2d,f.value(3d*Math.PI/4d),interpolationTolerance);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,190,"rotected void verifyInterpolation(UnivariateRealFunction f, double x[], double y[])"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,190,"protected void verifyInterpolation(UnivariateRealFunction f, double x[], double y[])"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,201,"rotected void verifyConsistency(PolynomialSplineFunction f, double x[])"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,201,"protected void verifyConsistency(PolynomialSplineFunction f, double x[])"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,205,/ evaluate polynomials and derivatives at x[i + 1]
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,206,"ssertEquals(polynomials[i].value(x[i +1] - x[i]), polynomials[i + 1].value(0), 0.1);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,207,"ssertEquals(polynomials[i].derivative().value(x[i +1] - x[i]),"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,208,"olynomials[i + 1].derivative().value(0), 0.5);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,209,"ssertEquals(polynomials[i].polynomialDerivative().derivative().value(x[i +1] - x[i]),"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,210,"olynomials[i + 1].polynomialDerivative().derivative().value(0), 0.5);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,205,// evaluate polynomials and derivatives at x[i + 1]
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,206,"assertEquals(polynomials[i].value(x[i +1] - x[i]), polynomials[i + 1].value(0), 0.1);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,207,"assertEquals(polynomials[i].derivative().value(x[i +1] - x[i]),"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,208,"polynomials[i + 1].derivative().value(0), 0.5);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,209,"assertEquals(polynomials[i].polynomialDerivative().derivative().value(x[i +1] - x[i]),"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java,210,"polynomials[i + 1].polynomialDerivative().derivative().value(0), 0.5);"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,29, @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java,29,* @version $Revision$ $Date$
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,27, @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonFormTest.java,27,* @version $Revision$ $Date$
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,62, <p>This will have the values
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,62,* <p>This will have the values
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,111, This will test the quintic function
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,111,* This will test the quintic function
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,137, <p>This will test the functions
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java,137,* <p>This will test the functions
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,36, Quadratic polynomials used in tests:
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,36,* Quadratic polynomials used in tests:
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,46,"ew PolynomialFunction(new double[] {0d, 1d, 1d}),"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,46,"new PolynomialFunction(new double[] {0d, 1d, 1d}),"
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,55,rotected PolynomialFunction dp =
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,55,protected PolynomialFunction dp =
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,60,olynomialSplineFunction spline =
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,60,PolynomialSplineFunction spline =
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,89,olynomialSplineFunction spline =
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,89,PolynomialSplineFunction spline =
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,95, where knot is the largest knot point less than or equal to x and p
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,95,* where knot is the largest knot point less than or equal to x and p
False,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,103,"ssertEquals(""spline function evaluation failed for x="" + x,"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunctionTest.java,103,"assertEquals(""spline function evaluation failed for x="" + x,"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,102,ouble expected = 1.0e-2;
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,102,double expected = 1.0e-2;
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,112,ouble newValue = 1.0e-2;
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,112,double newValue = 1.0e-2;
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,124,ouble expected = 1.0e-2;
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,124,double expected = 1.0e-2;
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,127,"ssertEquals(expected, solver.getAbsoluteAccuracy(), 1.0e-2);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,127,"assertEquals(expected, solver.getAbsoluteAccuracy(), 1.0e-2);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,134,ouble newValue = 1.0e-2;
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,134,double newValue = 1.0e-2;
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,178,ouble newValue = 1.0e-2;
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,178,double newValue = 1.0e-2;
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,38," @version $Revision:670469 $ $Date:2008-06-23 10:01:38 +0200 (lun., 23 juin 2008) $"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,38,"* @version $Revision:670469 $ $Date:2008-06-23 10:01:38 +0200 (lun., 23 juin 2008) $"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,56,/ still converge quadratically.
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,56,// still converge quadratically.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,93,/ still converge quadratically.
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,93,// still converge quadratically.
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,34, @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,34,* @version $Revision$ $Date$
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,38, @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,38,* @version $Revision$ $Date$
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,36, @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,36,* @version $Revision$ $Date$
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,44,"nivariateRealSolverUtils.solve(sin,0.0, 4.0, 4.0);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,44,"UnivariateRealSolverUtils.solve(sin,0.0, 4.0, 4.0);"
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,49,"nivariateRealSolverUtils.solve(sin, 0.0, 4.0, 0.0);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,49,"UnivariateRealSolverUtils.solve(sin, 0.0, 4.0, 0.0);"
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,55,ublic void testSolveSin() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,55,public void testSolveSin() throws MathException {
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,79,"nivariateRealSolverUtils.solve(sin, 1.0, 1.5);"
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,80,"ail(""Expecting IllegalArgumentException "");"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,79,"UnivariateRealSolverUtils.solve(sin, 1.0, 1.5);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,80,"fail(""Expecting IllegalArgumentException "");"
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,87,"ouble[] result = UnivariateRealSolverUtils.bracket(sin,"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,87,"double[] result = UnivariateRealSolverUtils.bracket(sin,"
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,48,tring actual = complexFormat.format(c);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,48,String actual = complexFormat.format(c);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,55,tring actual = complexFormat.format(c);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,55,String actual = complexFormat.format(c);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,62,tring actual = complexFormat.format(c);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,62,String actual = complexFormat.format(c);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,69,tring actual = complexFormat.format(c);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,69,String actual = complexFormat.format(c);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,76,tring actual = complexFormat.format(c);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,76,String actual = complexFormat.format(c);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,83,tring actual = complexFormat.format(c);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,83,String actual = complexFormat.format(c);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,90,tring actual = complexFormat.format(c);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,90,String actual = complexFormat.format(c);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,97,tring actual = complexFormat.format(c);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,97,String actual = complexFormat.format(c);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,104,tring actual = complexFormatJ.format(c);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,104,String actual = complexFormatJ.format(c);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,114,tring actual = ComplexFormat.formatComplex(c);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,114,String actual = ComplexFormat.formatComplex(c);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,123,tring actual = complexFormat.format(c);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,123,String actual = complexFormat.format(c);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,130,tring actual = complexFormat.format(c);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,130,String actual = complexFormat.format(c);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,137,tring actual = complexFormat.format(c);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,137,String actual = complexFormat.format(c);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,145,omplex actual = (Complex)complexFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,145,Complex actual = (Complex)complexFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,156,omplex actual = (Complex)complexFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,156,Complex actual = (Complex)complexFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,167,omplex actual = (Complex)complexFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,167,Complex actual = (Complex)complexFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,178,omplex actual = (Complex)complexFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,178,Complex actual = (Complex)complexFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,189,omplex actual = (Complex)complexFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,189,Complex actual = (Complex)complexFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,200,omplex actual = (Complex)complexFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,200,Complex actual = (Complex)complexFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,211,omplex actual = (Complex)complexFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,211,Complex actual = (Complex)complexFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,222,omplex actual = (Complex)complexFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,222,Complex actual = (Complex)complexFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,233,omplex actual = (Complex)complexFormatJ.parseObject(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,233,Complex actual = (Complex)complexFormatJ.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,244,omplex actual = (Complex)complexFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,244,Complex actual = (Complex)complexFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,255,omplex actual = (Complex)complexFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,255,Complex actual = (Complex)complexFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,266,omplex actual = (Complex)complexFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java,266,Complex actual = (Complex)complexFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,89,"ssertEquals(inf, z.abs(), 0);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,89,"assertEquals(inf, z.abs(), 0);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,174,ublic void testDivideNaNInf() {
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,174,public void testDivideNaNInf() {
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,219,ssertTrue(Double.isNaN(w.getImaginary()));
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,219,assertTrue(Double.isNaN(w.getImaginary()));
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,331,"estUtils.assertEquals(new Complex(Math.acos(0), 0),"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,331,"TestUtils.assertEquals(new Complex(Math.acos(0), 0),"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,425,ublic void testCoshInf() {
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,425,public void testCoshInf() {
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,440,"estUtils.assertEquals(Complex.ONE,"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,440,"TestUtils.assertEquals(Complex.ONE,"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,443,"estUtils.assertEquals(Complex.ONE.negate(),"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,443,"TestUtils.assertEquals(Complex.ONE.negate(),"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,533,"estUtils.assertSame(Complex.NaN,infNegInf.pow(infInf));"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,533,"TestUtils.assertSame(Complex.NaN,infNegInf.pow(infInf));"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,537,"estUtils.assertSame(Complex.NaN,"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,537,"TestUtils.assertSame(Complex.NaN,"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,539,"estUtils.assertSame(Complex.NaN,"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,539,"TestUtils.assertSame(Complex.NaN,"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,541,"estUtils.assertSame(Complex.NaN,"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,541,"TestUtils.assertSame(Complex.NaN,"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,553,omplex.ONE.pow(null);
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,553,Complex.ONE.pow(null);
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,746,"ssertEquals(1.0,                  thirdRootsOfZ[0].getReal(),      1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,746,"assertEquals(1.0,                  thirdRootsOfZ[0].getReal(),      1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,777,"ssertEquals(1.5164629308487783,     fourthRootsOfZ[0].getReal(),      1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,777,"assertEquals(1.5164629308487783,     fourthRootsOfZ[0].getReal(),      1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,810,"ssertEquals(2.0,                thirdRootsOfZ[0].getReal(),      1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,810,"assertEquals(2.0,                thirdRootsOfZ[0].getReal(),      1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,840,"ssertEquals(1.0911236359717216,      thirdRootsOfZ[0].getReal(),      1.0e-5);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,840,"assertEquals(1.0911236359717216,      thirdRootsOfZ[0].getReal(),      1.0e-5);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,919,"ssertEquals(-3.0*Math.PI/4, negInfNegInf.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,920,"ssertEquals(-Math.PI/2, oneNegInf.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,919,"assertEquals(-3.0*Math.PI/4, negInfNegInf.getArgument(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,920,"assertEquals(-Math.PI/2, oneNegInf.getArgument(), 1.0e-12);"
False,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,929,"ssertEquals(nan, Complex.NaN.getArgument());"
True,src/test/java/org/apache/commons/math/complex/ComplexTest.java,src/test/java/org/apache/commons/math/complex/ComplexTest.java,929,"assertEquals(nan, Complex.NaN.getArgument());"
False,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,41,"estUtils.assertEquals(Complex.ONE,"
True,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,41,"TestUtils.assertEquals(Complex.ONE,"
False,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,43,"estUtils.assertEquals(Complex.ZERO,"
True,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,43,"TestUtils.assertEquals(Complex.ZERO,"
False,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,45,"estUtils.assertEquals(Complex.ZERO,"
True,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,45,"TestUtils.assertEquals(Complex.ZERO,"
False,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,47,"estUtils.assertEquals(Complex.I,"
True,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,47,"TestUtils.assertEquals(Complex.I,"
False,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,49,"estUtils.assertEquals(Complex.I.negate(),"
True,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,49,"TestUtils.assertEquals(Complex.I.negate(),"
False,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,57,"estUtils.assertEquals(altPolar(r, theta),"
True,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,57,"TestUtils.assertEquals(altPolar(r, theta),"
False,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,63,"estUtils.assertEquals(altPolar(r, theta),"
True,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,63,"TestUtils.assertEquals(altPolar(r, theta),"
False,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,85,"estUtils.assertSame(Complex.NaN,"
False,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,86,"omplexUtils.polar2Complex(nan, nan));"
True,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,85,"TestUtils.assertSame(Complex.NaN,"
True,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java,86,"ComplexUtils.polar2Complex(nan, nan));"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,53,"eturn new double[] {0d, 0.0000d, 0.0001d, 0.0014d, 0.0090d, 0.0368d, 0.1029d,"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,53,"return new double[] {0d, 0.0000d, 0.0001d, 0.0014d, 0.0090d, 0.0368d, 0.1029d,"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,74,".990d, 0.975d, 0.950d, 0.900d,1};"
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,74,"0.990d, 0.975d, 0.950d, 0.900d,1};"
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,96,erifyInverseCumulativeProbabilities();
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,96,verifyInverseCumulativeProbabilities();
False,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,110,erifyInverseCumulativeProbabilities();
True,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/BinomialDistributionTest.java,110,verifyInverseCumulativeProbabilities();
False,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,48,/ quantiles computed using Mathematica
True,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java,48,// quantiles computed using Mathematica
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,49,"eturn new double[] {0.210216d, 0.5542981d, 0.8312116d, 1.145476d, 1.610308d,"
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,49,"return new double[] {0.210216d, 0.5542981d, 0.8312116d, 1.145476d, 1.610308d,"
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,57,".990d, 0.975d, 0.950d, 0.900d};"
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,57,"0.990d, 0.975d, 0.950d, 0.900d};"
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,64,".990d, 0.975d, 0.950d, 0.900d, 1};"
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,64,"0.990d, 0.975d, 0.950d, 0.900d, 1};"
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,70,"eturn new double[] {0, 0.210216d, 0.5542981d, 0.8312116d, 1.145476d, 1.610308d,"
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,71,"0.51501d, 15.08627d, 12.83250d, 11.07050d, 9.236357d,"
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,70,"return new double[] {0, 0.210216d, 0.5542981d, 0.8312116d, 1.145476d, 1.610308d,"
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,71,"20.51501d, 15.08627d, 12.83250d, 11.07050d, 9.236357d,"
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,88,"etCumulativeTestPoints(new double[] {1.168926E-60, 1.168926E-40, 1.063132E-32,"
False,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,89,".144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438,"
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,88,"setCumulativeTestPoints(new double[] {1.168926E-60, 1.168926E-40, 1.063132E-32,"
True,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,89,"1.144775E-26, 1.168926E-20, 5.472917, 2.175255, 1.13438,"
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,42, call the verifyXxx methods to verify results.
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,42,* call the verifyXxx methods to verify results.
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,113, Setup sets all test instance data to default values
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,113,* Setup sets all test instance data to default values
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,122,nverseCumulativeTestValues = makeInverseCumulativeTestValues();
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,122,inverseCumulativeTestValues = makeInverseCumulativeTestValues();
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,129,rotected void tearDown() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,129,protected void tearDown() throws Exception {
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,135,nverseCumulativeTestValues = null;
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,135,inverseCumulativeTestValues = null;
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,146,"estUtils.assertEquals(""Incorrect cumulative probability value returned for """
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,147," cumulativeTestPoints[i], cumulativeTestValues[i],"
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,148,"istribution.cumulativeProbability(cumulativeTestPoints[i]),"
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,146,"TestUtils.assertEquals(""Incorrect cumulative probability value returned for """
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,147,"+ cumulativeTestPoints[i], cumulativeTestValues[i],"
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,148,"distribution.cumulativeProbability(cumulativeTestPoints[i]),"
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,159,"estUtils.assertEquals(""Incorrect inverse cumulative probability value returned for """
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,160," inverseCumulativeTestPoints[i], inverseCumulativeTestValues[i],"
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,161,"istribution.inverseCumulativeProbability(inverseCumulativeTestPoints[i]),"
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,159,"TestUtils.assertEquals(""Incorrect inverse cumulative probability value returned for """
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,160,"+ inverseCumulativeTestPoints[i], inverseCumulativeTestValues[i],"
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,161,"distribution.inverseCumulativeProbability(inverseCumulativeTestPoints[i]),"
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,173,erifyCumulativeProbabilities();
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,173,verifyCumulativeProbabilities();
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,181,erifyInverseCumulativeProbabilities();
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,181,verifyInverseCumulativeProbabilities();
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,191,"estUtils.assertEquals(0d,"
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,191,"TestUtils.assertEquals(0d,"
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,198,ouble diff = distribution.cumulativeProbability(upper) -
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,198,double diff = distribution.cumulativeProbability(upper) -
False,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,201,"estUtils.assertEquals(""Inconsistent cumulative probabilities for ("""
True,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java,201,"TestUtils.assertEquals(""Inconsistent cumulative probabilities for ("""
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,48,"eturn new double[] {0.005002502d, 0.05025168d, 0.1265890d, 0.2564665d, 0.5268026d,"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,48,"return new double[] {0.005002502d, 0.05025168d, 0.1265890d, 0.2564665d, 0.5268026d,"
False,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,56,".990d, 0.975d, 0.950d, 0.900d};"
True,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java,56,"0.990d, 0.975d, 0.950d, 0.900d};"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,50,".2020084d, 0.2937283d, 20.80266d, 8.745895d, 5.987565d,"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,50,"0.2020084d, 0.2937283d, 20.80266d, 8.745895d, 5.987565d,"
False,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,58,".990d, 0.975d, 0.950d, 0.900d};"
True,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,src/test/java/org/apache/commons/math/distribution/FDistributionTest.java,58,"0.990d, 0.975d, 0.950d, 0.900d};"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,56,"eturn new double[] {0d, 0.003968d, 0.099206d, 0.396825d, 0.396825d,"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,56,"return new double[] {0d, 0.003968d, 0.099206d, 0.396825d, 0.396825d,"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,77,".990d, 0.975d, 0.950d, 0.900d, 1d};"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,77,"0.990d, 0.975d, 0.950d, 0.900d, 1d};"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,99,erifyInverseCumulativeProbabilities();
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,99,verifyInverseCumulativeProbabilities();
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,113,erifyInverseCumulativeProbabilities();
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,113,verifyInverseCumulativeProbabilities();
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,127,erifyInverseCumulativeProbabilities();
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,127,verifyInverseCumulativeProbabilities();
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,153,"20.0, 0.0760051397707708, 0.27349758476299, 0.802507555007781},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,154,"21.0, 0.087144222047629, 0.360641806810619, 0.72650241523701},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,155,"22.0, 0.0940378846881819, 0.454679691498801, 0.639358193189381},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,156,"23.0, 0.0956897500614809, 0.550369441560282, 0.545320308501199},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,157,"24.0, 0.0919766921922999, 0.642346133752582, 0.449630558439718},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,158,"25.0, 0.083641637261095, 0.725987771013677, 0.357653866247418},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,153,"{20.0, 0.0760051397707708, 0.27349758476299, 0.802507555007781},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,154,"{21.0, 0.087144222047629, 0.360641806810619, 0.72650241523701},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,155,"{22.0, 0.0940378846881819, 0.454679691498801, 0.639358193189381},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,156,"{23.0, 0.0956897500614809, 0.550369441560282, 0.545320308501199},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,157,"{24.0, 0.0919766921922999, 0.642346133752582, 0.449630558439718},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,158,"{25.0, 0.083641637261095, 0.725987771013677, 0.357653866247418},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,160,"97.0, 7.96593036832547e-59, 1.0, 8.05105570861321e-59},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,160,"{97.0, 7.96593036832547e-59, 1.0, 8.05105570861321e-59},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,162,"99.0, 6.63604297068222e-63, 1.0, 6.670480942963e-63},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,162,"{99.0, 6.63604297068222e-63, 1.0, 6.670480942963e-63},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,193,"0.0, 0.155168304750504, 0.155168304750504, 1.0},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,194,"1.0, 0.29437545000746, 0.449543754757964, 0.844831695249496},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,195,"2.0, 0.273841321577003, 0.723385076334967, 0.550456245242036},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,196,"3.0, 0.166488572570786, 0.889873648905753, 0.276614923665033},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,197,"4.0, 0.0743969744713231, 0.964270623377076, 0.110126351094247},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,198,"5.0, 0.0260542785784855, 0.990324901955562, 0.0357293766229237},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,199,"20.0, 3.57101101678792e-16, 1.0, 3.78252101622096e-16},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,200,"21.0, 2.00551638598312e-17, 1.0, 2.11509999433041e-17},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,201,"22.0, 1.04317070180562e-18, 1.0, 1.09583608347287e-18},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,202,"23.0, 5.03153504903308e-20, 1.0, 5.266538166725e-20},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,203,"24.0, 2.2525984149695e-21, 1.0, 2.35003117691919e-21},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,204,"25.0, 9.3677424515947e-23, 1.0, 9.74327619496943e-23},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,205,"50.0, 9.83633962945521e-69, 1.0, 9.8677629437617e-69},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,206,"51.0, 3.13448949497553e-71, 1.0, 3.14233143064882e-71},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,207,"52.0, 7.82755221928122e-74, 1.0, 7.84193567329055e-74},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,208,"53.0, 1.43662126065532e-76, 1.0, 1.43834540093295e-76},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,209,"54.0, 1.72312692517348e-79, 1.0, 1.7241402776278e-79},"
False,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,210,"55.0, 1.01335245432581e-82, 1.0, 1.01335245432581e-82},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,193,"{0.0, 0.155168304750504, 0.155168304750504, 1.0},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,194,"{1.0, 0.29437545000746, 0.449543754757964, 0.844831695249496},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,195,"{2.0, 0.273841321577003, 0.723385076334967, 0.550456245242036},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,196,"{3.0, 0.166488572570786, 0.889873648905753, 0.276614923665033},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,197,"{4.0, 0.0743969744713231, 0.964270623377076, 0.110126351094247},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,198,"{5.0, 0.0260542785784855, 0.990324901955562, 0.0357293766229237},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,199,"{20.0, 3.57101101678792e-16, 1.0, 3.78252101622096e-16},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,200,"{21.0, 2.00551638598312e-17, 1.0, 2.11509999433041e-17},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,201,"{22.0, 1.04317070180562e-18, 1.0, 1.09583608347287e-18},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,202,"{23.0, 5.03153504903308e-20, 1.0, 5.266538166725e-20},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,203,"{24.0, 2.2525984149695e-21, 1.0, 2.35003117691919e-21},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,204,"{25.0, 9.3677424515947e-23, 1.0, 9.74327619496943e-23},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,205,"{50.0, 9.83633962945521e-69, 1.0, 9.8677629437617e-69},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,206,"{51.0, 3.13448949497553e-71, 1.0, 3.14233143064882e-71},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,207,"{52.0, 7.82755221928122e-74, 1.0, 7.84193567329055e-74},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,208,"{53.0, 1.43662126065532e-76, 1.0, 1.43834540093295e-76},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,209,"{54.0, 1.72312692517348e-79, 1.0, 1.7241402776278e-79},"
True,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/java/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,210,"{55.0, 1.01335245432581e-82, 1.0, 1.01335245432581e-82},"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,25,  implement makeDistribution() to return a distribution instance to use in
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,25,*  implement makeDistribution() to return a distribution instance to use in
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,27,  test points and test values arrays returned represent parallel arrays of
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,27,*  test points and test values arrays returned represent parallel arrays of
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,39,  to verify results.
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,39,*  to verify results.
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,106, Setup sets all test instance data to default values
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,106,* Setup sets all test instance data to default values
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,117,nverseCumulativeTestValues = makeInverseCumulativeTestValues();
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,117,inverseCumulativeTestValues = makeInverseCumulativeTestValues();
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,124,rotected void tearDown() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,124,protected void tearDown() throws Exception {
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,132,nverseCumulativeTestValues = null;
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,132,inverseCumulativeTestValues = null;
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,144,"ensityTestValues[i],"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,144,"densityTestValues[i],"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,156,"umulativeTestValues[i],"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,156,"cumulativeTestValues[i],"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,168,"ssertEquals(""Incorrect inverse cumulative probability value returned for """
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,169," inverseCumulativeTestPoints[i], inverseCumulativeTestValues[i],"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,168,"assertEquals(""Incorrect inverse cumulative probability value returned for """
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,169,"+ inverseCumulativeTestPoints[i], inverseCumulativeTestValues[i],"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,181,erifyDensities();
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,181,verifyDensities();
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,189,erifyCumulativeProbabilities();
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,189,verifyCumulativeProbabilities();
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,203,"umulativeTestValues[i],"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,203,"cumulativeTestValues[i],"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,229,"ssertEquals(distribution.cumulativeProbability(one, two),"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,229,"assertEquals(distribution.cumulativeProbability(one, two),"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,231,"ssertEquals(distribution.cumulativeProbability(one, two),"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,231,"assertEquals(distribution.cumulativeProbability(one, two),"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,234,"ssertEquals(distribution.cumulativeProbability(two, ten),"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,234,"assertEquals(distribution.cumulativeProbability(two, ten),"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,236,"ssertEquals(distribution.cumulativeProbability(two, ten),"
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,236,"assertEquals(distribution.cumulativeProbability(two, ten),"
False,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,246,erifyInverseCumulativeProbabilities();
True,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java,246,verifyInverseCumulativeProbabilities();
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,50,/ quantiles computed using R
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,51,"eturn new double[] {-2.226325d, -1.156887d, -0.6439496d, -0.2027951d, 0.3058278d,"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,50,// quantiles computed using R
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,51,"return new double[] {-2.226325d, -1.156887d, -0.6439496d, -0.2027951d, 0.3058278d,"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,59,".990d, 0.975d, 0.950d, 0.900d};"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,59,"0.990d, 0.975d, 0.950d, 0.900d};"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,75,"etCumulativeTestPoints( new double[] {mu - 2 *sigma, mu - sigma,"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,75,"setCumulativeTestPoints( new double[] {mu - 2 *sigma, mu - sigma,"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,79,"etCumulativeTestValues(new double[] {0.02275013, 0.1586553, 0.5, 0.8413447,"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,79,"setCumulativeTestValues(new double[] {0.02275013, 0.1586553, 0.5, 0.8413447,"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,81,erifyCumulativeProbabilities();
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,81,verifyCumulativeProbabilities();
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,113,"ssertEquals(1.4, distribution.getStandardDeviation(), 0);"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,113,"assertEquals(1.4, distribution.getStandardDeviation(), 0);"
False,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,134,"/ R 2.5: print(dnorm(c(-2,-1,0,1,2), mean=1.1), digits=10)"
True,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,134,"// R 2.5: print(dnorm(c(-2,-1,0,1,2), mean=1.1), digits=10)"
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,53,"eturn new double[] {0d, 0.02824d, 0.08474d, 0.13982d,"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,53,"return new double[] {0d, 0.02824d, 0.08474d, 0.13982d,"
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,74,".990d, 0.975d, 0.950d, 0.900d, 1};"
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,74,"0.990d, 0.975d, 0.950d, 0.900d, 1};"
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,96,erifyInverseCumulativeProbabilities();
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,96,verifyInverseCumulativeProbabilities();
False,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,110,erifyInverseCumulativeProbabilities();
True,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PascalDistributionTest.java,110,verifyInverseCumulativeProbabilities();
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,43, Creates the default discrete distribution instance to use in tests.
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,43,* Creates the default discrete distribution instance to use in tests.
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,47,eturn new PoissonDistributionImpl(DEFAULT_TEST_POISSON_PARAMETER);
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,47,return new PoissonDistributionImpl(DEFAULT_TEST_POISSON_PARAMETER);
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,65,".14652511111d, 0.195366814813d, 0.195366814813,"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,65,"0.14652511111d, 0.195366814813d, 0.195366814813,"
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,82,"eturn new double[] { 0d,  0.0183156388887d, 0.0915781944437d,"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,82,"return new double[] { 0d,  0.0183156388887d, 0.0915781944437d,"
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,90, probabilities for corresponding values exceeds the target value (still
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,90,* probabilities for corresponding values exceeds the target value (still
False,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,95,"eturn new double[] { 0d,  0.018315638889d, 0.0915781944437d,"
True,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,95,"return new double[] { 0d,  0.018315638889d, 0.0915781944437d,"
False,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,48,/ quantiles computed using Mathematica
True,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java,48,// quantiles computed using Mathematica
False,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,49,"eturn new double[] {0d, 0d, 0.3414d, 0.1707d, 0.1138d, 0.0854d, 0.0683d,"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,49,"return new double[] {0d, 0d, 0.3414d, 0.1707d, 0.1138d, 0.0854d, 0.0683d,"
False,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,70,".990d, 0.975d, 0.950d, 0.900d, 1};"
True,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/java/org/apache/commons/math/distribution/ZipfDistributionTest.java,70,"0.990d, 0.975d, 0.950d, 0.900d, 1};"
False,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,30," href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
True,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,30,"* href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
False,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,30," href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
True,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java,30,"* href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,33," href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,33,"* href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,413,"), false);"
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,413,"}), false);"
False,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1046,"427.0,  3820.0,  3307.0,  2872.0"
True,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,src/test/java/org/apache/commons/math/estimation/MinpackTest.java,1046,"4427.0,  3820.0,  3307.0,  2872.0"
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,47,tring actual = properFormat.format(c);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,47,String actual = properFormat.format(c);
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,58,tring actual = properFormat.format(c);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,58,String actual = properFormat.format(c);
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,61,ctual = improperFormat.format(c);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,61,actual = improperFormat.format(c);
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,69,tring actual = properFormat.format(c);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,69,String actual = properFormat.format(c);
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,72,ctual = improperFormat.format(c);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,72,actual = improperFormat.format(c);
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,79,tring actual = properFormat.format(c);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,79,String actual = properFormat.format(c);
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,82,ctual = improperFormat.format(c);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,82,actual = improperFormat.format(c);
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,89,tring actual = properFormat.format(c);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,89,String actual = properFormat.format(c);
False,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,92,ctual = improperFormat.format(c);
True,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java,92,actual = improperFormat.format(c);
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,45,tring actual = properFormat.format(c);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,45,String actual = properFormat.format(c);
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,56,tring actual = properFormat.format(c);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,56,String actual = properFormat.format(c);
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,59,ctual = improperFormat.format(c);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,59,actual = improperFormat.format(c);
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,67,tring actual = properFormat.format(c);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,67,String actual = properFormat.format(c);
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,70,ctual = improperFormat.format(c);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,70,actual = improperFormat.format(c);
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,77,tring actual = properFormat.format(c);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,77,String actual = properFormat.format(c);
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,80,ctual = improperFormat.format(c);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,80,actual = improperFormat.format(c);
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,87,tring actual = properFormat.format(c);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,87,String actual = properFormat.format(c);
False,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,90,ctual = improperFormat.format(c);
True,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java,90,actual = improperFormat.format(c);
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,58,ry {
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,58,try {
False,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,408, = f1.divide(f1);
True,src/test/java/org/apache/commons/math/fraction/FractionTest.java,src/test/java/org/apache/commons/math/fraction/FractionTest.java,408,f = f1.divide(f1);
False,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,28,ublic void testInvalidConstructor() {
True,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/BinaryChromosomeTest.java,28,public void testInvalidConstructor() {
False,src/test/java/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/java/org/apache/commons/math/genetics/BinaryMutationTest.java,31,ummyBinaryChromosome original = new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(10));
True,src/test/java/org/apache/commons/math/genetics/BinaryMutationTest.java,src/test/java/org/apache/commons/math/genetics/BinaryMutationTest.java,31,DummyBinaryChromosome original = new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(10));
False,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,31,ublic double fitness() {
True,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,31,public double fitness() {
False,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,36,ublic double fitness() {
True,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,36,public double fitness() {
False,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,41,ublic double fitness() {
True,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,src/test/java/org/apache/commons/math/genetics/ChromosomeTest.java,41,public double fitness() {
False,src/test/java/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,48,ublic double fitness() {
True,src/test/java/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,src/test/java/org/apache/commons/math/genetics/ElitisticListPopulationTest.java,48,public double fitness() {
False,src/test/java/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/java/org/apache/commons/math/genetics/FitnessCachingTest.java,29,rivate static final int DIMENSION = 50;
True,src/test/java/org/apache/commons/math/genetics/FitnessCachingTest.java,src/test/java/org/apache/commons/math/genetics/FitnessCachingTest.java,29,private static final int DIMENSION = 50;
False,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,31,rivate static final int DIMENSION = 50;
False,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,32,rivate static final int POPULATION_SIZE = 50;
True,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,31,private static final int DIMENSION = 50;
True,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestBinary.java,32,private static final int POPULATION_SIZE = 50;
False,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,35,rivate static final int DIMENSION = 20;
False,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,36,rivate static final int POPULATION_SIZE = 80;
True,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,35,private static final int DIMENSION = 20;
True,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,36,private static final int POPULATION_SIZE = 80;
False,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,123,eturn -res;
True,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java,123,return -res;
False,src/test/java/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/java/org/apache/commons/math/genetics/ListPopulationTest.java,30,ublic double fitness() {
True,src/test/java/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/java/org/apache/commons/math/genetics/ListPopulationTest.java,30,public double fitness() {
False,src/test/java/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/java/org/apache/commons/math/genetics/ListPopulationTest.java,35,ublic double fitness() {
True,src/test/java/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/java/org/apache/commons/math/genetics/ListPopulationTest.java,35,public double fitness() {
False,src/test/java/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/java/org/apache/commons/math/genetics/ListPopulationTest.java,40,ublic double fitness() {
True,src/test/java/org/apache/commons/math/genetics/ListPopulationTest.java,src/test/java/org/apache/commons/math/genetics/ListPopulationTest.java,40,public double fitness() {
False,src/test/java/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/java/org/apache/commons/math/genetics/TournamentSelectionTest.java,51,ublic double fitness() {
True,src/test/java/org/apache/commons/math/genetics/TournamentSelectionTest.java,src/test/java/org/apache/commons/math/genetics/TournamentSelectionTest.java,51,public double fitness() {
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,49,tring actual = vector3DFormat.format(c);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,49,String actual = vector3DFormat.format(c);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,60,tring actual = vector3DFormat.format(c);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,60,String actual = vector3DFormat.format(c);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,71,tring actual = vector3DFormat.format(c);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,71,String actual = vector3DFormat.format(c);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,82,tring actual = vector3DFormat.format(c);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,82,String actual = vector3DFormat.format(c);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,93,tring actual = vector3DFormat.format(c);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,93,String actual = vector3DFormat.format(c);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,104,tring actual = vector3DFormat.format(c);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,104,String actual = vector3DFormat.format(c);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,111,tring actual = vector3DFormatSquare.format(c);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,111,String actual = vector3DFormatSquare.format(c);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,125,tring actual = Vector3DFormat.formatVector3D(c);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,125,String actual = Vector3DFormat.formatVector3D(c);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,134,tring actual = vector3DFormat.format(c);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,134,String actual = vector3DFormat.format(c);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,141,tring actual = vector3DFormat.format(c);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,141,String actual = vector3DFormat.format(c);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,148,tring actual = vector3DFormat.format(c);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,148,String actual = vector3DFormat.format(c);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,156,ector3D actual = (Vector3D) vector3DFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,156,Vector3D actual = (Vector3D) vector3DFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,183,ector3D actual = (Vector3D) vector3DFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,183,Vector3D actual = (Vector3D) vector3DFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,198,ector3D actual = (Vector3D) vector3DFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,198,Vector3D actual = (Vector3D) vector3DFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,213,ector3D actual = (Vector3D) vector3DFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,213,Vector3D actual = (Vector3D) vector3DFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,228,ector3D actual = (Vector3D) vector3DFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,228,Vector3D actual = (Vector3D) vector3DFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,243,ector3D actual = (Vector3D) vector3DFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,243,Vector3D actual = (Vector3D) vector3DFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,258,ector3D actual = (Vector3D) vector3DFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,258,Vector3D actual = (Vector3D) vector3DFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,273,ector3D actual = (Vector3D) vector3DFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,273,Vector3D actual = (Vector3D) vector3DFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,288,ector3D actual = (Vector3D) vector3DFormatSquare.parseObject(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,288,Vector3D actual = (Vector3D) vector3DFormatSquare.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,298,ector3D actual = (Vector3D) vector3DFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,298,Vector3D actual = (Vector3D) vector3DFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,308,ector3D actual = (Vector3D)vector3DFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,308,Vector3D actual = (Vector3D)vector3DFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,318,ector3D actual = (Vector3D)vector3DFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DFormatAbstractTest.java,318,Vector3D actual = (Vector3D)vector3DFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,206,"ssertEquals(0.22572612855273393616,"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,206,"assertEquals(0.22572612855273393616,"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,209,"ssertEquals(7.98595620686106654517199e-8,"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,209,"assertEquals(7.98595620686106654517199e-8,"
False,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,212,"ssertEquals(3.14159257373023116985197793156,"
True,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,212,"assertEquals(3.14159257373023116985197793156,"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,40,"rotected double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d},"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,40,"protected double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d},"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,44,rotected double[][] testDataInv =
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,44,protected double[][] testDataInv =
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,49,rotected double[][] testDataPlusInv =
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,49,protected double[][] testDataPlusInv =
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,70,"2, 4, 6, 8}, {4, 5, 6, 7}};"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,70,"{2, 4, 6, 8}, {4, 5, 6, 7}};"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,173,"2.scalarMultiply(-1d).add(m),entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,173,"m2.scalarMultiply(-1d).add(m),entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,197,"2,entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,197,"m2,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,212,ublic void testMultiply2() {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,213,ealMatrix m3 = new Array2DRowRealMatrix(d3);
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,212,public void testMultiply2() {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,213,RealMatrix m3 = new Array2DRowRealMatrix(d3);
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,269,ealMatrix m = new Array2DRowRealMatrix(testData);
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,269,RealMatrix m = new Array2DRowRealMatrix(testData);
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,295,ealMatrix m3 = new Array2DRowRealMatrix(d3);
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,295,RealMatrix m3 = new Array2DRowRealMatrix(d3);
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,361,ealMatrix pInverse = new LUDecompositionImpl(p).getSolver().getInverse();
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,361,RealMatrix pInverse = new LUDecompositionImpl(p).getSolver().getInverse();
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,372,"ssertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,372,"assertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,381,"heckGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,382,"heckGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,383,"heckGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,384,"heckGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,385,"heckGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,386,"heckGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,387,"heckGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,381,"checkGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,382,"checkGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,383,"checkGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,384,"checkGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,385,"checkGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,386,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,387,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,432,"heckCopy(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,433,"heckCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,434,"heckCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,435,"heckCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,436,"heckCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,437,"heckCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,438,"heckCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,432,"checkCopy(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,433,"checkCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,434,"checkCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,435,"checkCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,436,"checkCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,437,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,438,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,490,"ssertEquals(""Row0"", mRow0,"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,490,"assertEquals(""Row0"", mRow0,"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,492,"ssertEquals(""Row3"", mRow3,"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,492,"assertEquals(""Row3"", mRow3,"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,532,"ssertEquals(""Column1"", mColumn1,"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,532,"assertEquals(""Column1"", mColumn1,"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,534,"ssertEquals(""Column3"", mColumn3,"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,534,"assertEquals(""Column3"", mColumn3,"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,746,"ssertEquals(expected[i], actual[i]);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,746,"assertEquals(expected[i], actual[i]);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,760,ssertFalse(m.equals(new Array2DRowRealMatrix(bigSingular)));
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,760,assertFalse(m.equals(new Array2DRowRealMatrix(bigSingular)));
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,777,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,777,"assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,782,"ssertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,784,".setSubMatrix(testDataPlus2,0,0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,782,"assertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,784,"m.setSubMatrix(testDataPlus2,0,0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,787,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,787,"assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,790,ry {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,790,try {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,797,ry {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,797,try {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,803,ry {
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,803,try {
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,865,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,865,"assertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,869,"ssertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,869,"assertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,885,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,885,"assertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,889,"ssertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,889,"assertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,905,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,905,"assertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,909,"ssertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,909,"assertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,925,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,925,"assertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,929,"ssertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,929,"assertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,963,"rotected void splitLU(RealMatrix lu, double[][] lowerData, double[][] upperData) throws InvalidMatrixException {"
True,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java,963,"protected void splitLU(RealMatrix lu, double[][] lowerData, double[][] upperData) throws InvalidMatrixException {"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,61,/ Testclass to test the FieldVector<Fraction> interface
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,61,// Testclass to test the FieldVector<Fraction> interface
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,343,ieldVectorTestImpl<Fraction> v2_t = new FieldVectorTestImpl<Fraction>(vec2);
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,343,FieldVectorTestImpl<Fraction> v2_t = new FieldVectorTestImpl<Fraction>(vec2);
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,439,rrayFieldVector<Fraction> vout10 = (ArrayFieldVector<Fraction>) v1.copy();
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,439,ArrayFieldVector<Fraction> vout10 = (ArrayFieldVector<Fraction>) v1.copy();
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,447,ublic void testMapFunctions() {
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,447,public void testMapFunctions() {
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,507,ublic void testBasicFunctions() {
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,507,public void testBasicFunctions() {
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,512,ieldVectorTestImpl<Fraction> v2_t = new FieldVectorTestImpl<Fraction>(vec2);
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,512,FieldVectorTestImpl<Fraction> v2_t = new FieldVectorTestImpl<Fraction>(vec2);
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,575,ublic void testMisc() {
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,575,public void testMisc() {
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,585,"ssertNotSame(""testData not same object "", v1.data, dout1);"
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,585,"assertNotSame(""testData not same object "", v1.data, dout1);"
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,588,1.checkVectorDimensions(2);
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,588,v1.checkVectorDimensions(2);
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,597,1.checkVectorDimensions(v4);
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,597,v1.checkVectorDimensions(v4);
False,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,606,1.checkVectorDimensions(v4_2);
True,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayFieldVectorTest.java,606,v1.checkVectorDimensions(v4_2);
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,48,/ Testclass to test the RealVector interface
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,48,// Testclass to test the RealVector interface
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,550,ealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,550,RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,646,rrayRealVector vout10 = (ArrayRealVector) v1.copy();
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,646,ArrayRealVector vout10 = (ArrayRealVector) v1.copy();
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,654,ublic void testMapFunctions() {
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,654,public void testMapFunctions() {
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,855,_mapAsinToSelf.mapAsinToSelf();
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,855,v_mapAsinToSelf.mapAsinToSelf();
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,982,ublic void testBasicFunctions() {
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,982,public void testBasicFunctions() {
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,987,ealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,987,RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1073,ealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1073,RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1107,ublic void testMisc() {
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1107,public void testMisc() {
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1117,"ssertNotSame(""testData not same object "", v1.data, dout1);"
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1117,"assertNotSame(""testData not same object "", v1.data, dout1);"
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1120,1.checkVectorDimensions(2);
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1120,v1.checkVectorDimensions(2);
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1129,1.checkVectorDimensions(v4);
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1129,v1.checkVectorDimensions(v4);
False,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1138,1.checkVectorDimensions(v4_2);
True,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,1138,v1.checkVectorDimensions(v4_2);
False,src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,95,"ssertEquals(0, mTm.subtract(id).getNorm(), 1.0e-14);"
True,src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java,95,"assertEquals(0, mTm.subtract(id).getNorm(), 1.0e-14);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,44,"rotected double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d},"
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,44,"protected double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d},"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,48,rotected double[][] testDataInv =
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,48,protected double[][] testDataInv =
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,53,rotected double[][] testDataPlusInv =
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,53,protected double[][] testDataPlusInv =
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,74,"2, 4, 6, 8}, {4, 5, 6, 7}};"
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,74,"{2, 4, 6, 8}, {4, 5, 6, 7}};"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,279,"2,entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,279,"m2,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,294,ublic void testMultiply2() {
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,294,public void testMultiply2() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,382,ublic void testDeterminant() {
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,382,public void testDeterminant() {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,561,"ssertEquals(""Rows23Cols00"", mRows23Cols00,"
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,561,"assertEquals(""Rows23Cols00"", mRows23Cols00,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,563,"ssertEquals(""Rows00Cols33"", mRows00Cols33,"
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,563,"assertEquals(""Rows00Cols33"", mRows00Cols33,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,566,".getSubMatrix(0 , 1 , 2, 3));"
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,566,"m.getSubMatrix(0 , 1 , 2, 3));"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,568,".getSubMatrix(new int[] {0,2}, new int[] {1,3}));"
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,568,"m.getSubMatrix(new int[] {0,2}, new int[] {1,3}));"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,570,".getSubMatrix(new int[] {0,3}, new int[] {1,2}));"
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,570,"m.getSubMatrix(new int[] {0,3}, new int[] {1,2}));"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,572,".getSubMatrix(new int[] {0,3}, new int[] {1,2,3}));"
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,572,"m.getSubMatrix(new int[] {0,3}, new int[] {1,2,3}));"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,574,".getSubMatrix(new int[] {2,0}, new int[] {1,2,3}));"
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,574,"m.getSubMatrix(new int[] {2,0}, new int[] {1,2,3}));"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,576,".getSubMatrix(new int[] {3,1}, new int[] {3,1}));"
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,576,"m.getSubMatrix(new int[] {3,1}, new int[] {3,1}));"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,578,".getSubMatrix(new int[] {3,1}, new int[] {3,1}));"
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,578,"m.getSubMatrix(new int[] {3,1}, new int[] {3,1}));"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,622,"ssertEquals(""Column1"", mColumn1,"
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,622,"assertEquals(""Column1"", mColumn1,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,624,"ssertEquals(""Column3"", mColumn3,"
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,624,"assertEquals(""Column3"", mColumn3,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,644,"ssertEquals(""Row0"", mRow0,"
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,644,"assertEquals(""Row0"", mRow0,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,646,"ssertEquals(""Row3"", mRow3,"
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,646,"assertEquals(""Row3"", mRow3,"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,690,igDecimal[][] detData3 =
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,690,BigDecimal[][] detData3 =
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,696,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,696,"assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,701,"ssertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,703,igDecimal[][] testDataPlus3 =
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,701,"assertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,703,BigDecimal[][] testDataPlus3 =
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,705,".setSubMatrix(testDataPlus3,0,0);"
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,705,"m.setSubMatrix(testDataPlus3,0,0);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,708,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,708,"assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,721,"ssertEquals(expected, matrix);"
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,721,"assertEquals(expected, matrix);"
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,724,ry {
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,724,try {
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,760,** verifies that two matrices are close (1-norm) */
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,760,/** verifies that two matrices are close (1-norm) */
False,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,773,"ssertEquals(msg + "" "" +  i + "" elements differ"","
True,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/BigMatrixImplTest.java,773,"assertEquals(msg + "" "" +  i + "" elements differ"","
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,63,"new Fraction(-2),new Fraction(-5),new Fraction(-3)},"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,63,"{new Fraction(-2),new Fraction(-5),new Fraction(-3)},"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,217,"estUtils.assertEquals(m.subtract(m2), m2.scalarMultiply(new Fraction(-1)).add(m));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,217,"TestUtils.assertEquals(m.subtract(m2), m2.scalarMultiply(new Fraction(-1)).add(m));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,236,"estUtils.assertEquals(m2.multiply(identity), m2);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,236,"TestUtils.assertEquals(m2.multiply(identity), m2);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,344,ublic void testMultiply2() {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,345,ieldMatrix<Fraction> m3 = new BlockFieldMatrix<Fraction>(d3);
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,344,public void testMultiply2() {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,345,FieldMatrix<Fraction> m3 = new BlockFieldMatrix<Fraction>(d3);
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,427,ieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(testData);
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,427,FieldMatrix<Fraction> m = new BlockFieldMatrix<Fraction>(testData);
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,452,ieldMatrix<Fraction> m3 = new BlockFieldMatrix<Fraction>(d3);
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,452,FieldMatrix<Fraction> m3 = new BlockFieldMatrix<Fraction>(d3);
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,521,ieldMatrix<Fraction> pInverse = new FieldLUDecompositionImpl<Fraction>(p).getSolver().getInverse();
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,521,FieldMatrix<Fraction> pInverse = new FieldLUDecompositionImpl<Fraction>(p).getSolver().getInverse();
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,545,onstants[2]);
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,545,constants[2]);
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,554,"heckGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,555,"heckGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 });"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,556,"heckGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 });"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,557,"heckGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 });"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,558,"heckGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 });"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,559,"heckGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,560,"heckGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,554,"checkGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,555,"checkGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 });"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,556,"checkGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 });"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,557,"checkGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 });"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,558,"checkGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 });"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,559,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,560,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,626,"heckCopy(m, subRows01Cols23,  0 , 1 , 2, 3);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,627,"heckCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 });"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,628,"heckCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 });"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,629,"heckCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 });"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,630,"heckCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 });"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,631,"heckCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,632,"heckCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,626,"checkCopy(m, subRows01Cols23,  0 , 1 , 2, 3);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,627,"checkCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 });"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,628,"checkCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 });"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,629,"checkCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 });"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,630,"checkCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 });"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,631,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,632,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1056,"ssertEquals(expected[i], actual[i]);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1056,"assertEquals(expected[i], actual[i]);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1070,ssertFalse(m.equals(new BlockFieldMatrix<Fraction>(bigSingular)));
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1070,assertFalse(m.equals(new BlockFieldMatrix<Fraction>(bigSingular)));
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1083,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1083,"assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1088,"ssertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1090,".setSubMatrix(testDataPlus2,0,0);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1088,"assertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1090,"m.setSubMatrix(testDataPlus2,0,0);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1093,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1093,"assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1112,"ssertEquals(expected, matrix);"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1112,"assertEquals(expected, matrix);"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1115,ry {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1115,try {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1122,ry {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1122,try {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1128,ry {
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1128,try {
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1177,"ssertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1177,"assertEquals(new Fraction(0), m.getEntry(i, 0));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1181,"ssertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1181,"assertEquals(new Fraction(0), m.getEntry(0, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1197,"ssertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1197,"assertEquals(new Fraction(0), m.getEntry(i, 0));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1201,"ssertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1201,"assertEquals(new Fraction(0), m.getEntry(0, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1217,"ssertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1217,"assertEquals(new Fraction(0), m.getEntry(i, 0));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1221,"ssertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1221,"assertEquals(new Fraction(0), m.getEntry(0, j));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1237,"ssertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1237,"assertEquals(new Fraction(0), m.getEntry(i, 0));"
False,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1241,"ssertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java,1241,"assertEquals(new Fraction(0), m.getEntry(0, j));"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,43,"rotected double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d},"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,43,"protected double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d},"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,47,rotected double[][] testDataInv =
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,47,protected double[][] testDataInv =
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,52,rotected double[][] testDataPlusInv =
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,52,protected double[][] testDataPlusInv =
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,73,"2, 4, 6, 8}, {4, 5, 6, 7}};"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,73,"{2, 4, 6, 8}, {4, 5, 6, 7}};"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,176,"ssertClose(m.subtract(m2), m2.scalarMultiply(-1d).add(m), entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,176,"assertClose(m.subtract(m2), m2.scalarMultiply(-1d).add(m), entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,195,"ssertClose(m2.multiply(identity), m2, entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,195,"assertClose(m2.multiply(identity), m2, entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,294,ublic void testMultiply2() {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,295,ealMatrix m3 = new BlockRealMatrix(d3);
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,294,public void testMultiply2() {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,295,RealMatrix m3 = new BlockRealMatrix(d3);
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,374,ealMatrix m = new BlockRealMatrix(testData);
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,374,RealMatrix m = new BlockRealMatrix(testData);
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,399,ealMatrix m3 = new BlockRealMatrix(d3);
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,399,RealMatrix m3 = new BlockRealMatrix(d3);
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,461,ealMatrix pInverse = new LUDecompositionImpl(p).getSolver().getInverse();
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,461,RealMatrix pInverse = new LUDecompositionImpl(p).getSolver().getInverse();
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,472,"ssertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,472,"assertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,481,"heckGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,482,"heckGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 });"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,483,"heckGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 });"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,484,"heckGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 });"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,485,"heckGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 });"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,486,"heckGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,487,"heckGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,481,"checkGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,482,"checkGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 });"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,483,"checkGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 });"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,484,"checkGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 });"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,485,"checkGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 });"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,486,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,487,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,551,"heckCopy(m, subRows01Cols23,  0 , 1 , 2, 3);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,552,"heckCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 });"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,553,"heckCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 });"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,554,"heckCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 });"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,555,"heckCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 });"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,556,"heckCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,557,"heckCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,551,"checkCopy(m, subRows01Cols23,  0 , 1 , 2, 3);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,552,"checkCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 });"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,553,"checkCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 });"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,554,"checkCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 });"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,555,"checkCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 });"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,556,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,557,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,977,"ssertEquals(expected[i], actual[i]);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,977,"assertEquals(expected[i], actual[i]);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,991,ssertFalse(m.equals(new BlockRealMatrix(bigSingular)));
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,991,assertFalse(m.equals(new BlockRealMatrix(bigSingular)));
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1005,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1005,"assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1010,"ssertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1012,".setSubMatrix(testDataPlus2,0,0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1010,"assertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1012,"m.setSubMatrix(testDataPlus2,0,0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1015,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1015,"assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1023,"ssertEquals(expected, matrix);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1023,"assertEquals(expected, matrix);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1026,ry {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1026,try {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1033,ry {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1033,try {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1039,ry {
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1039,try {
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1088,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1088,"assertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1092,"ssertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1092,"assertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1108,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1108,"assertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1112,"ssertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1112,"assertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1128,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1128,"assertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1132,"ssertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1132,"assertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1148,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1148,"assertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1152,"ssertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1152,"assertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1184,** verifies that two matrices are close (1-norm) */
True,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java,1184,/** verifies that two matrices are close (1-norm) */
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,119,ef[i] = 0.0001 * r.nextDouble() + 6;
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,119,ref[i] = 0.0001 * r.nextDouble() + 6;
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,235,"3, 1, -4},"
False,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,236,"1, 3, -4},"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,235,"{3, 1, -4},"
True,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,236,"{1, 3, -4},"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,42,"rotected Fraction[][] testDataMinus = { {new Fraction(-1),new Fraction(-2),new Fraction(-3)}, {new Fraction(-2),new Fraction(-5),new Fraction(-3)},"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,42,"protected Fraction[][] testDataMinus = { {new Fraction(-1),new Fraction(-2),new Fraction(-3)}, {new Fraction(-2),new Fraction(-5),new Fraction(-3)},"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,46,rotected Fraction[][] testDataInv =
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,46,protected Fraction[][] testDataInv =
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,51,rotected Fraction[][] testDataPlusInv =
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,51,protected Fraction[][] testDataPlusInv =
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,72,"new Fraction(2), new Fraction(4), new Fraction(6), new Fraction(8)}, {new Fraction(4), new Fraction(5), new Fraction(6), new Fraction(7)}};"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,72,"{new Fraction(2), new Fraction(4), new Fraction(6), new Fraction(8)}, {new Fraction(4), new Fraction(5), new Fraction(6), new Fraction(7)}};"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,156,"estUtils.assertEquals(m.subtract(m2),m2.scalarMultiply(new Fraction(-1)).add(m));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,156,"TestUtils.assertEquals(m.subtract(m2),m2.scalarMultiply(new Fraction(-1)).add(m));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,175,"estUtils.assertEquals(m2.multiply(identity), m2);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,175,"TestUtils.assertEquals(m2.multiply(identity), m2);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,190,ublic void testMultiply2() {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,191,ieldMatrix<Fraction> m3 = new Array2DRowFieldMatrix<Fraction>(d3);
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,190,public void testMultiply2() {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,191,FieldMatrix<Fraction> m3 = new Array2DRowFieldMatrix<Fraction>(d3);
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,244,ieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData);
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,244,FieldMatrix<Fraction> m = new Array2DRowFieldMatrix<Fraction>(testData);
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,269,ieldMatrix<Fraction> m3 = new Array2DRowFieldMatrix<Fraction>(d3);
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,269,FieldMatrix<Fraction> m3 = new Array2DRowFieldMatrix<Fraction>(d3);
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,338,ieldMatrix<Fraction> pInverse = new FieldLUDecompositionImpl<Fraction>(p).getSolver().getInverse();
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,338,FieldMatrix<Fraction> pInverse = new FieldLUDecompositionImpl<Fraction>(p).getSolver().getInverse();
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,359,"ubtract(new Fraction(5).multiply(solution[2])), constants[2]);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,359,"subtract(new Fraction(5).multiply(solution[2])), constants[2]);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,368,"heckGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,369,"heckGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 });"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,370,"heckGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 });"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,371,"heckGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 });"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,372,"heckGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 });"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,373,"heckGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,374,"heckGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,368,"checkGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,369,"checkGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 });"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,370,"checkGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 });"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,371,"checkGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 });"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,372,"checkGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 });"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,373,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,374,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,419,"heckCopy(m, subRows01Cols23,  0 , 1 , 2, 3);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,420,"heckCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 });"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,421,"heckCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 });"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,422,"heckCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 });"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,423,"heckCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 });"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,424,"heckCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,425,"heckCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,419,"checkCopy(m, subRows01Cols23,  0 , 1 , 2, 3);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,420,"checkCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 });"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,421,"checkCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 });"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,422,"checkCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 });"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,423,"checkCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 });"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,424,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,425,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 });"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,477,"ssertEquals(""Row0"", mRow0,"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,477,"assertEquals(""Row0"", mRow0,"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,479,"ssertEquals(""Row3"", mRow3,"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,479,"assertEquals(""Row3"", mRow3,"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,519,"ssertEquals(""Column1"", mColumn1,"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,519,"assertEquals(""Column1"", mColumn1,"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,521,"ssertEquals(""Column3"", mColumn3,"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,521,"assertEquals(""Column3"", mColumn3,"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,733,"ssertEquals(expected[i], actual[i]);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,733,"assertEquals(expected[i], actual[i]);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,747,ssertFalse(m.equals(new Array2DRowFieldMatrix<Fraction>(bigSingular)));
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,747,assertFalse(m.equals(new Array2DRowFieldMatrix<Fraction>(bigSingular)));
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,766,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,766,"assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,775,"ssertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,777,".setSubMatrix(testDataPlus2,0,0);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,775,"assertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,777,"m.setSubMatrix(testDataPlus2,0,0);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,784,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,784,"assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,787,ry {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,787,try {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,794,ry {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,794,try {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,800,ry {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,800,try {
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,863,"ssertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,863,"assertEquals(new Fraction(0), m.getEntry(i, 0));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,867,"ssertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,867,"assertEquals(new Fraction(0), m.getEntry(0, j));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,883,"ssertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,883,"assertEquals(new Fraction(0), m.getEntry(i, 0));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,887,"ssertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,887,"assertEquals(new Fraction(0), m.getEntry(0, j));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,903,"ssertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,903,"assertEquals(new Fraction(0), m.getEntry(i, 0));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,907,"ssertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,907,"assertEquals(new Fraction(0), m.getEntry(0, j));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,923,"ssertEquals(new Fraction(0), m.getEntry(i, 0));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,923,"assertEquals(new Fraction(0), m.getEntry(i, 0));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,927,"ssertEquals(new Fraction(0), m.getEntry(0, j));"
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,927,"assertEquals(new Fraction(0), m.getEntry(0, j));"
False,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,970,hrows InvalidMatrixException {
True,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java,970,throws InvalidMatrixException {
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,40,rotected BigDecimal[] bigRow =
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,40,protected BigDecimal[] bigRow =
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,43,rotected Fraction[] fractionRow =
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,43,protected Fraction[] fractionRow =
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,46,rotected BigDecimal[][] bigRowMatrix =
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,46,protected BigDecimal[][] bigRowMatrix =
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,49,rotected Fraction[][] fractionRowMatrix =
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,49,protected Fraction[][] fractionRowMatrix =
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,52,rotected BigDecimal[] bigCol =
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,52,protected BigDecimal[] bigCol =
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,55,rotected Fraction[] fractionCol =
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,55,protected Fraction[] fractionCol =
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,59,rotected BigDecimal[][] bigColMatrix =
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,59,protected BigDecimal[][] bigColMatrix =
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,62,rotected Fraction[][] fractionColMatrix =
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,62,protected Fraction[][] fractionColMatrix =
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,77,"ssertEquals(new BlockRealMatrix(testData),"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,77,"assertEquals(new BlockRealMatrix(testData),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,100,"ssertEquals(new Array2DRowFieldMatrix<Fraction>(asFraction(testData)),"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,100,"assertEquals(new Array2DRowFieldMatrix<Fraction>(asFraction(testData)),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,102,"ssertEquals(new Array2DRowFieldMatrix<Fraction>(fractionColMatrix),"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,102,"assertEquals(new Array2DRowFieldMatrix<Fraction>(fractionColMatrix),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,126,"ssertEquals(new BigMatrixImpl(testData),"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,126,"assertEquals(new BigMatrixImpl(testData),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,128,"ssertEquals(new BigMatrixImpl(BigMatrixImplTest.asBigDecimal(testData), true),"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,128,"assertEquals(new BigMatrixImpl(BigMatrixImplTest.asBigDecimal(testData), true),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,130,"ssertEquals(new BigMatrixImpl(BigMatrixImplTest.asBigDecimal(testData), false),"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,130,"assertEquals(new BigMatrixImpl(BigMatrixImplTest.asBigDecimal(testData), false),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,132,"ssertEquals(new BigMatrixImpl(bigColMatrix),"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,132,"assertEquals(new BigMatrixImpl(bigColMatrix),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,134,"ssertEquals(new BigMatrixImpl(stringColMatrix),"
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,134,"assertEquals(new BigMatrixImpl(stringColMatrix),"
False,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,258,ew BigMatrixImpl(stringColMatrix));
True,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math/linear/MatrixUtilsTest.java,258,new BigMatrixImpl(stringColMatrix));
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,36,ouble[][] testData3x3NonSingular = {
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,37," 12, -51, 4 },"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,36,double[][] testData3x3NonSingular = {
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,37,"{ 12, -51, 4 },"
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,41,ouble[][] testData3x3Singular = {
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,42," 1, 4, 7, },"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,41,double[][] testData3x3Singular = {
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,42,"{ 1, 4, 7, },"
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,46,ouble[][] testData3x4 = {
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,47," 12, -51, 4, 1 },"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,46,double[][] testData3x4 = {
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,47,"{ 12, -51, 4, 1 },"
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,51,ouble[][] testData4x3 = {
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,52," 12, -51, 4, },"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,51,double[][] testData4x3 = {
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,52,"{ 12, -51, 4, },"
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,54," -4, 24, -41, },"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,54,"{ -4, 24, -41, },"
False,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,94,"ssertEquals(columns, qr.getR().getColumnDimension());"
True,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/java/org/apache/commons/math/linear/QRDecompositionImplTest.java,94,"assertEquals(columns, qr.getR().getColumnDimension());"
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,39,ouble[][] testData3x3NonSingular = {
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,40," 12, -51,   4 },"
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,39,double[][] testData3x3NonSingular = {
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,40,"{ 12, -51,   4 },"
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,45,ouble[][] testData3x3Singular = {
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,46," 1, 2,  2 },"
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,45,double[][] testData3x3Singular = {
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,46,"{ 1, 2,  2 },"
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,51,ouble[][] testData3x4 = {
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,52," 12, -51,   4, 1 },"
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,51,double[][] testData3x4 = {
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,52,"{ 12, -51,   4, 1 },"
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,57,ouble[][] testData4x3 = {
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,58," 12, -51,   4 },"
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,57,double[][] testData4x3 = {
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,58,"{ 12, -51,   4 },"
False,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,60," -4,  24, -41 },"
True,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,src/test/java/org/apache/commons/math/linear/QRSolverTest.java,60,"{ -4,  24, -41 },"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,40,"rotected double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d},"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,40,"protected double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d},"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,44,rotected double[][] testDataInv =
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,44,protected double[][] testDataInv =
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,49,rotected double[][] testDataPlusInv =
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,49,protected double[][] testDataPlusInv =
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,70,"2, 4, 6, 8}, {4, 5, 6, 7}};"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,70,"{2, 4, 6, 8}, {4, 5, 6, 7}};"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,173,"2.scalarMultiply(-1d).add(m),entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,173,"m2.scalarMultiply(-1d).add(m),entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,197,"2,entryTolerance);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,197,"m2,entryTolerance);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,212,ublic void testMultiply2() {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,213,ealMatrix m3 = new RealMatrixImpl(d3);
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,212,public void testMultiply2() {
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,213,RealMatrix m3 = new RealMatrixImpl(d3);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,269,ealMatrix m = new RealMatrixImpl(testData);
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,269,RealMatrix m = new RealMatrixImpl(testData);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,295,ealMatrix m3 = new RealMatrixImpl(d3);
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,295,RealMatrix m3 = new RealMatrixImpl(d3);
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,361,ealMatrix pInverse = new LUDecompositionImpl(p).getSolver().getInverse();
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,361,RealMatrix pInverse = new LUDecompositionImpl(p).getSolver().getInverse();
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,372,"ssertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,372,"assertEquals(4 * solution[0] - 3 * solution[1] -5 * solution[2], constants[2], 1E-12);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,381,"heckGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,382,"heckGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,383,"heckGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,384,"heckGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,385,"heckGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,386,"heckGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,387,"heckGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,381,"checkGetSubMatrix(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,382,"checkGetSubMatrix(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,383,"checkGetSubMatrix(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,384,"checkGetSubMatrix(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,385,"checkGetSubMatrix(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,386,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,387,"checkGetSubMatrix(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,432,"heckCopy(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,433,"heckCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,434,"heckCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,435,"heckCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,436,"heckCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,437,"heckCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,438,"heckCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,432,"checkCopy(m, subRows01Cols23,  0 , 1 , 2, 3, false);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,433,"checkCopy(m, subRows02Cols13,  new int[] { 0, 2 }, new int[] { 1, 3 },    false);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,434,"checkCopy(m, subRows03Cols12,  new int[] { 0, 3 }, new int[] { 1, 2 },    false);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,435,"checkCopy(m, subRows03Cols123, new int[] { 0, 3 }, new int[] { 1, 2, 3 }, false);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,436,"checkCopy(m, subRows20Cols123, new int[] { 2, 0 }, new int[] { 1, 2, 3 }, false);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,437,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,438,"checkCopy(m, subRows31Cols31,  new int[] { 3, 1 }, new int[] { 3, 1 },    false);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,490,"ssertEquals(""Row0"", mRow0,"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,490,"assertEquals(""Row0"", mRow0,"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,492,"ssertEquals(""Row3"", mRow3,"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,492,"assertEquals(""Row3"", mRow3,"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,532,"ssertEquals(""Column1"", mColumn1,"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,532,"assertEquals(""Column1"", mColumn1,"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,534,"ssertEquals(""Column3"", mColumn3,"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,534,"assertEquals(""Column3"", mColumn3,"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,746,"ssertEquals(expected[i], actual[i]);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,746,"assertEquals(expected[i], actual[i]);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,760,ssertFalse(m.equals(new RealMatrixImpl(bigSingular)));
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,760,assertFalse(m.equals(new RealMatrixImpl(bigSingular)));
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,777,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,777,"assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,782,"ssertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,784,".setSubMatrix(testDataPlus2,0,0);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,782,"assertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,784,"m.setSubMatrix(testDataPlus2,0,0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,787,"ssertEquals(expected, m);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,787,"assertEquals(expected, m);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,790,ry {
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,790,try {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,797,ry {
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,797,try {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,803,ry {
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,803,try {
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,865,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,865,"assertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,869,"ssertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,869,"assertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,885,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,885,"assertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,889,"ssertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,889,"assertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,905,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,905,"assertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,909,"ssertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,909,"assertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,925,"ssertEquals(0.0, m.getEntry(i, 0), 0);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,925,"assertEquals(0.0, m.getEntry(i, 0), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,929,"ssertEquals(0.0, m.getEntry(0, j), 0);"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,929,"assertEquals(0.0, m.getEntry(0, j), 0);"
False,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,963,"rotected void splitLU(RealMatrix lu, double[][] lowerData, double[][] upperData) throws InvalidMatrixException {"
True,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java,963,"protected void splitLU(RealMatrix lu, double[][] lowerData, double[][] upperData) throws InvalidMatrixException {"
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,49,tring actual = realVectorFormat.format(c);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,49,String actual = realVectorFormat.format(c);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,60,tring actual = realVectorFormat.format(c);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,60,String actual = realVectorFormat.format(c);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,71,tring actual = realVectorFormat.format(c);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,71,String actual = realVectorFormat.format(c);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,82,tring actual = realVectorFormat.format(c);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,82,String actual = realVectorFormat.format(c);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,93,tring actual = realVectorFormat.format(c);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,93,String actual = realVectorFormat.format(c);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,104,tring actual = realVectorFormat.format(c);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,104,String actual = realVectorFormat.format(c);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,111,tring actual = realVectorFormatSquare.format(c);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,111,String actual = realVectorFormatSquare.format(c);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,125,tring actual = RealVectorFormat.formatRealVector(c);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,125,String actual = RealVectorFormat.formatRealVector(c);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,134,tring actual = realVectorFormat.format(c);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,134,String actual = realVectorFormat.format(c);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,143,tring actual = realVectorFormat.format(c);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,143,String actual = realVectorFormat.format(c);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,152,tring actual = realVectorFormat.format(c);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,152,String actual = realVectorFormat.format(c);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,160,rrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,160,ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,187,rrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,187,ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,202,rrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,202,ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,217,rrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,217,ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,232,rrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,232,ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,247,rrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,247,ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,262,rrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,262,ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,277,rrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,277,ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,292,rrayRealVector actual = (ArrayRealVector) realVectorFormatSquare.parseObject(source);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,292,ArrayRealVector actual = (ArrayRealVector) realVectorFormatSquare.parseObject(source);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,302,rrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,302,ArrayRealVector actual = (ArrayRealVector) realVectorFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,312,rrayRealVector actual = (ArrayRealVector)realVectorFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,312,ArrayRealVector actual = (ArrayRealVector)realVectorFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,324,rrayRealVector actual = (ArrayRealVector)realVectorFormat.parseObject(source);
True,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,src/test/java/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java,324,ArrayRealVector actual = (ArrayRealVector)realVectorFormat.parseObject(source);
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,168,"ssertEquals(""sum entry entry"","
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,169,"DataPlusInv.getEntry(row, col).doubleValue(), mPlusMInv.getEntry(row, col).doubleValue(),"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,168,"assertEquals(""sum entry entry"","
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,169,"mDataPlusInv.getEntry(row, col).doubleValue(), mPlusMInv.getEntry(row, col).doubleValue(),"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,257,"ssertClose(""scalar add"", createSparseMatrix(testDataPlus2),"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,257,"assertClose(""scalar add"", createSparseMatrix(testDataPlus2),"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,291,ieldMatrix<Fraction> m = createSparseMatrix(testData);
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,291,FieldMatrix<Fraction> m = createSparseMatrix(testData);
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,383,ieldMatrix<Fraction> pInverse = new FieldLUDecompositionImpl<Fraction>(p).getSolver().getInverse();
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,383,FieldMatrix<Fraction> pInverse = new FieldLUDecompositionImpl<Fraction>(p).getSolver().getInverse();
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,416,"ssertEquals(""Rows02Cols13"", mRows02Cols13,"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,416,"assertEquals(""Rows02Cols13"", mRows02Cols13,"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,418,"ssertEquals(""Rows03Cols12"", mRows03Cols12,"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,418,"assertEquals(""Rows03Cols12"", mRows03Cols12,"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,420,"ssertEquals(""Rows03Cols123"", mRows03Cols123,"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,420,"assertEquals(""Rows03Cols123"", mRows03Cols123,"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,422,"ssertEquals(""Rows20Cols123"", mRows20Cols123,"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,422,"assertEquals(""Rows20Cols123"", mRows20Cols123,"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,424,"ssertEquals(""Rows31Cols31"", mRows31Cols31,"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,424,"assertEquals(""Rows31Cols31"", mRows31Cols31,"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,426,"ssertEquals(""Rows31Cols31"", mRows31Cols31,"
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,426,"assertEquals(""Rows31Cols31"", mRows31Cols31,"
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,571,"ssertEquals(""SparseFieldMatrix<Fraction>{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"","
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,571,"assertEquals(""SparseFieldMatrix<Fraction>{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"","
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,596,parseFieldMatrix<Fraction> matrix =
False,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,597,reateSparseMatrix(new Fraction[][] {
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,596,SparseFieldMatrix<Fraction> matrix =
True,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldMatrixTest.java,597,createSparseMatrix(new Fraction[][] {
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,50,ublic void testMapFunctions() throws FractionConversionException {
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,50,public void testMapFunctions() throws FractionConversionException {
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,111,ublic void testBasicFunctions() throws FractionConversionException {
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,111,public void testBasicFunctions() throws FractionConversionException {
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,115,"parseFieldVector<Fraction> v2_t = new SparseFieldVector<Fraction>(field,vec2);"
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,115,"SparseFieldVector<Fraction> v2_t = new SparseFieldVector<Fraction>(field,vec2);"
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,171,ublic void testMisc() {
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,171,public void testMisc() {
False,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,177,1.checkVectorDimensions(2);
True,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseFieldVectorTest.java,177,v1.checkVectorDimensions(2);
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,149,"ssertEquals(""sum entry entry"","
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,150,"DataPlusInv.getEntry(row, col), mPlusMInv.getEntry(row, col),"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,149,"assertEquals(""sum entry entry"","
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,150,"mDataPlusInv.getEntry(row, col), mPlusMInv.getEntry(row, col),"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,245,"ssertClose(""scalar add"", createSparseMatrix(testDataPlus2),"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,245,"assertClose(""scalar add"", createSparseMatrix(testDataPlus2),"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,279,ealMatrix m = createSparseMatrix(testData);
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,279,RealMatrix m = createSparseMatrix(testData);
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,371,ealMatrix pInverse = new LUDecompositionImpl(p).getSolver().getInverse();
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,371,RealMatrix pInverse = new LUDecompositionImpl(p).getSolver().getInverse();
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,404,"ssertEquals(""Rows02Cols13"", mRows02Cols13,"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,404,"assertEquals(""Rows02Cols13"", mRows02Cols13,"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,406,"ssertEquals(""Rows03Cols12"", mRows03Cols12,"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,406,"assertEquals(""Rows03Cols12"", mRows03Cols12,"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,408,"ssertEquals(""Rows03Cols123"", mRows03Cols123,"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,408,"assertEquals(""Rows03Cols123"", mRows03Cols123,"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,410,"ssertEquals(""Rows20Cols123"", mRows20Cols123,"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,410,"assertEquals(""Rows20Cols123"", mRows20Cols123,"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,412,"ssertEquals(""Rows31Cols31"", mRows31Cols31,"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,412,"assertEquals(""Rows31Cols31"", mRows31Cols31,"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,414,"ssertEquals(""Rows31Cols31"", mRows31Cols31,"
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,414,"assertEquals(""Rows31Cols31"", mRows31Cols31,"
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,558,"ssertEquals(""OpenMapRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"","
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,558,"assertEquals(""OpenMapRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"","
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,582,penMapRealMatrix matrix =
False,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,583,reateSparseMatrix(new double[][] {
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,582,OpenMapRealMatrix matrix =
True,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java,583,createSparseMatrix(new double[][] {
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,48,/ Testclass to test the RealVector interface
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,48,// Testclass to test the RealVector interface
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,524,parseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,524,SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,608,ublic void testMapFunctions() {
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,608,public void testMapFunctions() {
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,809,_mapAsinToSelf.mapAsinToSelf();
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,809,v_mapAsinToSelf.mapAsinToSelf();
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,936,ublic void testBasicFunctions() {
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,936,public void testBasicFunctions() {
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,941,parseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,941,SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,1027,ealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,1027,RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,1061,ublic void testMisc() {
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,1061,public void testMisc() {
False,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,1067,1.checkVectorDimensions(2);
True,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,1067,v1.checkVectorDimensions(2);
False,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,109,"ssertEquals(0, mTm.subtract(id).getNorm(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java,109,"assertEquals(0, mTm.subtract(id).getNorm(), 1.0e-15);"
False,src/test/java/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/java/org/apache/commons/math/ode/TestProblemAbstract.java,99,his.y0   = y0.clone();
True,src/test/java/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/java/org/apache/commons/math/ode/TestProblemAbstract.java,99,this.y0   = y0.clone();
False,src/test/java/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/java/org/apache/commons/math/ode/TestProblemAbstract.java,115,his.errorScale = errorScale.clone();
True,src/test/java/org/apache/commons/math/ode/TestProblemAbstract.java,src/test/java/org/apache/commons/math/ode/TestProblemAbstract.java,115,this.errorScale = errorScale.clone();
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,82,"ail(""wrong exception caught: "" + e.getMessage());"
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,82,"fail(""wrong exception caught: "" + e.getMessage());"
False,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,41," href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
True,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java,41,"* href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
False,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,108,"ssert.assertEquals(valueXpYm, optimum.getValue(),    2.0e-12);"
True,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,108,"Assert.assertEquals(valueXpYm, optimum.getValue(),    2.0e-12);"
False,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,121,"ssertEquals(valueXpYm, optimum.getValue(),    1.0e-11);"
True,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java,121,"assertEquals(valueXpYm, optimum.getValue(),    1.0e-11);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,42," href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,42,"* href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,554,acobian[i][0] = (center.x - pi.x) / di - dRdX;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,555,acobian[i][1] = (center.y - pi.y) / di - dRdY;
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,554,jacobian[i][0] = (center.x - pi.x) / di - dRdX;
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,555,jacobian[i][1] = (center.y - pi.y) / di - dRdY;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,42," href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,42,"* href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,593,acobian[i][0] = (center.x - pi.x) / di - dRdX;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,594,acobian[i][1] = (center.y - pi.y) / di - dRdY;
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,593,jacobian[i][0] = (center.x - pi.x) / di - dRdX;
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,594,jacobian[i][1] = (center.y - pi.y) / di - dRdY;
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,36," href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,36,"* href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,414,"), false);"
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,414,"}), false);"
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1028,"427.0,  3820.0,  3307.0,  2872.0"
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,1028,"4427.0,  3820.0,  3307.0,  2872.0"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,43," href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,43,"* href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,30,ublic void testInitialization() {
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,30,public void testInitialization() {
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,45,ublic void testdiscardArtificialVariables() {
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,45,public void testdiscardArtificialVariables() {
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,65,"onstraints.add(new LinearConstraint(new double[] {1, 1}, Relationship.LEQ, 4));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,65,"constraints.add(new LinearConstraint(new double[] {1, 1}, Relationship.LEQ, 4));"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,34, @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java,34,* @version $Revision$ $Date$
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,58,req.addValue(value);
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,58,freq.addValue(value);
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,69,"estStatistic.chiSquare(expected,observed) < 16.27);"
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,69,"testStatistic.chiSquare(expected,observed) < 16.27);"
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,92,req.addValue(value);
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,92,freq.addValue(value);
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,103,"estStatistic.chiSquare(expected,observed) < 16.27);"
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,103,"testStatistic.chiSquare(expected,observed) < 16.27);"
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,107,ong halfSampleSize = smallSampleSize / 2;
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,107,long halfSampleSize = smallSampleSize / 2;
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,121,"estStatistic.chiSquare(expected,observed) < 10.828);"
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,121,"testStatistic.chiSquare(expected,observed) < 10.828);"
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,139,req.addValue(value);
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,139,freq.addValue(value);
False,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,150,"estStatistic.chiSquare(expected,observed) < 16.27);"
True,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,src/test/java/org/apache/commons/math/random/AbstractRandomGeneratorTest.java,150,"testStatistic.chiSquare(expected,observed) < 16.27);"
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,45,rotected URL url = null;
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,45,protected URL url = null;
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,58,ufferedReader in =
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,58,BufferedReader in =
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,84, Test EmpiricalDistrbution.load() using sample data file.<br>
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,85," Check that the sampleCount, mu and sigma match data in"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,84,* Test EmpiricalDistrbution.load() using sample data file.<br>
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,85,"* Check that the sampleCount, mu and sigma match data in"
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,89,mpiricalDistribution.load(url);
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,89,empiricalDistribution.load(url);
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,104, sample data file.<br>
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,105," Check that the sampleCount, mu and sigma match data in"
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,104,* sample data file.<br>
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,105,"* Check that the sampleCount, mu and sigma match data in"
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,109,mpiricalDistribution2.load(dataArray);
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,109,empiricalDistribution2.load(dataArray);
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,158,stGen(0.1);
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,159,mpiricalDistribution2 = new EmpiricalDistributionImpl(1001);
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,158,tstGen(0.1);
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,159,empiricalDistribution2 = new EmpiricalDistributionImpl(1001);
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,170,mpiricalDistribution2 = new EmpiricalDistributionImpl(1);
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,171,stDoubleGen(5);
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,170,empiricalDistribution2 = new EmpiricalDistributionImpl(1);
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,171,tstDoubleGen(5);
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,189,mpiricalDistribution2.load(dataArray);
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,189,empiricalDistribution2.load(dataArray);
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,243,mpiricalDistribution.load(url);
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,243,empiricalDistribution.load(url);
False,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,254,mpiricalDistribution2.load(dataArray);
True,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java,254,empiricalDistribution2.load(dataArray);
False,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,279,"089077232l, 2225147448l, 1249609188l, 2643151863l, 3896204135l, 2416995901l, 1397735321l, 3460025646l"
True,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java,279,"4089077232l, 2225147448l, 1249609188l, 2643151863l, 3896204135l, 2416995901l, 1397735321l, 3460025646l"
False,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,45,heckConstant(randomAdaptor);
True,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,45,checkConstant(randomAdaptor);
False,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,51,"ssertEquals(0, bytes[0]);"
True,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,src/test/java/org/apache/commons/math/random/RandomAdaptorTest.java,51,"assertEquals(0, bytes[0]);"
False,src/test/java/org/apache/commons/math/random/TestRandomGenerator.java,src/test/java/org/apache/commons/math/random/TestRandomGenerator.java,21, Dummy AbstractRandomGenerator concrete subclass that just wraps a
True,src/test/java/org/apache/commons/math/random/TestRandomGenerator.java,src/test/java/org/apache/commons/math/random/TestRandomGenerator.java,21,* Dummy AbstractRandomGenerator concrete subclass that just wraps a
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,47,s.setValuesFileURL(url);
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,47,vs.setValuesFileURL(url);
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,69,"ssertTrue(""empirical distribution property"","
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,69,"assertTrue(""empirical distribution property"","
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,78,"""std dev"", 1.0173699343977738, stats.getStandardDeviation(),"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,78,"(""std dev"", 1.0173699343977738, stats.getStandardDeviation(),"
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,89,"""std dev"", 1.0173699343977738, stats.getStandardDeviation(),"
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,89,"(""std dev"", 1.0173699343977738, stats.getStandardDeviation(),"
False,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,134, Test ValueServer REPLAY_MODE using values in testData file.<br>
True,src/test/java/org/apache/commons/math/random/ValueServerTest.java,src/test/java/org/apache/commons/math/random/ValueServerTest.java,134,* Test ValueServer REPLAY_MODE using values in testData file.<br>
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,64,"ssertEquals(""PiDigits: mean"", mean, u.getMean(), 1E-13);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,64,"assertEquals(""PiDigits: mean"", mean, u.getMean(), 1E-13);"
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,72,"ssertEquals(""Michelso: mean"", mean, u.getMean(), 1E-13);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,72,"assertEquals(""Michelso: mean"", mean, u.getMean(), 1E-13);"
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,97,"ssertEquals(""Mavro: mean"", mean, u.getMean(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,97,"assertEquals(""Mavro: mean"", mean, u.getMean(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,101,"ssertEquals(""Michelso: mean"", mean, u.getMean(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java,101,"assertEquals(""Michelso: mean"", mean, u.getMean(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,51,ublic void setUp() {
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,51,public void setUp() {
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,105,"ssertEquals(""10 cum pct"", 1, f.getCumPct(10), tolerance);"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,105,"assertEquals(""10 cum pct"", 1, f.getCumPct(10), tolerance);"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,166,.addValue(aString);
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,166,f.addValue(aString);
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,185,".addValue(new Integer(""One""));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,185,"f.addValue(new Integer(""One""));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,219,"ssertTrue(""cum pct, empty table"", Double.isNaN(f.getCumPct(Integer.valueOf(0))));"
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,219,"assertTrue(""cum pct, empty table"", Double.isNaN(f.getCumPct(Integer.valueOf(0))));"
False,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,223, Tests toString()
True,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,src/test/java/org/apache/commons/math/stat/FrequencyTest.java,223,* Tests toString()
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,393,"ssertEquals(StatUtils.varianceDifference(sample1, sample2, meanDifference),"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,393,"assertEquals(StatUtils.varianceDifference(sample1, sample2, meanDifference),"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,425,"ssertEquals(Math.exp(0.25d * StatUtils.sumLog(test)),"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,425,"assertEquals(Math.exp(0.25d * StatUtils.sumLog(test)),"
False,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,427,"ssertEquals(Math.exp(0.5 * StatUtils.sumLog(test, 0, 2)),"
True,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,src/test/java/org/apache/commons/math/stat/StatUtilsTest.java,427,"assertEquals(Math.exp(0.5 * StatUtils.sumLog(test, 0, 2)),"
False,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,108,ublic void testLongly() {
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,108,public void testLongly() {
False,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,197,"ssertEquals(covarianceMatrix.getEntry(2, 3),"
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,197,"assertEquals(covarianceMatrix.getEntry(2, 3),"
False,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,216,"estUtils.assertEquals(""Covariances"","
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,216,"TestUtils.assertEquals(""Covariances"","
False,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,218,"estUtils.assertEquals(""Covariances"","
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,218,"TestUtils.assertEquals(""Covariances"","
False,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,223,"ssertEquals(new Covariance().covariance(x, y),"
False,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,224,"ew Covariance().covariance(x, y, true), Double.MIN_VALUE);"
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,223,"assertEquals(new Covariance().covariance(x, y),"
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,224,"new Covariance().covariance(x, y, true), Double.MIN_VALUE);"
False,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,234,eturn new Array2DRowRealMatrix(matrixData);
True,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,src/test/java/org/apache/commons/math/stat/correlation/CovarianceTest.java,234,return new Array2DRowRealMatrix(matrixData);
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,102,ublic void testLongly() throws Exception {
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,102,public void testLongly() throws Exception {
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,104,earsonsCorrelation corrInstance = new PearsonsCorrelation(matrix);
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,104,PearsonsCorrelation corrInstance = new PearsonsCorrelation(matrix);
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,127,".0472894097790304, 0.01030636128354301, 0.01316878049026582,"
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,127,"0.0472894097790304, 0.01030636128354301, 0.01316878049026582,"
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,129,".693245043123738e-09, 4.327782576751815e-11, 1.167954621905665e-13, 0.00331028281967516, 0.1652293725106684,"
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,129,"3.693245043123738e-09, 4.327782576751815e-11, 1.167954621905665e-13, 0.00331028281967516, 0.1652293725106684,"
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,142,earsonsCorrelation corrInstance = new PearsonsCorrelation(matrix);
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,142,PearsonsCorrelation corrInstance = new PearsonsCorrelation(matrix);
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,203,earsonsCorrelation corrInstance = new PearsonsCorrelation(matrix);
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,203,PearsonsCorrelation corrInstance = new PearsonsCorrelation(matrix);
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,222,earsonsCorrelation corrInstance = new PearsonsCorrelation(matrix);
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,222,PearsonsCorrelation corrInstance = new PearsonsCorrelation(matrix);
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,232,earsonsCorrelation corrFromCovInstance2 =
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,232,PearsonsCorrelation corrFromCovInstance2 =
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,245,earsonsCorrelation corrInstance = new PearsonsCorrelation(matrix);
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,245,PearsonsCorrelation corrInstance = new PearsonsCorrelation(matrix);
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,249,"ssertEquals(new PearsonsCorrelation().correlation(x, y),"
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,249,"assertEquals(new PearsonsCorrelation().correlation(x, y),"
False,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,262,eturn new BlockRealMatrix(matrixData);
True,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,262,return new BlockRealMatrix(matrixData);
False,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,45,ublic void testLongly() throws Exception {
True,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,45,public void testLongly() throws Exception {
False,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,47,pearmansCorrelation corrInstance = new SpearmansCorrelation(matrix);
True,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,47,SpearmansCorrelation corrInstance = new SpearmansCorrelation(matrix);
False,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,65,ublic void testSwiss() throws Exception {
True,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,65,public void testSwiss() throws Exception {
False,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,67,pearmansCorrelation corrInstance = new SpearmansCorrelation(matrix);
True,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,67,SpearmansCorrelation corrInstance = new SpearmansCorrelation(matrix);
False,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,114,pearmansCorrelation corrInstance = new SpearmansCorrelation(matrix);
True,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,114,SpearmansCorrelation corrInstance = new SpearmansCorrelation(matrix);
False,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,118,"ssertEquals(new SpearmansCorrelation().correlation(x, y),"
True,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/java/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,118,"assertEquals(new SpearmansCorrelation().correlation(x, y),"
False,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,65,* this call to StringUtils did little for the
False,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,66, following conditional structure
True,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,65,/* this call to StringUtils did little for the
True,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,66,* following conditional structure
False,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,137,"tring prop = ""get"" + name.substring(0,1).toUpperCase() + name.substring(1);"
True,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,src/test/java/org/apache/commons/math/stat/data/CertifiedDataAbstractTest.java,137,"String prop = ""get"" + name.substring(0,1).toUpperCase() + name.substring(1);"
False,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,26, Tests for AbstractUnivariateStatistic
True,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatisticTest.java,26,* Tests for AbstractUnivariateStatistic
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,88,     for each partition
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,88,*     for each partition
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,90,     returned by a single SummaryStatistics instance that is provided
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,90,*     returned by a single SummaryStatistics instance that is provided
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,127, as <totalStats>.
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,127,* as <totalStats>.
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,130,"ssertEquals(totalStats.getSummary(), aggregate.getSummary());"
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,130,"assertEquals(totalStats.getSummary(), aggregate.getSummary());"
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,163,or (int j = 0; j < subSamples[i].length; j++) {
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,163,for (int j = 0; j < subSamples[i].length; j++) {
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,192,or (int j = 0; j < subSamples[i].length; j++) {
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,192,for (int j = 0; j < subSamples[i].length; j++) {
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,220,or (int j = 0; j < subSamples[i].length; j++) {
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,220,for (int j = 0; j < subSamples[i].length; j++) {
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,250," Sample size is random, between 10 and 100 and values are"
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,250,"* Sample size is random, between 10 and 100 and values are"
False,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,262,eturn out;
True,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatisticsTest.java,262,return out;
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,182,tats.setPercentileImpl(new badPercentile());
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,182,stats.setPercentileImpl(new badPercentile());
False,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,232, A new way to compute the mean
True,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,232,* A new way to compute the mean
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,146, Adds an object to this list.
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,146,* Adds an object to this list.
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,198,/Discard elements from the front of the list if the windowSize is less than
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java,198,//Discard elements from the front of the list if the windowSize is less than
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,64,escriptiveStatistics u = new ListUnivariateImpl( externalList );
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,64,DescriptiveStatistics u = new ListUnivariateImpl( externalList );
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,80,"ssertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,80,"assertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,96,"ssertTrue( ""Variance of n = 1 set should be zero"", u.getVariance() == 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,96,"assertTrue( ""Variance of n = 1 set should be zero"", u.getVariance() == 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,146,escriptiveStatistics u2 = (DescriptiveStatistics)TestUtils.serializeAndRecover(u);
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,146,DescriptiveStatistics u2 = (DescriptiveStatistics)TestUtils.serializeAndRecover(u);
False,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,161,"ssertEquals(""total count"",0,u2.getN(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java,161,"assertEquals(""total count"",0,u2.getN(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,147,tatic class sumMean implements StorelessUnivariateStatistic {
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,147,static class sumMean implements StorelessUnivariateStatistic {
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,157,um = 0;
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,157,sum = 0;
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,219,"ssertEquals(0, u.getN());"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,219,"assertEquals(0, u.getN());"
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,233,* n=2 */
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,233,/* n=2 */
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,241,ssertTrue(Double.isNaN(u.getMean()[0]));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,242,ssertTrue(Double.isNaN(u.getMin()[0]));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,243,ssertTrue(Double.isNaN(u.getStandardDeviation()[0]));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,241,assertTrue(Double.isNaN(u.getMean()[0]));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,242,assertTrue(Double.isNaN(u.getMin()[0]));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,243,assertTrue(Double.isNaN(u.getStandardDeviation()[0]));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,247,ssertFalse(Double.isNaN(u.getMean()[0]));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,248,ssertFalse(Double.isNaN(u.getMin()[0]));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,249,ssertFalse(Double.isNaN(u.getStandardDeviation()[0]));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,247,assertFalse(Double.isNaN(u.getMean()[0]));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,248,assertFalse(Double.isNaN(u.getMin()[0]));
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,249,assertFalse(Double.isNaN(u.getStandardDeviation()[0]));
False,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,305,"ssertEquals(u.hashCode(), t.hashCode());"
True,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,305,"assertEquals(u.hashCode(), t.hashCode());"
False,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,46,estUtils.checkSerializedEquality(u);
True,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,46,TestUtils.checkSerializedEquality(u);
False,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,63,"ssertFalse(""instances based on different data should be different"","
True,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,63,"assertFalse(""instances based on different data should be different"","
False,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,74,"estUtils.assertEquals(""max"",s.getMax(),u.getMax(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValuesTest.java,74,"TestUtils.assertEquals(""max"",s.getMax(),u.getMax(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,45,  Verifies that increment() and incrementAll work properly.
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,45,*  Verifies that increment() and incrementAll work properly.
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,87,tatistic = (StorelessUnivariateStatistic)TestUtils.serializeAndRecover(statistic);
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,87,statistic = (StorelessUnivariateStatistic)TestUtils.serializeAndRecover(statistic);
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,111,"ssertEquals(""empty stats should have the same hashcode"","
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,111,"assertEquals(""empty stats should have the same hashcode"","
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,123,"ssertEquals(""stats with same data should have the same hashcode"","
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,123,"assertEquals(""stats with same data should have the same hashcode"","
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,133,"ssertEquals(""stats with same data should have the same hashcode"","
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,134,"tatistic.hashCode(), statistic2.hashCode());"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,133,"assertEquals(""stats with same data should have the same hashcode"","
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,134,"statistic.hashCode(), statistic2.hashCode());"
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,139,"ssertEquals(""cleared stats should have thashcode of empty stat"","
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,139,"assertEquals(""cleared stats should have thashcode of empty stat"","
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,141,"ssertEquals(""cleared stats should have thashcode of empty stat"","
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,141,"assertEquals(""cleared stats should have thashcode of empty stat"","
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,157," Make sure that evaluate(double[]) and inrementAll(double[]),"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,157,"* Make sure that evaluate(double[]) and inrementAll(double[]),"
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,197,"aster.incrementAll(testArray,"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,197,"master.incrementAll(testArray,"
False,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,199,"eplica.incrementAll(testArray,"
True,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,199,"replica.incrementAll(testArray,"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,80,"ssertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,80,"assertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,85,"ssertTrue(""Mean of n = 0 set should be NaN"","
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,85,"assertTrue(""Mean of n = 0 set should be NaN"","
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,87,"ssertTrue(""Standard Deviation of n = 0 set should be NaN"","
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,87,"assertTrue(""Standard Deviation of n = 0 set should be NaN"","
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,89,"ssertTrue(""Variance of n = 0 set should be NaN"","
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,89,"assertTrue(""Variance of n = 0 set should be NaN"","
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,94,"ssertTrue(""mean should be one (n = 1)"","
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,94,"assertTrue(""mean should be one (n = 1)"","
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,96,"ssertTrue(""geometric should be one (n = 1) instead it is "" + u.getGeometricMean(),"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,96,"assertTrue(""geometric should be one (n = 1) instead it is "" + u.getGeometricMean(),"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,98,"ssertTrue(""Std should be zero (n = 1)"","
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,98,"assertTrue(""Std should be zero (n = 1)"","
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,100,"ssertTrue(""variance should be zero (n = 1)"","
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,100,"assertTrue(""variance should be zero (n = 1)"","
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,103,* n=2 */
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,103,/* n=2 */
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,105,"ssertTrue(""Std should not be zero (n = 2)"","
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,105,"assertTrue(""Std should not be zero (n = 2)"","
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,107,"ssertTrue(""variance should not be zero (n = 2)"","
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,107,"assertTrue(""variance should not be zero (n = 2)"","
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,119,"ssertEquals( ""Geometric mean not expected"", 2.213364,"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,119,"assertEquals( ""Geometric mean not expected"", 2.213364,"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,125,"ssertTrue(""mean not NaN"",Double.isNaN(u.getMean()));"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,126,"ssertTrue(""min not NaN"",Double.isNaN(u.getMin()));"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,127,"ssertTrue(""std dev not NaN"",Double.isNaN(u.getStandardDeviation()));"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,128,"ssertTrue(""var not NaN"",Double.isNaN(u.getVariance()));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,125,"assertTrue(""mean not NaN"",Double.isNaN(u.getMean()));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,126,"assertTrue(""min not NaN"",Double.isNaN(u.getMin()));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,127,"assertTrue(""std dev not NaN"",Double.isNaN(u.getStandardDeviation()));"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,128,"assertTrue(""var not NaN"",Double.isNaN(u.getVariance()));"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,133,"ssertEquals( ""mean not expected"", 1.0,"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,133,"assertEquals( ""mean not expected"", 1.0,"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,135,"ssertEquals( ""variance not expected"", 0.0,"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,135,"assertEquals( ""variance not expected"", 0.0,"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,137,"ssertEquals( ""geometric mean not expected"", 1.0,"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,137,"assertEquals( ""geometric mean not expected"", 1.0,"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,163,"erifySummary(u, summary);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,163,"verifySummary(u, summary);"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,208,"ssertTrue(""different n's should make hashcodes different"","
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,208,"assertTrue(""different n's should make hashcodes different"","
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,218,"ssertEquals(""summaries based on same data should have same hashcodes"","
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,219,".hashCode(), t.hashCode());"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,218,"assertEquals(""summaries based on same data should have same hashcodes"","
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,219,"u.hashCode(), t.hashCode());"
False,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,276,"estUtils.assertEquals(""max"",s.getMax(),u.getMax(),tolerance);"
True,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,276,"TestUtils.assertEquals(""max"",s.getMax(),u.getMax(),tolerance);"
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,59,rotected double weightedVar =   9.974760968886391d;
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,59,protected double weightedVar =   9.974760968886391d;
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,141,inal double sigma = 5;    // std dev of test data
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,141,final double sigma = 5;    // std dev of test data
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,144,andomData randomData = new RandomDataImpl();
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,144,RandomData randomData = new RandomDataImpl();
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,177,"tatistic.evaluate(repeatedValues), weightedResult, 10E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,177,"statistic.evaluate(repeatedValues), weightedResult, 10E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,76,ssertFalse(Double.isNaN(kurt.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/KurtosisTest.java,76,assertFalse(Double.isNaN(kurt.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,75,ssertFalse(Double.isNaN(skew.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/SkewnessTest.java,75,assertFalse(Double.isNaN(skew.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,88,"ssertEquals(sigma, s1.getResult(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,88,"assertEquals(sigma, s1.getResult(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,92,"ssertEquals(sigma, s1.getResult(), 1E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,92,"assertEquals(sigma, s1.getResult(), 1E-14);"
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,102,um += (v[i] - mean) * (v[i] - mean);
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java,102,sum += (v[i] - mean) * (v[i] - mean);
False,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,114,"ssertEquals(expectedWeightedValue(),"
True,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,src/test/java/org/apache/commons/math/stat/descriptive/moment/VarianceTest.java,114,"assertEquals(expectedWeightedValue(),"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,63,"ouble[] testArray = {0d, Double.NaN, Double.NEGATIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,63,"double[] testArray = {0d, Double.NaN, Double.NEGATIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,75,"ssertEquals(Double.POSITIVE_INFINITY, max.evaluate(testArray), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,75,"assertEquals(Double.POSITIVE_INFINITY, max.evaluate(testArray), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,81,"ssertEquals(3d, max.evaluate(new double[]{nan, 2d, 3d}), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,82,"ssertEquals(3d, max.evaluate(new double[]{1d, nan, 3d}), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,83,"ssertEquals(2d, max.evaluate(new double[]{1d, 2d, nan}), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,84,"ssertTrue(Double.isNaN(max.evaluate(new double[]{nan, nan, nan})));"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,81,"assertEquals(3d, max.evaluate(new double[]{nan, 2d, 3d}), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,82,"assertEquals(3d, max.evaluate(new double[]{1d, nan, 3d}), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,83,"assertEquals(2d, max.evaluate(new double[]{1d, 2d, nan}), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MaxTest.java,84,"assertTrue(Double.isNaN(max.evaluate(new double[]{nan, nan, nan})));"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MedianTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MedianTest.java,50,ublic UnivariateStatistic getUnivariateStatistic() {
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MedianTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MedianTest.java,50,public UnivariateStatistic getUnivariateStatistic() {
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,63,"ouble[] testArray = {0d, Double.NaN, Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,63,"double[] testArray = {0d, Double.NaN, Double.POSITIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,75,"ssertEquals(Double.NEGATIVE_INFINITY, min.evaluate(testArray), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,75,"assertEquals(Double.NEGATIVE_INFINITY, min.evaluate(testArray), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,81,"ssertEquals(2d, min.evaluate(new double[]{nan, 2d, 3d}), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,82,"ssertEquals(1d, min.evaluate(new double[]{1d, nan, 3d}), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,83,"ssertEquals(1d, min.evaluate(new double[]{1d, 2d, nan}), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,84,"ssertTrue(Double.isNaN(min.evaluate(new double[]{nan, nan, nan})));"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,81,"assertEquals(2d, min.evaluate(new double[]{nan, 2d, 3d}), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,82,"assertEquals(1d, min.evaluate(new double[]{1d, nan, 3d}), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,83,"assertEquals(1d, min.evaluate(new double[]{1d, 2d, nan}), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/MinTest.java,84,"assertTrue(Double.isNaN(min.evaluate(new double[]{nan, nan, nan})));"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,50,ublic UnivariateStatistic getUnivariateStatistic() {
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,50,public UnivariateStatistic getUnivariateStatistic() {
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,95,"ouble[] d = new double[] {95.1772, 95.1567, 95.1937, 95.1959,"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,95,"double[] d = new double[] {95.1772, 95.1567, 95.1937, 95.1959,"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,98,ercentile p = new Percentile(90);
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,98,Percentile p = new Percentile(90);
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,118,ssertTrue(Double.isNaN(percentile.evaluate(emptyArray)));
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,118,assertTrue(Double.isNaN(percentile.evaluate(emptyArray)));
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,127,"ssertEquals(1d, percentile.evaluate(singletonArray, 0, 1, 100), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,128,"ssertTrue(Double.isNaN(percentile.evaluate(singletonArray, 0, 0)));"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,127,"assertEquals(1d, percentile.evaluate(singletonArray, 0, 1, 100), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,128,"assertTrue(Double.isNaN(percentile.evaluate(singletonArray, 0, 0)));"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,138,"pecialValues = new double[] {1d, 1d, Double.POSITIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,138,"specialValues = new double[] {1d, 1d, Double.POSITIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,141,"pecialValues = new double[] {1d, 1d, Double.NaN,"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,141,"specialValues = new double[] {1d, 1d, Double.NaN,"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,144,"pecialValues = new double[] {1d, 1d, Double.NEGATIVE_INFINITY,"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,144,"specialValues = new double[] {1d, 1d, Double.NEGATIVE_INFINITY,"
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,147,ssertTrue(Double.isNaN(percentile.evaluate(specialValues)));
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,147,assertTrue(Double.isNaN(percentile.evaluate(specialValues)));
False,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,153,"ssertEquals(100, percentile.getQuantile(), 0);"
True,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,src/test/java/org/apache/commons/math/stat/descriptive/rank/PercentileTest.java,153,"assertEquals(100, percentile.getQuantile(), 0);"
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,50,ublic UnivariateStatistic getUnivariateStatistic() {
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumLogTest.java,50,public UnivariateStatistic getUnivariateStatistic() {
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,73,ssertTrue(Double.isNaN(sumSq.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,73,assertTrue(Double.isNaN(sumSq.getResult()));
False,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,75,ssertTrue(Double.isNaN(sumSq.getResult()));
True,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,src/test/java/org/apache/commons/math/stat/descriptive/summary/SumSqTest.java,75,assertTrue(Double.isNaN(sumSq.getResult()));
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,45,/ Target values computed using R version 1.8.1
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,46,/ Some assembly required ;-)
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,45,// Target values computed using R version 1.8.1
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,46,// Some assembly required ;-)
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,111,/ Target values computed using R version 1.8.1
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,111,// Target values computed using R version 1.8.1
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,117,"ssertTrue(""chi-square test accept"", !testStatistic.chiSquareTest(counts, 0.0001));"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,117,"assertTrue(""chi-square test accept"", !testStatistic.chiSquareTest(counts, 0.0001));"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,122,"ssertTrue(""chi-square test accept"", !testStatistic.chiSquareTest(counts2, 0.1));"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,122,"assertTrue(""chi-square test accept"", !testStatistic.chiSquareTest(counts2, 0.1));"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,169,"389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0,"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,169,"3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0,"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,177,ew org.apache.commons.math.stat.inference.ChiSquareTestImpl();
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,178,"ouble cst = csti.chiSquareTest(exp, obs);"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,177,new org.apache.commons.math.stat.inference.ChiSquareTestImpl();
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,178,"double cst = csti.chiSquareTest(exp, obs);"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,180,"ssertEquals( ""chi-square test statistic"","
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,180,"assertEquals( ""chi-square test statistic"","
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,186,/ Target values computed using R version 1.8.1
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,186,// Target values computed using R version 1.8.1
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,191,"estStatistic.chiSquareTest(counts), 1E-9);"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,191,"testStatistic.chiSquareTest(counts), 1E-9);"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,198,"ong[] observed2 = {5, 15, 14, 10};"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,199,"ssertEquals(""chi-square p value"", 0.541096,"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,198,"long[] observed2 = {5, 15, 14, 10};"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,199,"assertEquals(""chi-square p value"", 0.541096,"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,205,"ssertFalse(""chi-square test result"","
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,205,"assertFalse(""chi-square test result"","
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,214,"ong[] observed2 = {15, 10, 10, 15, 5};"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,215,"ssertEquals(""chi-square p value"", 0.124115,"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,214,"long[] observed2 = {15, 10, 10, 15, 5};"
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,215,"assertEquals(""chi-square p value"", 0.124115,"
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,221,"ssertTrue(""chi-square test result"","
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,221,"assertTrue(""chi-square test result"","
False,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,224,"ssertFalse(""chi-square test result"","
True,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,224,"assertFalse(""chi-square test result"","
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,36,rivate SummaryStatistics emptyStats = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,37,ummaryStatistics tooShortStats = null;
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,36,private SummaryStatistics emptyStats = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,37,SummaryStatistics tooShortStats = null;
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,133,ummaryStatistics oneSidedPStats = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,133,SummaryStatistics oneSidedPStats = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,138,"ssertEquals(""one sample t stat"", 3.86485535541,"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,138,"assertEquals(""one sample t stat"", 3.86485535541,"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,140,"ssertEquals(""one sample t stat"", 3.86485535541,"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,140,"assertEquals(""one sample t stat"", 3.86485535541,"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,170,ummaryStatistics sampleStats1 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,170,SummaryStatistics sampleStats1 = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,174,ummaryStatistics sampleStats2 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,174,SummaryStatistics sampleStats2 = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,180,"ssertEquals(""two sample heteroscedastic t stat"", 1.60371728768,"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,180,"assertEquals(""two sample heteroscedastic t stat"", 1.60371728768,"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,182,"ssertEquals(""two sample heteroscedastic t stat"", 1.60371728768,"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,182,"assertEquals(""two sample heteroscedastic t stat"", 1.60371728768,"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,184,"ssertEquals(""two sample heteroscedastic p value"", 0.128839369622,"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,184,"assertEquals(""two sample heteroscedastic p value"", 0.128839369622,"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,186,"ssertEquals(""two sample heteroscedastic p value"", 0.128839369622,"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,187,"estStatistic.tTest(sampleStats1, sampleStats2), 1E-10);"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,188,"ssertTrue(""two sample heteroscedastic t-test reject"","
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,186,"assertEquals(""two sample heteroscedastic p value"", 0.128839369622,"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,187,"testStatistic.tTest(sampleStats1, sampleStats2), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,188,"assertTrue(""two sample heteroscedastic t-test reject"","
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,190,"ssertTrue(""two sample heteroscedastic t-test reject"","
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,190,"assertTrue(""two sample heteroscedastic t-test reject"","
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,192,"ssertTrue(""two sample heteroscedastic t-test accept"","
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,192,"assertTrue(""two sample heteroscedastic t-test accept"","
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,194,"ssertTrue(""two sample heteroscedastic t-test accept"","
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,194,"assertTrue(""two sample heteroscedastic t-test accept"","
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,208,/ expected
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,208,// expected
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,256,ummaryStatistics sampleStats1 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,256,SummaryStatistics sampleStats1 = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,260,ummaryStatistics sampleStats2 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,260,SummaryStatistics sampleStats2 = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,266,"ssertEquals(""two sample homoscedastic t stat"", 0.73096310086,"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,266,"assertEquals(""two sample homoscedastic t stat"", 0.73096310086,"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,268,"ssertEquals(""two sample homoscedastic p value"", 0.4833963785,"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,269,"estStatistic.homoscedasticTTest(sampleStats1, sampleStats2), 1E-10);"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,270,"ssertTrue(""two sample homoscedastic t-test reject"","
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,268,"assertEquals(""two sample homoscedastic p value"", 0.4833963785,"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,269,"testStatistic.homoscedasticTTest(sampleStats1, sampleStats2), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,270,"assertTrue(""two sample homoscedastic t-test reject"","
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,272,"ssertTrue(""two sample homoscedastic t-test accept"","
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,272,"assertTrue(""two sample homoscedastic t-test accept"","
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,278,"ouble[] sample2 = {4d, 5d};"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,278,"double[] sample2 = {4d, 5d};"
False,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,297,"ssertTrue(testStatistic.pairedTTest(sample1, sample3, .002));"
True,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,src/test/java/org/apache/commons/math/stat/inference/TTestTest.java,297,"assertTrue(testStatistic.pairedTTest(sample1, sample3, .002));"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,46,/ Target values computed using R version 1.8.1
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,47,/ Some assembly required ;-)
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,46,// Target values computed using R version 1.8.1
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,47,// Some assembly required ;-)
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,112,/ Target values computed using R version 1.8.1
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,112,// Target values computed using R version 1.8.1
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,118,"ssertTrue(""chi-square test accept"", !TestUtils.chiSquareTest(counts, 0.0001));"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,118,"assertTrue(""chi-square test accept"", !TestUtils.chiSquareTest(counts, 0.0001));"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,123,"ssertTrue(""chi-square test accept"", !TestUtils.chiSquareTest(counts2, 0.1));"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,123,"assertTrue(""chi-square test accept"", !TestUtils.chiSquareTest(counts2, 0.1));"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,170,"389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,170,"3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,178,ew org.apache.commons.math.stat.inference.ChiSquareTestImpl();
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,179,"ouble cst = csti.chiSquareTest(exp, obs);"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,178,new org.apache.commons.math.stat.inference.ChiSquareTestImpl();
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,179,"double cst = csti.chiSquareTest(exp, obs);"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,181,"ssertEquals( ""chi-square test statistic"","
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,181,"assertEquals( ""chi-square test statistic"","
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,187,/ Target values computed using R version 1.8.1
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,187,// Target values computed using R version 1.8.1
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,192,"estUtils.chiSquareTest(counts), 1E-9);"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,192,"TestUtils.chiSquareTest(counts), 1E-9);"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,197,rivate SummaryStatistics emptyStats = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,197,private SummaryStatistics emptyStats = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,277,ummaryStatistics oneSidedPStats = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,277,SummaryStatistics oneSidedPStats = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,282,"ssertEquals(""one sample t stat"", 3.86485535541,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,282,"assertEquals(""one sample t stat"", 3.86485535541,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,284,"ssertEquals(""one sample t stat"", 3.86485535541,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,284,"assertEquals(""one sample t stat"", 3.86485535541,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,314,ummaryStatistics sampleStats1 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,314,SummaryStatistics sampleStats1 = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,318,ummaryStatistics sampleStats2 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,318,SummaryStatistics sampleStats2 = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,324,"ssertEquals(""two sample heteroscedastic t stat"", 1.60371728768,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,324,"assertEquals(""two sample heteroscedastic t stat"", 1.60371728768,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,326,"ssertEquals(""two sample heteroscedastic t stat"", 1.60371728768,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,326,"assertEquals(""two sample heteroscedastic t stat"", 1.60371728768,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,328,"ssertEquals(""two sample heteroscedastic p value"", 0.128839369622,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,328,"assertEquals(""two sample heteroscedastic p value"", 0.128839369622,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,330,"ssertEquals(""two sample heteroscedastic p value"", 0.128839369622,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,331,"estUtils.tTest(sampleStats1, sampleStats2), 1E-10);"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,332,"ssertTrue(""two sample heteroscedastic t-test reject"","
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,330,"assertEquals(""two sample heteroscedastic p value"", 0.128839369622,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,331,"TestUtils.tTest(sampleStats1, sampleStats2), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,332,"assertTrue(""two sample heteroscedastic t-test reject"","
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,334,"ssertTrue(""two sample heteroscedastic t-test reject"","
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,334,"assertTrue(""two sample heteroscedastic t-test reject"","
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,336,"ssertTrue(""two sample heteroscedastic t-test accept"","
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,336,"assertTrue(""two sample heteroscedastic t-test accept"","
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,338,"ssertTrue(""two sample heteroscedastic t-test accept"","
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,338,"assertTrue(""two sample heteroscedastic t-test accept"","
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,352,/ expected
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,352,// expected
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,400,ummaryStatistics sampleStats1 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,400,SummaryStatistics sampleStats1 = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,404,ummaryStatistics sampleStats2 = new SummaryStatistics();
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,404,SummaryStatistics sampleStats2 = new SummaryStatistics();
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,410,"ssertEquals(""two sample homoscedastic t stat"", 0.73096310086,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,410,"assertEquals(""two sample homoscedastic t stat"", 0.73096310086,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,412,"ssertEquals(""two sample homoscedastic p value"", 0.4833963785,"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,413,"estUtils.homoscedasticTTest(sampleStats1, sampleStats2), 1E-10);"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,414,"ssertTrue(""two sample homoscedastic t-test reject"","
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,412,"assertEquals(""two sample homoscedastic p value"", 0.4833963785,"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,413,"TestUtils.homoscedasticTTest(sampleStats1, sampleStats2), 1E-10);"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,414,"assertTrue(""two sample homoscedastic t-test reject"","
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,416,"ssertTrue(""two sample homoscedastic t-test accept"","
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,416,"assertTrue(""two sample homoscedastic t-test accept"","
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,422,"ouble[] sample2 = {4d, 5d};"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,422,"double[] sample2 = {4d, 5d};"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,441,"ssertTrue(TestUtils.pairedTTest(sample1, sample3, .002));"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,441,"assertTrue(TestUtils.pairedTTest(sample1, sample3, .002));"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,458,"ssertEquals(oneWayAnova.anovaFValue(classes),"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,458,"assertEquals(oneWayAnova.anovaFValue(classes),"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,460,"ssertEquals(oneWayAnova.anovaPValue(classes),"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,460,"assertEquals(oneWayAnova.anovaPValue(classes),"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,462,"ssertEquals(oneWayAnova.anovaTest(classes, 0.01),"
False,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,463,"estUtils.oneWayAnovaTest(classes, 0.01));"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,462,"assertEquals(oneWayAnova.anovaTest(classes, 0.01),"
True,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java,463,"TestUtils.oneWayAnovaTest(classes, 0.01));"
False,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,43,ouble[] beta = regression.estimateRegressionParameters();
True,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java,43,double[] beta = regression.estimateRegressionParameters();
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,87,"estUtils.assertEquals(betaHat,"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,87,"TestUtils.assertEquals(betaHat,"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,157,"estUtils.assertEquals(betaHat,"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,157,"TestUtils.assertEquals(betaHat,"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,161,"829.15146461355}, 2E-8); //"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,161,"1829.15146461355}, 2E-8); //"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,182,"55.478499142212}, errors, 1E-6);"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,182,"455.478499142212}, errors, 1E-6);"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,251,"estUtils.assertEquals(betaHat,"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,251,"TestUtils.assertEquals(betaHat,"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,277,E-12);
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,277,1E-12);
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,285,".03726654773803}, errors, 1E-10);"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,285,"0.03726654773803}, errors, 1E-10);"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,297," This example is from ""The Hat Matrix in Regression and ANOVA"","
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,298," David C. Hoaglin and Roy E. Welsch,"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,297,"* This example is from ""The Hat Matrix in Regression and ANOVA"","
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,298,"* David C. Hoaglin and Roy E. Welsch,"
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,344,++;
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,344,k++;
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,349, Verify that residuals computed using the hat matrix are close to
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,349,* Verify that residuals computed using the hat matrix are close to
False,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,355,"estUtils.assertEquals(residuals, hatResiduals, 10e-12);"
True,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java,355,"TestUtils.assertEquals(residuals, hatResiduals, 10e-12);"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,33," NIST ""Norris"" refernce data set from"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,33,"* NIST ""Norris"" refernce data set from"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,37,"rivate double[][] data = { { 0.1, 0.2 }, {338.8, 337.4 }, {118.1, 118.2 },"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,38,"888.0, 884.6 }, {9.2, 10.1 }, {228.1, 226.5 }, {668.5, 666.3 }, {998.5, 996.3 },"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,39,"449.1, 448.6 }, {778.9, 777.0 }, {559.2, 558.2 }, {0.3, 0.4 }, {0.1, 0.6 }, {778.1, 775.5 },"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,40,"668.8, 666.9 }, {339.3, 338.0 }, {448.9, 447.5 }, {10.8, 11.6 }, {557.7, 556.0 },"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,41,"228.3, 228.1 }, {998.0, 995.8 }, {888.8, 887.6 }, {119.6, 120.2 }, {0.3, 0.3 },"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,42,"0.6, 0.3 }, {557.6, 556.8 }, {339.3, 339.1 }, {888.0, 887.2 }, {998.5, 999.0 },"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,43,"778.9, 779.0 }, {10.2, 11.1 }, {117.6, 118.3 }, {228.9, 229.2 }, {668.4, 669.1 },"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,37,"private double[][] data = { { 0.1, 0.2 }, {338.8, 337.4 }, {118.1, 118.2 },"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,38,"{888.0, 884.6 }, {9.2, 10.1 }, {228.1, 226.5 }, {668.5, 666.3 }, {998.5, 996.3 },"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,39,"{449.1, 448.6 }, {778.9, 777.0 }, {559.2, 558.2 }, {0.3, 0.4 }, {0.1, 0.6 }, {778.1, 775.5 },"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,40,"{668.8, 666.9 }, {339.3, 338.0 }, {448.9, 447.5 }, {10.8, 11.6 }, {557.7, 556.0 },"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,41,"{228.3, 228.1 }, {998.0, 995.8 }, {888.8, 887.6 }, {119.6, 120.2 }, {0.3, 0.3 },"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,42,"{0.6, 0.3 }, {557.6, 556.8 }, {339.3, 339.1 }, {888.0, 887.2 }, {998.5, 999.0 },"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,43,"{778.9, 779.0 }, {10.2, 11.1 }, {117.6, 118.3 }, {228.9, 229.2 }, {668.4, 669.1 },"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,48, Correlation example from
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,48,* Correlation example from
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,51,"rivate double[][] corrData = { { 101.0, 99.2 }, {100.1, 99.0 }, {100.0, 100.0 },"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,52,"90.6, 111.6 }, {86.5, 122.2 }, {89.7, 117.6 }, {90.6, 121.1 }, {82.8, 136.0 },"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,53,"70.1, 154.2 }, {65.4, 153.6 }, {61.3, 158.5 }, {62.5, 140.6 }, {63.6, 136.2 },"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,51,"private double[][] corrData = { { 101.0, 99.2 }, {100.1, 99.0 }, {100.0, 100.0 },"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,52,"{90.6, 111.6 }, {86.5, 122.2 }, {89.7, 117.6 }, {90.6, 121.1 }, {82.8, 136.0 },"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,53,"{70.1, 154.2 }, {65.4, 153.6 }, {61.3, 158.5 }, {62.5, 140.6 }, {63.6, 136.2 },"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,59, Example 10.3
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,59,* Example 10.3
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,96,/ Tests against certified values from
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,96,// Tests against certified values from
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,167,"/ All should be OK except MSE, s(b0), s(b1) which need one more df"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,167,"// All should be OK except MSE, s(b0), s(b1) which need one more df"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,210,"egression.getSignificance(),1E-8);"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,211,"ssertEquals(""slope conf interval half-width"", 0.0270713794287,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,210,"regression.getSignificance(),1E-8);"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,211,"assertEquals(""slope conf interval half-width"", 0.0270713794287,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,221,"egression.getSignificance(),1E-11);"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,222,"ssertEquals(""slope conf interval half-width"", 2.97802204827,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,221,"regression.getSignificance(),1E-11);"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,222,"assertEquals(""slope conf interval half-width"", 2.97802204827,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,258,ssertTrue(regression.getSlope() < 0.0);
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,258,assertTrue(regression.getSlope() < 0.0);
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,270,& regression.getSignificance() < 1.0);
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,270,&& regression.getSignificance() < 1.0);
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,298,"egression.getSignificance(),1E-8);"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,299,"ssertEquals(""slope conf interval half-width"", 0.0270713794287,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,298,"regression.getSignificance(),1E-8);"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,299,"assertEquals(""slope conf interval half-width"", 0.0270713794287,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,317,"egression.getSignificance(),1E-8);"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,318,"ssertEquals(""slope conf interval half-width"", 0.0270713794287,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,317,"regression.getSignificance(),1E-8);"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,318,"assertEquals(""slope conf interval half-width"", 0.0270713794287,"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,335,"egression.getSignificance(),1E-8);"
False,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,336,"ssertEquals(""slope conf interval half-width"", 0.0270713794287,"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,335,"regression.getSignificance(),1E-8);"
True,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,336,"assertEquals(""slope conf interval half-width"", 0.0270713794287,"
False,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,29, @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java,29,* @version $Revision$ $Date$
False,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,30, @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java,30,* @version $Revision$ $Date$
False,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,29, @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java,29,* @version $Revision$ $Date$
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,844, catch (IllegalArgumentException ex) {}
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,844,} catch (IllegalArgumentException ex) {}
False,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,65,d = r.nextDouble();
True,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,src/test/java/org/apache/commons/math/util/OpenIntToFieldTest.java,65,dd = r.nextDouble();
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,95,"estDa = new ResizableDoubleArray(2, 2.0f, 3.0f,"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,95,"testDa = new ResizableDoubleArray(2, 2.0f, 3.0f,"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,101,"ssertEquals(ResizableDoubleArray.ADDITIVE_MODE,"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,101,"assertEquals(ResizableDoubleArray.ADDITIVE_MODE,"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,112,"estDa = new ResizableDoubleArray(2, 2.0f, 3.0f,"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,112,"testDa = new ResizableDoubleArray(2, 2.0f, 3.0f,"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,118,"ssertEquals(testDa, copyDa);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,118,"assertEquals(testDa, copyDa);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,124,/ MULTIPLICATIVE_MODE
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,124,// MULTIPLICATIVE_MODE
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,133,"ssertEquals( ""The number of elements should now be 1001, it isn't"","
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,133,"assertEquals( ""The number of elements should now be 1001, it isn't"","
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,139,"ssertEquals( ""The 1000th index should be 3.4, it isn't"", 3.4, da.getElement(1000),"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,139,"assertEquals( ""The 1000th index should be 3.4, it isn't"", 3.4, da.getElement(1000),"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,141,"ssertEquals( ""The 0th index should be 2.0, it isn't"", 2.0, da.getElement(0),"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,142,ouble.MIN_VALUE);
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,141,"assertEquals( ""The 0th index should be 2.0, it isn't"", 2.0, da.getElement(0),"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,142,Double.MIN_VALUE);
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,170,"esizableDoubleArray testDa = new ResizableDoubleArray(2, 2.0f, 3.0f,"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,170,"ResizableDoubleArray testDa = new ResizableDoubleArray(2, 2.0f, 3.0f,"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,177,"ssertEquals(4, testDa.getInternalLength());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,177,"assertEquals(4, testDa.getInternalLength());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,206,"ssertEquals(6, da.getElement(2), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,206,"assertEquals(6, da.getElement(2), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,209,"esizableDoubleArray testDa = new ResizableDoubleArray(2, 2.0f, 2.5f,"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,209,"ResizableDoubleArray testDa = new ResizableDoubleArray(2, 2.0f, 2.5f,"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,217,"ssertEquals(3d, testDa.getElement(2), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,218,"ssertEquals(4, testDa.getInternalLength());  // x,x,x,0"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,217,"assertEquals(3d, testDa.getElement(2), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,218,"assertEquals(4, testDa.getInternalLength());  // x,x,x,0"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,223,"ssertEquals(4d, testDa.getElement(2), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,223,"assertEquals(4d, testDa.getElement(2), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,229,"ssertEquals(5d, testDa.getElement(2), 0);"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,230,"ssertEquals(4, testDa.getInternalLength());  // contracted -- x,x,x,0"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,229,"assertEquals(5d, testDa.getElement(2), 0);"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,230,"assertEquals(4, testDa.getInternalLength());  // contracted -- x,x,x,0"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,398,(ResizableDoubleArray)da).setExpansionFactor(8f);
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,398,((ResizableDoubleArray)da).setExpansionFactor(8f);
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,408,"ssertEquals(ResizableDoubleArray.ADDITIVE_MODE,"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,408,"assertEquals(ResizableDoubleArray.ADDITIVE_MODE,"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,490,"erifyEquality(fourth, fourth.copy());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,490,"verifyEquality(fourth, fourth.copy());"
False,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,497,"ssertEquals(a.hashCode(), b.hashCode());"
True,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/java/org/apache/commons/math/util/ResizableDoubleArrayTest.java,497,"assertEquals(a.hashCode(), b.hashCode());"

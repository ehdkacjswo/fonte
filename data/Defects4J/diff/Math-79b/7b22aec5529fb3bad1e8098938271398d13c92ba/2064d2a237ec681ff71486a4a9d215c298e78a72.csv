is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,24, @version $Revision: 1.13 $ $Date: 2004/06/02 00:05:28 $
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,24,* @version $Revision: 1.14 $ $Date: 2004/06/23 16:26:16 $
False,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,22, @version $Revision: 1.17 $ $Date: 2004/06/02 00:05:28 $
True,src/java/org/apache/commons/math/MathConfigurationException.java,src/java/org/apache/commons/math/MathConfigurationException.java,22,* @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:16 $
False,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,24, @version $Revision: 1.16 $ $Date: 2004/06/02 00:05:28 $
True,src/java/org/apache/commons/math/MathException.java,src/java/org/apache/commons/math/MathException.java,24,* @version $Revision: 1.17 $ $Date: 2004/06/23 16:26:16 $
False,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,26, @version $Revision: 1.16 $ $Date: 2004/06/02 00:11:08 $
True,src/java/org/apache/commons/math/analysis/BisectionSolver.java,src/java/org/apache/commons/math/analysis/BisectionSolver.java,26,* @version $Revision: 1.17 $ $Date: 2004/06/23 16:26:14 $
False,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,28, @version $Revision: 1.15 $ $Date: 2004/06/02 00:11:08 $
True,src/java/org/apache/commons/math/analysis/BrentSolver.java,src/java/org/apache/commons/math/analysis/BrentSolver.java,28,* @version $Revision: 1.16 $ $Date: 2004/06/23 16:26:14 $
False,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateRealFunction.java,21, @version $Revision: 1.1 $ $Date: 2004/04/02 20:59:52 $
True,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/DifferentiableUnivariateRealFunction.java,21,* @version $Revision: 1.2 $ $Date: 2004/06/23 16:26:14 $
False,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,29, @version $Revision: 1.4 $ $Date: 2004/06/02 00:11:08 $
True,src/java/org/apache/commons/math/analysis/NewtonSolver.java,src/java/org/apache/commons/math/analysis/NewtonSolver.java,29,* @version $Revision: 1.5 $ $Date: 2004/06/23 16:26:14 $
False,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,26, @version $Revision: 1.10 $ $Date: 2004/06/02 00:11:08 $
True,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/PolynomialFunction.java,26,* @version $Revision: 1.11 $ $Date: 2004/06/23 16:26:14 $
False,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,44, @version $Revision: 1.5 $ $Date: 2004/06/02 00:11:08 $
True,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/PolynomialSplineFunction.java,44,* @version $Revision: 1.6 $ $Date: 2004/06/23 16:26:14 $
False,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,34, @version $Revision: 1.15 $ $Date: 2004/06/02 00:11:08 $
True,src/java/org/apache/commons/math/analysis/SecantSolver.java,src/java/org/apache/commons/math/analysis/SecantSolver.java,34,* @version $Revision: 1.16 $ $Date: 2004/06/23 16:26:14 $
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,40, @version $Revision: 1.18 $ $Date: 2004/06/02 00:10:45 $
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,40,* @version $Revision: 1.19 $ $Date: 2004/06/23 16:26:14 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,23, @version $Revision: 1.12 $ $Date: 2004/02/21 21:35:14 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java,23,* @version $Revision: 1.13 $ $Date: 2004/06/23 16:26:14 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,23, @version $Revision: 1.10 $ $Date: 2004/02/21 21:35:14 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,src/java/org/apache/commons/math/analysis/UnivariateRealInterpolator.java,23,* @version $Revision: 1.11 $ $Date: 2004/06/23 16:26:14 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,25, @version $Revision: 1.12 $ $Date: 2004/05/21 14:21:42 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolver.java,25,* @version $Revision: 1.13 $ $Date: 2004/06/23 16:26:14 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,44, @version $Revision: 1.14 $ $Date: 2004/04/08 21:19:17 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,44,* @version $Revision: 1.15 $ $Date: 2004/06/23 16:26:14 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,24, @version $Revision: 1.12 $ $Date: 2004/06/02 00:10:45 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactoryImpl.java,24,* @version $Revision: 1.13 $ $Date: 2004/06/23 16:26:14 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,27, @version $Revision: 1.13 $ $Date: 2004/06/02 00:11:08 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,27,* @version $Revision: 1.14 $ $Date: 2004/06/23 16:26:14 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,31,/** Serializable version identifier */
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,22, @version $Revision: 1.8 $ $Date: 2004/04/08 21:19:17 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtils.java,22,* @version $Revision: 1.9 $ $Date: 2004/06/23 16:26:14 $
False,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,26, @version $Revision: 1.8 $ $Date: 2004/06/02 00:07:01 $
True,src/java/org/apache/commons/math/complex/Complex.java,src/java/org/apache/commons/math/complex/Complex.java,26,* @version $Revision: 1.9 $ $Date: 2004/06/23 16:26:16 $
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,32, @version $Revision: 1.8 $ $Date: 2004/06/02 00:07:01 $
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,32,* @version $Revision: 1.9 $ $Date: 2004/06/23 16:26:16 $
False,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,31, @version $Revision: 1.8 $ $Date: 2004/04/23 18:51:03 $
True,src/java/org/apache/commons/math/complex/ComplexMath.java,src/java/org/apache/commons/math/complex/ComplexMath.java,31,* @version $Revision: 1.9 $ $Date: 2004/06/23 16:26:16 $
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,29, @version $Revision: 1.23 $ $Date: 2004/06/02 00:15:16 $
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,29,* @version $Revision: 1.24 $ $Date: 2004/06/23 16:26:15 $
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,34,/** Serializable version identifier */
False,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,28, @version $Revision: 1.16 $ $Date: 2004/06/02 00:15:16 $
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,28,* @version $Revision: 1.17 $ $Date: 2004/06/23 16:26:15 $
True,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,src/java/org/apache/commons/math/distribution/AbstractDiscreteDistribution.java,33,/** Serializable version identifier */
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,32, @version $Revision: 1.10 $ $Date: 2004/04/26 19:15:48 $
True,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,32,* @version $Revision: 1.11 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,27, @version $Revision: 1.15 $ $Date: 2004/06/02 00:15:16 $
True,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,src/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java,27,* @version $Revision: 1.16 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,32, @version $Revision: 1.13 $ $Date: 2004/04/26 19:15:48 $
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,32,* @version $Revision: 1.14 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,25, @version $Revision: 1.17 $ $Date: 2004/06/02 00:15:16 $
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,25,* @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,23, @version $Revision: 1.14 $ $Date: 2004/05/19 14:16:31 $
True,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,src/java/org/apache/commons/math/distribution/ContinuousDistribution.java,23,* @version $Revision: 1.15 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,23, @version $Revision: 1.14 $ $Date: 2004/05/19 14:16:31 $
True,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,src/java/org/apache/commons/math/distribution/DiscreteDistribution.java,23,* @version $Revision: 1.15 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,42, @version $Revision: 1.19 $ $Date: 2004/02/21 21:35:14 $
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,42,* @version $Revision: 1.20 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,22, @version $Revision: 1.19 $ $Date: 2004/06/02 00:14:15 $
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,22,* @version $Revision: 1.20 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,32, @version $Revision: 1.11 $ $Date: 2004/04/26 19:15:48 $
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,32,* @version $Revision: 1.12 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,25, @version $Revision: 1.17 $ $Date: 2004/06/06 16:38:05 $
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,25,* @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,32, @version $Revision: 1.12 $ $Date: 2004/04/26 19:15:48 $
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,32,* @version $Revision: 1.13 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,27, @version $Revision: 1.17 $ $Date: 2004/06/02 00:15:16 $
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,27,* @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,32, @version $Revision: 1.14 $ $Date: 2004/04/26 19:15:48 $
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,32,* @version $Revision: 1.15 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,26, @version $Revision: 1.20 $ $Date: 2004/06/02 00:15:16 $
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,26,* @version $Revision: 1.21 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,33, @version $Revision: 1.9 $ $Date: 2004/04/26 19:15:48 $
True,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,33,* @version $Revision: 1.10 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,27, @version $Revision: 1.14 $ $Date: 2004/06/02 00:15:16 $
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,27,* @version $Revision: 1.15 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,32, @version $Revision: 1.7 $ $Date: 2004/05/05 19:59:11 $
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,32,* @version $Revision: 1.8 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,28, @version $Revision: 1.11 $ $Date: 2004/06/02 00:15:16 $
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,28,* @version $Revision: 1.12 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,32, @version $Revision: 1.11 $ $Date: 2004/04/26 19:15:48 $
True,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,32,* @version $Revision: 1.12 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,27, @version $Revision: 1.17 $ $Date: 2004/06/02 00:15:16 $
True,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,src/java/org/apache/commons/math/distribution/TDistributionImpl.java,27,* @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,2, Copyright 2004 The Apache Software Foundation.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,5, you may not use this file except in compliance with the License.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,6, You may obtain a copy of the License at
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,13, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,14, limitations under the License.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,17,ackage org.apache.commons.math.linear;
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,19,mport java.math.BigDecimal;
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,22," Interface defining a real-valued matrix with basic algebraic operations, using"
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,23, BigDecimal representations for the entries.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,25, @version $Revision: 1.2 $ $Date: 2004/06/06 16:08:52 $
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,27,ublic interface BigMatrix {
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,30, Returns a (deep) copy of this.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,32, @return matrix copy
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,34,igMatrix copy();
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,37, Compute the sum of this and m.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,39, @param m    matrix to be added
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,40, @return     this + m
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,41, @exception  IllegalArgumentException if m is not the same size as this
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,43,igMatrix add(BigMatrix m) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,46, Compute this minus m.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,48, @param m    matrix to be subtracted
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,49, @return     this + m
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,50, @exception  IllegalArgumentException if m is not the same size as this
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,52,igMatrix subtract(BigMatrix m) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,55, Returns the result of adding d to each entry of this.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,57, @param d    value to be added to each entry
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,58, @return     d + this
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,60,igMatrix scalarAdd(BigDecimal d);
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,63, Returns the result multiplying each entry of this by d.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,65, @param d    value to multiply all entries by
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,66, @return     d * this
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,68,igMatrix scalarMultiply(BigDecimal d);
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,71, Returns the result postmultiplying this by m.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,73, @param m    matrix to postmultiply by
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,74, @return     this * m
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,75, @throws     IllegalArgumentException
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,76,             if columnDimension(this) != rowDimension(m)
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,78,igMatrix multiply(BigMatrix m) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,81, Returns the result premultiplying this by <code>m</code>.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,82, @param m    matrix to premultiply by
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,83, @return     m * this
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,84, @throws     IllegalArgumentException
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,85,             if rowDimension(this) != columnDimension(m)
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,87,ublic BigMatrix preMultiply(BigMatrix m) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,90, Returns matrix entries as a two-dimensional array.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,92, @return    2-dimensional array of entries
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,94,igDecimal[][] getData();
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,97, Returns matrix entries as a two-dimensional array.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,99, @return    2-dimensional array of entries
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,101,ouble [][] getDataAsDoubleArray();
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,104, Overwrites the underlying data for the matrix with
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,105, a fresh copy of <code>data</code>.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,107, @param  data  2-dimensional array of entries
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,109,oid setData(BigDecimal[][] data);
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,112, Overwrites the underlying data for the matrix with
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,113, a fresh copy of <code>data</code>.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,115, @param  data  2-dimensional array of entries
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,117,oid setData(double[][] data);
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,120, Sets the rounding mode to use when dividing values
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,121, @see java.math.BigDecimal
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,122, @param roundingMode
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,124,oid setRoundingMode(int roundingMode);
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,127, Gets the rounding mode
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,128, @return
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,130,nt getRoundingMode();
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,133," Returns the <a href=""http://mathworld.wolfram.com/MaximumAbsoluteRowSumNorm.html"">"
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,134, maximum absolute row sum norm</a> of the matrix.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,136, @return norm
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,138,igDecimal getNorm();
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,141, Returns the entries in row number <code>row</code> as an array.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,143, @param row the row to be fetched
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,144, @return array of entries in the row
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,145, @throws org.apache.commons.math.linear.MatrixIndexException if the specified row is greater
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,146,                              than the number of rows in this matrix
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,148,igDecimal[] getRow(int row) throws MatrixIndexException;
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,151, Returns the entries in row number <code>row</code> as an array
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,152, of double values.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,154, @param row the row to be fetched
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,155, @return array of entries in the row
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,156, @throws org.apache.commons.math.linear.MatrixIndexException if the specified row is greater
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,157,                              than the number of rows in this matrix
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,159,ouble [] getRowAsDoubleArray(int row) throws MatrixIndexException;
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,162, Returns the entries in column number <code>col</code> as an array.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,164, @param col  column to fetch
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,165, @return array of entries in the column
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,166, @throws org.apache.commons.math.linear.MatrixIndexException if the specified column is greater
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,167,                              than the number of columns in this matrix
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,169,igDecimal[] getColumn(int col) throws MatrixIndexException;
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,172, Returns the entries in column number <code>col</code> as an array
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,173, of double values.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,175, @param col  column to fetch
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,176, @return array of entries in the column
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,177, @throws org.apache.commons.math.linear.MatrixIndexException if the specified column is greater
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,178,                              than the number of columns in this matrix
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,180,ouble [] getColumnAsDoubleArray(int col) throws MatrixIndexException;
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,183, Returns the entry in the specified row and column.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,185, @param row  row location of entry to be fetched
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,186, @param column  column location of entry to be fetched
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,187," @return matrix entry in row,column"
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,188, @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,189,                              the dimensions of this matrix
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,191,"igDecimal getEntry(int row, int column) throws MatrixIndexException;"
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,194, Returns the entry in the specified row and column as a double
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,196, @param row  row location of entry to be fetched
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,197, @param column  column location of entry to be fetched
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,198," @return matrix entry in row,column"
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,199, @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,200,                              the dimensions of this matrix
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,202,"ouble getEntryAsDouble(int row, int column) throws MatrixIndexException;"
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,205, Sets the entry in the specified row and column to the specified value.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,207, @param row    row location of entry to be set
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,208, @param column    column location of entry to be set
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,209, @param value  value to set
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,210, @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,211,                              he dimensions of this matrix
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,213,"oid setEntry(int row, int column, BigDecimal value)"
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,214,hrows MatrixIndexException;
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,217, Sets the entry in the specified row and column to the specified value.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,219, @param row    row location of entry to be set
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,220, @param column    column location of entry to be set
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,221, @param value  value to set
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,222, @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,223,                              he dimensions of this matrix
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,225,"oid setEntry(int row, int column, double value)"
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,226,hrows MatrixIndexException;
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,229, Returns the transpose of this matrix.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,231, @return transpose matrix
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,233,igMatrix transpose();
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,236, Returns the inverse of this matrix.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,238, @return inverse matrix
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,239, @throws org.apache.commons.math.linear.InvalidMatrixException if  this is not invertible
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,241,igMatrix inverse() throws InvalidMatrixException;
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,244, Returns the determinant of this matrix.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,246, @return determinant
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,247,@throws InvalidMatrixException if matrix is not square
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,249,igDecimal getDeterminant();
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,252, Is this a square matrix?
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,253, @return true if the matrix is square (rowDimension = columnDimension)
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,255,oolean isSquare();
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,258, Is this a singular matrix?
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,259, @return true if the matrix is singular
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,261,oolean isSingular();
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,264, Returns the number of rows in the matrix.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,266, @return rowDimension
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,268,nt getRowDimension();
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,271, Returns the number of columns in the matrix.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,273, @return columnDimension
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,275,nt getColumnDimension();
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,278," Returns the <a href=""http://mathworld.wolfram.com/MatrixTrace.html"">"
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,279, trace</a> of the matrix (the sum of the elements on the main diagonal).
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,281, @return trace
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,283,igDecimal getTrace();
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,286, Returns the result of multiplying this by the vector <code>v</code>.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,288, @param v the vector to operate on
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,289, @return this*v
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,290, @throws IllegalArgumentException if columnDimension != v.size()
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,292,igDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,295, Returns the (row) vector result of premultiplying this by the vector <code>v</code>.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,297, @param v the row vector to premultiply by
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,298, @return v*this
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,299, @throws IllegalArgumentException if rowDimension != v.size()
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,301,igDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,304, Returns the solution vector for a linear system with coefficient
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,305, matrix = this and constant vector = <code>b</code>.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,307, @param b  constant vector
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,308," @return vector of solution values to AX = b, where A is *this"
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,309, @throws IllegalArgumentException if this.rowDimension != b.length
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,310, @throws org.apache.commons.math.linear.InvalidMatrixException if this matrix is not square or is singular
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,312,"igDecimal[] solve(BigDecimal[] b) throws IllegalArgumentException, InvalidMatrixException;"
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,315, Returns a matrix of (column) solution vectors for linear systems with
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,316, coefficient matrix = this and constant vectors = columns of
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,317, <code>b</code>.
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,319, @param b  matrix of constant vectors forming RHS of linear systems to
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,320, to solve
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,321, @return matrix of solution vectors
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,322, @throws IllegalArgumentException if this.rowDimension != row dimension
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,323, @throws org.apache.commons.math.linear.InvalidMatrixException if this matrix is not square or is singular
False,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,325,"igMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,2,* Copyright 2004 The Apache Software Foundation.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,17,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,19,import java.math.BigDecimal;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,22,"* Interface defining a real-valued matrix with basic algebraic operations, using"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,23,* BigDecimal representations for the entries.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,25,* @version $Revision: 1.3 $ $Date: 2004/06/23 16:26:17 $
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,27,public interface BigMatrix {
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,30,* Returns a (deep) copy of this.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,32,* @return matrix copy
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,34,BigMatrix copy();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,37,* Compute the sum of this and m.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,39,* @param m    matrix to be added
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,40,* @return     this + m
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,41,* @exception  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,43,BigMatrix add(BigMatrix m) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,46,* Compute this minus m.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,48,* @param m    matrix to be subtracted
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,49,* @return     this + m
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,50,* @exception  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,52,BigMatrix subtract(BigMatrix m) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,55,* Returns the result of adding d to each entry of this.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,57,* @param d    value to be added to each entry
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,58,* @return     d + this
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,60,BigMatrix scalarAdd(BigDecimal d);
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,63,* Returns the result multiplying each entry of this by d.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,65,* @param d    value to multiply all entries by
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,66,* @return     d * this
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,68,BigMatrix scalarMultiply(BigDecimal d);
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,71,* Returns the result postmultiplying this by m.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,73,* @param m    matrix to postmultiply by
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,74,* @return     this * m
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,75,* @throws     IllegalArgumentException
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,76,*             if columnDimension(this) != rowDimension(m)
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,78,BigMatrix multiply(BigMatrix m) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,81,* Returns the result premultiplying this by <code>m</code>.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,82,* @param m    matrix to premultiply by
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,83,* @return     m * this
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,84,* @throws     IllegalArgumentException
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,85,*             if rowDimension(this) != columnDimension(m)
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,87,public BigMatrix preMultiply(BigMatrix m) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,90,* Returns matrix entries as a two-dimensional array.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,92,* @return    2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,94,BigDecimal[][] getData();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,97,* Returns matrix entries as a two-dimensional array.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,99,* @return    2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,101,double [][] getDataAsDoubleArray();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,104,* Overwrites the underlying data for the matrix with
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,105,* a fresh copy of <code>data</code>.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,107,* @param  data  2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,109,void setData(BigDecimal[][] data);
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,112,* Overwrites the underlying data for the matrix with
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,113,* a fresh copy of <code>data</code>.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,115,* @param  data  2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,117,void setData(double[][] data);
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,120,* Sets the rounding mode to use when dividing values
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,121,* @see java.math.BigDecimal
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,122,* @param roundingMode
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,124,void setRoundingMode(int roundingMode);
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,127,* Gets the rounding mode
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,128,* @return the rounding mode
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,130,int getRoundingMode();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,133,"* Returns the <a href=""http://mathworld.wolfram.com/MaximumAbsoluteRowSumNorm.html"">"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,134,* maximum absolute row sum norm</a> of the matrix.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,136,* @return norm
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,138,BigDecimal getNorm();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,141,* Returns the entries in row number <code>row</code> as an array.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,143,* @param row the row to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,144,* @return array of entries in the row
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,145,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified row is greater
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,146,*                              than the number of rows in this matrix
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,148,BigDecimal[] getRow(int row) throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,151,* Returns the entries in row number <code>row</code> as an array
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,152,* of double values.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,154,* @param row the row to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,155,* @return array of entries in the row
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,156,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified row is greater
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,157,*                              than the number of rows in this matrix
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,159,double [] getRowAsDoubleArray(int row) throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,162,* Returns the entries in column number <code>col</code> as an array.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,164,* @param col  column to fetch
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,165,* @return array of entries in the column
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,166,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified column is greater
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,167,*                              than the number of columns in this matrix
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,169,BigDecimal[] getColumn(int col) throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,172,* Returns the entries in column number <code>col</code> as an array
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,173,* of double values.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,175,* @param col  column to fetch
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,176,* @return array of entries in the column
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,177,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified column is greater
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,178,*                              than the number of columns in this matrix
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,180,double [] getColumnAsDoubleArray(int col) throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,183,* Returns the entry in the specified row and column.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,185,* @param row  row location of entry to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,186,* @param column  column location of entry to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,187,"* @return matrix entry in row,column"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,188,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,189,*                              the dimensions of this matrix
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,191,"BigDecimal getEntry(int row, int column) throws MatrixIndexException;"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,194,* Returns the entry in the specified row and column as a double
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,196,* @param row  row location of entry to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,197,* @param column  column location of entry to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,198,"* @return matrix entry in row,column"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,199,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,200,*                              the dimensions of this matrix
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,202,"double getEntryAsDouble(int row, int column) throws MatrixIndexException;"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,205,* Sets the entry in the specified row and column to the specified value.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,207,* @param row    row location of entry to be set
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,208,* @param column    column location of entry to be set
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,209,* @param value  value to set
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,210,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,211,*                              he dimensions of this matrix
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,213,"void setEntry(int row, int column, BigDecimal value)"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,214,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,217,* Sets the entry in the specified row and column to the specified value.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,219,* @param row    row location of entry to be set
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,220,* @param column    column location of entry to be set
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,221,* @param value  value to set
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,222,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,223,*                              he dimensions of this matrix
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,225,"void setEntry(int row, int column, double value)"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,226,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,229,* Returns the transpose of this matrix.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,231,* @return transpose matrix
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,233,BigMatrix transpose();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,236,* Returns the inverse of this matrix.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,238,* @return inverse matrix
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,239,* @throws org.apache.commons.math.linear.InvalidMatrixException if  this is not invertible
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,241,BigMatrix inverse() throws InvalidMatrixException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,244,* Returns the determinant of this matrix.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,246,* @return determinant
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,247,*@throws InvalidMatrixException if matrix is not square
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,249,BigDecimal getDeterminant();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,252,* Is this a square matrix?
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,253,* @return true if the matrix is square (rowDimension = columnDimension)
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,255,boolean isSquare();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,258,* Is this a singular matrix?
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,259,* @return true if the matrix is singular
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,261,boolean isSingular();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,264,* Returns the number of rows in the matrix.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,266,* @return rowDimension
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,268,int getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,271,* Returns the number of columns in the matrix.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,273,* @return columnDimension
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,275,int getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,278,"* Returns the <a href=""http://mathworld.wolfram.com/MatrixTrace.html"">"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,279,* trace</a> of the matrix (the sum of the elements on the main diagonal).
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,281,* @return trace
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,283,BigDecimal getTrace();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,286,* Returns the result of multiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,288,* @param v the vector to operate on
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,289,* @return this*v
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,290,* @throws IllegalArgumentException if columnDimension != v.size()
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,292,BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,295,* Returns the (row) vector result of premultiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,297,* @param v the row vector to premultiply by
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,298,* @return v*this
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,299,* @throws IllegalArgumentException if rowDimension != v.size()
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,301,BigDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,304,* Returns the solution vector for a linear system with coefficient
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,305,* matrix = this and constant vector = <code>b</code>.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,307,* @param b  constant vector
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,308,"* @return vector of solution values to AX = b, where A is *this"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,309,* @throws IllegalArgumentException if this.rowDimension != b.length
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,310,* @throws org.apache.commons.math.linear.InvalidMatrixException if this matrix is not square or is singular
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,312,"BigDecimal[] solve(BigDecimal[] b) throws IllegalArgumentException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,315,* Returns a matrix of (column) solution vectors for linear systems with
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,316,* coefficient matrix = this and constant vectors = columns of
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,317,* <code>b</code>.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,319,* @param b  matrix of constant vectors forming RHS of linear systems to
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,320,* to solve
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,321,* @return matrix of solution vectors
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,322,* @throws IllegalArgumentException if this.rowDimension != row dimension
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,323,* @throws org.apache.commons.math.linear.InvalidMatrixException if this matrix is not square or is singular
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,325,"BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,2, Copyright 2004 The Apache Software Foundation.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,5, you may not use this file except in compliance with the License.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,6, You may obtain a copy of the License at
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,13, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,14, limitations under the License.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,17,ackage org.apache.commons.math.linear;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,18,mport java.io.Serializable;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,19,mport java.math.BigDecimal;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,22, Implementation for {@link BigMatrix} using a BigDecimal[][] array to store entries
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,23," and <a href=""http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf"">"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,24, LU decompostion</a> to support linear system
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,25, solution and inverse.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,26, <p>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,27," The LU decompostion is performed as needed, to support the following operations: <ul>"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,28, <li>solve</li>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,29, <li>isSingular</li>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,30, <li>getDeterminant</li>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,31, <li>inverse</li> </ul>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,32, <p>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,33, <strong>Usage note</strong>:<br>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,34, The LU decomposition is stored and reused on subsequent calls.  If matrix
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,35," data are modified using any of the public setXxx methods, the saved"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,36, decomposition is discarded.  If data are modified via references to the
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,37," underlying array obtained using <code>getDataRef()</code>, then the stored"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,38," LU decomposition will not be discarded.  In this case, you need to"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,39, explicitly invoke <code>LUDecompose()</code> to recompute the decomposition
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,40, before using any of the methods above.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,42, @version $Revision: 1.1 $ $Date: 2004/06/06 04:20:45 $
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,44,"ublic class BigMatrixImpl implements BigMatrix, Serializable {"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,46,** Serialization id */
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,47,tatic final long serialVersionUID = -1011428905656140431L;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,49,rivate static final BigDecimal ZERO = new BigDecimal(0);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,50,rivate static final BigDecimal ONE = new BigDecimal(1);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,52,** Entries of the matrix */
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,53,rivate BigDecimal data[][] = null;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,55,** Entries of cached LU decomposition.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,56,  All updates to data (other than luDecompose()) *must* set this to null
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,58,rivate BigDecimal lu[][] = null;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,60,** Permutation associated with LU decompostion */
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,61,rivate int[] permutation = null;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,63,** Parity of the permutation associated with the LU decomposition */
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,64,rivate int parity = 1;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,66,** Rounding mode for divisions **/
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,67,rivate int roundingMode = BigDecimal.ROUND_HALF_UP;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,69,*** BigDecimal scale ***/
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,70,rivate int scale = 64;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,72,** Bound to determine effective singularity in LU decomposition */
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,73,rotected static BigDecimal TOO_SMALL = new BigDecimal(10E-12);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,76, Creates a matrix with no data
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,78,ublic BigMatrixImpl() {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,82, Create a new BigMatrix with the supplied row and column dimensions.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,84, @param rowDimension      the number of rows in the new matrix
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,85, @param columnDimension   the number of columns in the new matrix
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,87,"ublic BigMatrixImpl(int rowDimension, int columnDimension) {"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,88,ata = new BigDecimal[rowDimension][columnDimension];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,89,u = null;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,93, Create a new BigMatrix using the <code>data</code> as the underlying
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,94, data array.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,95, <p>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,96," The input array is copied, not referenced."
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,98, @param d data for new matrix
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,100,ublic BigMatrixImpl(BigDecimal[][] d) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,101,his.copyIn(d);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,102,u = null;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,106, Create a new BigMatrix using the <code>data</code> as the underlying
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,107, data array.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,108, <p>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,109," The input array is copied, not referenced."
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,111, @param d data for new matrix
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,113,ublic BigMatrixImpl(double[][] d) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,114,his.copyIn(d);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,115,u = null;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,119, Create a new (column) BigMatrix using <code>v</code> as the
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,120, data for the unique column of the <code>v.length x 1</code> matrix
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,121, created.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,122, <p>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,123," The input array is copied, not referenced."
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,125, @param v column vector holding data for new matrix
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,127,ublic BigMatrixImpl(BigDecimal[] v) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,128,nt nRows = v.length;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,129,ata = new BigDecimal[nRows][1];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,130,or (int row = 0; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,131,ata[row][0] = v[row];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,136, Create a new BigMatrix which is a copy of this.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,138, @return  the cloned matrix
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,140,ublic BigMatrix copy() {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,141,eturn new BigMatrixImpl(this.copyOut());
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,145, Compute the sum of this and <code>m</code>.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,147, @param m    matrix to be added
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,148, @return     this + m
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,149, @exception  IllegalArgumentException if m is not the same size as this
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,151,ublic BigMatrix add(BigMatrix m) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,152,f (this.getColumnDimension() != m.getColumnDimension() ||
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,153,his.getRowDimension() != m.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,154,"hrow new IllegalArgumentException(""matrix dimension mismatch"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,156,nt rowCount = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,157,nt columnCount = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,158,igDecimal[][] outData = new BigDecimal[rowCount][columnCount];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,159,igDecimal[][] mData = m.getData();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,160,or (int row = 0; row < rowCount; row++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,161,or (int col = 0; col < columnCount; col++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,162,utData[row][col] = data[row][col].add(mData[row][col]);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,165,eturn new BigMatrixImpl(outData);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,169, Compute  this minus <code>m</code>.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,171, @param m    matrix to be subtracted
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,172, @return     this + m
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,173, @exception  IllegalArgumentException if m is not the same size as *this
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,175,ublic BigMatrix subtract(BigMatrix m) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,176,f (this.getColumnDimension() != m.getColumnDimension() ||
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,177,his.getRowDimension() != m.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,178,"hrow new IllegalArgumentException(""matrix dimension mismatch"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,180,nt rowCount = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,181,nt columnCount = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,182,igDecimal[][] outData = new BigDecimal[rowCount][columnCount];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,183,igDecimal[][] mData = m.getData();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,184,or (int row = 0; row < rowCount; row++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,185,or (int col = 0; col < columnCount; col++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,186,utData[row][col] = data[row][col].subtract(mData[row][col]);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,189,eturn new BigMatrixImpl(outData);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,193, Returns the result of adding d to each entry of this.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,195, @param d    value to be added to each entry
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,196, @return     d + this
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,198,ublic BigMatrix scalarAdd(BigDecimal d) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,199,nt rowCount = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,200,nt columnCount = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,201,igDecimal[][] outData = new BigDecimal[rowCount][columnCount];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,202,or (int row = 0; row < rowCount; row++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,203,or (int col = 0; col < columnCount; col++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,204,utData[row][col] = data[row][col].add(d);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,207,eturn new BigMatrixImpl(outData);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,211, Returns the result multiplying each entry of this by <code>d</code>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,212, @param d  value to multiply all entries by
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,213, @return d * this
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,215,ublic BigMatrix scalarMultiply(BigDecimal d) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,216,nt rowCount = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,217,nt columnCount = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,218,igDecimal[][] outData = new BigDecimal[rowCount][columnCount];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,219,or (int row = 0; row < rowCount; row++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,220,or (int col = 0; col < columnCount; col++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,221,utData[row][col] = data[row][col].multiply(d);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,224,eturn new BigMatrixImpl(outData);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,228, Returns the result postmultiplying this by <code>m</code>.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,229, @param m    matrix to postmultiply by
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,230, @return     this*m
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,231, @throws     IllegalArgumentException
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,232,             if columnDimension(this) != rowDimension(m)
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,234,ublic BigMatrix multiply(BigMatrix m) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,235,f (this.getColumnDimension() != m.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,236,"hrow new IllegalArgumentException(""Matrices are not multiplication compatible."");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,238,nt nRows = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,239,nt nCols = m.getColumnDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,240,nt nSum = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,241,igDecimal[][] mData = m.getData();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,242,igDecimal[][] outData = new BigDecimal[nRows][nCols];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,243,igDecimal sum = ZERO;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,244,or (int row = 0; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,245,or (int col = 0; col < nCols; col++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,246,um = ZERO;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,247,or (int i = 0; i < nSum; i++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,248,um = sum.add(data[row][i].multiply(mData[i][col]));
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,250,utData[row][col] = sum;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,253,eturn new BigMatrixImpl(outData);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,257, Returns the result premultiplying this by <code>m</code>.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,258, @param m    matrix to premultiply by
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,259, @return     m * this
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,260, @throws     IllegalArgumentException
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,261,             if rowDimension(this) != columnDimension(m)
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,263,ublic BigMatrix preMultiply(BigMatrix m) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,264,eturn m.multiply(this);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,268, Returns matrix entries as a two-dimensional array.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,269, <p>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,270, Makes a fresh copy of the underlying data.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,272, @return    2-dimensional array of entries
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,274,ublic BigDecimal[][] getData() {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,275,eturn copyOut();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,278,ublic double[][] getDataAsDoubleArray() {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,279,nt nRows = getRowDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,280,nt nCols = getColumnDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,281,ouble d[][] = new double[nRows][nCols];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,282,or (int i = 0; i < nRows; i++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,283,or (int j=0; j<nCols;j++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,284,[i][j] = data[i][j].doubleValue();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,287,eturn d;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,291, Overwrites the underlying data for the matrix
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,292, with a fresh copy of <code>inData</code>.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,294, @param  inData 2-dimensional array of entries
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,296,ublic void setData(BigDecimal[][] inData) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,297,opyIn(inData);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,298,u = null;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,301,ublic void setData(double[][] inData) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,302,opyIn(inData);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,303,u = null;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,307, Returns a reference to the underlying data array.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,308, <p>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,309, Does not make a fresh copy of the underlying data.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,311, @return 2-dimensional array of entries
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,313,ublic BigDecimal[][] getDataRef() {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,314,eturn data;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,318, Overwrites the underlying data for the matrix
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,319, with a reference to <code>inData</code>.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,320, <p>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,321, Does not make a fresh copy of <code>data</code>.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,323, @param  inData 2-dimensional array of entries
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,325,ublic void setDataRef(BigDecimal[][] inData) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,326,his.data = inData;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,327,u = null;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,331, Gets the rounding mode for division operations
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,332, The default is {@link BigDecimal.ROUND_HALF_UP}
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,333, @see BigDecimal
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,334, @return
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,336,ublic int getRoundingMode() {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,337,eturn roundingMode;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,341, Sets the rounding mode for decimal divisions.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,342, @see BigDecimal
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,343, @param roundingMode
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,345,ublic void setRoundingMode(int roundingMode) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,346,his.roundingMode = roundingMode;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,350, Sets the scale for division operations.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,351, The default is 64
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,352, @see BigDecimal
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,353, @return
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,355,ublic int getScale() {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,356,eturn scale;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,360, Sets the scale for division operations.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,361, @see BigDecimal
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,362, @param scale
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,364,ublic void setScale(int scale) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,365,his.scale = scale;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,369," Returns the <a href=""http://mathworld.wolfram.com/MaximumAbsoluteRowSumNorm.html"">"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,370, maximum absolute row sum norm</a> of the matrix.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,372, @return norm
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,374,ublic BigDecimal getNorm() {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,375,igDecimal maxColSum = ZERO;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,376,or (int col = 0; col < this.getColumnDimension(); col++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,377,igDecimal sum = ZERO;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,378,or (int row = 0; row < this.getRowDimension(); row++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,379,um = sum.add(data[row][col].abs());
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,381,axColSum = maxColSum.max(sum);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,383,eturn maxColSum;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,387, Returns the entries in row number <code>row</code> as an array.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,389, @param row the row to be fetched
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,390, @return array of entries in the row
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,391, @throws MatrixIndexException if the specified row is greater
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,392,                              than the number of rows in this matrix
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,394,ublic BigDecimal[] getRow(int row) throws MatrixIndexException {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,395,"f ( !isValidCoordinate( row, 1 ) ) {"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,396,"hrow new MatrixIndexException(""illegal row argument"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,398,nt ncols = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,399,igDecimal[] out = new BigDecimal[ncols];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,400,"ystem.arraycopy(data[row - 1], 0, out, 0, ncols);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,401,eturn out;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,405, Returns the entries in row number <code>row</code> as an array
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,406, of double values.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,408, @param row the row to be fetched
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,409, @return array of entries in the row
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,410, @throws org.apache.commons.math.linear.MatrixIndexException if the specified row is greater
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,411,                              than the number of rows in this matrix
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,413,ublic double[] getRowAsDoubleArray(int row) throws MatrixIndexException {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,414,"f ( !isValidCoordinate( row, 1 ) ) {"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,415,"hrow new MatrixIndexException(""illegal row argument"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,417,nt ncols = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,418,ouble[] out = new double[ncols];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,419,or (int i=0;i<ncols;i++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,420,ut[i] = data[row-1][i].doubleValue();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,422,eturn out;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,426, Returns the entries in column number <code>col</code> as an array.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,428, @param col  column to fetch
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,429, @return array of entries in the column
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,430, @throws MatrixIndexException if the specified column is greater
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,431,                              than the number of columns in this matrix
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,433,ublic BigDecimal[] getColumn(int col) throws MatrixIndexException {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,434,"f ( !isValidCoordinate(1, col) ) {"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,435,"hrow new MatrixIndexException(""illegal column argument"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,437,nt nRows = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,438,igDecimal[] out = new BigDecimal[nRows];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,439,or (int i = 0; i < nRows; i++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,440,ut[i] = data[i][col - 1];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,442,eturn out;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,446, Returns the entries in column number <code>col</code> as an array
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,447, of double values.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,449, @param col  column to fetch
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,450, @return array of entries in the column
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,451, @throws org.apache.commons.math.linear.MatrixIndexException if the specified column is greater
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,452,                              than the number of columns in this matrix
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,454,ublic double[] getColumnAsDoubleArray(int col) throws MatrixIndexException {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,455,"f ( !isValidCoordinate( 1, col ) ) {"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,456,"hrow new MatrixIndexException(""illegal column argument"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,458,nt nrows = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,459,ouble[] out = new double[nrows];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,460,or (int i=0;i<nrows;i++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,461,ut[i] = data[i][col-1].doubleValue();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,463,eturn out;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,467, Returns the entry in the specified row and column.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,469, @param row  row location of entry to be fetched
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,470, @param column  column location of entry to be fetched
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,471," @return matrix entry in row,column"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,472, @throws MatrixIndexException if the specified coordinate is outside
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,473,                              the dimensions of this matrix
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,475,"ublic BigDecimal getEntry(int row, int column)"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,476,hrows MatrixIndexException {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,477,"f (!isValidCoordinate(row,column)) {"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,478,"hrow new MatrixIndexException(""matrix entry does not exist"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,480,eturn data[row - 1][column - 1];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,484, Returns the entry in the specified row and column as a double
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,486, @param row  row location of entry to be fetched
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,487, @param column  column location of entry to be fetched
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,488," @return matrix entry in row,column"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,489, @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,490,                              the dimensions of this matrix
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,492,"ublic double getEntryAsDouble(int row, int column) throws MatrixIndexException {"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,493,"eturn getEntry(row,column).doubleValue();"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,497, Sets the entry in the specified row and column to the specified value.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,499, @param row    row location of entry to be set
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,500, @param column    column location of entry to be set
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,501, @param value  value to set
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,502, @throws MatrixIndexException if the specified coordinate is outside
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,503,                              he dimensions of this matrix
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,505,"ublic void setEntry(int row, int column, BigDecimal value)"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,506,hrows MatrixIndexException {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,507,"f (!isValidCoordinate(row,column)) {"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,508,"hrow new MatrixIndexException(""matrix entry does not exist"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,510,ata[row - 1][column - 1] = value;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,511,u = null;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,515, Sets the entry in the specified row and column to the specified value.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,517, @param row    row location of entry to be set
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,518, @param column    column location of entry to be set
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,519, @param value  value to set
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,520, @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,521,                              he dimensions of this matrix
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,523,"ublic void setEntry(int row, int column, double value) throws MatrixIndexException {"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,524,"etEntry(row, column, new BigDecimal(value));"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,528, Returns the transpose matrix.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,530, @return transpose matrix
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,532,ublic BigMatrix transpose() {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,533,nt nRows = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,534,nt nCols = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,535,"igMatrixImpl out = new BigMatrixImpl(nCols, nRows);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,536,igDecimal[][] outData = out.getDataRef();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,537,or (int row = 0; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,538,or (int col = 0; col < nCols; col++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,539,utData[col][row] = data[row][col];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,542,eturn out;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,546, Returns the inverse matrix if this matrix is invertible.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,548, @return inverse matrix
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,549, @throws InvalidMatrixException if this is not invertible
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,551,ublic BigMatrix inverse() throws InvalidMatrixException {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,552,eturn solve(getIdentity(this.getRowDimension()));
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,556, Returns the determinant of this matrix.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,558, @return determinant
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,559, @throws InvalidMatrixException if matrix is not square
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,561,ublic BigDecimal getDeterminant() throws InvalidMatrixException {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,562,f (!isSquare()) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,563,"hrow new InvalidMatrixException(""matrix is not square"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,565,f (isSingular()) {   // note: this has side effect of attempting LU decomp if lu == null
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,566,eturn ZERO;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,567, else {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,568,igDecimal det = (parity == 1) ? ONE : ONE.negate();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,569,or (int i = 0; i < this.getRowDimension(); i++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,570,et = det.multiply(lu[i][i]);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,572,eturn det;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,577, Is this a square matrix?
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,578, @return true if the matrix is square (rowDimension = columnDimension)
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,580,ublic boolean isSquare() {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,581,eturn (this.getColumnDimension() == this.getRowDimension());
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,585, Is this a singular matrix?
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,586, @return true if the matrix is singular
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,588,ublic boolean isSingular() {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,589,f (lu == null) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,590,ry {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,591,uDecompose();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,592,eturn false;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,593, catch (InvalidMatrixException ex) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,594,eturn true;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,596, else { // LU decomp must have been successfully performed
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,597,eturn false; // so the matrix is not singular
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,602, Returns the number of rows in the matrix.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,604, @return rowDimension
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,606,ublic int getRowDimension() {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,607,eturn data.length;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,611, Returns the number of columns in the matrix.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,613, @return columnDimension
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,615,ublic int getColumnDimension() {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,616,eturn data[0].length;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,620," Returns the <a href=""http://mathworld.wolfram.com/MatrixTrace.html"">"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,621, trace</a> of the matrix (the sum of the elements on the main diagonal).
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,623, @return trace
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,625,ublic BigDecimal getTrace() throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,626,f (!isSquare()) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,627,"hrow new IllegalArgumentException(""matrix is not square"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,629,igDecimal trace = data[0][0];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,630,or (int i = 1; i < this.getRowDimension(); i++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,631,race = trace.add(data[i][i]);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,633,eturn trace;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,637, Returns the result of multiplying this by the vector <code>v</code>.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,639, @param v the vector to operate on
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,640, @return this*v
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,641, @throws IllegalArgumentException if columnDimension != v.size()
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,643,ublic BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,644,f (v.length != this.getColumnDimension()) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,645,"hrow new IllegalArgumentException(""vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,647,nt nRows = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,648,nt nCols = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,649,igDecimal[] out = new BigDecimal[v.length];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,650,or (int row = 0; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,651,igDecimal sum = ZERO;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,652,or (int i = 0; i < nCols; i++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,653,um = sum.add(data[row][i].multiply(v[i]));
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,655,ut[row] = sum;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,657,eturn out;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,661, Returns the result of multiplying this by the vector <code>v</code>.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,663, @param v the vector to operate on
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,664, @return this*v
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,665, @throws IllegalArgumentException if columnDimension != v.size()
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,667,ublic BigDecimal[] operate(double[] v) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,668,igDecimal bd[] = new BigDecimal[v.length];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,669,or (int i=0;i<bd.length;i++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,670,d[i] = new BigDecimal(v[i]);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,672,eturn operate(bd);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,676, Returns the (row) vector result of premultiplying this by the vector <code>v</code>.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,678, @param v the row vector to premultiply by
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,679, @return v*this
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,680, @throws IllegalArgumentException if rowDimension != v.size()
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,682,ublic BigDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,683,nt nRows = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,684,f (v.length != nRows) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,685,"hrow new IllegalArgumentException(""vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,687,nt nCols = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,688,igDecimal[] out = new BigDecimal[nCols];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,689,or (int col = 0; col < nCols; col++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,690,igDecimal sum = ZERO;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,691,or (int i = 0; i < nRows; i++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,692,um = sum.add(data[i][col].multiply(v[i]));
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,694,ut[col] = sum;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,696,eturn out;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,700, Returns a matrix of (column) solution vectors for linear systems with
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,701, coefficient matrix = this and constant vectors = columns of
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,702, <code>b</code>.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,704, @param b  array of constants forming RHS of linear systems to
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,705, to solve
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,706, @return solution array
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,707, @throws IllegalArgumentException if this.rowDimension != row dimension
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,708, @throws InvalidMatrixException if this matrix is not square or is singular
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,710,"ublic BigDecimal[] solve(BigDecimal[] b) throws IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,711,nt nRows = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,712,f (b.length != nRows) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,713,"hrow new IllegalArgumentException(""constant vector has wrong length"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,715,igMatrix bMatrix = new BigMatrixImpl(b);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,716,igDecimal[][] solution = ((BigMatrixImpl) (solve(bMatrix))).getDataRef();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,717,igDecimal[] out = new BigDecimal[nRows];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,718,or (int row = 0; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,719,ut[row] = solution[row][0];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,721,eturn out;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,725, Returns a matrix of (column) solution vectors for linear systems with
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,726, coefficient matrix = this and constant vectors = columns of
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,727, <code>b</code>.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,729, @param b  array of constants forming RHS of linear systems to
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,730, to solve
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,731, @return solution array
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,732, @throws IllegalArgumentException if this.rowDimension != row dimension
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,733, @throws InvalidMatrixException if this matrix is not square or is singular
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,735,"ublic BigDecimal[] solve(double[] b) throws IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,736,igDecimal bd[] = new BigDecimal[b.length];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,737,or (int i=0;i<bd.length;i++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,738,d[i] = new BigDecimal(b[i]);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,740,eturn solve(bd);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,744, Returns a matrix of (column) solution vectors for linear systems with
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,745, coefficient matrix = this and constant vectors = columns of
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,746, <code>b</code>.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,748, @param b  matrix of constant vectors forming RHS of linear systems to
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,749, to solve
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,750, @return matrix of solution vectors
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,751, @throws IllegalArgumentException if this.rowDimension != row dimension
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,752, @throws InvalidMatrixException if this matrix is not square or is singular
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,754,"ublic BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException  {"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,755,f (b.getRowDimension() != this.getRowDimension()) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,756,"hrow new IllegalArgumentException(""Incorrect row dimension"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,758,f (!this.isSquare()) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,759,"hrow new InvalidMatrixException(""coefficient matrix is not square"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,761,f (this.isSingular()) { // side effect: compute LU decomp
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,762,"hrow new InvalidMatrixException(""Matrix is singular."");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,765,nt nCol = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,766,nt nColB = b.getColumnDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,767,nt nRowB = b.getRowDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,769,/ Apply permutations to b
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,770,igDecimal[][] bv = b.getData();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,771,igDecimal[][] bp = new BigDecimal[nRowB][nColB];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,772,or (int row = 0; row < nRowB; row++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,773,or (int col = 0; col < nColB; col++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,774,p[row][col] = bv[permutation[row]][col];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,777,v = null;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,779,/ Solve LY = b
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,780,or (int col = 0; col < nCol; col++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,781,or (int i = col + 1; i < nCol; i++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,782,or (int j = 0; j < nColB; j++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,783,p[i][j] = bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,788,/ Solve UX = Y
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,789,or (int col = nCol - 1; col >= 0; col--) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,790,or (int j = 0; j < nColB; j++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,791,"p[col][j] = bp[col][j].divide(lu[col][col], scale, roundingMode);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,793,or (int i = 0; i < col; i++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,794,or (int j = 0; j < nColB; j++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,795,p[i][j] = bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,800,igMatrixImpl outMat = new BigMatrixImpl(bp);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,801,eturn outMat;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,805, Computes a new
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,806," <a href=""http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf"">"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,807," LU decompostion</a> for this matrix, storing the result for use by other methods."
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,808, <p>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,809, <strong>Implementation Note</strong>:<br>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,810," Uses <a href=""http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm"">"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,811," Crout's algortithm</a>, with partial pivoting."
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,812, <p>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,813, <strong>Usage Note</strong>:<br>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,814, This method should rarely be invoked directly. Its only use is
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,815, to force recomputation of the LU decomposition when changes have been
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,816, made to the underlying data using direct array references. Changes
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,817, made using setXxx methods will trigger recomputation when needed
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,818, automatically.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,820, @throws InvalidMatrixException if the matrix is non-square or singular.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,822,ublic void luDecompose() throws InvalidMatrixException {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,824,nt nRows = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,825,nt nCols = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,826,f (nRows != nCols) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,827,"hrow new InvalidMatrixException(""LU decomposition requires that the matrix be square."");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,829,u = this.getData();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,831,/ Initialize permutation array and parity
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,832,ermutation = new int[nRows];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,833,or (int row = 0; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,834,ermutation[row] = row;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,836,arity = 1;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,838,/ Loop over columns
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,839,or (int col = 0; col < nCols; col++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,841,igDecimal sum = ZERO;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,843,/ upper
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,844,or (int row = 0; row < col; row++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,845,um = lu[row][col];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,846,or (int i = 0; i < row; i++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,847,um = sum.subtract(lu[row][i].multiply(lu[i][col]));
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,849,u[row][col] = sum;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,852,/ lower
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,853,nt max = col; // permutation row
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,854,igDecimal largest = ZERO;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,855,or (int row = col; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,856,um = lu[row][col];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,857,or (int i = 0; i < col; i++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,858,um = sum.subtract(lu[row][i].multiply(lu[i][col]));
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,860,u[row][col] = sum;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,862,/ maintain best permutation choice
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,863,f (sum.abs().compareTo(largest) == 1) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,864,argest = sum.abs();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,865,ax = row;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,869,/ Singularity check
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,870,f (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,871,u = null;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,872,"hrow new InvalidMatrixException(""matrix is singular"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,875,/ Pivot if necessary
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,876,f (max != col) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,877,igDecimal tmp = ZERO;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,878,or (int i = 0; i < nCols; i++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,879,mp = lu[max][i];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,880,u[max][i] = lu[col][i];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,881,u[col][i] = tmp;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,883,nt temp = permutation[max];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,884,ermutation[max] = permutation[col];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,885,ermutation[col] = temp;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,886,arity = -parity;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,889,"/Divide the lower elements by the ""winning"" diagonal elt."
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,890,or (int row = col + 1; row < nRows; row++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,891,"u[row][col] = lu[row][col].divide(lu[col][col], scale, roundingMode);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,900, @see Object#toString()
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,902,ublic String toString() {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,903,tringBuffer res = new StringBuffer();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,904,"es.append(""BigMatrixImpl{"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,905,or (int i = 0; i < data.length; i++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,906,f (i > 0)
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,907,"es.append("","");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,908,"es.append(""{"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,909,or (int j = 0; j < data[0].length; j++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,910,f (j > 0)
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,911,"es.append("","");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,912,es.append(data[i][j]);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,913, //for
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,914,"es.append(""}"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,915, //for
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,916,"es.append(""}"");"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,917,eturn res.toString();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,918, //toString
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,920,/------------------------ Protected methods
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,923, Returns <code>dimension x dimension</code> identity matrix.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,925, @param dimension dimension of identity matrix to generate
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,926, @return identity matrix
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,928,rotected BigMatrix getIdentity(int dimension) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,929,"igMatrixImpl out = new BigMatrixImpl(dimension, dimension);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,930,igDecimal[][] d = out.getDataRef();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,931,or (int row = 0; row < dimension; row++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,932,or (int col = 0; col < dimension; col++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,933,[row][col] = row == col ? ONE : ZERO;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,936,eturn out;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,940,  Returns the LU decomposition as a BigMatrix.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,941,  Returns a fresh copy of the cached LU matrix if this has been computed;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,942,  otherwise the composition is computed and cached for use by other methods.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,943,"  Since a copy is returned in either case, changes to the returned matrix do not"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,944,  affect the LU decomposition property.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,945, <p>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,946, The matrix returned is a compact representation of the LU decomposition.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,947," Elements below the main diagonal correspond to entries of the ""L"" matrix;"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,948," elements on and above the main diagonal correspond to entries of the ""U"""
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,949, matrix.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,950, <p>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,951, Example: <pre>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,953,     Returned matrix                L                  U
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,954,         2  3  1                   1  0  0            2  3  1
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,955,         5  4  6                   5  1  0            0  4  6
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,956,         1  7  8                   1  7  1            0  0  8
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,957, </pre>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,959," The L and U matrices satisfy the matrix equation LU = permuteRows(this), <br>"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,960,  where permuteRows reorders the rows of the matrix to follow the order determined
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,961,  by the <a href=#getPermutation()>permutation</a> property.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,963, @return LU decomposition matrix
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,964, @throws InvalidMatrixException if the matrix is non-square or singular.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,966,rotected BigMatrix getLUMatrix() throws InvalidMatrixException {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,967,f (lu == null) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,968,uDecompose();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,970,eturn new BigMatrixImpl(lu);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,974, Returns the permutation associated with the lu decomposition.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,975," The entries of the array represent a permutation of the numbers 0, ... , nRows - 1."
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,976, <p>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,977, Example:
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,978," permutation = [1, 2, 0] means current 2nd row is first, current third row is second"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,979, and current first row is last.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,980, <p>
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,981, Returns a fresh copy of the array.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,983, @return the permutation
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,985,rotected int[] getPermutation() {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,986,nt[] out = new int[permutation.length];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,987,"ystem.arraycopy(permutation, 0, out, 0, permutation.length);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,988,eturn out;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,991,/------------------------ Private methods
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,994, Returns a fresh copy of the underlying data array.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,996, @return a copy of the underlying data array.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,998,rivate BigDecimal[][] copyOut() {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,999,nt nRows = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1000,igDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension()];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1001,"/ can't copy 2-d array in one shot, otherwise get row references"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1002,or (int i = 0; i < nRows; i++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1003,"ystem.arraycopy(data[i], 0, out[i], 0, data[i].length);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1005,eturn out;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1009, Replaces data with a fresh copy of the input array.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1011, @param in data to copy in
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1013,rivate void copyIn(BigDecimal[][] in) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1014,nt nRows = in.length;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1015,nt nCols = in[0].length;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1016,ata = new BigDecimal[nRows][nCols];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1017,"ystem.arraycopy(in, 0, data, 0, in.length);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1018,or (int i = 0; i < nRows; i++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1019,"ystem.arraycopy(in[i], 0, data[i], 0, nCols);"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1021,u = null;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1025, Replaces data with a fresh copy of the input array.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1027, @param in data to copy in
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1029,rivate void copyIn(double[][] in) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1030,nt nRows = in.length;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1031,nt nCols = in[0].length;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1032,ata = new BigDecimal[nRows][nCols];
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1033,or (int i = 0; i < nRows; i++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1034,or (int j=0; j < nCols; j++) {
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1035,ata[i][j] = new BigDecimal(in[i][j]);
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1038,u = null;
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1042, Tests a given coordinate as being valid or invalid
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1044, @param row the row index.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1045, @param col the column index.
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1046, @return true if the coordinate is with the current dimensions
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1048,"rivate boolean isValidCoordinate(int row, int col) {"
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1049,nt nRows = this.getRowDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1050,nt nCols = this.getColumnDimension();
False,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1052,eturn !(row < 1 || row > nRows || col < 1 || col > nCols);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,2,* Copyright 2004 The Apache Software Foundation.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,17,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,18,import java.io.Serializable;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,19,import java.math.BigDecimal;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,22,* Implementation for {@link BigMatrix} using a BigDecimal[][] array to store entries
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,23,"* and <a href=""http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf"">"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,24,* LU decompostion</a> to support linear system
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,25,* solution and inverse.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,26,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,27,"* The LU decompostion is performed as needed, to support the following operations: <ul>"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,28,* <li>solve</li>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,29,* <li>isSingular</li>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,30,* <li>getDeterminant</li>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,31,* <li>inverse</li> </ul>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,32,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,33,* <strong>Usage note</strong>:<br>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,34,* The LU decomposition is stored and reused on subsequent calls.  If matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,35,"* data are modified using any of the public setXxx methods, the saved"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,36,* decomposition is discarded.  If data are modified via references to the
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,37,"* underlying array obtained using <code>getDataRef()</code>, then the stored"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,38,"* LU decomposition will not be discarded.  In this case, you need to"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,39,* explicitly invoke <code>LUDecompose()</code> to recompute the decomposition
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,40,* before using any of the methods above.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,42,* @version $Revision: 1.2 $ $Date: 2004/06/23 16:26:17 $
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,44,"public class BigMatrixImpl implements BigMatrix, Serializable {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,46,/** Serialization id */
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,47,static final long serialVersionUID = -1011428905656140431L;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,49,/** The number zero. */
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,50,private static final BigDecimal ZERO = new BigDecimal(0);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,52,/** The number one. */
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,53,private static final BigDecimal ONE = new BigDecimal(1);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,55,/** Entries of the matrix */
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,56,private BigDecimal data[][] = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,58,/** Entries of cached LU decomposition.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,59,*  All updates to data (other than luDecompose()) *must* set this to null
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,61,private BigDecimal lu[][] = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,63,/** Permutation associated with LU decompostion */
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,64,private int[] permutation = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,66,/** Parity of the permutation associated with the LU decomposition */
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,67,private int parity = 1;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,69,/** Rounding mode for divisions **/
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,70,private int roundingMode = BigDecimal.ROUND_HALF_UP;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,72,/*** BigDecimal scale ***/
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,73,private int scale = 64;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,75,/** Bound to determine effective singularity in LU decomposition */
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,76,protected static BigDecimal TOO_SMALL = new BigDecimal(10E-12);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,79,* Creates a matrix with no data
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,81,public BigMatrixImpl() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,85,* Create a new BigMatrix with the supplied row and column dimensions.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,87,* @param rowDimension      the number of rows in the new matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,88,* @param columnDimension   the number of columns in the new matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,90,"public BigMatrixImpl(int rowDimension, int columnDimension) {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,91,data = new BigDecimal[rowDimension][columnDimension];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,92,lu = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,96,* Create a new BigMatrix using the <code>data</code> as the underlying
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,97,* data array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,98,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,99,"* The input array is copied, not referenced."
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,101,* @param d data for new matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,103,public BigMatrixImpl(BigDecimal[][] d) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,104,this.copyIn(d);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,105,lu = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,109,* Create a new BigMatrix using the <code>data</code> as the underlying
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,110,* data array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,111,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,112,"* The input array is copied, not referenced."
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,114,* @param d data for new matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,116,public BigMatrixImpl(double[][] d) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,117,this.copyIn(d);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,118,lu = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,122,* Create a new (column) BigMatrix using <code>v</code> as the
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,123,* data for the unique column of the <code>v.length x 1</code> matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,124,* created.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,125,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,126,"* The input array is copied, not referenced."
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,128,* @param v column vector holding data for new matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,130,public BigMatrixImpl(BigDecimal[] v) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,131,int nRows = v.length;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,132,data = new BigDecimal[nRows][1];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,133,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,134,data[row][0] = v[row];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,139,* Create a new BigMatrix which is a copy of this.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,141,* @return  the cloned matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,143,public BigMatrix copy() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,144,return new BigMatrixImpl(this.copyOut());
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,148,* Compute the sum of this and <code>m</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,150,* @param m    matrix to be added
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,151,* @return     this + m
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,152,* @exception  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,154,public BigMatrix add(BigMatrix m) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,155,if (this.getColumnDimension() != m.getColumnDimension() ||
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,156,this.getRowDimension() != m.getRowDimension()) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,157,"throw new IllegalArgumentException(""matrix dimension mismatch"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,159,int rowCount = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,160,int columnCount = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,161,BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,162,BigDecimal[][] mData = m.getData();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,163,for (int row = 0; row < rowCount; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,164,for (int col = 0; col < columnCount; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,165,outData[row][col] = data[row][col].add(mData[row][col]);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,168,return new BigMatrixImpl(outData);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,172,* Compute  this minus <code>m</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,174,* @param m    matrix to be subtracted
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,175,* @return     this + m
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,176,* @exception  IllegalArgumentException if m is not the same size as *this
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,178,public BigMatrix subtract(BigMatrix m) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,179,if (this.getColumnDimension() != m.getColumnDimension() ||
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,180,this.getRowDimension() != m.getRowDimension()) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,181,"throw new IllegalArgumentException(""matrix dimension mismatch"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,183,int rowCount = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,184,int columnCount = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,185,BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,186,BigDecimal[][] mData = m.getData();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,187,for (int row = 0; row < rowCount; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,188,for (int col = 0; col < columnCount; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,189,outData[row][col] = data[row][col].subtract(mData[row][col]);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,192,return new BigMatrixImpl(outData);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,196,* Returns the result of adding d to each entry of this.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,198,* @param d    value to be added to each entry
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,199,* @return     d + this
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,201,public BigMatrix scalarAdd(BigDecimal d) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,202,int rowCount = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,203,int columnCount = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,204,BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,205,for (int row = 0; row < rowCount; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,206,for (int col = 0; col < columnCount; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,207,outData[row][col] = data[row][col].add(d);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,210,return new BigMatrixImpl(outData);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,214,* Returns the result multiplying each entry of this by <code>d</code>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,215,* @param d  value to multiply all entries by
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,216,* @return d * this
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,218,public BigMatrix scalarMultiply(BigDecimal d) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,219,int rowCount = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,220,int columnCount = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,221,BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,222,for (int row = 0; row < rowCount; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,223,for (int col = 0; col < columnCount; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,224,outData[row][col] = data[row][col].multiply(d);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,227,return new BigMatrixImpl(outData);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,231,* Returns the result postmultiplying this by <code>m</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,232,* @param m    matrix to postmultiply by
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,233,* @return     this*m
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,234,* @throws     IllegalArgumentException
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,235,*             if columnDimension(this) != rowDimension(m)
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,237,public BigMatrix multiply(BigMatrix m) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,238,if (this.getColumnDimension() != m.getRowDimension()) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,239,"throw new IllegalArgumentException(""Matrices are not multiplication compatible."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,241,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,242,int nCols = m.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,243,int nSum = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,244,BigDecimal[][] mData = m.getData();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,245,BigDecimal[][] outData = new BigDecimal[nRows][nCols];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,246,BigDecimal sum = ZERO;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,247,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,248,for (int col = 0; col < nCols; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,249,sum = ZERO;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,250,for (int i = 0; i < nSum; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,251,sum = sum.add(data[row][i].multiply(mData[i][col]));
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,253,outData[row][col] = sum;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,256,return new BigMatrixImpl(outData);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,260,* Returns the result premultiplying this by <code>m</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,261,* @param m    matrix to premultiply by
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,262,* @return     m * this
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,263,* @throws     IllegalArgumentException
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,264,*             if rowDimension(this) != columnDimension(m)
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,266,public BigMatrix preMultiply(BigMatrix m) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,267,return m.multiply(this);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,271,* Returns matrix entries as a two-dimensional array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,272,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,273,* Makes a fresh copy of the underlying data.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,275,* @return    2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,277,public BigDecimal[][] getData() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,278,return copyOut();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,282,* Returns matrix entries as a two-dimensional array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,283,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,284,* Makes a fresh copy of the underlying data converted to
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,285,* <code>double</code> values.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,287,* @return    2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,289,public double[][] getDataAsDoubleArray() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,290,int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,291,int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,292,double d[][] = new double[nRows][nCols];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,293,for (int i = 0; i < nRows; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,294,for (int j=0; j<nCols;j++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,295,d[i][j] = data[i][j].doubleValue();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,298,return d;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,302,* Overwrites the underlying data for the matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,303,* with a fresh copy of <code>inData</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,305,* @param  inData 2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,307,public void setData(BigDecimal[][] inData) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,308,copyIn(inData);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,309,lu = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,313,* Overwrites the underlying data for the matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,314,* with a fresh copy of <code>inData</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,316,* @param  inData 2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,318,public void setData(double[][] inData) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,319,copyIn(inData);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,320,lu = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,324,* Returns a reference to the underlying data array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,325,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,326,* Does not make a fresh copy of the underlying data.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,328,* @return 2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,330,public BigDecimal[][] getDataRef() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,331,return data;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,335,* Overwrites the underlying data for the matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,336,* with a reference to <code>inData</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,337,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,338,* Does not make a fresh copy of <code>data</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,340,* @param  inData 2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,342,public void setDataRef(BigDecimal[][] inData) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,343,this.data = inData;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,344,lu = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,348,* Gets the rounding mode for division operations
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,349,* The default is {@link BigDecimal#ROUND_HALF_UP}
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,350,* @see BigDecimal
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,351,* @return the rounding mode.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,353,public int getRoundingMode() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,354,return roundingMode;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,358,* Sets the rounding mode for decimal divisions.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,359,* @see BigDecimal
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,360,* @param roundingMode
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,362,public void setRoundingMode(int roundingMode) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,363,this.roundingMode = roundingMode;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,367,* Sets the scale for division operations.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,368,* The default is 64
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,369,* @see BigDecimal
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,370,* @return the scale
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,372,public int getScale() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,373,return scale;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,377,* Sets the scale for division operations.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,378,* @see BigDecimal
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,379,* @param scale
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,381,public void setScale(int scale) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,382,this.scale = scale;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,386,"* Returns the <a href=""http://mathworld.wolfram.com/MaximumAbsoluteRowSumNorm.html"">"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,387,* maximum absolute row sum norm</a> of the matrix.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,389,* @return norm
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,391,public BigDecimal getNorm() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,392,BigDecimal maxColSum = ZERO;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,393,for (int col = 0; col < this.getColumnDimension(); col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,394,BigDecimal sum = ZERO;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,395,for (int row = 0; row < this.getRowDimension(); row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,396,sum = sum.add(data[row][col].abs());
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,398,maxColSum = maxColSum.max(sum);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,400,return maxColSum;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,404,* Returns the entries in row number <code>row</code> as an array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,406,* @param row the row to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,407,* @return array of entries in the row
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,408,* @throws MatrixIndexException if the specified row is greater
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,409,*                              than the number of rows in this matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,411,public BigDecimal[] getRow(int row) throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,412,"if ( !isValidCoordinate( row, 1 ) ) {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,413,"throw new MatrixIndexException(""illegal row argument"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,415,int ncols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,416,BigDecimal[] out = new BigDecimal[ncols];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,417,"System.arraycopy(data[row - 1], 0, out, 0, ncols);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,418,return out;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,422,* Returns the entries in row number <code>row</code> as an array
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,423,* of double values.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,425,* @param row the row to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,426,* @return array of entries in the row
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,427,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified row is greater
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,428,*                              than the number of rows in this matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,430,public double[] getRowAsDoubleArray(int row) throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,431,"if ( !isValidCoordinate( row, 1 ) ) {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,432,"throw new MatrixIndexException(""illegal row argument"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,434,int ncols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,435,double[] out = new double[ncols];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,436,for (int i=0;i<ncols;i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,437,out[i] = data[row-1][i].doubleValue();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,439,return out;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,443,* Returns the entries in column number <code>col</code> as an array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,445,* @param col  column to fetch
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,446,* @return array of entries in the column
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,447,* @throws MatrixIndexException if the specified column is greater
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,448,*                              than the number of columns in this matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,450,public BigDecimal[] getColumn(int col) throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,451,"if ( !isValidCoordinate(1, col) ) {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,452,"throw new MatrixIndexException(""illegal column argument"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,454,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,455,BigDecimal[] out = new BigDecimal[nRows];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,456,for (int i = 0; i < nRows; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,457,out[i] = data[i][col - 1];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,459,return out;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,463,* Returns the entries in column number <code>col</code> as an array
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,464,* of double values.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,466,* @param col  column to fetch
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,467,* @return array of entries in the column
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,468,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified column is greater
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,469,*                              than the number of columns in this matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,471,public double[] getColumnAsDoubleArray(int col) throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,472,"if ( !isValidCoordinate( 1, col ) ) {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,473,"throw new MatrixIndexException(""illegal column argument"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,475,int nrows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,476,double[] out = new double[nrows];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,477,for (int i=0;i<nrows;i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,478,out[i] = data[i][col-1].doubleValue();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,480,return out;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,484,* Returns the entry in the specified row and column.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,486,* @param row  row location of entry to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,487,* @param column  column location of entry to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,488,"* @return matrix entry in row,column"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,489,* @throws MatrixIndexException if the specified coordinate is outside
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,490,*                              the dimensions of this matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,492,"public BigDecimal getEntry(int row, int column)"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,493,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,494,"if (!isValidCoordinate(row,column)) {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,495,"throw new MatrixIndexException(""matrix entry does not exist"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,497,return data[row - 1][column - 1];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,501,* Returns the entry in the specified row and column as a double
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,503,* @param row  row location of entry to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,504,* @param column  column location of entry to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,505,"* @return matrix entry in row,column"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,506,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,507,*                              the dimensions of this matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,509,"public double getEntryAsDouble(int row, int column) throws MatrixIndexException {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,510,"return getEntry(row,column).doubleValue();"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,514,* Sets the entry in the specified row and column to the specified value.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,516,* @param row    row location of entry to be set
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,517,* @param column    column location of entry to be set
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,518,* @param value  value to set
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,519,* @throws MatrixIndexException if the specified coordinate is outside
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,520,*                              he dimensions of this matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,522,"public void setEntry(int row, int column, BigDecimal value)"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,523,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,524,"if (!isValidCoordinate(row,column)) {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,525,"throw new MatrixIndexException(""matrix entry does not exist"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,527,data[row - 1][column - 1] = value;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,528,lu = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,532,* Sets the entry in the specified row and column to the specified value.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,534,* @param row    row location of entry to be set
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,535,* @param column    column location of entry to be set
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,536,* @param value  value to set
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,537,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,538,*                              he dimensions of this matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,540,"public void setEntry(int row, int column, double value) throws MatrixIndexException {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,541,"setEntry(row, column, new BigDecimal(value));"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,545,* Returns the transpose matrix.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,547,* @return transpose matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,549,public BigMatrix transpose() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,550,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,551,int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,552,"BigMatrixImpl out = new BigMatrixImpl(nCols, nRows);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,553,BigDecimal[][] outData = out.getDataRef();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,554,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,555,for (int col = 0; col < nCols; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,556,outData[col][row] = data[row][col];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,559,return out;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,563,* Returns the inverse matrix if this matrix is invertible.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,565,* @return inverse matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,566,* @throws InvalidMatrixException if this is not invertible
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,568,public BigMatrix inverse() throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,569,return solve(getIdentity(this.getRowDimension()));
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,573,* Returns the determinant of this matrix.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,575,* @return determinant
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,576,* @throws InvalidMatrixException if matrix is not square
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,578,public BigDecimal getDeterminant() throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,579,if (!isSquare()) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,580,"throw new InvalidMatrixException(""matrix is not square"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,582,if (isSingular()) {   // note: this has side effect of attempting LU decomp if lu == null
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,583,return ZERO;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,584,} else {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,585,BigDecimal det = (parity == 1) ? ONE : ONE.negate();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,586,for (int i = 0; i < this.getRowDimension(); i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,587,det = det.multiply(lu[i][i]);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,589,return det;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,594,* Is this a square matrix?
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,595,* @return true if the matrix is square (rowDimension = columnDimension)
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,597,public boolean isSquare() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,598,return (this.getColumnDimension() == this.getRowDimension());
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,602,* Is this a singular matrix?
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,603,* @return true if the matrix is singular
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,605,public boolean isSingular() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,606,if (lu == null) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,607,try {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,608,luDecompose();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,609,return false;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,610,} catch (InvalidMatrixException ex) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,611,return true;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,613,} else { // LU decomp must have been successfully performed
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,614,return false; // so the matrix is not singular
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,619,* Returns the number of rows in the matrix.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,621,* @return rowDimension
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,623,public int getRowDimension() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,624,return data.length;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,628,* Returns the number of columns in the matrix.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,630,* @return columnDimension
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,632,public int getColumnDimension() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,633,return data[0].length;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,637,"* Returns the <a href=""http://mathworld.wolfram.com/MatrixTrace.html"">"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,638,* trace</a> of the matrix (the sum of the elements on the main diagonal).
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,640,* @return trace
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,642,* @throws IllegalArgumentException if this matrix is not square.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,644,public BigDecimal getTrace() throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,645,if (!isSquare()) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,646,"throw new IllegalArgumentException(""matrix is not square"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,648,BigDecimal trace = data[0][0];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,649,for (int i = 1; i < this.getRowDimension(); i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,650,trace = trace.add(data[i][i]);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,652,return trace;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,656,* Returns the result of multiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,658,* @param v the vector to operate on
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,659,* @return this*v
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,660,* @throws IllegalArgumentException if columnDimension != v.size()
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,662,public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,663,if (v.length != this.getColumnDimension()) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,664,"throw new IllegalArgumentException(""vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,666,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,667,int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,668,BigDecimal[] out = new BigDecimal[v.length];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,669,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,670,BigDecimal sum = ZERO;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,671,for (int i = 0; i < nCols; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,672,sum = sum.add(data[row][i].multiply(v[i]));
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,674,out[row] = sum;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,676,return out;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,680,* Returns the result of multiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,682,* @param v the vector to operate on
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,683,* @return this*v
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,684,* @throws IllegalArgumentException if columnDimension != v.size()
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,686,public BigDecimal[] operate(double[] v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,687,BigDecimal bd[] = new BigDecimal[v.length];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,688,for (int i=0;i<bd.length;i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,689,bd[i] = new BigDecimal(v[i]);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,691,return operate(bd);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,695,* Returns the (row) vector result of premultiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,697,* @param v the row vector to premultiply by
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,698,* @return v*this
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,699,* @throws IllegalArgumentException if rowDimension != v.size()
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,701,public BigDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,702,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,703,if (v.length != nRows) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,704,"throw new IllegalArgumentException(""vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,706,int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,707,BigDecimal[] out = new BigDecimal[nCols];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,708,for (int col = 0; col < nCols; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,709,BigDecimal sum = ZERO;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,710,for (int i = 0; i < nRows; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,711,sum = sum.add(data[i][col].multiply(v[i]));
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,713,out[col] = sum;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,715,return out;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,719,* Returns a matrix of (column) solution vectors for linear systems with
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,720,* coefficient matrix = this and constant vectors = columns of
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,721,* <code>b</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,723,* @param b  array of constants forming RHS of linear systems to
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,724,* to solve
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,725,* @return solution array
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,726,* @throws IllegalArgumentException if this.rowDimension != row dimension
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,727,* @throws InvalidMatrixException if this matrix is not square or is singular
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,729,"public BigDecimal[] solve(BigDecimal[] b) throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,730,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,731,if (b.length != nRows) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,732,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,734,BigMatrix bMatrix = new BigMatrixImpl(b);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,735,BigDecimal[][] solution = ((BigMatrixImpl) (solve(bMatrix))).getDataRef();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,736,BigDecimal[] out = new BigDecimal[nRows];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,737,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,738,out[row] = solution[row][0];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,740,return out;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,744,* Returns a matrix of (column) solution vectors for linear systems with
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,745,* coefficient matrix = this and constant vectors = columns of
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,746,* <code>b</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,748,* @param b  array of constants forming RHS of linear systems to
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,749,* to solve
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,750,* @return solution array
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,751,* @throws IllegalArgumentException if this.rowDimension != row dimension
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,752,* @throws InvalidMatrixException if this matrix is not square or is singular
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,754,"public BigDecimal[] solve(double[] b) throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,755,BigDecimal bd[] = new BigDecimal[b.length];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,756,for (int i=0;i<bd.length;i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,757,bd[i] = new BigDecimal(b[i]);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,759,return solve(bd);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,763,* Returns a matrix of (column) solution vectors for linear systems with
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,764,* coefficient matrix = this and constant vectors = columns of
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,765,* <code>b</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,767,* @param b  matrix of constant vectors forming RHS of linear systems to
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,768,* to solve
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,769,* @return matrix of solution vectors
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,770,* @throws IllegalArgumentException if this.rowDimension != row dimension
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,771,* @throws InvalidMatrixException if this matrix is not square or is singular
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,773,"public BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException  {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,774,if (b.getRowDimension() != this.getRowDimension()) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,775,"throw new IllegalArgumentException(""Incorrect row dimension"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,777,if (!this.isSquare()) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,778,"throw new InvalidMatrixException(""coefficient matrix is not square"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,780,if (this.isSingular()) { // side effect: compute LU decomp
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,781,"throw new InvalidMatrixException(""Matrix is singular."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,784,int nCol = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,785,int nColB = b.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,786,int nRowB = b.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,788,// Apply permutations to b
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,789,BigDecimal[][] bv = b.getData();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,790,BigDecimal[][] bp = new BigDecimal[nRowB][nColB];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,791,for (int row = 0; row < nRowB; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,792,for (int col = 0; col < nColB; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,793,bp[row][col] = bv[permutation[row]][col];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,796,bv = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,798,// Solve LY = b
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,799,for (int col = 0; col < nCol; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,800,for (int i = col + 1; i < nCol; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,801,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,802,bp[i][j] = bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,807,// Solve UX = Y
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,808,for (int col = nCol - 1; col >= 0; col--) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,809,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,810,"bp[col][j] = bp[col][j].divide(lu[col][col], scale, roundingMode);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,812,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,813,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,814,bp[i][j] = bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,819,BigMatrixImpl outMat = new BigMatrixImpl(bp);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,820,return outMat;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,824,* Computes a new
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,825,"* <a href=""http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf"">"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,826,"* LU decompostion</a> for this matrix, storing the result for use by other methods."
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,827,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,828,* <strong>Implementation Note</strong>:<br>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,829,"* Uses <a href=""http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm"">"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,830,"* Crout's algortithm</a>, with partial pivoting."
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,831,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,832,* <strong>Usage Note</strong>:<br>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,833,* This method should rarely be invoked directly. Its only use is
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,834,* to force recomputation of the LU decomposition when changes have been
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,835,* made to the underlying data using direct array references. Changes
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,836,* made using setXxx methods will trigger recomputation when needed
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,837,* automatically.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,839,* @throws InvalidMatrixException if the matrix is non-square or singular.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,841,public void luDecompose() throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,843,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,844,int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,845,if (nRows != nCols) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,846,"throw new InvalidMatrixException(""LU decomposition requires that the matrix be square."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,848,lu = this.getData();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,850,// Initialize permutation array and parity
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,851,permutation = new int[nRows];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,852,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,853,permutation[row] = row;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,855,parity = 1;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,857,// Loop over columns
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,858,for (int col = 0; col < nCols; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,860,BigDecimal sum = ZERO;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,862,// upper
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,863,for (int row = 0; row < col; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,864,sum = lu[row][col];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,865,for (int i = 0; i < row; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,866,sum = sum.subtract(lu[row][i].multiply(lu[i][col]));
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,868,lu[row][col] = sum;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,871,// lower
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,872,int max = col; // permutation row
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,873,BigDecimal largest = ZERO;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,874,for (int row = col; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,875,sum = lu[row][col];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,876,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,877,sum = sum.subtract(lu[row][i].multiply(lu[i][col]));
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,879,lu[row][col] = sum;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,881,// maintain best permutation choice
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,882,if (sum.abs().compareTo(largest) == 1) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,883,largest = sum.abs();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,884,max = row;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,888,// Singularity check
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,889,if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,890,lu = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,891,"throw new InvalidMatrixException(""matrix is singular"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,894,// Pivot if necessary
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,895,if (max != col) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,896,BigDecimal tmp = ZERO;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,897,for (int i = 0; i < nCols; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,898,tmp = lu[max][i];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,899,lu[max][i] = lu[col][i];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,900,lu[col][i] = tmp;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,902,int temp = permutation[max];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,903,permutation[max] = permutation[col];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,904,permutation[col] = temp;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,905,parity = -parity;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,908,"//Divide the lower elements by the ""winning"" diagonal elt."
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,909,for (int row = col + 1; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,910,"lu[row][col] = lu[row][col].divide(lu[col][col], scale, roundingMode);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,919,* @see Object#toString()
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,921,public String toString() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,922,StringBuffer res = new StringBuffer();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,923,"res.append(""BigMatrixImpl{"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,924,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,925,if (i > 0)
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,926,"res.append("","");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,927,"res.append(""{"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,928,for (int j = 0; j < data[0].length; j++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,929,if (j > 0)
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,930,"res.append("","");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,931,res.append(data[i][j]);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,932,} //for
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,933,"res.append(""}"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,934,} //for
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,935,"res.append(""}"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,936,return res.toString();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,937,} //toString
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,939,//------------------------ Protected methods
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,942,* Returns <code>dimension x dimension</code> identity matrix.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,944,* @param dimension dimension of identity matrix to generate
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,945,* @return identity matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,947,protected BigMatrix getIdentity(int dimension) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,948,"BigMatrixImpl out = new BigMatrixImpl(dimension, dimension);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,949,BigDecimal[][] d = out.getDataRef();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,950,for (int row = 0; row < dimension; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,951,for (int col = 0; col < dimension; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,952,d[row][col] = row == col ? ONE : ZERO;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,955,return out;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,959,*  Returns the LU decomposition as a BigMatrix.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,960,*  Returns a fresh copy of the cached LU matrix if this has been computed;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,961,*  otherwise the composition is computed and cached for use by other methods.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,962,"*  Since a copy is returned in either case, changes to the returned matrix do not"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,963,*  affect the LU decomposition property.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,964,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,965,* The matrix returned is a compact representation of the LU decomposition.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,966,"* Elements below the main diagonal correspond to entries of the ""L"" matrix;"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,967,"* elements on and above the main diagonal correspond to entries of the ""U"""
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,968,* matrix.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,969,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,970,* Example: <pre>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,972,*     Returned matrix                L                  U
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,973,*         2  3  1                   1  0  0            2  3  1
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,974,*         5  4  6                   5  1  0            0  4  6
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,975,*         1  7  8                   1  7  1            0  0  8
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,976,* </pre>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,978,"* The L and U matrices satisfy the matrix equation LU = permuteRows(this), <br>"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,979,*  where permuteRows reorders the rows of the matrix to follow the order determined
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,980,*  by the <a href=#getPermutation()>permutation</a> property.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,982,* @return LU decomposition matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,983,* @throws InvalidMatrixException if the matrix is non-square or singular.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,985,protected BigMatrix getLUMatrix() throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,986,if (lu == null) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,987,luDecompose();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,989,return new BigMatrixImpl(lu);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,993,* Returns the permutation associated with the lu decomposition.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,994,"* The entries of the array represent a permutation of the numbers 0, ... , nRows - 1."
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,995,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,996,* Example:
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,997,"* permutation = [1, 2, 0] means current 2nd row is first, current third row is second"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,998,* and current first row is last.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,999,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1000,* Returns a fresh copy of the array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1002,* @return the permutation
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1004,protected int[] getPermutation() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1005,int[] out = new int[permutation.length];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1006,"System.arraycopy(permutation, 0, out, 0, permutation.length);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1007,return out;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1010,//------------------------ Private methods
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1013,* Returns a fresh copy of the underlying data array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1015,* @return a copy of the underlying data array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1017,private BigDecimal[][] copyOut() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1018,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1019,BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension()];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1020,"// can't copy 2-d array in one shot, otherwise get row references"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1021,for (int i = 0; i < nRows; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1022,"System.arraycopy(data[i], 0, out[i], 0, data[i].length);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1024,return out;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1028,* Replaces data with a fresh copy of the input array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1030,* @param in data to copy in
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1032,private void copyIn(BigDecimal[][] in) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1033,int nRows = in.length;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1034,int nCols = in[0].length;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1035,data = new BigDecimal[nRows][nCols];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1036,"System.arraycopy(in, 0, data, 0, in.length);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1037,for (int i = 0; i < nRows; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1038,"System.arraycopy(in[i], 0, data[i], 0, nCols);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1040,lu = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1044,* Replaces data with a fresh copy of the input array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1046,* @param in data to copy in
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1048,private void copyIn(double[][] in) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1049,int nRows = in.length;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1050,int nCols = in[0].length;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1051,data = new BigDecimal[nRows][nCols];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1052,for (int i = 0; i < nRows; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1053,for (int j=0; j < nCols; j++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1054,data[i][j] = new BigDecimal(in[i][j]);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1057,lu = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1061,* Tests a given coordinate as being valid or invalid
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1063,* @param row the row index.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1064,* @param col the column index.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1065,* @return true if the coordinate is with the current dimensions
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1067,"private boolean isValidCoordinate(int row, int col) {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1068,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1069,int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1071,return !(row < 1 || row > nRows || col < 1 || col > nCols);
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,41, @version $Revision: 1.24 $ $Date: 2004/06/07 03:26:31 $
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,41,* @version $Revision: 1.25 $ $Date: 2004/06/23 16:26:17 $
False,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,418,ouble det = (double) parity;
True,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,src/java/org/apache/commons/math/linear/RealMatrixImpl.java,418,double det = parity;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,55, @version $Revision: 1.26 $ $Date: 2004/06/16 03:16:26 $
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,55,* @version $Revision: 1.27 $ $Date: 2004/06/23 16:26:17 $
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,135,f (in != null) try {in.close();} catch (Exception ex) {};
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,135,if (in != null) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,136,try {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,137,in.close();
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,138,} catch (Exception ex) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,139,// ignore
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,158,f (in != null)
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,164,if (in != null) {
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,168,// ignore
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,43, @version $Revision: 1.13 $ $Date: 2004/06/14 23:15:15 $
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,43,* @version $Revision: 1.14 $ $Date: 2004/06/23 16:26:17 $
False,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,245, catch (IOException ex) {}
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,245,} catch (IOException ex) {
True,src/java/org/apache/commons/math/random/ValueServer.java,src/java/org/apache/commons/math/random/ValueServer.java,246,// ignore
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,27, @version $Revision: 1.20 $ $Date: 2004/06/10 18:27:47 $
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,27,* @version $Revision: 1.21 $ $Date: 2004/06/23 16:26:17 $
False,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,26, @version $Revision: 1.1 $ $Date: 2004/05/05 19:54:58 $
True,src/java/org/apache/commons/math/special/Erf.java,src/java/org/apache/commons/math/special/Erf.java,26,* @version $Revision: 1.2 $ $Date: 2004/06/23 16:26:17 $
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,28, @version $Revision: 1.20 $ $Date: 2004/06/10 18:34:53 $
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,28,* @version $Revision: 1.21 $ $Date: 2004/06/23 16:26:17 $
False,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,38, @version $Revision: 1.23 $ $Date: 2004/06/20 16:53:17 $
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,38,* @version $Revision: 1.24 $ $Date: 2004/06/23 16:26:17 $
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,33, @version $Revision: 1.28 $ $Date: 2004/06/14 23:26:53 $
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,33,* @version $Revision: 1.29 $ $Date: 2004/06/23 16:26:17 $
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,23, @version $Revision: 1.2 $ $Date: 2004/05/19 15:06:44 $
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTest.java,23,* @version $Revision: 1.3 $ $Date: 2004/06/23 16:26:14 $
False,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,25, @version $Revision: 1.7 $ $Date: 2004/06/20 02:54:05 $
True,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,25,* @version $Revision: 1.8 $ $Date: 2004/06/23 16:26:14 $
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,24, @version $Revision: 1.5 $ $Date: 2004/06/02 13:08:55 $
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,24,* @version $Revision: 1.6 $ $Date: 2004/06/23 16:26:14 $
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,27, @version $Revision: 1.7 $ $Date: 2004/06/14 23:26:53 $
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,27,* @version $Revision: 1.8 $ $Date: 2004/06/23 16:26:14 $
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,35,* Default constructor.
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,235, @throws MathException if the statistic can not be computed do to a
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,236,         convergence or other numerical error.
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,702,* @return a distribution factory.
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,750,* @param equalVariances  are variances assumed equal?
False,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,52, @version $Revision: 1.3 $ $Date: 2004/05/19 14:16:32 $
True,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,src/java/org/apache/commons/math/stat/multivariate/BivariateRegression.java,52,* @version $Revision: 1.4 $ $Date: 2004/06/23 16:26:17 $
False,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,27, @version $Revision: 1.16 $ $Date: 2004/06/17 22:31:58 $
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,27,* @version $Revision: 1.17 $ $Date: 2004/06/23 16:26:16 $
True,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractStorelessUnivariateStatistic.java,75,* @param object object to test equality against.
False,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,24, @version $Revision: 1.17 $ $Date: 2004/06/01 21:34:35 $
True,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java,24,* @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:16 $
False,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatistics.java,37, @version $Revision: 1.7 $ $Date: 2004/06/14 23:26:53 $
True,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatistics.java,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatistics.java,37,* @version $Revision: 1.8 $ $Date: 2004/06/23 16:26:16 $
False,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java,26, @version $Revision: 1.8 $ $Date: 2004/06/14 23:26:53 $
True,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java,src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java,26,* @version $Revision: 1.9 $ $Date: 2004/06/23 16:26:16 $
False,src/java/org/apache/commons/math/stat/univariate/StatisticalSummary.java,src/java/org/apache/commons/math/stat/univariate/StatisticalSummary.java,21, @version $Revision: 1.3 $ $Date: 2004/06/14 23:26:53 $
True,src/java/org/apache/commons/math/stat/univariate/StatisticalSummary.java,src/java/org/apache/commons/math/stat/univariate/StatisticalSummary.java,21,* @version $Revision: 1.4 $ $Date: 2004/06/23 16:26:16 $
False,src/java/org/apache/commons/math/stat/univariate/StatisticalSummaryValues.java,src/java/org/apache/commons/math/stat/univariate/StatisticalSummaryValues.java,23, @version $Revision: 1.2 $ $Date: 2004/06/20 01:50:18 $
True,src/java/org/apache/commons/math/stat/univariate/StatisticalSummaryValues.java,src/java/org/apache/commons/math/stat/univariate/StatisticalSummaryValues.java,23,* @version $Revision: 1.3 $ $Date: 2004/06/23 16:26:16 $
False,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,25, @version $Revision: 1.15 $ $Date: 2004/03/21 21:57:19 $
True,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/StorelessUnivariateStatistic.java,25,* @version $Revision: 1.16 $ $Date: 2004/06/23 16:26:16 $
False,src/java/org/apache/commons/math/stat/univariate/SummaryStatistics.java,src/java/org/apache/commons/math/stat/univariate/SummaryStatistics.java,26, @version $Revision: 1.8 $ $Date: 2004/06/17 23:14:55 $
True,src/java/org/apache/commons/math/stat/univariate/SummaryStatistics.java,src/java/org/apache/commons/math/stat/univariate/SummaryStatistics.java,26,* @version $Revision: 1.9 $ $Date: 2004/06/23 16:26:16 $
True,src/java/org/apache/commons/math/stat/univariate/SummaryStatistics.java,src/java/org/apache/commons/math/stat/univariate/SummaryStatistics.java,165,* @param object the object to test equality against.
False,src/java/org/apache/commons/math/stat/univariate/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/univariate/SummaryStatisticsImpl.java,32, @version $Revision: 1.5 $ $Date: 2004/06/17 23:27:52 $
True,src/java/org/apache/commons/math/stat/univariate/SummaryStatisticsImpl.java,src/java/org/apache/commons/math/stat/univariate/SummaryStatisticsImpl.java,32,* @version $Revision: 1.6 $ $Date: 2004/06/23 16:26:16 $
False,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,23, @version $Revision: 1.13 $ $Date: 2004/03/04 04:25:09 $
True,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/univariate/UnivariateStatistic.java,23,* @version $Revision: 1.14 $ $Date: 2004/06/23 16:26:16 $
False,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,29, @version $Revision: 1.14 $ $Date: 2004/04/27 16:42:30 $
True,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FirstMoment.java,29,* @version $Revision: 1.15 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,25, @version $Revision: 1.16 $ $Date: 2004/04/27 16:42:30 $
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,25,* @version $Revision: 1.17 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,38, @version $Revision: 1.19 $ $Date: 2004/06/18 07:03:40 $
True,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java,38,* @version $Revision: 1.20 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,34, @version $Revision: 1.21 $ $Date: 2004/06/18 04:14:27 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,34,* @version $Revision: 1.22 $ $Date: 2004/06/23 16:26:14 $
False,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,32, @version $Revision: 1.17 $ $Date: 2004/04/27 16:42:30 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,src/java/org/apache/commons/math/stat/univariate/moment/Mean.java,32,* @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,25, @version $Revision: 1.15 $ $Date: 2004/04/27 16:42:30 $
True,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/SecondMoment.java,25,* @version $Revision: 1.16 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,31, @version $Revision: 1.20 $ $Date: 2004/04/27 16:42:30 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,31,* @version $Revision: 1.21 $ $Date: 2004/06/23 16:26:14 $
False,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,22, @version $Revision: 1.16 $ $Date: 2004/04/27 16:42:30 $
True,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,src/java/org/apache/commons/math/stat/univariate/moment/StandardDeviation.java,22,* @version $Revision: 1.17 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,25, @version $Revision: 1.15 $ $Date: 2004/04/27 16:42:30 $
True,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/ThirdMoment.java,25,* @version $Revision: 1.16 $ $Date: 2004/06/23 16:26:14 $
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,28, @version $Revision: 1.19 $ $Date: 2004/04/27 16:42:30 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,28,* @version $Revision: 1.20 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,32, @version $Revision: 1.17 $ $Date: 2004/06/18 13:24:06 $
True,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,src/java/org/apache/commons/math/stat/univariate/rank/Max.java,32,* @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:17 $
False,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,25, @version $Revision: 1.13 $ $Date: 2004/04/27 16:42:33 $
True,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,src/java/org/apache/commons/math/stat/univariate/rank/Median.java,25,* @version $Revision: 1.14 $ $Date: 2004/06/23 16:26:17 $
False,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,32, @version $Revision: 1.18 $ $Date: 2004/06/18 22:11:33 $
True,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,src/java/org/apache/commons/math/stat/univariate/rank/Min.java,32,* @version $Revision: 1.19 $ $Date: 2004/06/23 16:26:17 $
False,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,59, @version $Revision: 1.20 $ $Date: 2004/06/19 21:14:54 $
True,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,src/java/org/apache/commons/math/stat/univariate/rank/Percentile.java,59,* @version $Revision: 1.21 $ $Date: 2004/06/23 16:26:17 $
False,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,31, @version $Revision: 1.17 $ $Date: 2004/04/27 16:42:32 $
True,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,src/java/org/apache/commons/math/stat/univariate/summary/Product.java,31,* @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:16 $
False,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,25, @version $Revision: 1.19 $ $Date: 2004/04/27 16:42:32 $
True,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,src/java/org/apache/commons/math/stat/univariate/summary/Sum.java,25,* @version $Revision: 1.20 $ $Date: 2004/06/23 16:26:16 $
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,35, @version $Revision: 1.18 $ $Date: 2004/06/18 06:32:07 $
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfLogs.java,35,* @version $Revision: 1.19 $ $Date: 2004/06/23 16:26:16 $
False,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,31, @version $Revision: 1.17 $ $Date: 2004/04/27 16:42:32 $
True,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,src/java/org/apache/commons/math/stat/univariate/summary/SumOfSquares.java,31,* @version $Revision: 1.18 $ $Date: 2004/06/23 16:26:16 $
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,35, @version $Revision: 1.13 $ $Date: 2004/06/02 00:04:11 $
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,35,* @version $Revision: 1.14 $ $Date: 2004/06/23 16:26:16 $
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,108," <a href=""http://citeseer.nj.nec.com/egecioglu91fast.html"">"
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,109," Fast Computation of Continued Fractions</a>, Computers Math. Applic.,"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,108,"* <a href=""http://citeseer.ist.psu.edu/egecioglu91fast.html"">"
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,109,"* On Fast Computation of Continued Fractions</a>, Computers Math. Applic.,"
False,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,29, @version $Revision: 1.15 $ $Date: 2004/06/18 04:59:06 $
True,src/java/org/apache/commons/math/util/DefaultTransformer.java,src/java/org/apache/commons/math/util/DefaultTransformer.java,29,* @version $Revision: 1.16 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,24, @version $Revision: 1.12 $ $Date: 2004/06/14 21:41:33 $
True,src/java/org/apache/commons/math/util/DoubleArray.java,src/java/org/apache/commons/math/util/DoubleArray.java,24,* @version $Revision: 1.13 $ $Date: 2004/06/23 16:26:16 $
False,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,22, @version $Revision: 1.18 $ $Date: 2004/06/17 21:31:00 $
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,22,* @version $Revision: 1.19 $ $Date: 2004/06/23 16:26:16 $
False,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,22, @version $Revision: 1.10 $ $Date: 2004/02/21 21:35:16 $
True,src/java/org/apache/commons/math/util/NumberTransformer.java,src/java/org/apache/commons/math/util/NumberTransformer.java,22,* @version $Revision: 1.11 $ $Date: 2004/06/23 16:26:15 $
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,69, @version $Revision: 1.1 $ $Date: 2004/06/14 21:41:33 $
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,69,* @version $Revision: 1.2 $ $Date: 2004/06/23 16:26:16 $
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,472, Returns a double[] array containing the elements of this
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,472,* Returns a double array containing the elements of this
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,476,* @return the double array.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,593,* @param expansionFactor the new expansion factor value.
False,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,31, @version $Revision: 1.14 $ $Date: 2004/06/18 04:59:06 $
True,src/java/org/apache/commons/math/util/TransformerMap.java,src/java/org/apache/commons/math/util/TransformerMap.java,31,* @version $Revision: 1.15 $ $Date: 2004/06/23 16:26:15 $
False,src/test/org/apache/commons/math/stat/univariate/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/univariate/ListUnivariateImpl.java,29, @version $Revision: 1.4 $ $Date: 2004/06/01 21:28:06 $
True,src/test/org/apache/commons/math/stat/univariate/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/univariate/ListUnivariateImpl.java,29,* @version $Revision: 1.5 $ $Date: 2004/06/23 16:26:18 $
False,src/test/org/apache/commons/math/stat/univariate/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/univariate/ListUnivariateImpl.java,199, @see org.apache.commons.math.stat.Univariate#setWindowSize(int)
True,src/test/org/apache/commons/math/stat/univariate/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/univariate/ListUnivariateImpl.java,199,* @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#setWindowSize(int)
True,src/test/org/apache/commons/math/stat/univariate/ListUnivariateImpl.java,src/test/org/apache/commons/math/stat/univariate/ListUnivariateImpl.java,212,* @see org.apache.commons.math.stat.univariate.DescriptiveStatistics#getWindowSize

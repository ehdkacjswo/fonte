is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,199,** Get the norm for the vector.
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,199,/** Get the L<sub>1</sub> norm for the vector.
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,200,* @return L<sub>1</sub> norm for the vector
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,202,public double getNorm1() {
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,203,return Math.abs(x) + Math.abs(y) + Math.abs(z);
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,206,/** Get the L<sub>2</sub> norm for the vector.
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,220,/** Get the L<sub>&infin;</sub> norm for the vector.
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,221,* @return L<sub>&infin;</sub> norm for the vector
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,223,public double getNormInf() {
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,224,"return Math.max(Math.max(Math.abs(x), Math.abs(y)), Math.abs(z));"
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,312, cross product for almost aligned vectors. This allow to have a
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,326,* cross product for almost aligned vectors. This allows to have a
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,457,** Compute the distance between two vectors.
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,471,/** Compute the distance between two vectors according to the L<sub>1</sub> norm.
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,472,* <p>Calling this method is equivalent to calling:
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,473,* <code>v1.subtract(v2).getNorm1()</code> except that no intermediate
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,474,* vector is built</p>
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,475,* @param v1 first vector
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,476,* @param v2 second vector
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,477,* @return the distance between v1 and v2 according to the L<sub>1</sub> norm
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,479,"public static double distance1(Vector3D v1, Vector3D v2) {"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,480,final double dx = Math.abs(v2.x - v1.x);
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,481,final double dy = Math.abs(v2.y - v1.y);
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,482,final double dz = Math.abs(v2.z - v1.z);
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,483,return dx + dy + dz;
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,486,/** Compute the distance between two vectors according to the L<sub>2</sub> norm.
False,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,463, @return the distance between v1 and v2
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,492,* @return the distance between v1 and v2 according to the L<sub>2</sub> norm
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,501,/** Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,502,* <p>Calling this method is equivalent to calling:
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,503,* <code>v1.subtract(v2).getNormInf()</code> except that no intermediate
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,504,* vector is built</p>
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,505,* @param v1 first vector
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,506,* @param v2 second vector
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,507,* @return the distance between v1 and v2 according to the L<sub>&infin;</sub> norm
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,509,"public static double distanceInf(Vector3D v1, Vector3D v2) {"
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,510,final double dx = Math.abs(v2.x - v1.x);
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,511,final double dy = Math.abs(v2.y - v1.y);
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,512,final double dz = Math.abs(v2.z - v1.z);
True,src/java/org/apache/commons/math/geometry/Vector3D.java,src/java/org/apache/commons/math/geometry/Vector3D.java,513,"return Math.max(Math.max(dx, dy), dz);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,56,public void testNorm1() {
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,57,"assertEquals(0.0, Vector3D.ZERO.getNorm1());"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,58,"assertEquals(6.0, new Vector3D(1, -2, 3).getNorm1(), 0);"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,57,ssertTrue(Math.abs(Vector3D.ZERO.getNorm()) < 1.0e-12);
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,58,"ssertTrue(Math.abs(new Vector3D(1, 2, 3).getNorm() - Math.sqrt(14))"
False,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,59, 1.0e-12);
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,62,"assertEquals(0.0, Vector3D.ZERO.getNorm());"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,63,"assertEquals(Math.sqrt(14), new Vector3D(1, 2, 3).getNorm(), 1.0e-12);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,66,public void testNormInf() {
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,67,"assertEquals(0.0, Vector3D.ZERO.getNormInf());"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,68,"assertEquals(3.0, new Vector3D(1, -2, 3).getNormInf(), 0);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,71,public void testDistance1() {
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,72,"Vector3D v1 = new Vector3D(1, -2, 3);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,73,"Vector3D v2 = new Vector3D(-4, 2, 0);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,74,"assertEquals(0.0, Vector3D.distance1(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,75,"assertEquals(12.0, Vector3D.distance1(v1, v2), 1.0e-12);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,76,"assertEquals(v1.subtract(v2).getNorm1(), Vector3D.distance1(v1, v2), 1.0e-12);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,79,public void testDistance() {
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,80,"Vector3D v1 = new Vector3D(1, -2, 3);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,81,"Vector3D v2 = new Vector3D(-4, 2, 0);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,82,"assertEquals(0.0, Vector3D.distance(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,83,"assertEquals(Math.sqrt(50), Vector3D.distance(v1, v2), 1.0e-12);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,84,"assertEquals(v1.subtract(v2).getNorm(), Vector3D.distance(v1, v2), 1.0e-12);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,87,public void testDistanceSq() {
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,88,"Vector3D v1 = new Vector3D(1, -2, 3);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,89,"Vector3D v2 = new Vector3D(-4, 2, 0);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,90,"assertEquals(0.0, Vector3D.distanceSq(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,91,"assertEquals(50.0, Vector3D.distanceSq(v1, v2), 1.0e-12);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,92,"assertEquals(Vector3D.distance(v1, v2) * Vector3D.distance(v1, v2),"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,93,"Vector3D.distanceSq(v1, v2), 1.0e-12);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,96,public void testDistanceInf() {
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,97,"Vector3D v1 = new Vector3D(1, -2, 3);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,98,"Vector3D v2 = new Vector3D(-4, 2, 0);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,99,"assertEquals(0.0, Vector3D.distanceInf(Vector3D.MINUS_I, Vector3D.MINUS_I), 0);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,100,"assertEquals(5.0, Vector3D.distanceInf(v1, v2), 1.0e-12);"
True,src/test/org/apache/commons/math/geometry/Vector3DTest.java,src/test/org/apache/commons/math/geometry/Vector3DTest.java,101,"assertEquals(v1.subtract(v2).getNormInf(), Vector3D.distanceInf(v1, v2), 1.0e-12);"

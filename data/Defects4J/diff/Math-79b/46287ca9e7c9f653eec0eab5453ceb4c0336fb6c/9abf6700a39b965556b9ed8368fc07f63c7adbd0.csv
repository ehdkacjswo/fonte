is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,20,mport org.apache.commons.math.util.MathUtils;
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,24, {@link org.apache.commons.math.complex.Complex}-valued functions.  Included
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,25," are trigonometric, exponential, log, power and square root functions."
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,26,<p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,27, Reference:
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,28, <ul>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,29," <li><a href=""http://myweb.lmu.edu/dmsmith/ZMLIB.pdf"">"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,30, Multiple Precision Complex Arithmetic and Functions</a></li>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,31, </ul>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,32, See individual method javadocs for the computational formulas used.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,33," In general, NaN values in either real or imaginary parts of input arguments"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,34," result in {@link Complex#NaN} returned.  Otherwise, infinite or NaN values"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,35, are returned as they arise in computing the real functions specified in the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,36, computational formulas.  Null arguments result in NullPointerExceptions.
True,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,22,* {@link org.apache.commons.math.complex.Complex} utilities functions.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,50, Compute the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,51," <a href=""http://mathworld.wolfram.com/InverseCosine.html"" TARGET=""_top"">"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,52, inverse cosine</a> for the given complex argument.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,53, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,54, Implements the formula: <pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,55, <code> acos(z) = -i (log(z + i (sqrt(1 - z<sup>2</sup>))))</code></pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,56, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,57, Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,58, input argument is <code>NaN</code> or infinite.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,60, @param z the value whose inverse cosine is to be returned
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,61, @return the inverse cosine of <code>z</code>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,62, @throws NullPointerException if <code>z</code> is null
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,63, @deprecated use Complex.acos()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,65,ublic static Complex acos(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,66,eturn z.acos();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,70, Compute the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,71," <a href=""http://mathworld.wolfram.com/InverseSine.html"" TARGET=""_top"">"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,72, inverse sine</a> for the given complex argument.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,73, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,74, Implements the formula: <pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,75, <code> asin(z) = -i (log(sqrt(1 - z<sup>2</sup>) + iz)) </code></pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,76, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,77, Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,78, input argument is <code>NaN</code> or infinite.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,80, @param z the value whose inverse sine is to be returned.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,81, @return the inverse sine of <code>z</code>.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,82, @throws NullPointerException if <code>z</code> is null
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,83, @deprecated use Complex.asin()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,85,ublic static Complex asin(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,86,eturn z.asin();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,90, Compute the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,91," <a href=""http://mathworld.wolfram.com/InverseTangent.html"" TARGET=""_top"">"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,92, inverse tangent</a> for the given complex argument.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,93, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,94, Implements the formula: <pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,95, <code> atan(z) = (i/2) log((i + z)/(i - z)) </code></pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,96, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,97, Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,98, input argument is <code>NaN</code> or infinite.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,100, @param z the value whose inverse tangent is to be returned
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,101, @return the inverse tangent of <code>z</code>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,102, @throws NullPointerException if <code>z</code> is null
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,103, @deprecated use Complex.atan()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,105,ublic static Complex atan(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,106,eturn z.atan();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,110, Compute the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,111," <a href=""http://mathworld.wolfram.com/Cosine.html"" TARGET=""_top"">"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,112, cosine</a>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,113, for the given complex argument.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,114, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,115, Implements the formula: <pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,116, <code> cos(a + bi) = cos(a)cosh(b) - sin(a)sinh(b)i</code></pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,117, where the (real) functions on the right-hand side are
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,118," {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,119, {@link MathUtils#cosh} and {@link MathUtils#sinh}.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,120, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,121, Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,122, input argument is <code>NaN</code>.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,123, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,124, Infinite values in real or imaginary parts of the input may result in
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,125, infinite or NaN values returned in parts of the result.<pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,126, Examples:
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,127, <code>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,128, cos(1 &plusmn; INFINITY i) = 1 &#x2213; INFINITY i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,129, cos(&plusmn;INFINITY + i) = NaN + NaN i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,130, cos(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,132, @param z the value whose cosine is to be returned
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,133, @return the cosine of <code>z</code>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,134, @throws NullPointerException if <code>z</code> is null
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,135, @deprecated use Complex.cos()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,137,ublic static Complex cos(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,138,eturn z.cos();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,142, Compute the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,143," <a href=""http://mathworld.wolfram.com/HyperbolicCosine.html"" TARGET=""_top"">"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,144, hyperbolic cosine</a> for the given complex argument.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,145, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,146, Implements the formula: <pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,147, <code> cosh(a + bi) = cosh(a)cos(b) + sinh(a)sin(b)i</code></pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,148, where the (real) functions on the right-hand side are
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,149," {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,150, {@link MathUtils#cosh} and {@link MathUtils#sinh}.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,151, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,152, Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,153, input argument is <code>NaN</code>.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,154, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,155, Infinite values in real or imaginary parts of the input may result in
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,156, infinite or NaN values returned in parts of the result.<pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,157, Examples:
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,158, <code>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,159, cosh(1 &plusmn; INFINITY i) = NaN + NaN i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,160, cosh(&plusmn;INFINITY + i) = INFINITY &plusmn; INFINITY i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,161, cosh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,162, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,163, Throws <code>NullPointerException</code> if z is null.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,165, @param z the value whose hyperbolic cosine is to be returned.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,166, @return the hyperbolic cosine of <code>z</code>.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,167, @deprecated use Complex.cosh()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,169,ublic static Complex cosh(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,170,eturn z.cosh();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,174, Compute the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,175," <a href=""http://mathworld.wolfram.com/ExponentialFunction.html"" TARGET=""_top"">"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,176, exponential function</a> for the given complex argument.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,177, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,178, Implements the formula: <pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,179, <code> exp(a + bi) = exp(a)cos(b) + exp(a)sin(b)i</code></pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,180, where the (real) functions on the right-hand side are
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,181," {@link java.lang.Math#exp}, {@link java.lang.Math#cos}, and"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,182, {@link java.lang.Math#sin}.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,183, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,184, Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,185, input argument is <code>NaN</code>.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,186, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,187, Infinite values in real or imaginary parts of the input may result in
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,188, infinite or NaN values returned in parts of the result.<pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,189, Examples:
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,190, <code>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,191, exp(1 &plusmn; INFINITY i) = NaN + NaN i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,192, exp(INFINITY + i) = INFINITY + INFINITY i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,193, exp(-INFINITY + i) = 0 + 0i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,194, exp(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,195, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,196, Throws <code>NullPointerException</code> if z is null.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,198, @param z the value
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,199, @return <i>e</i><sup><code>z</code></sup>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,200, @deprecated use Complex.exp()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,202,ublic static Complex exp(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,203,eturn z.exp();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,207, Compute the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,208," <a href=""http://mathworld.wolfram.com/NaturalLogarithm.html"" TARGET=""_top"">"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,209, natural logarithm</a> for the given complex argument.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,210, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,211, Implements the formula: <pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,212, <code> log(a + bi) = ln(|a + bi|) + arg(a + bi)i</code></pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,213," where ln on the right hand side is {@link java.lang.Math#log},"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,214," <code>|a + bi|</code> is the modulus, {@link Complex#abs},  and"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,215," <code>arg(a + bi) = {@link java.lang.Math#atan2}(b, a)</code>"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,216, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,217, Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,218, input argument is <code>NaN</code>.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,219, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,220, Infinite (or critical) values in real or imaginary parts of the input may
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,221, result in infinite or NaN values returned in parts of the result.<pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,222, Examples:
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,223, <code>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,224, log(1 &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/2)i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,225, log(INFINITY + i) = INFINITY + 0i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,226, log(-INFINITY + i) = INFINITY + &pi;i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,227, log(INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (&pi;/4)i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,228, log(-INFINITY &plusmn; INFINITY i) = INFINITY &plusmn; (3&pi;/4)i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,229, log(0 + 0i) = -INFINITY + 0i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,230, </code></pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,231, Throws <code>NullPointerException</code> if z is null.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,233, @param z the value.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,234, @return ln <code>z</code>.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,235, @deprecated use Complex.log()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,237,ublic static Complex log(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,238,eturn z.log();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,275, Returns of value of <code>y</code> raised to the power of <code>x</code>.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,276, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,277, Implements the formula: <pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,278, <code> y<sup>x</sup> = exp(x&middot;log(y))</code></pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,279, where <code>exp</code> and <code>log</code> are {@link #exp} and
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,280," {@link #log}, respectively."
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,281, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,282, Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,283," input argument is <code>NaN</code> or infinite, or if <code>y</code>"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,284, equals {@link Complex#ZERO}.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,286, @param y the base.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,287, @param x the exponent.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,288, @return <code>y</code><sup><code>x</code></sup>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,289, @throws NullPointerException if either x or y is null
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,290, @deprecated use Complex.pow(x)
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,292,"ublic static Complex pow(Complex y, Complex x) {"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,293,eturn y.pow(x);
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,297, Compute the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,298," <a href=""http://mathworld.wolfram.com/Sine.html"" TARGET=""_top"">"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,299, sine</a>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,300, for the given complex argument.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,301, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,302, Implements the formula: <pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,303, <code> sin(a + bi) = sin(a)cosh(b) - cos(a)sinh(b)i</code></pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,304, where the (real) functions on the right-hand side are
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,305," {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,306, {@link MathUtils#cosh} and {@link MathUtils#sinh}.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,307, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,308, Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,309, input argument is <code>NaN</code>.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,310, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,311, Infinite values in real or imaginary parts of the input may result in
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,312, infinite or NaN values returned in parts of the result.<pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,313, Examples:
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,314, <code>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,315, sin(1 &plusmn; INFINITY i) = 1 &plusmn; INFINITY i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,316, sin(&plusmn;INFINITY + i) = NaN + NaN i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,317, sin(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,319, Throws <code>NullPointerException</code> if z is null.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,321, @param z the value whose sine is to be returned.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,322, @return the sine of <code>z</code>.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,323, @deprecated use Complex.sin()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,325,ublic static Complex sin(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,326,eturn z.sin();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,330, Compute the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,331," <a href=""http://mathworld.wolfram.com/HyperbolicSine.html"" TARGET=""_top"">"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,332, hyperbolic sine</a> for the given complex argument.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,333, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,334, Implements the formula: <pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,335, <code> sinh(a + bi) = sinh(a)cos(b)) + cosh(a)sin(b)i</code></pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,336, where the (real) functions on the right-hand side are
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,337," {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,338, {@link MathUtils#cosh} and {@link MathUtils#sinh}.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,339, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,340, Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,341, input argument is <code>NaN</code>.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,342, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,343, Infinite values in real or imaginary parts of the input may result in
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,344, infinite or NaN values returned in parts of the result.<pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,345, Examples:
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,346, <code>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,347, sinh(1 &plusmn; INFINITY i) = NaN + NaN i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,348, sinh(&plusmn;INFINITY + i) = &plusmn; INFINITY + INFINITY i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,349, sinh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i</code></pre
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,351, @param z the value whose hyperbolic sine is to be returned
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,352, @return the hyperbolic sine of <code>z</code>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,353, @throws NullPointerException if <code>z</code> is null
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,354, @deprecated use Complex.sinh()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,356,ublic static Complex sinh(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,357,eturn z.sinh();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,361, Compute the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,362," <a href=""http://mathworld.wolfram.com/SquareRoot.html"" TARGET=""_top"">"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,363, square root</a> for the given complex argument.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,364, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,365, Implements the following algorithm to compute <code>sqrt(a + bi)</code>:
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,366, <ol><li>Let <code>t = sqrt((|a| + |a + bi|) / 2)</code></li>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,367, <li><pre>if <code> a &#8805; 0</code> return <code>t + (b/2t)i</code>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,368,  else return <code>|b|/2t + sign(b)t i </code></pre></li>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,369, </ol>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,370, where <ul>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,371, <li><code>|a| = {@link Math#abs}(a)</code></li>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,372, <li><code>|a + bi| = {@link Complex#abs}(a + bi) </code></li>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,373, <li><code>sign(b) =  {@link MathUtils#indicator}(b) </code>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,374, </ul>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,375, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,376, Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,377, input argument is <code>NaN</code>.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,378, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,379, Infinite values in real or imaginary parts of the input may result in
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,380, infinite or NaN values returned in parts of the result.<pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,381, Examples:
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,382, <code>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,383, sqrt(1 &plusmn; INFINITY i) = INFINITY + NaN i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,384, sqrt(INFINITY + i) = INFINITY + 0i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,385, sqrt(-INFINITY + i) = 0 + INFINITY i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,386, sqrt(INFINITY &plusmn; INFINITY i) = INFINITY + NaN i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,387, sqrt(-INFINITY &plusmn; INFINITY i) = NaN &plusmn; INFINITY i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,388, </code></pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,390, @param z the value whose square root is to be returned
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,391, @return the square root of <code>z</code>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,392, @throws NullPointerException if <code>z</code> is null
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,393, @deprecated use Complex.sqrt()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,395,ublic static Complex sqrt(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,396,eturn z.sqrt();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,400, Compute the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,401," <a href=""http://mathworld.wolfram.com/SquareRoot.html"" TARGET=""_top"">"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,402, square root</a> of 1 - <code>z</code><sup>2</sup> for the given complex
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,403, argument.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,404, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,405, Computes the result directly as
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,406, <code>sqrt(Complex.ONE.subtract(z.multiply(z)))</code>.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,407, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,408, Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,409, input argument is <code>NaN</code>.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,410, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,411, Infinite values in real or imaginary parts of the input may result in
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,412, infinite or NaN values returned in parts of the result.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,414, @param z the value
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,415, @return the square root of 1 - <code>z</code><sup>2</sup>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,416, @throws NullPointerException if <code>z</code> is null
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,417, @deprecated use Complex.sqrt1z()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,419,ublic static Complex sqrt1z(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,420,eturn z.sqrt1z();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,424, Compute the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,425," <a href=""http://mathworld.wolfram.com/Tangent.html"" TARGET=""_top"">"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,426, tangent</a> for the given complex argument.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,427, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,428, Implements the formula: <pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,429, <code>tan(a + bi) = sin(2a)/(cos(2a)+cosh(2b)) + [sinh(2b)/(cos(2a)+cosh(2b))]i</code></pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,430, where the (real) functions on the right-hand side are
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,431," {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,432, {@link MathUtils#cosh} and {@link MathUtils#sinh}.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,433, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,434, Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,435, input argument is <code>NaN</code>.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,436, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,437, Infinite (or critical) values in real or imaginary parts of the input may
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,438, result in infinite or NaN values returned in parts of the result.<pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,439, Examples:
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,440, <code>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,441, tan(1 &plusmn; INFINITY i) = 0 + NaN i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,442, tan(&plusmn;INFINITY + i) = NaN + NaN i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,443, tan(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,444, tan(&plusmn;&pi;/2 + 0 i) = &plusmn;INFINITY + NaN i</code></pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,446, @param z the value whose tangent is to be returned
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,447, @return the tangent of <code>z</code>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,448, @throws NullPointerException if <code>z</code> is null
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,449, @deprecated use Complex.tan()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,451,ublic static Complex tan(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,452,eturn z.tan();
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,456, Compute the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,457," <a href=""http://mathworld.wolfram.com/HyperbolicTangent.html"" TARGET=""_top"">"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,458, hyperbolic tangent</a> for the given complex argument.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,459, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,460, Implements the formula: <pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,461, <code>tan(a + bi) = sinh(2a)/(cosh(2a)+cos(2b)) + [sin(2b)/(cosh(2a)+cos(2b))]i</code></pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,462, where the (real) functions on the right-hand side are
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,463," {@link java.lang.Math#sin}, {@link java.lang.Math#cos},"
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,464, {@link MathUtils#cosh} and {@link MathUtils#sinh}.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,465, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,466, Returns {@link Complex#NaN} if either real or imaginary part of the
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,467, input argument is <code>NaN</code>.
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,468, <p>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,469, Infinite values in real or imaginary parts of the input may result in
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,470, infinite or NaN values returned in parts of the result.<pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,471, Examples:
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,472, <code>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,473, tanh(1 &plusmn; INFINITY i) = NaN + NaN i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,474, tanh(&plusmn;INFINITY + i) = NaN + 0 i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,475, tanh(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,476, tanh(0 + (&pi;/2)i) = NaN + INFINITY i</code></pre>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,478, @param z the value whose hyperbolic tangent is to be returned
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,479, @return the hyperbolic tangent of <code>z</code>
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,480, @throws NullPointerException if <code>z</code> is null
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,481, @deprecated use Complex.tanh()
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,483,ublic static Complex tanh(Complex z) {
False,src/java/org/apache/commons/math/complex/ComplexUtils.java,src/java/org/apache/commons/math/complex/ComplexUtils.java,484,eturn z.tanh();

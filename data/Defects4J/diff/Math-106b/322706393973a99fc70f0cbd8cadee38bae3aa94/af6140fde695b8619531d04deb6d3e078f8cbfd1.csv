is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,19,import java.text.FieldPosition;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,20,import java.text.Format;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,22,import java.text.ParseException;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,23,import java.text.ParsePosition;
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,23," be replaced with 'j', and the number of decimal places to display"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,27,"* be replaced with 'j', and the number format for both real and imaginary parts"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,27, @version $Revision: 1.6 $ $Date: 2004/05/23 00:52:32 $
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,31,* @version $Revision: 1.7 $ $Date: 2004/06/01 13:47:17 $
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,29,ublic class ComplexFormat {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,33,public class ComplexFormat extends Format {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,34,** The notation used to signify the imaginary part of the complex number. */
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,35,"rivate String imaginaryCharacter = ""i"";"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,37,** The maximum number of decimal digits in the formatted output. */
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,38,rivate int fractionDigits = 2;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,38,/** The default imaginary character. */
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,39,"private static final String DEFAULT_IMAGINARY_CHARACTER = ""i"";"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,41,/** The notation used to signify the imaginary part of the complex number. */
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,42,private String imaginaryCharacter;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,44,/** The format used for the imaginary part. */
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,45,private NumberFormat imaginaryFormat;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,47,/** The format used for the real part. */
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,48,private NumberFormat realFormat;
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,41," Create an instance with the default imaginary character 'i', and the default"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,42, number of decimal places - 2.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,51,"* Create an instance with the default imaginary character, 'i', and the"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,52,* default number format for both real and imaginary parts.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,44,ublic ComplexFormat() {}
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,54,public ComplexFormat() {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,55,"this(DEFAULT_IMAGINARY_CHARACTER, getDefaultNumberFormat());"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,47," Create an instance with a custom imaginary character, and the default number"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,48, of decimal places - 2.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,59,* Create an instance with a custom number format for both real and
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,60,* imaginary parts.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,61,* @param format the custom format for both real and imaginary parts.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,63,public ComplexFormat(NumberFormat format) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,64,"this(DEFAULT_IMAGINARY_CHARACTER, format);"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,68,* Create an instance with a custom number format for the real part and a
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,69,* custom number format for the imaginary part.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,70,* @param realFormat the custom format for the real part.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,71,* @param imaginaryFormat the custom format for the imaginary part.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,73,"public ComplexFormat(NumberFormat realFormat,"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,74,NumberFormat imaginaryFormat) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,75,"this(DEFAULT_IMAGINARY_CHARACTER, realFormat, imaginaryFormat);"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,79,"* Create an instance with a custom imaginary character, and the default"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,80,* number format for both real and imaginary parts.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,52,his.imaginaryCharacter = imaginaryCharacter;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,84,"this(imaginaryCharacter, getDefaultNumberFormat());"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,56," Create an instance with a custom imaginary character, and a custom number of"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,57, decimal places.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,88,"* Create an instance with a custom imaginary character, and a custom number"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,89,* format for both real and imaginary parts.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,59, @param fractionDigits The custom number of decimal places.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,91,* @param format the custom format for both real and imaginary parts.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,61,"ublic ComplexFormat(String imaginaryCharacter, int fractionDigits) {"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,62,his.imaginaryCharacter = imaginaryCharacter;
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,63,his.fractionDigits = fractionDigits;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,93,"public ComplexFormat(String imaginaryCharacter, NumberFormat format) {"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,94,"this(imaginaryCharacter, format, (NumberFormat)format.clone());"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,98,"* Create an instance with a custom imaginary character, a custom number"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,99,"* format for the real part, and a custom number format for the imaginary"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,100,* part.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,101,* @param imaginaryCharacter The custom imaginary character.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,102,* @param realFormat the custom format for the real part.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,103,* @param imaginaryFormat the custom format for the imaginary part.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,105,"public ComplexFormat(String imaginaryCharacter, NumberFormat realFormat,"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,106,NumberFormat imaginaryFormat) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,107,super();
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,108,setImaginaryCharacter(imaginaryCharacter);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,109,setImaginaryFormat(imaginaryFormat);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,110,setRealFormat(realFormat);
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,67," Formats a Complex object and returns a String representing the ""cartesian"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,68," form"" of a complex number."
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,114,* This static method calls formatComplex() on a default instance of
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,115,* ComplexFormat.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,73,ublic String format(Complex c) {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,75,umberFormat format = NumberFormat.getInstance();
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,76,ormat.setMaximumFractionDigits( fractionDigits );
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,78,tringBuffer buffer = new StringBuffer();
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,80,f( Double.isNaN( c.getReal() ) || Double.isInfinite( c.getReal() ) ) {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,81,"uffer.append( ""("" + c.getReal() + "")"" );"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,82, else {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,83,uffer.append( format.format( c.getReal() ) );
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,86,f( c.getImaginary() < 0 ) {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,87,"uffer.append( "" - "" );"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,88, else if( c.getImaginary() > 0 || Double.isNaN( c.getImaginary() )) {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,89,"uffer.append( "" + "" );"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,92,f( c.getImaginary() != 0 ) {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,93,f( Double.isNaN( c.getImaginary() ) || Double.isInfinite( c.getImaginary() ) ) {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,94,"uffer.append( ""("" + Math.abs( c.getImaginary() ) + "")"" );"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,95, else {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,96,uffer.append( format.format( Math.abs(c.getImaginary()) ) );
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,98,uffer.append( imaginaryCharacter );
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,120,public static String formatComplex( Complex c ) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,121,return DEFAULT.format( c );
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,125,* Create a default number format.  The default number format is based on
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,126,* {@link NumberFormat#getInstance()} with the only customizing is the
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,127,"* maximum number of fraction digits, which is set to 2."
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,129,* @return the default number format.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,131,private static NumberFormat getDefaultNumberFormat() {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,132,NumberFormat nf = NumberFormat.getInstance();
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,133,nf.setMaximumFractionDigits(2);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,134,return nf;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,138,* Formats a {@link Complex} object to produce a string.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,140,* @param complex the object to format.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,141,* @param toAppendTo where the text is to be appended
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,142,"* @param pos On input: an alignment field, if desired. On output: the"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,143,*            offsets of the alignment field
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,144,* @return the value passed in as toAppendTo.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,146,"public StringBuffer format(Complex complex, StringBuffer toAppendTo,"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,147,FieldPosition pos) {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,101,eturn( buffer.toString() );
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,149,pos.setBeginIndex(0);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,150,pos.setEndIndex(0);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,152,// format real
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,153,double re = complex.getReal();
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,154,"formatDouble(re, getRealFormat(), toAppendTo, pos);"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,156,// format sign and imaginary
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,157,double im = complex.getImaginary();
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,158,if (im < 0.0) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,159,"toAppendTo.append("" - "");"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,160,"formatDouble(-im, getImaginaryFormat(), toAppendTo, pos);"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,161,toAppendTo.append(getImaginaryCharacter());
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,162,} else if (im > 0.0 || Double.isNaN(im)) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,163,"toAppendTo.append("" + "");"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,164,"formatDouble(im, getImaginaryFormat(), toAppendTo, pos);"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,165,toAppendTo.append(getImaginaryCharacter());
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,168,return toAppendTo;
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,106, This static method calls formatComplex() on a default instance of
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,107, ComplexFormat.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,172,* Formats a object to produce a string.  <code>obj</code> must be either a
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,173,* {@link Complex} object or a {@link Number} object.  Any other type of
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,174,* object will result in an {@link IllegalArgumentException} being thrown.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,109, @param c Complex object to format
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,110," @return A formatted number in the form ""Re(c) + Im(c)i"""
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,176,* @param obj the object to format.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,177,* @param toAppendTo where the text is to be appended
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,178,"* @param pos On input: an alignment field, if desired. On output: the"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,179,*            offsets of the alignment field
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,180,* @return the value passed in as toAppendTo.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,181,"* @see java.text.Format#format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,182,* @throws IllegalArgumentException is <code>obj</code> is not a valid type.
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,112,ublic static String formatComplex( Complex c ) {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,113,eturn DEFAULT.format( c );
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,184,"public StringBuffer format(Object obj, StringBuffer toAppendTo,"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,185,FieldPosition pos) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,187,StringBuffer ret = null;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,189,if (obj instanceof Complex) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,190,"ret = format( (Complex)obj, toAppendTo, pos);"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,191,} else if (obj instanceof Number) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,192,"ret = format( new Complex(((Number)obj).doubleValue(), 0.0),"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,193,"toAppendTo, pos);"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,194,} else {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,195,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,196,"""Cannot format given Object as a Date"");"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,199,return ret;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,203,"* Formats a double value to produce a string.  In general, the value is"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,204,* formatted using the formatting rules of <code>format</code>.  There are
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,205,* three exceptions to this:
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,206,* <ol>
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,207,* <li>NaN is formatted as '(NaN)'</li>
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,208,* <li>Positive infinity is formatted as '(Infinity)'</li>
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,209,* <li>Negative infinity is formatted as '(-Infinity)'</li>
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,210,* </ol>
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,212,* @param value the double to format.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,213,* @param format the format used.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,214,* @param toAppendTo where the text is to be appended
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,215,"* @param pos On input: an alignment field, if desired. On output: the"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,216,*            offsets of the alignment field
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,217,* @return the value passed in as toAppendTo.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,219,"private StringBuffer formatDouble(double value, NumberFormat format,"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,220,"StringBuffer toAppendTo, FieldPosition pos) {"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,221,if( Double.isNaN(value) || Double.isInfinite(value) ) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,222,toAppendTo.append('(');
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,223,toAppendTo.append(value);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,224,toAppendTo.append(')');
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,225,} else {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,226,"getRealFormat().format(value, toAppendTo, pos);"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,228,return toAppendTo;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,232,* Access the imaginaryCharacter.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,233,* @return the imaginaryCharacter.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,235,public String getImaginaryCharacter() {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,236,return imaginaryCharacter;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,240,* Access the imaginaryFormat.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,241,* @return the imaginaryFormat.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,243,public NumberFormat getImaginaryFormat() {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,244,return imaginaryFormat;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,248,* Access the realFormat.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,249,* @return the realFormat.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,251,public NumberFormat getRealFormat() {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,252,return realFormat;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,256,* Parses a string to produce a {@link Complex} object.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,258,* @param source the string to parse
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,259,* @return the parsed {@link Complex} object.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,260,* @exception ParseException if the beginning of the specified string
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,261,*            cannot be parsed.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,263,public Complex parse(String source) throws ParseException {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,264,ParsePosition parsePosition = new ParsePosition(0);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,265,"Complex result = parse(source, parsePosition);"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,266,if (parsePosition.getIndex() == 0) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,267,"throw new ParseException(""Unparseable complex number: \"""" + source +"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,268,"""\"""", parsePosition.getErrorIndex());"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,270,return result;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,274,* Parses a string to produce a {@link Complex} object.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,276,* @param source the string to parse
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,277,* @param pos input/ouput parsing parameter.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,278,* @return the parsed {@link Complex} object.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,280,"public Complex parse(String source, ParsePosition pos) {"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,281,int initialIndex = pos.getIndex();
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,283,// parse whitespace
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,284,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,286,// parse real
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,287,"Number re = parseNumber(source, getRealFormat(), pos);"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,288,if (re == null) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,289,// invalid real number
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,290,"// set index back to initial, error index should already be set"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,291,// character examined.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,292,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,293,return null;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,296,// parse sign
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,297,int startIndex = pos.getIndex();
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,298,"char c = parseNextCharacter(source, pos);"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,299,int sign = 0;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,300,switch (c) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,301,case 0 :
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,302,// no sign
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,303,// return real only complex number
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,304,"return new Complex(re.doubleValue(), 0.0);"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,305,case '-' :
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,306,sign = -1;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,307,break;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,308,case '+' :
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,309,sign = 1;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,310,break;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,311,default :
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,312,// invalid sign
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,313,"// set index back to initial, error index should be the last"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,314,// character examined.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,315,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,316,pos.setErrorIndex(startIndex);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,317,return null;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,320,// parse whitespace
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,321,"parseAndIgnoreWhitespace(source, pos);"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,323,// parse imaginary
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,324,"Number im = parseNumber(source, getRealFormat(), pos);"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,325,if (im == null) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,326,// invalid imaginary number
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,327,"// set index back to initial, error index should already be set"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,328,// character examined.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,329,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,330,return null;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,333,// parse imaginary character
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,334,int n = getImaginaryCharacter().length();
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,335,startIndex = pos.getIndex();
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,336,int endIndex = startIndex + n;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,337,"if (source.substring(startIndex, endIndex).compareTo("
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,338,getImaginaryCharacter()) != 0) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,339,"// set index back to initial, error index should be the start index"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,340,// character examined.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,341,pos.setIndex(initialIndex);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,342,pos.setErrorIndex(startIndex);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,343,return null;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,345,pos.setIndex(endIndex);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,347,"return new Complex(re.doubleValue(), im.doubleValue() * sign);"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,351,* Parses <code>source</code> until a non-whitespace character is found.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,353,* @param source the string to parse
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,354,"* @param pos input/ouput parsing parameter.  On output, <code>pos</code>"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,355,*        holds the index of the next non-whitespace character.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,357,"private void parseAndIgnoreWhitespace(String source, ParsePosition pos) {"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,358,"parseNextCharacter(source, pos);"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,359,pos.setIndex(pos.getIndex() - 1);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,363,* Parses <code>source</code> until a non-whitespace character is found.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,365,* @param source the string to parse
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,366,* @param pos input/ouput parsing parameter.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,367,* @return the first non-whitespace character.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,369,"private char parseNextCharacter(String source, ParsePosition pos) {"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,370,int index = pos.getIndex();
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,371,int n = source.length();
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,372,char ret = 0;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,374,if (index < n) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,375,char c;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,376,do {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,377,c = source.charAt(index++);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,378,} while (Character.isWhitespace(c) && index < n);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,379,pos.setIndex(index);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,381,if (index < n) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,382,ret = c;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,386,return ret;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,390,* Parses <code>source</code> for a special double values.  These values
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,391,"* include Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY."
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,393,* @param source the string to parse
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,394,* @param value the special value to parse.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,395,* @param pos input/ouput parsing parameter.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,396,* @return the special number.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,398,"private Number parseNumber(String source, double value, ParsePosition pos) {"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,399,Number ret = null;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,401,StringBuffer sb = new StringBuffer();
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,402,sb.append('(');
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,403,sb.append(value);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,404,sb.append(')');
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,406,int n = sb.length();
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,407,int startIndex = pos.getIndex();
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,408,int endIndex = startIndex + n;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,409,if (endIndex < source.length()) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,410,"if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,411,ret = new Double(value);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,412,pos.setIndex(endIndex);
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,416,return ret;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,420,"* Parses <code>source</code> for a number.  This method can parse normal,"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,421,* numeric values as well as special values.  These special values include
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,422,"* Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY."
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,424,* @param source the string to parse
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,425,"* @param format the number format used to parse normal, numeric values."
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,426,* @param pos input/ouput parsing parameter.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,427,* @return the parsed number.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,429,"private Number parseNumber(String source, NumberFormat format, ParsePosition pos) {"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,430,int startIndex = pos.getIndex();
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,431,"Number number = getRealFormat().parse(source, pos);"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,432,int endIndex = pos.getIndex();
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,434,// check for error parsing number
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,435,if (startIndex == endIndex) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,436,// try parsing special numbers
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,437,"double[] special = {Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY};"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,438,for (int i = 0; i < special.length; ++i) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,439,"number = parseNumber(source, special[i], pos);"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,440,if (number != null) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,441,break;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,446,return number;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,450,* Parses a string to produce a object.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,452,* @param source the string to parse
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,453,* @param pos input/ouput parsing parameter.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,454,* @return the parsed object.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,455,"* @see java.text.Format#parseObject(java.lang.String, java.text.ParsePosition)"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,457,"public Object parseObject(String source, ParsePosition pos) {"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,458,"return parse(source, pos);"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,461,* Modify the imaginaryCharacter.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,462,* @param imaginaryCharacter The new imaginaryCharacter value.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,463,* @throws IllegalArgumentException if <code>imaginaryCharacter</code> is
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,464,*         <code>null</code> or an empty string.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,466,public void setImaginaryCharacter(String imaginaryCharacter) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,467,if (imaginaryCharacter == null || imaginaryCharacter.length() == 0) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,468,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,469,"""imaginaryCharacter must be a non-empty string."");"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,471,this.imaginaryCharacter = imaginaryCharacter;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,475,* Modify the imaginaryFormat.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,476,* @param imaginaryFormat The new imaginaryFormat value.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,477,* @throws IllegalArgumentException if <code>imaginaryFormat</code> is
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,478,*         <code>null</code>.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,480,public void setImaginaryFormat(NumberFormat imaginaryFormat) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,481,if (imaginaryFormat == null) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,482,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,483,"""imaginaryFormat can not be null."");"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,485,this.imaginaryFormat = imaginaryFormat;
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,489,* Modify the realFormat.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,490,* @param realFormat The new realFormat value.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,491,* @throws IllegalArgumentException if <code>realFormat</code> is
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,492,*         <code>null</code>.
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,494,public void setRealFormat(NumberFormat realFormat) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,495,if (realFormat == null) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,496,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,497,"""realFormat can not be null."");"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,499,this.realFormat = realFormat;
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,19,import java.text.NumberFormat;
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,20,import java.text.ParseException;
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,37,"ssertEquals( complexFormat.format( c ), ""1 + 1i"" );"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,40,"String expected = ""1 + 1i"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,41,String actual = complexFormat.format(c);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,42,"assertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,42,"ssertEquals( complexFormat.format( c ), ""1.23 + 1.43i"" );"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,47,"String expected = ""1.23 + 1.43i"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,48,String actual = complexFormat.format(c);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,49,"assertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,47,"ssertEquals( complexFormat.format( c ), ""1.23 + 1.43i"" );"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,54,"String expected = ""1.23 + 1.43i"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,55,String actual = complexFormat.format(c);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,56,"assertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,52,"ssertEquals( complexFormat.format( c ), ""-1.23 + 1.43i"" );"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,61,"String expected = ""-1.23 + 1.43i"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,62,String actual = complexFormat.format(c);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,63,"assertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,57,"ssertEquals( complexFormat.format( c ), ""1.23 - 1.43i"" );"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,68,"String expected = ""1.23 - 1.43i"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,69,String actual = complexFormat.format(c);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,70,"assertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,62,"ssertEquals( complexFormat.format( c ), ""-1.23 - 1.43i"" );"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,75,"String expected = ""-1.23 - 1.43i"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,76,String actual = complexFormat.format(c);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,77,"assertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,67,"ssertEquals( complexFormat.format( c ), ""0 - 1.43i"" );"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,82,"String expected = ""0 - 1.43i"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,83,String actual = complexFormat.format(c);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,84,"assertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,72,"ssertEquals( complexFormat.format( c ), ""30.23"" );"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,89,"String expected = ""30.23"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,90,String actual = complexFormat.format(c);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,91,"assertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,77,"ssertEquals( complexFormatJ.format( c ), ""1 + 1j"" );"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,96,"String expected = ""1 + 1j"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,97,String actual = complexFormatJ.format(c);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,98,"assertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,82,"ssertEquals( ComplexFormat.formatComplex( c ), ""232.22 - 342.33i"" );"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,103,"String expected = ""232.22 - 342.33i"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,104,String actual = ComplexFormat.formatComplex(c);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,105,"assertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,87,"ssertEquals( complexFormat.format( c ), ""(NaN) + (NaN)i"" );"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,110,"String expected = ""(NaN) + (NaN)i"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,111,String actual = complexFormat.format(c);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,112,"assertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,92,"ssertEquals( complexFormat.format( c ), ""(Infinity) + (Infinity)i"" );"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,117,"String expected = ""(Infinity) + (Infinity)i"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,118,String actual = complexFormat.format(c);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,119,"assertEquals(expected, actual);"
False,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,97,"ssertEquals( complexFormat.format( c ), ""(-Infinity) - (Infinity)i"" );"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,124,"String expected = ""(-Infinity) - (Infinity)i"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,125,String actual = complexFormat.format(c);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,126,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,129,public void testParseSimpleNoDecimals() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,130,"String source = ""1 + 1i"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,131,"Complex expected = new Complex(1, 1);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,132,try {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,133,Complex actual = (Complex)complexFormat.parseObject(source);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,134,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,135,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,136,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,140,public void testParseSimpleWithDecimals() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,141,"String source = ""1.23 + 1.43i"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,142,"Complex expected = new Complex(1.23, 1.43);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,143,try {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,144,Complex actual = (Complex)complexFormat.parseObject(source);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,145,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,146,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,147,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,151,public void testParseSimpleWithDecimalsTrunc() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,152,"String source = ""1.2323 + 1.4343i"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,153,"Complex expected = new Complex(1.2323, 1.4343);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,154,try {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,155,Complex actual = (Complex)complexFormat.parseObject(source);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,156,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,157,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,158,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,162,public void testParseNegativeReal() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,163,"String source = ""-1.2323 + 1.4343i"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,164,"Complex expected = new Complex(-1.2323, 1.4343);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,165,try {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,166,Complex actual = (Complex)complexFormat.parseObject(source);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,167,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,168,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,169,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,173,public void testParseNegativeImaginary() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,174,"String source = ""1.2323 - 1.4343i"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,175,"Complex expected = new Complex(1.2323, -1.4343);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,176,try {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,177,Complex actual = (Complex)complexFormat.parseObject(source);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,178,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,179,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,180,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,184,public void testParseNegativeBoth() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,185,"String source = ""-1.2323 - 1.4343i"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,186,"Complex expected = new Complex(-1.2323, -1.4343);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,187,try {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,188,Complex actual = (Complex)complexFormat.parseObject(source);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,189,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,190,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,191,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,195,public void testParseZeroReal() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,196,"String source = ""0.0 - 1.4343i"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,197,"Complex expected = new Complex(0.0, -1.4343);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,198,try {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,199,Complex actual = (Complex)complexFormat.parseObject(source);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,200,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,201,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,202,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,206,public void testParseZeroImaginary() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,207,"String source = ""-1.2323"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,208,"Complex expected = new Complex(-1.2323, 0);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,209,try {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,210,Complex actual = (Complex)complexFormat.parseObject(source);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,211,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,212,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,213,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,217,public void testParseDifferentImaginaryChar() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,218,"String source = ""-1.2323 - 1.4343j"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,219,"Complex expected = new Complex(-1.2323, -1.4343);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,220,try {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,221,Complex actual = (Complex)complexFormatJ.parseObject(source);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,222,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,223,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,224,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,228,public void testParseNan() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,229,"String source = ""(NaN) + (NaN)i"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,230,"Complex expected = new Complex(Double.NaN, Double.NaN);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,231,try {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,232,Complex actual = (Complex)complexFormat.parseObject(source);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,233,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,234,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,235,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,239,public void testParsePositiveInfinity() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,240,"String source = ""(Infinity) + (Infinity)i"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,241,"Complex expected = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,242,try {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,243,Complex actual = (Complex)complexFormat.parseObject(source);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,244,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,245,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,246,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,250,public void testPaseNegativeInfinity() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,251,"String source = ""(-Infinity) - (Infinity)i"";"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,252,"Complex expected = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,253,try {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,254,Complex actual = (Complex)complexFormat.parseObject(source);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,255,"assertEquals(expected, actual);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,256,} catch (ParseException ex) {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,257,fail(ex.getMessage());
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,261,public void testConstructorSingleFormat() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,262,NumberFormat nf = NumberFormat.getInstance();
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,263,ComplexFormat cf = new ComplexFormat(nf);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,264,assertNotNull(cf);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,265,"assertEquals(nf, cf.getRealFormat());"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,268,public void testGetImaginaryFormat() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,269,NumberFormat nf = NumberFormat.getInstance();
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,270,ComplexFormat cf = new ComplexFormat();
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,272,"assertNotSame(nf, cf.getImaginaryFormat());"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,273,cf.setImaginaryFormat(nf);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,274,"assertSame(nf, cf.getImaginaryFormat());"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,277,public void testSetImaginaryFormatNull() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,278,try {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,279,ComplexFormat cf = new ComplexFormat();
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,280,cf.setImaginaryFormat(null);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,281,fail();
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,282,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,283,// success
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,287,public void testSetRealFormatNull() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,288,try {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,289,ComplexFormat cf = new ComplexFormat();
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,290,cf.setRealFormat(null);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,291,fail();
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,292,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,293,// success
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,297,public void testGetRealFormat() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,298,NumberFormat nf = NumberFormat.getInstance();
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,299,ComplexFormat cf = new ComplexFormat();
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,301,"assertNotSame(nf, cf.getRealFormat());"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,302,cf.setRealFormat(nf);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,303,"assertSame(nf, cf.getRealFormat());"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,306,public void testSetImaginaryCharacterNull() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,307,try {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,308,ComplexFormat cf = new ComplexFormat();
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,309,cf.setImaginaryCharacter(null);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,310,fail();
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,311,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,312,// success
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,316,public void testSetImaginaryCharacterEmpty() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,317,try {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,318,ComplexFormat cf = new ComplexFormat();
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,319,"cf.setImaginaryCharacter("""");"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,320,fail();
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,321,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,322,// success
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,326,public void testFormatNumber() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,327,ComplexFormat cf = new ComplexFormat();
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,328,Double pi = new Double(Math.PI);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,329,String text = cf.format(pi);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,330,"assertEquals(""3.14"", text);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,333,public void testFormatObject() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,334,try {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,335,ComplexFormat cf = new ComplexFormat();
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,336,Object object = new Object();
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,337,cf.format(object);
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,338,fail();
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,339,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,340,// success

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,66, Default constructor. Prohibit construction.
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,68,rivate RootFinding(){
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,69,uper();
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,66,* Default constructor. Prohibit construction.
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,68,private RootFinding(){
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,69,super();
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,83,"ublic static double[] bracket(UnivariateFunction function,"
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,84,"ouble initial,"
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,85,"ouble lowerBound,"
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,83,"public static double[] bracket(UnivariateFunction function,"
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,84,"double initial,"
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,85,"double lowerBound,"
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,87,"return bracket( function, initial, lowerBound, upperBound, Integer.MAX_VALUE ) ;"
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,91,"* For a function, f, this method returns two values, a and b that bracket"
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,92,"* a root of f.  That is to say, there exists a value c between a and b"
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,93,* such that f(c) = 0.
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,95,* @param function the function
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,96,* @param initial midpoint of the returned range.
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,97,"* @param lowerBound for numerical safety, a never is less than this value."
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,98,"* @param upperBound for numerical safety, b never is greater than this value."
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,99,"* @param maximumIterations to guard against infinite looping, maximum number of iterations to perform"
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,100,"* @return a two element array holding {a, b}."
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,102,"public static double[] bracket(UnivariateFunction function,"
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,103,"double initial,"
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,104,"double lowerBound,"
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,105,"double upperBound,"
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,106,int maximumIterations){
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,92,o {
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,111,int numIterations = 0 ;
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,113,do {
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,97, while(fa * fb > 0.0);
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,99,"eturn new double[]{a, b};"
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,118,numIterations += 1 ;
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,119,} while ( (fa * fb > 0.0) && ( numIterations < maximumIterations ) );
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,121,"return new double[]{a, b};"
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,107, @param a lower bound of a root
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,108, @param b upper bound of a root
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,129,* @param a lower (or upper) bound of a root
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,130,* @param b upper (or lower) bound of a root
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,111,"ublic static double bisection(UnivariateFunction function,"
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,112,"ouble a,"
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,133,"public static double bisection(UnivariateFunction function,"
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,134,"double a,"
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,117,ouble fb;
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,140,if ( b < a )
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,142,double xtemp = a ;
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,143,a = b ;
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,144,b = xtemp ;
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,147,fa = function.evaluate(a);
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,120,a = function.evaluate(a);
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,121,b = function.evaluate(b);
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,123, = a + (b - a) / 2.0;  // midpoint
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,150,m = (a + b) * 0.5;  // midpoint
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,154,// b and m bracket the root.
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,155,a = m;
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,128,  = m;
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,130,b = fm;
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,131,  = m;
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,158,// a and m bracket the root.
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,159,b = m;
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,135,eturn a + (b - a) / 2.0;
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,163,return (a + b) * 0.5;

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,64, Generates values for use in simulation applications.<br>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,64,* Generates values for use in simulation applications.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,65,* <p>
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,66, property. <p>
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,67,* property.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,68,* <p>
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,80, @version $Revision: 1.1 $
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,82,* @version $Revision: 1.2 $
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,113,** Uniform random variates with mean = mu */
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,115,/** Uniform random deviates with mean = mu */
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,116,** Exponential random variates with mean = mu */
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,118,/** Exponential random deviates with mean = mu */
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,119,"** Gaussian random variates with mean = mu, std dev = sigma */"
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,121,"/** Gaussian random deviates with mean = mu, std dev = sigma */"
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,131, to the mode value (see MODE constants)
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,133,* to the mode value (see MODE constants).
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,134, @throws IOException in REPLAY_MODE if file I/O error occurs
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,136,* @throws IOException in REPLAY_MODE if a file I/O error occurs
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,152,* Fills the input array with values generated using getNext() repeatedly.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,154,* @param values array to be filled
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,155,* @throws IOException in REPLAY_MODE if a file I/O error occurs
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,157,public void fill(double[] values) throws IOException {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,158,for (int i = 0; i < values.length; i++) {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,159,values[i] = getNext();
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,164,* Returns an array of length <code>length</code> with values generated
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,165,* using getNext() repeatedly.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,167,* @param length length of output array
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,168,* @return array of generated values
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,169,* @throws IOException in REPLAY_MODE if a file I/O error occurs
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,171,public double[] fill(int length) throws IOException {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,172,double[] out = new double[length];
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,173,for (int i = 0; i < length; i++) {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,174,out[i] = getNext();
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,176,return out;
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,150, Computes the empirical distribution using values from file
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,180,* Computes the empirical distribution using values from the file
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,206,* @param binCount the number of bins used in computing the empirical
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,207,* distribution
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,179,hrows IOException{
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,211,throws IOException {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,218,/** Getter for property mode.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,219,* @return Value of property mode.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,221,public int getMode() {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,222,return mode;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,225,/** Setter for property mode.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,226,* @param mode New value of property mode.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,228,public void setMode(int mode) {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,229,this.mode = mode;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,232,/** Getter for property valuesFilePath.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,233,* @return Value of property valuesFilePath.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,235,public String getValuesFileURL() {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,236,return valuesFileURL.toString();
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,239,/** Setter for property valuesFilePath.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,240,* @param url New value of property valuesFilePath.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,241,* @throws MalformedURLException if url is not well formed
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,243,public void setValuesFileURL(String url) throws MalformedURLException {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,244,this.valuesFileURL = new URL(url);
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,247,/** Getter for property empiricalDistribution.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,248,* @return Value of property empiricalDistribution.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,250,public EmpiricalDistribution getEmpiricalDistribution() {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,251,return empiricalDistribution;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,255,* Opens <code>valuesFilePath</code> to use in REPLAY_MODE.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,257,* @throws IOException if an error occurs opening the file
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,259,public void openReplayFile() throws IOException {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,260,filePointer = new BufferedReader(new FileReader
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,261,(new File(valuesFileURL.getFile())));
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,265,* Closes <code>valuesFilePath</code> after use in REPLAY_MODE.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,267,* @throws IOException if an error occurs closing the file
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,269,public void closeReplayFile() throws IOException {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,270,if (filePointer != null) {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,271,filePointer.close();
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,272,filePointer = null;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,276,/** Getter for property mu.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,277,* @return Value of property mu.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,279,public double getMu() {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,280,return mu;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,283,/** Setter for property mu.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,284,* @param mu New value of property mu.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,286,public void setMu(double mu) {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,287,this.mu = mu;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,290,/** Getter for property sigma.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,291,* @return Value of property sigma.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,293,public double getSigma() {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,294,return sigma;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,297,/** Setter for property sigma.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,298,* @param sigma New value of property sigma.
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,300,public void setSigma(double sigma) {
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,301,this.sigma = sigma;
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,304,//------------- private methods ---------------------------------
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,194, @return next random value form the empirical distribution digest
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,314,* @return next random value from the empirical distribution digest
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,219,rivate double getNextReplay() throws IOException{
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,339,private double getNextReplay() throws IOException {
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,233, Gets a uniformly distributed random value with mean = mu
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,353,* Gets a uniformly distributed random value with mean = mu.
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,238,eturn 2.0*mu*Math.random();
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,358,"return randomData.nextUniform(0, 2 * mu);"
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,242, Gets an exponentially distributed random value with mean = mu
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,362,* Gets an exponentially distributed random value with mean = mu.
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,252, and standard deviation = sigma
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,372,* and standard deviation = sigma.
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,257,"eturn randomData.nextGaussian(mu,sigma);"
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,260,** Getter for property mode.
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,261, @return Value of property mode.
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,263,ublic int getMode() {
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,264,eturn mode;
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,267,** Setter for property mode.
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,268, @param mode New value of property mode.
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,270,ublic void setMode(int mode) {
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,271,his.mode = mode;
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,274,** Getter for property valuesFilePath.
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,275, @return Value of property valuesFilePath.
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,277,ublic String getValuesFileURL() {
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,278,eturn valuesFileURL.toString();
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,281,** Setter for property valuesFilePath.
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,282, @param valuesFilePath New value of property valuesFilePath.
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,284,ublic void setValuesFileURL(String URL) throws MalformedURLException {
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,285,his.valuesFileURL = new URL(URL);
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,288,** Getter for property empiricalDistribution.
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,289, @return Value of property empiricalDistribution.
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,291,ublic EmpiricalDistribution getEmpiricalDistribution() {
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,292,eturn empiricalDistribution;
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,296, Opens <code>valuesFilePath</code> to use in REPLAY_MODE
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,298, @throws IOException if an error occurs opening the file
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,300,ublic void openReplayFile() throws IOException {
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,301,ilePointer = new BufferedReader(new FileReader
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,302,new File(valuesFileURL.getFile())));
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,306, Closes <code>valuesFilePath</code> after use in REPLAY_MODE
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,308, @throws IOException if an error occurs closing the file
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,310,ublic void closeReplayFile() throws IOException {
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,311,f (filePointer != null) {
False,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,312,ilePointer.close();
True,src/java/org/apache/commons/math/ValueServer.java,src/java/org/apache/commons/math/ValueServer.java,377,"return randomData.nextGaussian(mu, sigma);"
False,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,69, @version $Revision: 1.3 $
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,69,* @version $Revision: 1.4 $
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,106,"assertTrue(""empirical distribution property"","
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,107,vs.getEmpiricalDistribution() != null);
False,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,113,"""std dev"", 1.0173699343977738, stats.getStandardDeviation(), tolerance);"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,115,"(""std dev"", 1.0173699343977738, stats.getStandardDeviation(),"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,116,tolerance);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,118,vs.computeDistribution(500);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,119,stats = new UnivariateImpl();
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,120,for (int i = 1; i < 1000; i++) {
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,121,next = vs.getNext();
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,122,stats.addValue(next);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,124,"assertEquals(""mean"", 5.069831575018909, stats.getMean(), tolerance);"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,125,assertEquals
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,126,"(""std dev"", 1.0173699343977738, stats.getStandardDeviation(),"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,127,tolerance);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,177,vs.closeReplayFile();
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,178,// make sure no NPE
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,179,vs.closeReplayFile();
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,183,* Test other ValueServer modes
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,185,public void testModes() throws Exception {
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,186,vs.setMode(ValueServer.CONSTANT_MODE);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,187,vs.setMu(0);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,188,"assertEquals(""constant mode test"",vs.getMu(),vs.getNext(),Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,189,vs.setMode(ValueServer.UNIFORM_MODE);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,190,vs.setMu(2);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,191,double val = vs.getNext();
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,192,assertTrue(val > 0 && val < 4);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,193,vs.setSigma(1);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,194,vs.setMode(ValueServer.GAUSSIAN_MODE);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,195,val = vs.getNext();
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,196,"assertTrue(""gaussian value close enough to mean"","
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,197,val < vs.getMu() + 100*vs.getSigma());
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,198,vs.setMode(ValueServer.EXPONENTIAL_MODE);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,199,val = vs.getNext();
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,200,assertTrue(val > 0);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,201,try {
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,202,vs.setMode(1000);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,203,vs.getNext();
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,204,"fail(""bad mode, expecting IllegalStateException"");"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,205,} catch (IllegalStateException ex) {
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,211,* Test fill
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,213,public void testFill() throws Exception {
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,214,vs.setMode(ValueServer.CONSTANT_MODE);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,215,vs.setMu(2);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,216,double[] val = new double[5];
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,217,vs.fill(val);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,218,for (int i = 0; i < 5; i++) {
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,219,"assertEquals(""fill test in place"",2,val[i],Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,221,double v2[] = vs.fill(3);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,222,for (int i = 0; i < 3; i++) {
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,223,"assertEquals(""fill test in place"",2,v2[i],Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,228,* Test getters to make Clover happy
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,230,public void testProperties() throws Exception {
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,231,vs.setMode(ValueServer.CONSTANT_MODE);
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,232,"assertEquals(""mode test"",ValueServer.CONSTANT_MODE,vs.getMode());"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,233,"vs.setValuesFileURL(""http://www.apache.org"");"
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,234,String s = vs.getValuesFileURL();
True,src/test/org/apache/commons/math/ValueServerTest.java,src/test/org/apache/commons/math/ValueServerTest.java,235,"assertEquals(""valuesFileURL test"",""http://www.apache.org"",s);"

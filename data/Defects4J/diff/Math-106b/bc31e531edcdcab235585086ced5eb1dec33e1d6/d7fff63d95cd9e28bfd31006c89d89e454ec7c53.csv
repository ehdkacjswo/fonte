is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,61, @version $Revision: 1.3 $ $Date: 2003/07/09 20:02:43 $
True,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,61,* @version $Revision: 1.4 $ $Date: 2003/09/07 03:12:56 $
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,64,** Maximum allowed numerical error. */
False,src/java/org/apache/commons/math/analysis/RootFinding.java,src/java/org/apache/commons/math/analysis/RootFinding.java,65,rivate static final double EPSILON = 10e-9;
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,59, @version $Revision: 1.3 $ $Date: 2003/07/30 21:58:10 $
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,59,* @version $Revision: 1.4 $ $Date: 2003/09/07 03:12:56 $
True,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,63,/** the natural spline coefficients. */
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,70, @throws MathException if arguments violate assumptions made by the
False,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,src/java/org/apache/commons/math/analysis/SplineInterpolator.java,71,         interpolationg algorithm
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,64, @version $Revision: 1.4 $ $Date: 2003/07/30 21:58:10 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,64,* @version $Revision: 1.5 $ $Date: 2003/09/07 03:12:56 $
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,74,* Create a new factory.
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverFactory.java,75, @todo add comment
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,59, @version $Revision: 1.1 $ $Date: 2003/07/30 22:06:37 $
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,60, @todo add comment
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,59,* Utility routines for {@link UnivariateRealSolver} objects.
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverUtil.java,60,* @version $Revision: 1.2 $ $Date: 2003/09/07 03:12:56 $
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,83, @version $Revision: 1.3 $ $Date: 2003/07/09 20:02:59 $
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,83,* @version $Revision: 1.4 $ $Date: 2003/09/07 03:12:56 $
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,105,* @return the random value.
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,115,* @return the sample statistics
False,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,116,nivariate getSampleStats();
True,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,src/java/org/apache/commons/math/random/EmpiricalDistribution.java,118,Univariate getSampleStats() throws IllegalStateException;
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,92, @version $Revision: 1.3 $ $Date: 2003/07/09 20:02:59 $
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,92,* @version $Revision: 1.4 $ $Date: 2003/09/07 03:12:56 $
False,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,220,** Generates a random value from this distribution */
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,221,* Generates a random value from this distribution
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,222,* @return the random value.
True,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java,223,* @throws IllegalStateException if the distribution has not been loaded
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,107, @version $Revision: 1.2 $ $Date: 2003/07/07 23:19:21 $
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,107,* @version $Revision: 1.3 $ $Date: 2003/09/07 03:12:56 $
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,130,* @param len the desired string length.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,131,* @return the random string.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,169,* Generate a random int value uniformly distributed between
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,170,"* <code>lower</code> and <code>upper</code>, inclusive."
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,171,* @param lower the lower bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,172,* @param upper the upper bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,173,* @return the random integer.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,185,* Generate a random long value uniformly distributed between
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,186,"* <code>lower</code> and <code>upper</code>, inclusive."
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,187,* @param lower the lower bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,188,* @param upper the upper bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,189,* @return the random integer.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,213,* @param len the desired string length.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,214,* @return the random string.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,265,* Generate a random int value uniformly distributed between
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,266,"* <code>lower</code> and <code>upper</code>, inclusive.  This algorithm"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,267,* using a secure random number generator for its engine.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,268,* @param lower the lower bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,269,* @param upper the upper bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,270,* @return the random integer.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,282,* Generate a random long value uniformly distributed between
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,283,"* <code>lower</code> and <code>upper</code>, inclusive.  This algorithm"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,284,* using a secure random number generator for its engine.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,285,* @param lower the lower bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,286,* @param upper the upper bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,287,* @return the random integer.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,304,* @param mean mean of the Poisson distribution.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,305,* @return the random Poisson value.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,308,if (mean <= 0) {
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,309,"throw new IllegalArgumentException(""Poisson mean must be > 0"");"
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,277,f (mean <= 0) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,278,"hrow new IllegalArgumentException(""Poisson mean must be > 0"");"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,327,* Generate a random value from a Normal distribution.  This algorithm
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,328,* generates random values for the general Normal distribution with the
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,329,"* given mean, <code>mu</code> and the given standard deviation,"
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,330,* <code>sigma</code>.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,331,* @param mu the mean of the distribution.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,332,* @param sigma the standard deviation of the distribution.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,333,* @return the random Normal value.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,347,* @param mean the mean of the distribution.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,348,* @return the random Exponential value.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,369,* @param lower the lower bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,370,* @param upper the upper bound.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,371,* @return the random value.
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,330,ouble result = lower + rand.nextDouble() * (upper - lower);
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,331,hile (result == lower) {
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,332,esult = lower + rand.nextDouble() * (upper - lower);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,380,// insure nextDouble() isn't 0.0
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,381,double u = rand.nextDouble();
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,382,while(u <= 0.0){
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,383,u = rand.nextDouble();
False,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,334,eturn result;
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,386,return lower + u * (upper - lower);
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,497,* @param n the population size.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,498,* @param k the number to choose.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,499,* @return the random permutation.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,529,* @param c Collection to sample from.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,530,* @param k sample size.
True,src/java/org/apache/commons/math/random/RandomDataImpl.java,src/java/org/apache/commons/math/random/RandomDataImpl.java,531,* @return the random sample.
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,65, @version $Revision: 1.4 $ $Date: 2003/08/09 04:03:41 $
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,65,* @version $Revision: 1.5 $ $Date: 2003/09/07 03:12:56 $
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,116,"The BeanListUnivariateImpl does not accept values """
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,117," ""through the addValue method.  Because elements of this list """
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,118," ""are JavaBeans, one must be sure to set the 'propertyName' """
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,119," ""property and add new Beans to the underlying list via the """
False,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,120," ""addBean(Object bean) method"";"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,116,"""The BeanListUnivariateImpl does not accept values "" +"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,117,"""through the addValue method.  Because elements of this list "" +"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,118,"""are JavaBeans, one must be sure to set the 'propertyName' "" +"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,119,"""property and add new Beans to the underlying list via the "" +"
True,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,src/java/org/apache/commons/math/stat/BeanListUnivariateImpl.java,120,"""addBean(Object bean) method"";"
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,63, @version $Revision: 1.4 $ $Date: 2003/07/15 03:45:10 $
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,63,* @version $Revision: 1.5 $ $Date: 2003/09/07 03:12:56 $
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,91,* @param transformer the number transformer used to convert the list items.
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,110,f (windowSize != Univariate.INFINITE_WINDOW
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,111,& windowSize < list.size()) {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,111,if (windowSize != Univariate.INFINITE_WINDOW &&
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,112,windowSize < list.size())
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,133,f (windowSize != Univariate.INFINITE_WINDOW
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,134,& windowSize < list.size()) {
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,135,if (windowSize != Univariate.INFINITE_WINDOW &&
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,136,windowSize < list.size())
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,201, @return
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,204,* Access the number transformer.
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,205,* @return the number transformer.
False,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,208, @param transformer
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,212,* Modify the number transformer.
True,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,src/java/org/apache/commons/math/stat/ListUnivariateImpl.java,213,* @param transformer the new number transformer.
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,60, @version $Revision: 1.15 $ $Date: 2003/08/09 04:03:41 $
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,60,* @version $Revision: 1.16 $ $Date: 2003/09/07 03:12:56 $
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,258,"accum - (Math.pow(accum2, 2) / ((double) length)))"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,259, (double) (length - 1);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,258,"(accum - (Math.pow(accum2, 2) / ((double) length))) /"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,259,(double) (length - 1);
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,60, @version $Revision: 1.5 $ $Date: 2003/07/15 03:45:10 $
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,60,* @version $Revision: 1.6 $ $Date: 2003/09/07 03:12:56 $
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,116,"A window Univariate had more element than """
False,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,117," ""the windowSize.  This is an inconsistent state."";"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,116,"""A window Univariate had more element than "" +"
True,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java,117,"""the windowSize.  This is an inconsistent state."";"
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,61, @version $Revision: 1.7 $ $Date: 2003/08/09 04:03:40 $
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,61,* @version $Revision: 1.8 $ $Date: 2003/09/07 03:12:56 $
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,94,4 =
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,95,4
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,96, (4.0 * v * prevM3)
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,97, (6.0 * v2 * prevM2)
False,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,98, ((n0 * n0) - 3 * n1) * (v2 * v2 * n1 * n0);
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,94,m4 = m4 - (4.0 * v * prevM3) + (6.0 * v2 * prevM2) +
True,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,src/java/org/apache/commons/math/stat/univariate/moment/FourthMoment.java,95,((n0 * n0) - 3 * n1) * (v2 * v2 * n1 * n0);
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,65, @version $Revision: 1.7 $ $Date: 2003/08/09 04:03:40 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,65,* @version $Revision: 1.8 $ $Date: 2003/09/07 03:12:56 $
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,122,moment.n0 * (moment.n0 + 1) * moment.m4
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,123, 3 * moment.m2 * moment.m2 * moment.n1)
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,124, (moment.n1
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,125, moment.n2
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,126, moment.n3
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,127, variance
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,128, variance);
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,122,(moment.n0 * (moment.n0 + 1) * moment.m4 -
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,123,3 * moment.m2 * moment.m2 * moment.n1) /
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,124,(moment.n1 * moment.n2 * moment.n3 * variance * variance);
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,196,"accum - (Math.pow(accum2, 2) / ((double) length)))"
False,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,197, (double) (length - 1));
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,192,"(accum - (Math.pow(accum2, 2) / ((double) length))) /"
True,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/univariate/moment/Kurtosis.java,193,(double) (length - 1));
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,66, @version $Revision: 1.7 $ $Date: 2003/08/09 04:03:40 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,66,* @version $Revision: 1.8 $ $Date: 2003/09/07 03:12:56 $
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,122,kewness =
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,123,moment.n0 * moment.m3)
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,124, (moment.n1
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,125, moment.n2
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,126, Math.sqrt(variance)
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,127, variance);
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,122,skewness = (moment.n0 * moment.m3) /
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,123,(moment.n1 * moment.n2 * Math.sqrt(variance) * variance);
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,194,"accum - (Math.pow(accum2, 2) / ((double) length)))"
False,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,195, (double) (length - 1));
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,190,"(accum - (Math.pow(accum2, 2) / ((double) length))) /"
True,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,src/java/org/apache/commons/math/stat/univariate/moment/Skewness.java,191,(double) (length - 1));
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,60, @version $Revision: 1.8 $ $Date: 2003/08/09 04:03:40 $
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,60,* @version $Revision: 1.9 $ $Date: 2003/09/07 03:12:56 $
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,180,ar =
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,181,"accum - (Math.pow(accum2, 2) / ((double) length)))"
False,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,182, (double) (length - 1);
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,180,"var = (accum - (Math.pow(accum2, 2) / ((double) length))) /"
True,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,src/java/org/apache/commons/math/stat/univariate/moment/Variance.java,181,(double) (length - 1);
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,67, @version $Revision: 1.3 $ $Date: 2003/07/09 20:04:12 $
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,67,* @version $Revision: 1.4 $ $Date: 2003/09/07 03:12:56 $
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,192,f (Math.abs((f[0][0] * f[1][1]) - (f[1][0] * f[0][1]))
False,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,193, Math.abs(epsilon * f[1][0] * f[1][1])) {
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,192,if (Math.abs((f[0][0] * f[1][1]) - (f[1][0] * f[0][1])) <
True,src/java/org/apache/commons/math/util/ContinuedFraction.java,src/java/org/apache/commons/math/util/ContinuedFraction.java,193,Math.abs(epsilon * f[1][0] * f[1][1]))
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,91, @version $Revision: 1.3 $ $Date: 2003/07/09 20:04:12 $
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,91,* @version $Revision: 1.4 $ $Date: 2003/09/07 03:12:56 $
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,295,"Contraction criteria can never be smaller than """
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,296," ""the expansion factor.  This would lead to a never """
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,297," ""ending loop of expansion and contraction as a newly """
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,298," ""expanded internal storage array would immediately """
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,299," ""satisfy the criteria for contraction"";"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,295,"""Contraction criteria can never be smaller than "" +"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,296,"""the expansion factor.  This would lead to a never "" +"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,297,"""ending loop of expansion and contraction as a newly "" +"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,298,"""expanded internal storage array would immediately "" +"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,299,"""satisfy the criteria for contraction"";"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,305,"The contraction criteria must be a number larger """
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,306," ""than one.  If the contractionCriteria is less than or """
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,307," ""equal to one an endless loop of contraction and """
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,308," ""expansion would ensue as an internalArray.length """
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,309," ""== numElements would satisfy the contraction criteria"";"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,305,"""The contraction criteria must be a number larger "" +"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,306,"""than one.  If the contractionCriteria is less than or "" +"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,307,"""equal to one an endless loop of contraction and "" +"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,308,"""expansion would ensue as an internalArray.length "" +"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,309,"""== numElements would satisfy the contraction criteria"";"
False,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,315,"The expansion factor must be a number greater "" + ""than 1.0"";"
True,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,src/java/org/apache/commons/math/util/ContractableDoubleArray.java,315,"""The expansion factor must be a number greater than 1.0"";"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,91, @version $Revision: 1.4 $ $Date: 2003/07/09 20:04:12 $
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,91,* @version $Revision: 1.5 $ $Date: 2003/09/07 03:12:56 $
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,202,"The initial capacity supplied: """
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,203, initialCapacity
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,204," ""must be a positive integer"";"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,202,"""The initial capacity supplied: "" + initialCapacity +"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,203,"""must be a positive integer"";"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,273,"The index specified: """
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,274, index
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,275," "" is larger than the current number of elements"";"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,272,"""The index specified: "" + index +"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,273,""" is larger than the current number of elements"";"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,281,"Elements cannot be retrieved from a negative "" + ""array index"";"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,279,"""Elements cannot be retrieved from a negative array index"";"
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,406,tring msg =
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,407,"Cannot discard more elements than are"""
False,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,408," ""contained in this array."";"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,404,"String msg = ""Cannot discard more elements than are"" +"
True,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,src/java/org/apache/commons/math/util/ExpandableDoubleArray.java,405,"""contained in this array."";"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,85, @version $Revision: 1.5 $ $Date: 2003/07/09 20:04:12 $
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,85,* @version $Revision: 1.6 $ $Date: 2003/09/07 03:12:56 $
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,167,"Attempted to retrieve an element outside of """
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,168," ""the element array"";"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,167,"""Attempted to retrieve an element outside of "" +"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,168,"""the element array"";"
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,238,"Attempted to add a value to an array of fixed """
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,239," ""size, please use addElementRolling """
False,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,240," ""to avoid this exception"";"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,238,"""Attempted to add a value to an array of fixed "" +"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,239,"""size, please use addElementRolling "" +"
True,src/java/org/apache/commons/math/util/FixedDoubleArray.java,src/java/org/apache/commons/math/util/FixedDoubleArray.java,240,"""to avoid this exception"";"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,347,"nivariateRealFunction f = i.interpolate(xval, yval);"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,347,"i.interpolate(xval, yval);"
False,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,355,"nivariateRealFunction f = i.interpolate(xval, yval);"
True,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,src/test/org/apache/commons/math/analysis/InterpolatorTest.java,355,"i.interpolate(xval, yval);"

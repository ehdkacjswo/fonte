is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,21,mport com.google.common.collect.ImmutableSet;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,21,import com.google.common.collect.ImmutableList;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,458,Node placeholder = IR.script();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,459,"node.replaceChild(originalCond, placeholder);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,465,"ode.replaceChild(originalCond, mNode.node.removeFirstChild());"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,467,"node.replaceChild(placeholder, mNode.node.removeFirstChild());"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,468,"aybeReplaceNode(originalCond, mNode);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,470,"replaceNode(placeholder, mNode);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,483,Node placeholder = IR.script();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,484,"n.replaceChild(originalCond, placeholder);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,488,ode thenBranch = originalCond.getNext();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,489,".replaceChild(originalCond, mNode.node.removeFirstChild());"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,492,Node thenBranch = n.getFirstChild().getNext();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,493,"n.replaceChild(placeholder, mNode.node.removeFirstChild());"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,494,"aybeReplaceNode(originalCond, mNode);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,498,"replaceNode(placeholder, mNode);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,525,Node placeholder = IR.script().srcref(originalCond);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,526,"n.replaceChild(originalCond, placeholder);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,545,originalCond = null;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,554,"replaceNode(placeholder, unnegatedCond);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,571,"aybeReplaceNode(originalCond, shortCond);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,580,"replaceNode(placeholder, shortCond);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,575,.removeChild(originalCond);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,584,n.removeChild(placeholder);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,602,srcref(originalCond));
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,611,.srcref(placeholder));
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,612,"aybeReplaceNode(originalCond, unnegatedCond);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,621,"replaceNode(placeholder, unnegatedCond);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,624,".replaceChild(originalCond, shortCond.node.removeFirstChild());"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,633,"n.replaceChild(placeholder, shortCond.node.removeFirstChild());"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,635,.removeChild(originalCond);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,644,n.removeChild(placeholder);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,666,!mayHaveSideEffects(originalCond) ||
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,675,(!mayHaveSideEffects(unnegatedCond.node) ||
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,669,.removeChild(originalCond);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,678,n.removeChild(placeholder);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,687,.removeChild(originalCond);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,696,n.removeChild(placeholder);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,715,riginalCond.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,724,placeholder.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,740,riginalCond.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,749,placeholder.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,752,"aybeReplaceNode(originalCond, unnegatedCond);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,761,"replaceNode(placeholder, unnegatedCond);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1011,Node placeholder = IR.script();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1012,"n.getParent().replaceChild(n, placeholder);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1003,"eturn maybeReplaceNode(n, minCond.getShorterRepresentation(true));"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1014,"return replaceNode(placeholder,"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1015,minCond.getShorterRepresentation(true));
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1009,"rivate Node maybeReplaceNode(Node lhs, MinimizedCondition.MeasuredNode rhs) {"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1010,f (!rhs.changed) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1011,eturn lhs;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1013,/ Removed for performance reasons.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1014,/ Preconditions.checkState(!lhs.isEquivalentTo(rhs.node));
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1021,"private Node replaceNode(Node lhs, MinimizedCondition.MeasuredNode rhs) {"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1017,eportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1024,if (rhs.changed) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1025,reportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1039,eturn addNot().change();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1042,rivate MeasuredNode change() {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1043,his.changed = true;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1044,eturn this;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1047,rivate MeasuredNode addNot() {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1048,this.change();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1051,"ode = new Node(Token.NOT, node).srcref(node);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1052,ength += estimateCostOneLevel(node);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1053,eturn this;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1052,return this.addNot();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1069,return this;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1072,private MeasuredNode change() {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1077,private MeasuredNode addNot() {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1078,"node = new Node(Token.NOT, node).srcref(node);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1079,length += estimateCostOneLevel(node);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1080,return this;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1135,static MinimizedCondition fromConditionNode(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1136,switch (n.getType()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1137,case Token.NOT:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1138,case Token.AND:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1139,case Token.OR:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1140,case Token.HOOK:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1141,case Token.COMMA:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1142,return computeMinimizedCondition(n);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1143,default:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1144,return unoptimized(n);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1129,   This may be still connected to a tree and will be cloned as necessary.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1151,*   This must be removed from the tree before being passed in connected.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1132,tatic MinimizedCondition fromConditionNode(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1154,private static MinimizedCondition computeMinimizedCondition(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1155,Preconditions.checkArgument(n.getParent() == null);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1135,inimizedCondition subtree = fromConditionNode(n.getFirstChild());
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1136,mmutableSet<MeasuredNode> positiveAsts = ImmutableSet.of(
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1158,MinimizedCondition subtree =
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1159,computeMinimizedCondition(n.getFirstChild().detachFromParent());
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1160,ImmutableList<MeasuredNode> positiveAsts = ImmutableList.of(
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1139,mmutableSet<MeasuredNode> negativeAsts = ImmutableSet.of(
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1163,ImmutableList<MeasuredNode> negativeAsts = ImmutableList.of(
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1150,inimizedCondition leftSubtree = fromConditionNode(n.getFirstChild());
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1151,inimizedCondition rightSubtree = fromConditionNode(n.getLastChild());
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1152,mmutableSet<MeasuredNode> positiveAsts = ImmutableSet.of(
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1174,MinimizedCondition leftSubtree =
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1175,computeMinimizedCondition(n.getFirstChild().detachFromParent());
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1176,MinimizedCondition rightSubtree =
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1177,computeMinimizedCondition(n.getLastChild().detachFromParent());
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1178,ImmutableList<MeasuredNode> positiveAsts = ImmutableList.of(
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1159,mmutableSet<MeasuredNode> negativeAsts = ImmutableSet.of(
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1185,ImmutableList<MeasuredNode> negativeAsts = ImmutableList.of(
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1174,inimizedCondition thenSubtree = fromConditionNode(thenNode);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1175,inimizedCondition elseSubtree = fromConditionNode(elseNode);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1200,MinimizedCondition thenSubtree =
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1201,computeMinimizedCondition(thenNode.detachFromParent());
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1202,MinimizedCondition elseSubtree =
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1203,computeMinimizedCondition(elseNode.detachFromParent());
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1188,inimizedCondition rhsSubtree = fromConditionNode(lhs.getNext());
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1216,MinimizedCondition rhsSubtree =
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1217,computeMinimizedCondition(lhs.getNext().detachFromParent());
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1197,efault:
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1198,eturn unoptimized(n);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1226,default: {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1227,"MeasuredNode pos = new MeasuredNode(n, 0, false);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1228,MeasuredNode neg = pos.cloneTree().negate();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1229,"return new MinimizedCondition(pos, neg);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1234,"/** Return a MeasuredNode of the given condition node, without minimizing"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1235,* the result.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1237,*  @param n The conditional expression tree to minimize.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1238,*   This must be removed from the tree before being passed in connected.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1239,*  @return A MinimizedCondition object representing that tree.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1203,"easuredNode pos = new MeasuredNode(n.cloneTree(), 0, false);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1204,easuredNode neg = pos.cloneTree().negate();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1242,Preconditions.checkArgument(n.getParent() == null);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1243,"MeasuredNode pos = new MeasuredNode(n, 0, false);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1244,"// In the unoptimized case, we want to always return the positive side,"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1245,// so we set the negative side to a SCRIPT node (never valid inside an
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1246,// expression) with an unreasonably high length so that it's never chosen.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1247,"MeasuredNode neg = new MeasuredNode(IR.script(), Integer.MAX_VALUE, true);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1208,ode getNode() {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1209,eturn positive.node;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1212,ode getNegatedNode() {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1213,eturn negative.node;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1229,f (countLeadingNot || positive.length <= negative.length) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1264,if (countLeadingNot || positive.node.isNot()
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1265,|| positive.length <= negative.length) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1232,eturn negative.negate();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1268,return negative.addNot();
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,946,"ssertTrue(""compiler.reportCodeChange() should have been called"","
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,947,asCodeChanged);
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,946,"assertTrue(""compiler.reportCodeChange() should have been called."""
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,947,"+ ""\nOriginal: "" + mainRootClone.toStringTree()"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,948,"+ ""\nNew: "" + mainRoot.toStringTree(), hasCodeChanged);"
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,416,MinimizedCondition.fromConditionNode(inputNode);
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,416,.MinimizedCondition.fromConditionNode(inputNode.detachFromParent());
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,419,f (!result.getNode().isEquivalentTo(positiveNode)) {
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,420,"ail(""Not equal:\n"" + result.getNode().toStringTree()"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,419,// With counting the leading NOT node:
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,420,Node positiveResult = result.getShorterRepresentation(true).node;
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,421,// Without counting the leading NOT node:
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,422,Node negativeResult = result.getShorterRepresentation(false).node;
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,423,if (!positiveResult.isEquivalentTo(positiveNode)) {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,424,"fail(""Not equal:\n"" + positiveResult.toStringTree()"
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,423,f (!result.getNegatedNode().isEquivalentTo(negativeNode)) {
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,424,"ail(""Not equal:\n"" + result.getNegatedNode().toStringTree()"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,427,if (!negativeResult.isEquivalentTo(negativeNode)) {
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,428,"fail(""Not equal:\n"" + negativeResult.toStringTree()"
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,430,"inimizeCond(""x"", ""x"", ""!x"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,434,"minimizeCond(""x"", ""x"", ""x"");"
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,434,"inimizeCond(""!x"", ""!x"", ""x"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,438,"minimizeCond(""!x"", ""!x"", ""!x"");"
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,438,"inimizeCond(""x || y"", ""x || y"", ""!x && !y"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,442,"minimizeCond(""!(x || y)"", ""!x && !y"", ""!(x || y)"");"
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,442,"inimizeCond(""x && y"", ""x && y"", ""!x || !y"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,446,"minimizeCond(""!(x && y)"", ""!x || !y"", ""!(x && y)"");"
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,446,"inimizeCond(""w && x && y && z"", ""w && x && y && z"", ""!(w && x && y && z)"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,450,"minimizeCond(""!(x && y && z)"", ""!(x && y && z)"", ""!(x && y && z)"");"
False,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,452,"!x || (y!==2 && f()) || (y!==3 && h())"");"
True,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,test/com/google/javascript/jscomp/PeepholeMinimizeConditionsTest.java,456,"""!(!x || (y!==2 && f()) || (y!==3 && h()))"");"

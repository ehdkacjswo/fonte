is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,343,f (TokenStream.isJSIdentifier(name) &&
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,343,if (!n.isQuotedString() &&
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,344,TokenStream.isJSIdentifier(name) &&
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,349,"dd(jsString(n.getString(), outputCharsetEncoder));"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,350,// Determine if the string is a simple number.
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,351,double d = getSimpleNumber(name);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,352,if (!Double.isNaN(d)) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,353,cc.addNumber(d);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,354,} else {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,355,"add(jsString(n.getString(), outputCharsetEncoder));"
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,653,/ Object literal property names don't have to be quoted if they are
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,654,/ not JavaScript keywords
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,655,f (c.getType() == Token.STRING &&
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,656,c.isQuotedString() &&
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,657,TokenStream.isKeyword(c.getString()) &&
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,658,okenStream.isJSIdentifier(c.getString()) &&
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,659,/ do not encode literally any non-literal characters that were
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,660,/ unicode escaped.
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,661,odeUtil.isLatin(c.getString())) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,662,dd(c.getString());
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,660,Preconditions.checkState(c.getType() == Token.STRING);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,661,String key = c.getString();
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,662,// Object literal property names don't have to be quoted if they
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,663,// are not JavaScript keywords
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,664,if (!c.isQuotedString() &&
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,665,!TokenStream.isKeyword(key) &&
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,666,TokenStream.isJSIdentifier(key) &&
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,667,// do not encode literally any non-literal characters that
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,668,// were unicode escaped.
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,669,NodeUtil.isLatin(key)) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,670,add(key);
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,664,"ddExpr(c, 1);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,672,// Determine if the string is a simple number.
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,673,double d = getSimpleNumber(key);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,674,if (!Double.isNaN(d)) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,675,cc.addNumber(d);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,676,} else {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,677,"addExpr(c, 1);"
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,736,static boolean isSimpleNumber(String s) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,737,int len = s.length();
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,738,for (int index = 0; index < len; index++) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,739,char c = s.charAt(index);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,740,if (c < '0' || c > '9') {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,741,return false;
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,744,return len > 0;
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,747,static double getSimpleNumber(String s) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,748,if (isSimpleNumber(s)) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,749,long l = Long.parseLong(s);
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,750,if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,751,return l;
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,754,return Double.NaN;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,48,"static final long MAX_POSITIVE_INTEGER_NUMBER = (long)Math.pow(2, 53);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,181,ouble value = n.getDouble();
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,182,ong longValue = (long) value;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,184,"/ Return ""1"" instead of ""1.0"""
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,185,f (longValue == value) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,186,eturn Long.toString(longValue);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,187, else {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,188,eturn Double.toString(n.getDouble());
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,182,return getStringValue(n.getDouble());
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,208,static String getStringValue(double value) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,209,long longValue = (long) value;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,211,"// Return ""1"" instead of ""1.0"""
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,212,if (longValue == value) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,213,return Long.toString(longValue);
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,214,} else {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,215,return Double.toString(value);
True,src/com/google/javascript/jscomp/RenamePrototypes.java,src/com/google/javascript/jscomp/RenamePrototypes.java,24,import com.google.javascript.rhino.TokenStream;
False,src/com/google/javascript/jscomp/RenamePrototypes.java,src/com/google/javascript/jscomp/RenamePrototypes.java,335,f (child.getType() != Token.NUMBER) {
True,src/com/google/javascript/jscomp/RenamePrototypes.java,src/com/google/javascript/jscomp/RenamePrototypes.java,336,if (TokenStream.isJSIdentifier(child.getString())) {
False,src/com/google/javascript/jscomp/RenamePrototypes.java,src/com/google/javascript/jscomp/RenamePrototypes.java,376,"f (key.getType() != Token.NUMBER) { // May be STRING, GET, or SET"
True,src/com/google/javascript/jscomp/RenamePrototypes.java,src/com/google/javascript/jscomp/RenamePrototypes.java,377,if (TokenStream.isJSIdentifier(key.getString())) {
True,src/com/google/javascript/jscomp/RenamePrototypes.java,src/com/google/javascript/jscomp/RenamePrototypes.java,378,"// May be STRING, GET, or SET"
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,255,private Node transformNumberAsString(NumberLiteral literalNode) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,256,JSDocInfo jsDocInfo = handleJsDoc(literalNode);
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,257,Node irNode = newStringNode(getStringValue(literalNode.getNumber()));
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,258,if (jsDocInfo != null) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,259,irNode.setJSDocInfo(jsDocInfo);
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,261,"setSourceInfo(irNode, literalNode);"
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,262,return irNode;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,265,private static String getStringValue(double value) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,266,long longValue = (long) value;
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,268,"// Return ""1"" instead of ""1.0"""
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,269,if (longValue == value) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,270,return Long.toString(longValue);
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,271,} else {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,272,return Double.toString(value);
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,364,} else if (n instanceof NumberLiteral) {
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,365,ret = transformNumberAsString((NumberLiteral)n);
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,366,"ret.putBooleanProp(Node.QUOTED_PROP, true);"
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,345,reconditions.checkState(ret.getType() == Token.NUMBER
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,346,| ret.getType() == Token.STRING);
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,347,f (ret.getType() == Token.STRING) {
False,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,348,"et.putBooleanProp(Node.QUOTED_PROP, true);"
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,369,"ret.putBooleanProp(Node.QUOTED_PROP, true);"
True,src/com/google/javascript/jscomp/parsing/IRFactory.java,src/com/google/javascript/jscomp/parsing/IRFactory.java,371,Preconditions.checkState(ret.getType() == Token.STRING);
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,221,"ase EMPTY_BLOCK: return ""empty_block"";"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,222,"ase ORIGINALNAME_PROP: return ""originalname"";"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,223,"ase SIDE_EFFECT_FLAGS: return ""side_effect_flags"";"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,220,"case EMPTY_BLOCK:        return ""empty_block"";"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,221,"case ORIGINALNAME_PROP:  return ""originalname"";"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,222,"case SIDE_EFFECT_FLAGS:  return ""side_effect_flags"";"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1125,public void testObjectLit2() {
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1126,"assertPrint(""var x={1:1}"", ""var x={1:1}"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1127,"assertPrint(""var x={'1':1}"", ""var x={1:1}"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1128,"assertPrint(""var x={'1.0':1}"", ""var x={\""1.0\"":1}"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1129,"assertPrint(""var x={1.5:1}"", ""var x={\""1.5\"":1}"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1133,public void testObjectLit3() {
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1134,"assertPrint(""var x={3E9:1}"","
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1135,"""var x={3E9:1}"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1136,"assertPrint(""var x={'3000000000':1}"", // More than 31 bits"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1137,"""var x={3E9:1}"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1138,"assertPrint(""var x={'3000000001':1}"","
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1139,"""var x={3000000001:1}"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1140,"assertPrint(""var x={'6000000001':1}"",  // More than 32 bits"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1141,"""var x={6000000001:1}"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1142,"assertPrint(""var x={\""12345678901234567\"":1}"",  // More than 53 bits"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1143,"""var x={\""12345678901234567\"":1}"");"
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1132,/ Valid ES5 but Rhino doesn't accept this yet.
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1133,/ assertPrint(
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1134,"/  ""var x = {get 1() {return 1}}"","
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1135,"/  ""var x={get \""1\""(){return 1}}"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1153,assertPrint(
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1154,"""var x = {get 'a'() {return 1}}"","
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1155,"""var x={get \""a\""(){return 1}}"");"
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1137,/ Valid ES5 but Rhino doesn't accept this yet.
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1138,/ assertPrint(
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1139,"/  ""var x = {get \""()\""() {return 1}}"","
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1140,"/   ""var x={get \""()\""(){return 1}}"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1157,assertPrint(
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1158,"""var x = {get 1() {return 1}}"","
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1159,"""var x={get 1(){return 1}}"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1161,assertPrint(
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1162,"""var x = {get \""()\""() {return 1}}"","
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1163,"""var x={get \""()\""(){return 1}}"");"
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1145,"ssertPrint(""var x = {set a(x) {return 1}}"", ""var x={set a(x){return 1}}"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1168,assertPrint(
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1169,"""var x = {set a(y) {return 1}}"","
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1170,"""var x={set a(y){return 1}}"");"
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1147,/ Valid ES5 but Rhino doesn't accept this yet.
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1148,/ assertPrint(
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1149,"/  ""var x = {set 1(x) {return 1}}"","
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1150,"/  ""var x={set \""1\""(x){return 1}}"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1172,assertPrint(
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1173,"""var x = {get 'a'() {return 1}}"","
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1174,"""var x={get \""a\""(){return 1}}"");"
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1152,/ Valid ES5 but Rhino doesn't accept this yet.
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1153,/ assertPrint(
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1154,"/  ""var x = {set \""(x)\""() {return 1}}"","
False,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1155,"/   ""var x={set \""(x)\""(){return 1}}"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1176,assertPrint(
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1177,"""var x = {set 1(y) {return 1}}"","
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1178,"""var x={set 1(y){return 1}}"");"
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1180,assertPrint(
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1181,"""var x = {set \""(x)\""(y) {return 1}}"","
True,test/com/google/javascript/jscomp/CodePrinterTest.java,test/com/google/javascript/jscomp/CodePrinterTest.java,1182,"""var x={set \""(x)\""(y){return 1}}"");"
False,test/com/google/javascript/jscomp/FunctionNamesTest.java,test/com/google/javascript/jscomp/FunctionNamesTest.java,89,"xpectedMap.put(14, ""<anonymous>"");"
False,test/com/google/javascript/jscomp/FunctionNamesTest.java,test/com/google/javascript/jscomp/FunctionNamesTest.java,90,"xpectedMap.put(15, ""<anonymous>"");"
True,test/com/google/javascript/jscomp/FunctionNamesTest.java,test/com/google/javascript/jscomp/FunctionNamesTest.java,89,"expectedMap.put(14, ""numliteral.__2"");"
True,test/com/google/javascript/jscomp/FunctionNamesTest.java,test/com/google/javascript/jscomp/FunctionNamesTest.java,90,"expectedMap.put(15, ""recnumliteral.__3.a"");"
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,71,/ TODO(johnlenz): Add tests when Rhino supports numbers and quoted strings
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,72,/ for get and set.
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,71,"testSame(""Bar.prototype = {get 2(){}}; bar[2];"");"
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,74,"/ testSame(""Bar.prototype = {get 2(){}}; bar[2];"");"
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,76,"/ testSame(""Bar.prototype = {get 'a'(){}}; bar['a'];"");"
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,73,"testSame(""Bar.prototype = {get 'a'(){}}; bar['a'];"");"
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,83,/ TODO(johnlenz): Add tests when Rhino supports numbers and quoted strings
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,84,/ for get and set.
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,86,"/ testSame(""Bar.prototype = {set 2(x){}}; bar[2];"");"
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,80,"testSame(""Bar.prototype = {set 2(x){}}; bar[2];"");"
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,88,"/ testSame(""Bar.prototype = {set 'a'(x){}}; bar['a'];"");"
True,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,82,"testSame(""Bar.prototype = {set 'a'(x){}}; bar['a'];"");"
False,test/com/google/javascript/jscomp/RenamePrototypesTest.java,test/com/google/javascript/jscomp/RenamePrototypesTest.java,49,ublic void testRenamePrototypes() {
True,test/com/google/javascript/jscomp/RenamePrototypesTest.java,test/com/google/javascript/jscomp/RenamePrototypesTest.java,49,public void testRenamePrototypes1() {
True,test/com/google/javascript/jscomp/RenamePrototypesTest.java,test/com/google/javascript/jscomp/RenamePrototypesTest.java,50,"test(""Bar.prototype={'getFoo':function(){},2:function(){}}"","
True,test/com/google/javascript/jscomp/RenamePrototypesTest.java,test/com/google/javascript/jscomp/RenamePrototypesTest.java,51,"""Bar.prototype={'a':function(){},2:function(){}}"");"
True,test/com/google/javascript/jscomp/RenamePrototypesTest.java,test/com/google/javascript/jscomp/RenamePrototypesTest.java,54,public void testRenamePrototypes2() {
False,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,84,mmutableSet.<String>of());
True,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,84,"ImmutableSet.<String>of(""DEF STRING null -> NUMBER""));"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,264,public void testObjectLiteral6() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,265,"testNewParser(""({1: true})"","
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,266,"""SCRIPT 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,267,"""    EXPR_RESULT 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,268,"""        OBJECTLIT 0 [parenthesized: true]\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,269,"""            STRING 1 0 [quoted: 1]\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,270,"""                TRUE 0\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,273,public void testObjectLiteral7() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,274,mode = LanguageMode.ECMASCRIPT5;
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,276,"testNewParser(""({get 1() {}})"","
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,277,"""SCRIPT 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,278,"""    EXPR_RESULT 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,279,"""        OBJECTLIT 0 [parenthesized: true]\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,280,"""            GET 1 0 [quoted: 1]\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,281,"""                FUNCTION  0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,282,"""                    NAME  0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,283,"""                    LP 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,284,"""                    BLOCK 0\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,287,public void testObjectLiteral8() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,288,mode = LanguageMode.ECMASCRIPT5;
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,290,"testNewParser(""({set 1(a) {}})"","
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,291,"""SCRIPT 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,292,"""    EXPR_RESULT 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,293,"""        OBJECTLIT 0 [parenthesized: true]\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,294,"""            SET 1 0 [quoted: 1]\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,295,"""                FUNCTION  0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,296,"""                    NAME  0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,297,"""                    LP 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,298,"""                        NAME a 0\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,299,"""                    BLOCK 0\n"");"
False,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,740,"ssertEquals(Token.NUMBER, number.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,740,"assertEquals(Token.STRING, number.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,750,"parseError(""var x = {get 1(){}};"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,751,"""getters are not supported in Internet Explorer"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,752,"parseError(""var x = {get 'a'(){}};"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,753,"""getters are not supported in Internet Explorer"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,757,"parse(""var x = {get 1(){}};"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,758,"parse(""var x = {get 'a'(){}};"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,765,"parseError(""var x = {set 1(x){}};"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,766,"""setters are not supported in Internet Explorer"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,767,"parseError(""var x = {set 'a'(x){}};"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,768,"""setters are not supported in Internet Explorer"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,772,"parse(""var x = {set 1(x){}};"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,773,"parse(""var x = {set 'a'(x){}};"");"

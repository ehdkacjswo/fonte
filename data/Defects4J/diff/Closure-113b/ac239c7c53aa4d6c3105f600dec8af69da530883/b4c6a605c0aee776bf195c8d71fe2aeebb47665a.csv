is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,177,"oolean hasEqualParameters(ArrowType that, boolean tolerateUnknowns) {"
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,177,"boolean hasEqualParameters(ArrowType that, EquivalenceMethod eqMethod) {"
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,187,"therParamType, tolerateUnknowns)) {"
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,187,"otherParamType, eqMethod)) {"
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,204,"rrowType that, boolean tolerateUnknowns) {"
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,204,"ArrowType that, EquivalenceMethod eqMethod) {"
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,206,"f (!returnType.checkEquivalenceHelper(that.returnType, tolerateUnknowns)) {"
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,206,"if (!returnType.checkEquivalenceHelper(that.returnType, eqMethod)) {"
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,209,"eturn hasEqualParameters(that, tolerateUnknowns);"
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,209,"return hasEqualParameters(that, eqMethod);"
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,3,* ***** BEGIN LICENSE BLOCK *****
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,4,* Version: MPL 1.1/GPL 2.0
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,6,* The contents of this file are subject to the Mozilla Public License Version
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,7,"* 1.1 (the ""License""); you may not use this file except in compliance with"
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,8,* the License. You may obtain a copy of the License at
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,9,* http://www.mozilla.org/MPL/
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,11,"* Software distributed under the License is distributed on an ""AS IS"" basis,"
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,12,"* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License"
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,13,* for the specific language governing rights and limitations under the
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,14,* License.
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,16,"* The Original Code is Rhino code, released"
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,17,"* May 6, 1999."
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,19,* The Initial Developer of the Original Code is
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,20,* Netscape Communications Corporation.
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,21,* Portions created by the Initial Developer are Copyright (C) 1997-1999
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,22,* the Initial Developer. All Rights Reserved.
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,24,* Contributor(s):
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,25,*   Nick Santos
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,26,*   Google Inc.
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,28,"* Alternatively, the contents of this file may be used under the terms of"
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,29,"* the GNU General Public License Version 2 or later (the ""GPL""), in which"
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,30,* case the provisions of the GPL are applicable instead of those above. If
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,31,* you wish to allow use of your version of this file only under the terms of
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,32,* the GPL and not to allow others to use your version of this file under the
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,33,"* MPL, indicate your decision by deleting the provisions above and replacing"
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,34,* them with the notice and other provisions required by the GPL. If you do
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,35,"* not delete the provisions above, a recipient may use your version of this"
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,36,* file under either the MPL or the GPL.
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,38,* ***** END LICENSE BLOCK ***** */
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,40,package com.google.javascript.rhino.jstype;
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,43,* Represents different ways for comparing equality among types.
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,44,* @author nicksantos@google.com (Nick Santos)
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,46,enum EquivalenceMethod {
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,48,* Indicates that the two types should behave exactly the same under
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,49,* all type operations.
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,51,"* Thus, {string} != {?} and {Unresolved} != {?}"
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,53,"IDENTITY,"
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,56,"* Indicates that the two types are almost exactly the same, and that a"
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,57,* data flow analysis algorithm comparing them should consider them equal.
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,59,"* In traditional type inference, the types form a finite lattice, and this"
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,60,* ensures that type inference will terminate.
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,62,"* In our type system, the unknown types do not obey the lattice rules. So"
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,63,"* if we continue to perform inference over the unknown types, we may"
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,64,* never terminate.
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,66,* By treating all unknown types as equivalent for the purposes of data
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,67,"* flow analysis, we ensure that the algorithm will terminate."
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,69,"* Thus, {string} != {?} and {Unresolved} ~= {?}"
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,71,"DATA_FLOW,"
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,74,* Indicates that two types are invariant.
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,76,"* In a type system without unknown types, this would be the same"
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,77,* as IDENTITY. But we always want to consider type A invariant with type B
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,78,* if B is unknown.
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,80,"* Thus, {string} ~= {?} and {Unresolved} ~= {?}"
True,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,src/com/google/javascript/rhino/jstype/EquivalenceMethod.java,82,INVARIANT
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,792,"f (call.hasEqualParameters(other.call, false)) {"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,792,"if (call.hasEqualParameters(other.call, EquivalenceMethod.IDENTITY)) {"
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,890,"unctionType that, boolean tolerateUnknowns) {"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,890,"FunctionType that, EquivalenceMethod eqMethod) {"
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,908,"hat.typeOfThis, tolerateUnknowns) &&"
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,909,"all.checkArrowEquivalenceHelper(that.call, tolerateUnknowns);"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,908,"that.typeOfThis, eqMethod) &&"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,909,"call.checkArrowEquivalenceHelper(that.call, eqMethod);"
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,918,"eturn this.call.checkArrowEquivalenceHelper(otherType.call, false);"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,918,return this.call.checkArrowEquivalenceHelper(
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,919,"otherType.call, EquivalenceMethod.IDENTITY);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,491,ublic final boolean isEquivalentTo(JSType jsType) {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,492,"eturn checkEquivalenceHelper(jsType, false);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,491,public final boolean isEquivalentTo(JSType that) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,492,"return checkEquivalenceHelper(that, EquivalenceMethod.IDENTITY);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,496, Whether this type is meaningfully different from {@code that} type.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,496,* Checks if two types are invariant.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,497,* @see EquivalenceMethod
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,499,public final boolean isInvariant(JSType that) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,500,"return checkEquivalenceHelper(that, EquivalenceMethod.INVARIANT);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,504,* Whether this type is meaningfully different from {@code that} type for
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,505,* the purposes of data flow analysis.
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,498, handle unknown types.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,508,* handle unknown types. See {@code EquivalenceMethod} for more info.
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,504,"eturn !checkEquivalenceHelper(that, true);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,514,"return !checkEquivalenceHelper(that, EquivalenceMethod.DATA_FLOW);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,510,"oolean checkEquivalenceHelper(JSType that, boolean tolerateUnknowns) {"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,520,"boolean checkEquivalenceHelper(JSType that, EquivalenceMethod eqMethod) {"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,517,f (isUnknownType() || that.isUnknownType()) {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,518,f (tolerateUnknowns) {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,519,"/ If we tolerate unknowns, then two types are the same if they're"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,527,if (thisUnknown || thatUnknown) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,528,if (eqMethod == EquivalenceMethod.INVARIANT) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,529,"// If we're checking for invariance, the unknown type is invariant"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,530,// with everyone.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,531,return true;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,532,} else if (eqMethod == EquivalenceMethod.DATA_FLOW) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,533,"// If we're checking data flow, then two types are the same if they're"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,533,"hat.toMaybeUnionType(), tolerateUnknowns);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,547,"that.toMaybeUnionType(), eqMethod);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,538,"hat.toMaybeFunctionType(), tolerateUnknowns);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,552,"that.toMaybeFunctionType(), eqMethod);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,543,"hat.toMaybeRecordType(), tolerateUnknowns);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,557,"that.toMaybeRecordType(), eqMethod);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,553,"hatParamType.getParameterType(), tolerateUnknowns);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,554, else if (tolerateUnknowns) {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,555,aramsMatch = true;
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,556, else {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,567,"thatParamType.getParameterType(), eqMethod);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,568,} else if (eqMethod == EquivalenceMethod.IDENTITY) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,570,} else {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,571,"// If one of the type parameters is unknown, but the other is not,"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,572,// then we consider these the same for the purposes of data flow
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,573,// and invariance.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,574,paramsMatch = true;
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,565,"hisRootType.checkEquivalenceHelper(thatRootType, tolerateUnknowns);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,582,"thisRootType.checkEquivalenceHelper(thatRootType, eqMethod);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,577,"hat, tolerateUnknowns);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,594,"that, eqMethod);"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,583,olerateUnknowns);
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,600,eqMethod);
False,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,118,"ecordType otherRecord, boolean tolerateUnknowns) {"
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,118,"RecordType otherRecord, EquivalenceMethod eqMethod) {"
False,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,126,"roperties.get(key), tolerateUnknowns)) {"
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,126,"properties.get(key), eqMethod)) {"
False,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,164,thatRecord.getPropertyType(property).isEquivalentTo(
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,164,!thatRecord.getPropertyType(property).isInvariant(
False,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,204,propType.isUnknownType() || altPropType.isUnknownType() ||
False,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,205,ltPropType.isEquivalentTo(propType))) {
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,204,propType.isInvariant(altPropType)) {
False,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,268,f (!propA.isUnknownType() && !propB.isUnknownType()) {
False,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,269,f (typeA.isPropertyTypeDeclared(property)) {
False,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,270,f (!propA.isEquivalentTo(propB)) {
False,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,271,eturn false;
False,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,273, else {
False,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,274,f (!propA.isSubtype(propB)) {
False,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,275,eturn false;
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,267,if (typeA.isPropertyTypeDeclared(property)) {
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,268,"// If one declared property isn't invariant,"
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,269,// then the whole record isn't covariant.
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,270,if (!propA.isInvariant(propB)) {
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,271,return false;
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,273,} else {
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,274,"// If one inferred property isn't a subtype,"
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,275,// then the whole record isn't covariant.
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,276,if (!propA.isSubtype(propB)) {
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,277,return false;
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,334,"nionType that, boolean tolerateUnknowns) {"
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,335,f (!tolerateUnknowns && alternates.size() != that.alternates.size()) {
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,334,"UnionType that, EquivalenceMethod eqMethod) {"
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,335,if (eqMethod == EquivalenceMethod.IDENTITY
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,336,&& alternates.size() != that.alternates.size()) {
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,339,"f (!hasAlternate(alternate, tolerateUnknowns)) {"
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,340,"if (!hasAlternate(alternate, eqMethod)) {"
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,346,"rivate boolean hasAlternate(JSType type, boolean tolerateUnknowns) {"
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,347,"private boolean hasAlternate(JSType type, EquivalenceMethod eqMethod) {"
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,348,"f (alternate.checkEquivalenceHelper(type, tolerateUnknowns)) {"
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,349,"if (alternate.checkEquivalenceHelper(type, eqMethod)) {"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6423,"/ TODO(nicksantos): This warning is wrong, and should be fixed."
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6429,"test1(fnStruc1);"","
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6430,"actual parameter 1 of test1 does not match formal parameter\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6431,"found   : {func: function (): undefined}\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6432,"required: {func: function (): ?}"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6428,"""test1(fnStruc1);"");"
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,113,public void testSubtypeWithUnknowns() throws Exception {
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,114,JSType recordA = new RecordTypeBuilder(registry)
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,115,".addProperty(""a"", NUMBER_TYPE, null)"
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,116,.build();
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,117,JSType recordB = new RecordTypeBuilder(registry)
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,118,".addProperty(""a"", UNKNOWN_TYPE, null)"
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,119,.build();
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,120,assertTrue(recordA.isSubtype(recordB));
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,121,assertTrue(recordB.isSubtype(recordA));
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,124,public void testSubtypeWithUnknowns2() throws Exception {
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,125,JSType recordA = new RecordTypeBuilder(registry)
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,126,".addProperty(""a"","
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,127,new FunctionBuilder(registry)
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,128,.withReturnType(NUMBER_TYPE)
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,129,".build(),"
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,130,null)
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,131,.build();
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,132,JSType recordB = new RecordTypeBuilder(registry)
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,133,".addProperty(""a"","
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,134,new FunctionBuilder(registry)
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,135,.withReturnType(UNKNOWN_TYPE)
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,136,".build(),"
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,137,null)
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,138,.build();
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,139,assertTrue(recordA.isSubtype(recordB));
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,140,assertTrue(recordB.isSubtype(recordA));
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,143,public void testSubtypeWithFunctionProps() throws Exception {
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,144,JSType recordA = new RecordTypeBuilder(registry)
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,145,".addProperty(""a"","
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,146,new FunctionBuilder(registry)
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,147,.withReturnType(NUMBER_TYPE)
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,148,".build(),"
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,149,null)
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,150,.build();
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,151,JSType recordB = new RecordTypeBuilder(registry)
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,152,".addProperty(""a"","
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,153,new FunctionBuilder(registry)
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,154,.withReturnType(STRING_TYPE)
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,155,".build(),"
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,156,null)
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,157,.build();
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,158,assertFalse(recordA.isSubtype(recordB));
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,159,assertFalse(recordB.isSubtype(recordA));
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,162,public void testSubtypeWithManyProps() throws Exception {
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,163,JSType recordA = new RecordTypeBuilder(registry)
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,164,".addProperty(""a"", NUMBER_TYPE, null)"
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,165,".addProperty(""b"", NUMBER_TYPE, null)"
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,166,.build();
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,167,JSType recordB = new RecordTypeBuilder(registry)
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,168,".addProperty(""a"", NUMBER_TYPE, null)"
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,169,".addProperty(""b"", STRING_TYPE, null)"
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,170,.build();
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,171,JSType recordC = new RecordTypeBuilder(registry)
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,172,".addProperty(""a"", NUMBER_TYPE, null)"
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,173,".addProperty(""b"","
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,174,"registry.createUnionType(NUMBER_TYPE, STRING_TYPE), null)"
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,175,.build();
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,176,assertFalse(recordA.isSubtype(recordB));
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,177,assertFalse(recordB.isSubtype(recordA));
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,178,assertFalse(recordC.isSubtype(recordB));
True,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,test/com/google/javascript/rhino/jstype/RecordTypeTest.java,179,assertFalse(recordB.isSubtype(recordC));

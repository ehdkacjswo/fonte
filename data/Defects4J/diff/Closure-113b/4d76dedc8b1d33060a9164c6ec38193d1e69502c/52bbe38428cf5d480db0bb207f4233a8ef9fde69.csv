is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,src/com/google/javascript/jscomp/AbstractCommandLineRunner.java,54,mport java.util.Map.Entry;
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,380, Stores the old parse tree for a given source file.
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,381, @param sourceName
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,382, @param astRoot
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,380,"* Stores the ""new"" Rhino parse tree for a given source file."
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,381,* @param sourceName The source file name.
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,382,"* @param astRoot The ""new"" Rhino parse tree."
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,389, @return The old format parse tree for the given source file.
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,389,"* @return The ""new"" Rhino parse tree for the given source file."
False,src/com/google/javascript/jscomp/CompilationLevel.java,src/com/google/javascript/jscomp/CompilationLevel.java,202,/ TODO(johnlenz) :removeUnusedClassProperties isn't strictly a
False,src/com/google/javascript/jscomp/CompilationLevel.java,src/com/google/javascript/jscomp/CompilationLevel.java,203,"/ type based pass, but add it here for now because I may have to"
True,src/com/google/javascript/jscomp/CompilationLevel.java,src/com/google/javascript/jscomp/CompilationLevel.java,202,// TODO(johnlenz) :removeUnusedClassProperties isn't strictly a
True,src/com/google/javascript/jscomp/CompilationLevel.java,src/com/google/javascript/jscomp/CompilationLevel.java,203,"// type based pass, but add it here for now because I may have to"
True,src/com/google/javascript/jscomp/CompilationLevel.java,src/com/google/javascript/jscomp/CompilationLevel.java,210,case WHITESPACE_ONLY:
True,src/com/google/javascript/jscomp/CompilationLevel.java,src/com/google/javascript/jscomp/CompilationLevel.java,211,break;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,479," after the {@link #init(JSSourceFile[], JSModule[], CompilerOptions)} call."
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,479,"* after the {@link #init(List, List, CompilerOptions)} call."
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2007,case ECMASCRIPT3:
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2008,return false;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2008,eturn false;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2010,"throw new IllegalStateException(""unexpected language mode"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2537, Stores the old parse tree for a given source file.
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2538, @param sourceName
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2539, @param oldAst
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2539,* {@inheritDoc}
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2541,@Override
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2545, Gets an old format parse tree for a given source file.
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2546, @param sourceName
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2547, @return
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2546,* {@inheritDoc}
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2548,@Override
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,70, to inline with {@link Candidate#canInline()} and finally perform inlining
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,71, using {@link Candidate#inlineVariable()}.
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,70,* to inline with {@link Candidate#canInline(Scope)} and finally perform
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,71,* inlining using {@link Candidate#inlineVariable()}.
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,193, be later verified with {@link Candidate#canInline()} when
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,193,* be later verified with {@link Candidate#canInline(Scope)} when
True,src/com/google/javascript/jscomp/LoggerErrorManager.java,src/com/google/javascript/jscomp/LoggerErrorManager.java,58,case OFF:
True,src/com/google/javascript/jscomp/LoggerErrorManager.java,src/com/google/javascript/jscomp/LoggerErrorManager.java,59,break;
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1140,case UNKNOWN:
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1141,return type;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,214,@Override
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,180,default:
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,181,throw new IllegalStateException();
False,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,181,hrow new IllegalStateException();
True,src/com/google/javascript/jscomp/ProcessTweaks.java,src/com/google/javascript/jscomp/ProcessTweaks.java,341,"@SuppressWarnings(""incomplete-switch"")"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,190,"SuppressWarnings(""fallthrough"")"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,190,"@SuppressWarnings({""fallthrough"", ""incomplete-switch""})"
True,src/com/google/javascript/jscomp/ant/AntErrorManager.java,src/com/google/javascript/jscomp/ant/AntErrorManager.java,50,case OFF:
True,src/com/google/javascript/jscomp/ant/AntErrorManager.java,src/com/google/javascript/jscomp/ant/AntErrorManager.java,51,break;
True,src/com/google/javascript/jscomp/ant/CompileTask.java,src/com/google/javascript/jscomp/ant/CompileTask.java,367,"@SuppressWarnings(""unchecked"")"
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,182,"@SuppressWarnings(""incomplete-switch"")"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,76,"rivate void fold(String js, String expected, DiagnosticType warning) {"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,77,"est(js, expected, warning);"
False,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,174,rivate JSType getNoResolvedType() {
False,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,175,eturn registry.getNativeType(NO_RESOLVED_TYPE);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2371,"@SuppressWarnings(""deprecation"")"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2771,"@SuppressWarnings(""deprecation"")"
True,test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java,test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java,50,@Override

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,767,"fa.createEdge(fromNode, Branch.UNCOND, finallyNode);"
True,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,src/com/google/javascript/jscomp/ControlFlowAnalysis.java,767,"cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);"
False,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,116,** Exception related. */
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,117,* Exception-handling code paths.
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,118,* Conflates two kind of control flow passing:
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,119,"* - An exception is thrown, and falls into a catch or finally block"
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,120,"* - During exception handling, a finally block finishes and control"
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,121,*   passes to the next finally block.
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,122,"* In theory, we need 2 different edge types. In practice, we"
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,123,"* can just treat them as ""the edges we can't really optimize""."
True,test/com/google/javascript/jscomp/CheckMissingReturnTest.java,test/com/google/javascript/jscomp/CheckMissingReturnTest.java,194,public void testIssue779() {
True,test/com/google/javascript/jscomp/CheckMissingReturnTest.java,test/com/google/javascript/jscomp/CheckMissingReturnTest.java,195,testNotMissing(
True,test/com/google/javascript/jscomp/CheckMissingReturnTest.java,test/com/google/javascript/jscomp/CheckMissingReturnTest.java,196,"""var a = f(); try { alert(); if (a > 0) return 1; }"" +"
True,test/com/google/javascript/jscomp/CheckMissingReturnTest.java,test/com/google/javascript/jscomp/CheckMissingReturnTest.java,197,"""finally { a = 5; } return 2;"");"
False,test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java,test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java,1107,"ssertCrossEdge(cfg, Token.BLOCK, Token.BLOCK, Branch.UNCOND);"
True,test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java,test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java,1107,"assertCrossEdge(cfg, Token.BLOCK, Token.BLOCK, Branch.ON_EX);"
False,test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java,test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java,1118,"ssertCrossEdge(cfg, Token.IF, Token.BLOCK, Branch.UNCOND);"
True,test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java,test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java,1118,"assertCrossEdge(cfg, Token.IF, Token.BLOCK, Branch.ON_EX);"

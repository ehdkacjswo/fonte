is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,32,import javax.annotation.Nullable;
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,348,"** Sets the progress to a certain value in [0,1] range. */"
False,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,349,bstract void setProgress(double progress);
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,351,* Gets the last pass name set by setProgress.
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,353,abstract String getLastPassName();
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,356,* Sets the progress percentage as well as the name of the last pass that
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,357,* ran (if available).
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,358,"* @param progress A precentage expressed as a double in the range [0, 1]."
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,359,*     Use -1 if you just want to set the last pass name.
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,361,"abstract void setProgress(double progress, @Nullable String lastPassName);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,26,import com.google.common.collect.Sets;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,224,private String lastPassName;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,703,etProgress(0.0);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,705,"setProgress(0.0, null);"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,707,etProgress(0.15);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,709,"setProgress(0.15, ""parse"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,746,etProgress(1.0);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,748,"setProgress(1.0, ""recordFunctionInformation"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2384,oid setProgress(double newProgress) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2386,String getLastPassName() {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2387,return lastPassName;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2390,@Override
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2391,"void setProgress(double newProgress, String passName) {"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2392,this.lastPassName = passName;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2387, else if (newProgress < 0.0) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2388,rogress = 0.0;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,24,import com.google.common.collect.ImmutableSet;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,26,import com.google.common.collect.Sets;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,38,import java.io.PrintStream;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1280,* An experimental compiler pass for tracking what symbols were added/removed
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1281,* at each stage of compilation.
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1283,"* When ""global namespace tracker"" mode is on, we rebuild the global namespace"
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1284,"* after each pass, and diff it against the last namespace built."
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1286,static class Tracker implements CompilerPass {
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1287,private final AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1288,private final PrintStream stream;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1289,private final Predicate<String> isInterestingSymbol;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1291,private Set<String> previousSymbolsInTree = ImmutableSet.of();
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1294,@param stream The stream to print logs to.
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1295,* @param isInterestingSymbol A predicate to determine which symbols
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1296,*     we care about.
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1298,"Tracker(AbstractCompiler compiler, PrintStream stream,"
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1299,Predicate<String> isInterestingSymbol) {
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1300,this.compiler = compiler;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1301,this.stream = stream;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1302,this.isInterestingSymbol = isInterestingSymbol;
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1305,"@Override public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1306,"GlobalNamespace namespace = new GlobalNamespace(compiler, externs, root);"
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1308,Set<String> currentSymbols = Sets.newTreeSet();
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1309,for (String name : namespace.getNameIndex().keySet()) {
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1310,if (isInterestingSymbol.apply(name)) {
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1311,currentSymbols.add(name);
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1315,String passName = compiler.getLastPassName();
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1316,if (passName == null) {
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1317,"passName = ""[Unknown pass]"";"
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1320,for (String sym : currentSymbols) {
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1321,if (!previousSymbolsInTree.contains(sym)) {
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1322,"stream.println(String.format(""%s: Added by %s"", sym, passName));"
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1326,for (String sym : previousSymbolsInTree) {
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1327,if (!currentSymbols.contains(sym)) {
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1328,"stream.println(String.format(""%s: Removed by %s"", sym, passName));"
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,1332,previousSymbolsInTree = currentSymbols;
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,69,private double progress = 0.0;
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,70,private double progressStep = 0.0;
False,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,179,ouble progress = 0.0;
False,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,180,ouble progressStep = 0.0;
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,182,progress = 0.0;
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,183,progressStep = 0.0;
False,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,188,f (progressRange != null) {
False,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,189,rogress += progressStep;
False,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,190,ompiler.setProgress(progress);
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,215,if (progressRange == null) {
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,216,"compiler.setProgress(-1, currentPassName);"
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,217,} else {
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,218,progress += progressStep;
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,219,"compiler.setProgress(progress, currentPassName);"
False,test/com/google/javascript/jscomp/PhaseOptimizerTest.java,test/com/google/javascript/jscomp/PhaseOptimizerTest.java,177,Override void setProgress(double p) {
True,test/com/google/javascript/jscomp/PhaseOptimizerTest.java,test/com/google/javascript/jscomp/PhaseOptimizerTest.java,177,"@Override void setProgress(double p, String name) {"

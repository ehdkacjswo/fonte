is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1240,if (!aggressiveMinimization && n.isNot()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1241,return simpleDemorgan(n);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1243,ase Token.NOT:
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1244,ode first = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1245,witch (first.getType()) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1246,ase Token.NOT: {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1247,ode newRoot = first.removeFirstChild();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1248,"arent.replaceChild(n, newRoot);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1249,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1250,"/ No need to traverse, tryMinimizeCondition is called on the"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1251,/ NOT children are handled below.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1252,eturn newRoot;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1254,ase Token.AND:
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1255,ase Token.OR: {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1256,/ !(!x && !y) --> x || y
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1257,/ !(!x || !y) --> x && y
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1258,/ !(!x && y) --> x || !y
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1259,/ !(!x || y) --> x && !y
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1260,/ !(x && !y) --> !x || y
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1261,/ !(x || !y) --> !x && y
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1262,/ !(x && y) --> !x || !y
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1263,/ !(x || y) --> !x && !y
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1264,ode leftParent = first.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1265,ode rightParent = first.getLastChild();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1266,"ode left, right;"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1268,/ Check special case when such transformation cannot reduce
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1269,/ due to the added ()
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1270,/ It only occurs when both of expressions are not NOT expressions
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1271,f (!leftParent.isNot()
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1272,& !rightParent.isNot()) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1273,"/ If an expression has higher precedence than && or ||,"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1274,"/ but lower precedence than NOT, an additional () is needed"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1275,/ Thus we do not preceed
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1276,nt opPrecedence = NodeUtil.precedence(first.getType());
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1277,"f ((isLowerPrecedence(leftParent, NOT_PRECEDENCE)"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1278,"& isHigherPrecedence(leftParent, opPrecedence))"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1279,"| (isLowerPrecedence(rightParent, NOT_PRECEDENCE)"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1280,"& isHigherPrecedence(rightParent, opPrecedence))) {"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1281,eturn n;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1285,f (leftParent.isNot()) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1286,eft = leftParent.removeFirstChild();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1287, else {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1288,eftParent.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1289,eft = IR.not(leftParent).srcref(leftParent);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1291,f (rightParent.isNot()) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1292,ight = rightParent.removeFirstChild();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1293, else {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1294,ightParent.detachFromParent();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1295,ight = IR.not(rightParent).srcref(rightParent);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1298,nt newOp = (first.isAnd()) ? Token.OR : Token.AND;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1299,"ode newRoot = new Node(newOp, left, right);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1300,"arent.replaceChild(n, newRoot);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1301,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1302,"/ No need to traverse, tryMinimizeCondition is called on the"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1303,/ AND and OR children below.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1304,eturn newRoot;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1307,efault:
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1308,ernaryValue nVal = NodeUtil.getPureBooleanValue(first);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1309,f (nVal != TernaryValue.UNKNOWN) {
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1310,oolean result = nVal.not().toBoolean(true);
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1311,nt equivalentResult = result ? 1 : 0;
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1312,"eturn maybeReplaceChildWithNumber(n, parent, equivalentResult);"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1315,"/ No need to traverse, tryMinimizeCondition is called on the NOT"
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1316,/ children in the general case in the main post-order traversal.
False,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1317,eturn n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1350,"*  Perform a heuristic-based application of De Morgan's Laws, trying to"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1351,*  push NOT nodes further down the AST toward the leaves.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1353,private Node simpleDemorgan(Node n) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1354,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1355,Node first = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1356,switch (first.getType()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1357,case Token.NOT: {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1358,Node newRoot = first.removeFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1359,"parent.replaceChild(n, newRoot);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1360,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1361,"// No need to traverse, tryMinimizeCondition is called on the"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1362,// NOT children are handled below.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1363,return newRoot;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1365,case Token.AND:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1366,case Token.OR: {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1367,// !(!x && !y) --> x || y
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1368,// !(!x || !y) --> x && y
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1369,// !(!x && y) --> x || !y
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1370,// !(!x || y) --> x && !y
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1371,// !(x && !y) --> !x || y
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1372,// !(x || !y) --> !x && y
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1373,// !(x && y) --> !x || !y
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1374,// !(x || y) --> !x && !y
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1375,Node leftParent = first.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1376,Node rightParent = first.getLastChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1377,"Node left, right;"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1379,// Check special case when such transformation cannot reduce
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1380,// due to the added ()
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1381,// It only occurs when both of expressions are not NOT expressions
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1382,if (!leftParent.isNot()
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1383,&& !rightParent.isNot()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1384,"// If an expression has higher precedence than && or ||,"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1385,"// but lower precedence than NOT, an additional () is needed"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1386,// Thus we do not preceed
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1387,int opPrecedence = NodeUtil.precedence(first.getType());
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1388,"if ((isLowerPrecedence(leftParent, NOT_PRECEDENCE)"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1389,"&& isHigherPrecedence(leftParent, opPrecedence))"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1390,"|| (isLowerPrecedence(rightParent, NOT_PRECEDENCE)"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1391,"&& isHigherPrecedence(rightParent, opPrecedence))) {"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1392,return n;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1396,if (leftParent.isNot()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1397,left = leftParent.removeFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1398,} else {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1399,leftParent.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1400,left = IR.not(leftParent).srcref(leftParent);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1402,if (rightParent.isNot()) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1403,right = rightParent.removeFirstChild();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1404,} else {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1405,rightParent.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1406,right = IR.not(rightParent).srcref(rightParent);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1409,int newOp = (first.isAnd()) ? Token.OR : Token.AND;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1410,"Node newRoot = new Node(newOp, left, right);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1411,"parent.replaceChild(n, newRoot);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1412,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1413,"// No need to traverse, tryMinimizeCondition is called on the"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1414,// AND and OR children below.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1415,return newRoot;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1418,default:
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1419,TernaryValue nVal = NodeUtil.getPureBooleanValue(first);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1420,if (nVal != TernaryValue.UNKNOWN) {
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1421,boolean result = nVal.not().toBoolean(true);
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1422,int equivalentResult = result ? 1 : 0;
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1423,"return maybeReplaceChildWithNumber(n, parent, equivalentResult);"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1426,"// No need to traverse, tryMinimizeCondition is called on the NOT"
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1427,// children in the general case in the main post-order traversal.
True,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,src/com/google/javascript/jscomp/PeepholeMinimizeConditions.java,1428,return n;

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,489,currentClass == null || ownerType.differsFrom(currentClass))) {
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,489,(currentClass == null || !ownerType.isEquivalentTo(currentClass))) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,900,f (getJSType(callNode).differsFrom(narrowed)) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,901,allNode.setJSType(narrowed);
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,900,callNode.setJSType(narrowed);
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,177,oolean hasEqualParameters(ArrowType that) {
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,177,"boolean hasEqualParameters(ArrowType that, boolean tolerateUnknowns) {"
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,186,thisParamType.isEquivalentTo(otherParamType)) {
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,186,!thisParamType.checkEquivalenceHelper(
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,187,"otherParamType, tolerateUnknowns)) {"
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,202,Override
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,203,ublic boolean isEquivalentTo(JSType object) {
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,203,boolean checkArrowEquivalenceHelper(
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,204,"ArrowType that, boolean tolerateUnknowns) {"
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,205,f (!(object instanceof ArrowType)) {
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,206,eturn false;
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,208,rrowType that = (ArrowType) object;
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,209,f (!returnType.isEquivalentTo(that.returnType)) {
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,206,"if (!returnType.checkEquivalenceHelper(that.returnType, tolerateUnknowns)) {"
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,212,eturn hasEqualParameters(that);
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,209,"return hasEqualParameters(that, tolerateUnknowns);"
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,289,eturn super.toString();
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,286,"return ""[ArrowType]"";"
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,136,Override
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,137,ublic boolean isEquivalentTo(JSType that) {
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,138,f (this == that) {
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,139,eturn true;
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,140, else if (this.isNominalType()) {
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,141,bjectType thatObj = ObjectType.cast(that);
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,142,f (thatObj != null && thatObj.isNominalType()) {
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,143,eturn getReferenceName().equals(thatObj.getReferenceName());
False,src/com/google/javascript/rhino/jstype/EnumElementType.java,src/com/google/javascript/rhino/jstype/EnumElementType.java,146,eturn false;
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,792,f (call.hasEqualParameters(other.call)) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,792,"if (call.hasEqualParameters(other.call, false)) {"
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,889,Override
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,890,ublic boolean isEquivalentTo(JSType otherType) {
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,891,unctionType that =
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,892,SType.toMaybeFunctionType(otherType);
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,893,f (that == null) {
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,894,eturn false;
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,896,f (this.isConstructor()) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,889,boolean checkFunctionEquivalenceHelper(
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,890,"FunctionType that, boolean tolerateUnknowns) {"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,891,if (isConstructor()) {
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,902,f (this.isInterface()) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,897,if (isInterface()) {
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,904,eturn this.getReferenceName().equals(that.getReferenceName());
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,899,return getReferenceName().equals(that.getReferenceName());
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,911,eturn this.typeOfThis.isEquivalentTo(that.typeOfThis) &&
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,912,his.call.isEquivalentTo(that.call);
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,907,return typeOfThis.checkEquivalenceHelper(
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,908,"that.typeOfThis, tolerateUnknowns) &&"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,909,"call.checkArrowEquivalenceHelper(that.call, tolerateUnknowns);"
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,921,eturn this.call.isEquivalentTo(otherType.call);
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,918,"return this.call.checkArrowEquivalenceHelper(otherType.call, false);"
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,156,Override
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,157,ublic boolean isEquivalentTo(JSType that) {
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,158,f (this == that) {
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,159,eturn true;
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,160, else if (this.isNominalType()) {
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,161,bjectType thatObj = ObjectType.cast(that);
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,162,f (thatObj != null && thatObj.isNominalType()) {
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,163,eturn getReferenceName().equals(thatObj.getReferenceName());
False,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,src/com/google/javascript/rhino/jstype/InstanceObjectType.java,166,eturn false;
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,486,ublic boolean isEquivalentTo(JSType jsType) {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,487,f (jsType instanceof ProxyObjectType) {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,488,eturn jsType.isEquivalentTo(this);
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,486,public final boolean isEquivalentTo(JSType jsType) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,487,"return checkEquivalenceHelper(jsType, false);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,491,* Whether this type is meaningfully different from {@code that} type.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,492,"* This is a trickier check than pure equality, because it has to properly"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,493,* handle unknown types.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,495,"* @see <a href=""http://www.youtube.com/watch?v=_RpSv3HjpEw"">Unknown"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,496,*     unknowns</a>
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,498,public final boolean differsFrom(JSType that) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,499,"return !checkEquivalenceHelper(that, true);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,503,* An equivalence visitor.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,505,"boolean checkEquivalenceHelper(JSType that, boolean tolerateUnknowns) {"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,506,if (this == that) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,507,return true;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,510,boolean thisUnknown = isUnknownType();
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,511,boolean thatUnknown = that.isUnknownType();
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,512,if (isUnknownType() || that.isUnknownType()) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,513,if (tolerateUnknowns) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,514,"// If we tolerate unknowns, then two types are the same if they're"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,515,// both unknown.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,516,return thisUnknown && thatUnknown;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,517,} else if (thisUnknown && thatUnknown &&
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,518,(isNominalType() ^ that.isNominalType())) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,519,"// If they're both unknown, but one is a nominal type and the other"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,520,"// is not, then we should fail out immediately. This ensures that"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,521,// we won't unbox the unknowns further down.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,522,return false;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,526,if (isUnionType() && that.isUnionType()) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,527,return this.toMaybeUnionType().checkUnionEquivalenceHelper(
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,528,"that.toMaybeUnionType(), tolerateUnknowns);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,531,if (isFunctionType() && that.isFunctionType()) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,532,return this.toMaybeFunctionType().checkFunctionEquivalenceHelper(
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,533,"that.toMaybeFunctionType(), tolerateUnknowns);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,536,if (isRecordType() && that.isRecordType()) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,537,return this.toMaybeRecordType().checkRecordEquivalenceHelper(
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,538,"that.toMaybeRecordType(), tolerateUnknowns);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,541,ParameterizedType thisParamType = toMaybeParameterizedType();
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,542,ParameterizedType thatParamType = that.toMaybeParameterizedType();
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,543,if (thisParamType != null || thatParamType != null) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,544,"// Check if one type is parameterized, but the other is not."
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,545,boolean paramsMatch = false;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,546,if (thisParamType != null && thatParamType != null) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,547,paramsMatch = thisParamType.getParameterType().checkEquivalenceHelper(
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,548,"thatParamType.getParameterType(), tolerateUnknowns);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,549,} else if (tolerateUnknowns) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,550,paramsMatch = true;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,551,} else {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,552,paramsMatch = false;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,555,JSType thisRootType = thisParamType == null ?
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,556,this : thisParamType.getReferencedTypeInternal();
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,557,JSType thatRootType = thatParamType == null ?
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,558,that : thatParamType.getReferencedTypeInternal();
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,559,return paramsMatch &&
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,560,"thisRootType.checkEquivalenceHelper(thatRootType, tolerateUnknowns);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,563,if (isNominalType() && that.isNominalType()) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,564,return toObjectType().getReferenceName().equals(
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,565,that.toObjectType().getReferenceName());
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,568,// Unbox other proxies.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,569,if (this instanceof ProxyObjectType) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,570,return ((ProxyObjectType) this)
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,571,.getReferencedTypeInternal().checkEquivalenceHelper(
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,572,"that, tolerateUnknowns);"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,575,if (that instanceof ProxyObjectType) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,576,return checkEquivalenceHelper(
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,577,"((ProxyObjectType) that).getReferencedTypeInternal(),"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,578,tolerateUnknowns);
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,494,eturn this == jsType;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,585,return this == that;
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1086, Whether this type is meaningfully different from {@code that} type.
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1087," This is a trickier check than pure equality, because it has to properly"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1088, handle unknown types.
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1090," @see <a href=""http://www.youtube.com/watch?v=_RpSv3HjpEw"">Unknown"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1091,     unknowns</a>
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1093,ublic boolean differsFrom(JSType that) {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1094,"/ if there are no unknowns, just use normal equality."
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1095,f (!this.isUnknownType() && !that.isUnknownType()) {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1096,eturn !this.isEquivalentTo(that);
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1098,"/ otherwise, they're different iff one is unknown and the other is not."
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1099,eturn this.isUnknownType() ^ that.isUnknownType();
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,176, Two named types are equivalent if they are the same {@code
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,177, ObjectType} object.  This is complicated by the fact that isEquivalent
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,178, is sometimes called before we have a chance to resolve the type
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,179, names.
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,181, @return {@code true} iff {@code that} == {@code this} or {@code that}
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,182,"         is a {@link NamedType} whose reference is the same as ours,"
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,183,         or {@code that} is the type we reference.
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,185,Override
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,186,ublic boolean isEquivalentTo(JSType that) {
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,187,f (this == that) {
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,188,eturn true;
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,191,bjectType objType = ObjectType.cast(that);
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,192,f (objType != null) {
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,193,eturn objType.isNominalType() &&
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,194,eference.equals(objType.getReferenceName());
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,196,eturn false;
False,src/com/google/javascript/rhino/jstype/NoObjectType.java,src/com/google/javascript/rhino/jstype/NoObjectType.java,118,Override
False,src/com/google/javascript/rhino/jstype/NoObjectType.java,src/com/google/javascript/rhino/jstype/NoObjectType.java,119,ublic boolean isEquivalentTo(JSType that) {
False,src/com/google/javascript/rhino/jstype/NoObjectType.java,src/com/google/javascript/rhino/jstype/NoObjectType.java,120,eturn this == that;
False,src/com/google/javascript/rhino/jstype/ParameterizedType.java,src/com/google/javascript/rhino/jstype/ParameterizedType.java,66,Override
False,src/com/google/javascript/rhino/jstype/ParameterizedType.java,src/com/google/javascript/rhino/jstype/ParameterizedType.java,67,ublic boolean isEquivalentTo(JSType that) {
False,src/com/google/javascript/rhino/jstype/ParameterizedType.java,src/com/google/javascript/rhino/jstype/ParameterizedType.java,68,eturn (super.isEquivalentTo(that)
False,src/com/google/javascript/rhino/jstype/ParameterizedType.java,src/com/google/javascript/rhino/jstype/ParameterizedType.java,69,& JSType.isEquivalent(
False,src/com/google/javascript/rhino/jstype/ParameterizedType.java,src/com/google/javascript/rhino/jstype/ParameterizedType.java,70,"arameterType, that.toObjectType().getParameterType()));"
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,489,eturn this.isImplicitPrototype(thatObj);
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,489,return thatObj != null && this.isImplicitPrototype(thatObj);
False,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,253,Override
False,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,254,ublic boolean isEquivalentTo(JSType that) {
False,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,255,f (this == that) {
False,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,256,eturn true;
False,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,258,eturn referencedType.isEquivalentTo(that);
False,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,117,Override
False,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,118,ublic boolean isEquivalentTo(JSType other) {
False,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,119,f (!other.isRecordType()) {
False,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,120,eturn false;
False,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,123,/ Compare properties.
False,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,124,ecordType otherRecord = other.toMaybeRecordType();
False,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,125,f (otherRecord == this) {
False,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,126,eturn true;
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,117,boolean checkRecordEquivalenceHelper(
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,118,"RecordType otherRecord, boolean tolerateUnknowns) {"
False,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,135,f (!otherProps.get(key).isEquivalentTo(properties.get(key))) {
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,125,if (!otherProps.get(key).checkEquivalenceHelper(
True,src/com/google/javascript/rhino/jstype/RecordType.java,src/com/google/javascript/rhino/jstype/RecordType.java,126,"properties.get(key), tolerateUnknowns)) {"
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,333,Override
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,334,ublic boolean isEquivalentTo(JSType object) {
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,335,f (object == null) {
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,333,boolean checkUnionEquivalenceHelper(
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,334,"UnionType that, boolean tolerateUnknowns) {"
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,335,if (!tolerateUnknowns && alternates.size() != that.alternates.size()) {
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,338,f (object.isUnionType()) {
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,339,nionType that = object.toMaybeUnionType();
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,340,f (alternates.size() != that.alternates.size()) {
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,338,for (JSType alternate : that.alternates) {
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,339,"if (!hasAlternate(alternate, tolerateUnknowns)) {"
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,343,or (JSType alternate : that.alternates) {
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,344,f (!hasAlternate(alternate)) {
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,345,eturn false;
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,348,eturn true;
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,349, else {
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,350,eturn false;
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,343,return true;
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,354,rivate boolean hasAlternate(JSType type) {
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,346,"private boolean hasAlternate(JSType type, boolean tolerateUnknowns) {"
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,356,f (alternate.isEquivalentTo(type)) {
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,348,"if (alternate.checkEquivalenceHelper(type, tolerateUnknowns)) {"
True,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,50,import com.google.javascript.rhino.jstype.ParameterizedType;
True,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,592,"protected final ParameterizedType parameterize(ObjectType objType, JSType t) {"
True,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,593,"return registry.createParameterizedType(objType, t);"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6310,public void testIssue791() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6311,"// TODO(nicksantos): This warning is wrong, and should be fixed."
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6312,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6313,"""/** @param {{func: function()}} obj */"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6314,"""function test1(obj) {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6315,"""var fnStruc1 = {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6316,"""fnStruc1.func = function() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6317,"""test1(fnStruc1);"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6318,"""actual parameter 1 of test1 does not match formal parameter\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6319,"""found   : {func: function (): undefined}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6320,"""required: {func: function (): ?}"");"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,577,public void testFor5() {
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,578,"assuming(""y"", parameterize("
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,579,"getNativeObjectType(ARRAY_TYPE), getNativeType(NUMBER_TYPE)));"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,580,inFunction(
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,581,"""var x = null; for (var i = 0; i < y.length; i++) { x = y[i]; }"");"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,582,"verify(""x"", createNullableType(NUMBER_TYPE));"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,583,"verify(""i"", NUMBER_TYPE);"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,586,public void testFor6() {
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,587,"assuming(""y"", getNativeObjectType(ARRAY_TYPE));"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,588,inFunction(
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,589,"""var x = null;"" +"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,590,"""for (var i = 0; i < y.length; i++) { "" +"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,591,""" if (y[i] == 'z') { x = y[i]; } "" +"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,593,"verify(""x"", getNativeType(UNKNOWN_TYPE));"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,594,"verify(""i"", NUMBER_TYPE);"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,1053,private ObjectType getNativeObjectType(JSTypeNative t) {
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,1054,return registry.getNativeObjectType(t);
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,1057,private JSType getNativeType(JSTypeNative t) {
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,1058,return registry.getNativeType(t);
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,1061,"private JSType parameterize(ObjectType objType, JSType t) {"
True,test/com/google/javascript/jscomp/TypeInferenceTest.java,test/com/google/javascript/jscomp/TypeInferenceTest.java,1062,"return registry.createParameterizedType(objType, t);"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,248,"ssertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,248,"assertTypeEquals(parameterize(ARRAY_TYPE, NUMBER_TYPE), info.getType());"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,253,"ssertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,253,"assertTypeEquals(parameterize(ARRAY_TYPE, NUMBER_TYPE), info.getType());"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,258,"ssertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,258,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,259,"parameterize(ARRAY_TYPE, createUnionType(NUMBER_TYPE, NULL_TYPE)),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,260,info.getType());
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,263,"ssertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,265,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,266,"parameterize(ARRAY_TYPE, createUnionType(NUMBER_TYPE, NULL_TYPE)),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,267,info.getType());
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,268,"ssertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,272,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,273,"parameterize(ARRAY_TYPE,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,274,"createUnionType(NULL_TYPE,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,275,"parameterize(ARRAY_TYPE,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,276,"createUnionType(NUMBER_TYPE, NULL_TYPE)))),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,277,info.getType());
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,273,"ssertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,282,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,283,"parameterize(ARRAY_TYPE,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,284,"parameterize(ARRAY_TYPE,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,285,"createUnionType(NUMBER_TYPE, NULL_TYPE))),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,286,info.getType());
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,278,"ssertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,291,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,292,"parameterize(ARRAY_TYPE,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,293,registry.createFunctionType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,294,"createUnionType(DATE_TYPE, NULL_TYPE))),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,295,info.getType());
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,283,"ssertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,300,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,301,"parameterize(ARRAY_TYPE,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,302,"registry.createFunctionType(DATE_TYPE)),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,303,info.getType());
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,288,"ssertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,308,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,309,"parameterize(ARRAY_TYPE,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,310,"createUnionType(DATE_TYPE, NUMBER_TYPE, NULL_TYPE)),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,311,info.getType());
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,293,"ssertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,316,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,317,"parameterize(ARRAY_TYPE,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,318,"createUnionType(DATE_TYPE, NUMBER_TYPE, BOOLEAN_TYPE, NULL_TYPE)),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,319,info.getType());
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,296,ublic void testParseParamterizedType11() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,322,public void testParseParameterizedType11() throws Exception {
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,298,"ssertTypeEquals(OBJECT_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,324,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,325,"parameterize(OBJECT_TYPE, NUMBER_TYPE),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,326,info.getType());
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,302,ublic void testParseParamterizedType12() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,330,public void testParseParameterizedType12() throws Exception {
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,304,"ssertTypeEquals(OBJECT_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,332,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,333,"parameterize(OBJECT_TYPE, NUMBER_TYPE), info.getType());"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,326,"ssertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,355,assertTypeEquals(createUnionType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,356,"parameterize(ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,331,"ssertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,361,assertTypeEquals(createUnionType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,362,"parameterize(ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,336,"ssertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,367,assertTypeEquals(createUnionType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,368,"parameterize(ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,341,"ssertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,373,assertTypeEquals(createUnionType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,374,"parameterize(ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,346,"ssertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,379,assertTypeEquals(createUnionType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,380,"parameterize(ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,351,"ssertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,385,assertTypeEquals(createUnionType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,386,"parameterize(ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,649,"ssertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,684,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,685,"parameterize(ARRAY_TYPE, createUnionType(STRING_TYPE, NULL_TYPE)),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,686,info.getType());
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,654,"ssertTypeEquals(createNullableType(ARRAY_TYPE), info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,691,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,692,"createNullableType(parameterize(ARRAY_TYPE, BOOLEAN_TYPE)),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,693,info.getType());
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,716,"ssertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,755,"assertTypeEquals(parameterize(ARRAY_TYPE, NUMBER_TYPE), info.getType());"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,721,"ssertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,760,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,761,"parameterize(ARRAY_TYPE, createUnionType(NUMBER_TYPE, NULL_TYPE)),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,762,info.getType());
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,726,"ssertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,767,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,768,"parameterize(ARRAY_TYPE, createUnionType(NUMBER_TYPE, NULL_TYPE)),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,769,info.getType());
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,731,"ssertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,774,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,775,"parameterize(ARRAY_TYPE,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,776,registry.createFunctionType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,777,"createUnionType(DATE_TYPE, NULL_TYPE))),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,778,info.getType());
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,738,"reateUnionType(ARRAY_TYPE, NULL_TYPE, STRING_TYPE),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,785,"createUnionType(parameterize(ARRAY_TYPE, BOOLEAN_TYPE),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,786,"NULL_TYPE, STRING_TYPE),"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,746,"reateUnionType(ARRAY_TYPE, NULL_TYPE, STRING_TYPE),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,794,"createUnionType(parameterize(ARRAY_TYPE, BOOLEAN_TYPE),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,795,"NULL_TYPE, STRING_TYPE),"
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,754,"reateUnionType(ARRAY_TYPE, NULL_TYPE, STRING_TYPE, BOOLEAN_TYPE),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,803,"createUnionType(parameterize(ARRAY_TYPE, BOOLEAN_TYPE),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,804,"NULL_TYPE, STRING_TYPE, BOOLEAN_TYPE),"
False,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,242,ssertFalse(type.isEquivalentTo(null));
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,242,assertFalse(type.equals(null));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,1783,assertTrue(NULL_TYPE.differsFrom(UNKNOWN_TYPE));
False,test/com/google/javascript/rhino/jstype/UnionTypeTest.java,test/com/google/javascript/rhino/jstype/UnionTypeTest.java,288,ssertFalse(type.isEquivalentTo(null));
True,test/com/google/javascript/rhino/jstype/UnionTypeTest.java,test/com/google/javascript/rhino/jstype/UnionTypeTest.java,288,assertFalse(type.equals(null));

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,548,oid remove();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,548,void remove(AbstractCompiler compiler);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,590,ublic void remove() {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,590,public void remove(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,592,compiler.reportChangeToEnclosingScope(parent);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,656,ublic void remove() {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,657,public void remove(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,658,compiler.reportChangeToEnclosingScope(exprNode);
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,710,ublic void remove() {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,712,public void remove(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,713,compiler.reportChangeToEnclosingScope(key);
True,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,640,t.getCompiler().reportChangeToEnclosingScope(callNode);
False,src/com/google/javascript/jscomp/InlineFunctions.java,src/com/google/javascript/jscomp/InlineFunctions.java,641,.getCompiler().reportCodeChange();
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,429,compiler.reportChangeToEnclosingScope(vnode);
True,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,437,compiler.reportChangeToEnclosingScope(ref.getNode());
False,src/com/google/javascript/jscomp/InlineObjectLiterals.java,src/com/google/javascript/jscomp/InlineObjectLiterals.java,468,ompiler.reportCodeChange();
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,365,"/ decl and ref may be in different scopes, report change for both"
False,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,366,ompiler.reportChangeToEnclosingScope(decl.getNode());
True,src/com/google/javascript/jscomp/InlineVariables.java,src/com/google/javascript/jscomp/InlineVariables.java,373,compiler.reportChangeToEnclosingScope(decl.getNode());
True,src/com/google/javascript/jscomp/MinimizeExitPoints.java,src/com/google/javascript/jscomp/MinimizeExitPoints.java,73,// FYI: the function will be analyzed w/out a call to
True,src/com/google/javascript/jscomp/MinimizeExitPoints.java,src/com/google/javascript/jscomp/MinimizeExitPoints.java,74,// NodeTraversal/pushScope. Bypassing pushScope could cause a bug if
True,src/com/google/javascript/jscomp/MinimizeExitPoints.java,src/com/google/javascript/jscomp/MinimizeExitPoints.java,75,// there is code that relies on NodeTraversal knowing the correct scope.
True,src/com/google/javascript/jscomp/MinimizeExitPoints.java,src/com/google/javascript/jscomp/MinimizeExitPoints.java,113,compiler.reportChangeToEnclosingScope(n);
False,src/com/google/javascript/jscomp/MinimizeExitPoints.java,src/com/google/javascript/jscomp/MinimizeExitPoints.java,111,ompiler.reportCodeChange();
False,src/com/google/javascript/jscomp/MinimizeExitPoints.java,src/com/google/javascript/jscomp/MinimizeExitPoints.java,257,ompiler.reportCodeChange();
True,src/com/google/javascript/jscomp/MinimizeExitPoints.java,src/com/google/javascript/jscomp/MinimizeExitPoints.java,260,compiler.reportChangeToEnclosingScope(ifNode);
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,462,"* Most changes are reported with calls to Compiler.reportCodeChange(), which"
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,463,* doesn't know which scope changed. We keep track of the current scope by
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,464,* calling Compiler.setScope inside pushScope and popScope.
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,465,* The automatic tracking can be wrong in rare cases when a pass changes scope
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,466,* w/out causing a call to pushScope or popScope. It's very hard to find the
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,467,* places where this happens unless a bug is triggered.
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,468,* Passes that do cross-scope modifications call
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,469,* Compiler.reportChangeToEnclosingScope(Node n).
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,467,f (comp.hasScopeChanged(jsRoot)) {
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,468,"b.visit(comp, jsRoot);"
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,470,"raverse(comp, jsRoot,"
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,471,ew AbstractPreOrderCallback() {
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,472,Override
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,473,"ublic final boolean shouldTraverse(NodeTraversal t, Node n, Node p) {"
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,474,f (n.isFunction() && comp.hasScopeChanged(n)) {
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,475,"b.visit(comp, n);"
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,477,eturn true;
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,476,"NodeTraversal t = new NodeTraversal(comp, new AbstractPreOrderCallback() {"
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,477,@Override
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,478,"public final boolean shouldTraverse(NodeTraversal t, Node n, Node p) {"
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,479,if ((n == jsRoot || n.isFunction()) && comp.hasScopeChanged(n)) {
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,480,"cb.visit(comp, n);"
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,482,return true;
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,485,t.traverse(jsRoot);
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,621,f (!scopes.isEmpty()) {
False,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,622,ompiler.setScope(scopes.peek().getRootNode());
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,626,if (hasScope()) {
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,627,compiler.setScope(getScopeRoot());
True,src/com/google/javascript/jscomp/NodeTraversal.java,src/com/google/javascript/jscomp/NodeTraversal.java,644,// No need to call compiler.setScope; the top scopeRoot is now the top scope
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3315,"ode main, boolean verifyUnchangedNodes) {"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3315,"Node main, boolean verifyUnchangedNodes,"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3316,AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3317,// compiler is passed only to call compiler.toSource during debugging to see
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,3318,// mismatches in scopes
False,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,260,"odeUtil.verifyScopeChanges(mtoc, jsRoot, true);"
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,260,"NodeUtil.verifyScopeChanges(mtoc, jsRoot, true, compiler);"
False,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,370,"/ This call was caused by Compiler/reportChangeToScope, do nothing"
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,370,"// This call was caused by Compiler/reportChangeToEnclosingScope,"
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,371,// do nothing.
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,65,compiler.reportChangeToEnclosingScope(assign);
True,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,70,compiler.reportChangeToEnclosingScope(parent);
False,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,src/com/google/javascript/jscomp/RemoveUnusedClassProperties.java,73,ompiler.reportCodeChange();
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,82,oolean changed = false;
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,102,eclaration.remove();
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,103,hanged = true;
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,99,// Code-change reporting happens at the remove methods
True,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,100,declaration.remove(compiler);
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,111,f (changed) {
False,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java,112,ompiler.reportCodeChange();
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,400,compiler.reportChangeToEnclosingScope(lastArg);
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,401,ompiler.reportCodeChange();
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,450,compiler.reportChangeToEnclosingScope(n);
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,451,ompiler.reportCodeChange();
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,454,compiler.reportChangeToEnclosingScope(n);
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,455,ompiler.reportCodeChange();
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,779,compiler.reportChangeToEnclosingScope(assign.assignNode);
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,780,ompiler.reportCodeChange();
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,810,compiler.reportChangeToEnclosingScope(exprCallNode);
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,811,ompiler.reportCodeChange();
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,837,compiler.reportChangeToEnclosingScope(toRemove);
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,838,ompiler.reportCodeChange();
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,852,compiler.reportChangeToEnclosingScope(toRemove);
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,854,ompiler.reportCodeChange();
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,860,compiler.reportChangeToEnclosingScope(toRemove);
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,861,ompiler.reportCodeChange();
True,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,863,compiler.reportChangeToEnclosingScope(toRemove);
False,src/com/google/javascript/jscomp/RemoveUnusedVars.java,src/com/google/javascript/jscomp/RemoveUnusedVars.java,864,ompiler.reportCodeChange();
False,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,252,ompiler.reportCodeChange();
True,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,src/com/google/javascript/jscomp/UnreachableCodeElimination.java,252,compiler.reportChangeToEnclosingScope(n);
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,922,"odeUtil.verifyScopeChanges(mtoc, mainRoot, false);"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,922,"NodeUtil.verifyScopeChanges(mtoc, mainRoot, false, compiler);"
False,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,28, CompilerTestCase to run multiple passes. The other files that use
False,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,29, CompilerTestCase test a single pass.
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,28,* CompilerTestCase to run multiple passes and do sanity checks. The other files
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,29,* that use CompilerTestCase unit test a single pass.
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,77,public void testCollapseObjectLiteralsScopeChange() {
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,78,passes = Lists.newLinkedList();
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,79,addCollapseObjectLiterals();
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,80,"test(""function f() {"" +"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,81,"""  var obj = { x: 1 };"" +"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,82,"""  var z = function() { return obj.x; }"" +"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,84,"""function f(){"" +"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,85,"""  var JSCompiler_object_inline_x_0 = 1;"" +"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,86,"""  var z = function(){"" +"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,87,"""    return JSCompiler_object_inline_x_0;"" +"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,92,public void testRemoveUnusedClassPropertiesScopeChange() {
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,93,passes = Lists.newLinkedList();
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,94,addRemoveUnusedClassProperties();
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,95,"test(""/** @constructor */"" +"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,96,"""function Foo() { this.a = 1; }"" +"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,97,"""Foo.baz = function() {};"","
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,98,"""/** @constructor */"" +"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,99,"""function Foo() { 1; }"" +"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,100,"""Foo.baz = function() {};"");"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,103,public void testRemoveUnusedVariablesScopeChange() {
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,104,passes = Lists.newLinkedList();
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,105,addRemoveUnusedVars();
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,106,"test(""function f() { var x; }"","
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,107,"""function f() {}"");"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,108,"test(""function g() { function f(x, y) { return 1; } }"","
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,109,"""function g() {}"");"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,110,"test(""function f() { var x = 123; }"","
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,111,"""function f() {}"");"
False,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,84,rivate void addDeadCodeElimination() {
False,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,85,"asses.add(new PassFactory(""removeUnreachableCode"", false) {"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,121,private void addCollapseObjectLiterals() {
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,122,"passes.add(new PassFactory(""collapseObjectLiterals"", false) {"
False,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,88,"eturn new UnreachableCodeElimination(compiler, true);"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,125,return new InlineObjectLiterals(
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,126,"compiler, compiler.getUniqueNameIdSupplier());"
False,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,93,rivate void addInlineVariables() {
False,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,94,"asses.add(new PassFactory(""inlineVariables"", false) {"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,131,private void addDeadCodeElimination() {
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,132,"passes.add(new PassFactory(""removeUnreachableCode"", false) {"
False,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,97,"eturn new InlineVariables(compiler, InlineVariables.Mode.ALL, true);"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,135,"return new UnreachableCodeElimination(compiler, true);"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,150,private void addInlineVariables() {
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,151,"passes.add(new PassFactory(""inlineVariables"", false) {"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,152,@Override
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,153,protected CompilerPass create(AbstractCompiler compiler) {
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,154,"return new InlineVariables(compiler, InlineVariables.Mode.ALL, true);"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,174,private void addRemoveUnusedClassProperties() {
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,175,"passes.add(new PassFactory(""removeUnusedClassProperties"", false) {"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,176,@Override
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,177,protected CompilerPass create(AbstractCompiler compiler) {
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,178,return new RemoveUnusedClassProperties(compiler);
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,183,private void addRemoveUnusedVars() {
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,184,"passes.add(new PassFactory(""removeUnusedVars"", false) {"
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,185,@Override
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,186,protected CompilerPass create(AbstractCompiler compiler) {
True,test/com/google/javascript/jscomp/MultiPassTest.java,test/com/google/javascript/jscomp/MultiPassTest.java,187,"return new RemoveUnusedVars(compiler, false, false, false);"

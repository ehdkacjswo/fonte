is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,119,// All commutative operators are also associative
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,122,ode parent = n.getParent();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,123,// Transform a * (b * c) to a * b * c
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,130,"arent.replaceChild(n, newRoot);"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,131,"n.getParent().replaceChild(n, newRoot);"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,134,} else if (NodeUtil.isCommutative(n.getType()) &&
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,135,!NodeUtil.mayHaveSideEffects(n)) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,136,// Transform a * (b / c) to b / c * a
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,137,Node lhs = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,138,int precedence = NodeUtil.precedence(n.getType());
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,139,int lhsPrecedence = NodeUtil.precedence(lhs.getType());
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,140,int rhsPrecedence = NodeUtil.precedence(rhs.getType());
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,141,if (rhsPrecedence == precedence &&
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,142,(lhs.getType() == n.getType() || lhsPrecedence != precedence)) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,143,n.removeChild(rhs);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,144,n.addChildToFront(rhs);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,145,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,146,return n;
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,37,int type = subtree.getType();
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,38,int leftType = subtree.getFirstChild().getType();
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,39,if (type != leftType
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,40,&& NodeUtil.precedence(type) == NodeUtil.precedence(leftType)) {
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,41,// then flipping would add parens
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,42,return subtree;
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,458,ublic void testAssocitivity() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,459,"est(""var a,b,c; a || (b || c); a * (b * c); a | (b | c)"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,460,"var a,b,c; (a || b) || c; (a * b) * c; (a | b) | c"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,461,"estSame(""var a,b,c; a % (b % c); a / (b / c); a - (b - c);"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,458,public void testRotateAssociativeOperators() {
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,459,"test(""a || (b || c); a * (b * c); a | (b | c)"","
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,460,"""(a || b) || c; (a * b) * c; (a | b) | c"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,461,"testSame(""a % (b % c); a / (b / c); a - (b - c);"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,462,"test(""a * (b % c);"", ""b % c * a"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,463,"test(""(a * b) * (c / d)"", ""c / d * (a * b)"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,464,"test(""c / d * (a * b)"", ""c / d * a * b"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,465,"test(""(a + b) * (c % d)"", ""c % d * (a + b)"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,466,"testSame(""(a / b) * (c % d)"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,467,"testSame(""(c = 5) * (c % d)"");"

is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,257,boolean alternateRenaming; // triggers RenameVars2.
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,896,alternateRenaming = false;
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1679,his.aggressiveRenaming = true;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1681,this.aggressiveRenaming = aggressive;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1684,public void setAlternateRenaming(boolean altnerate) {
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1685,this.alternateRenaming = altnerate;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2157,if (options.alternateRenaming) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2158,RenameVars2 rn = new RenameVars2(
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2159,"compiler,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2160,"options.renamePrefix,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2161,"options.variableRenaming == VariableRenamingPolicy.LOCAL,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2162,"preserveAnonymousFunctionNames,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2163,"options.generatePseudoNames,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2164,"options.shadowVariables,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2165,"prevVariableMap,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2166,"reservedChars,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2167,reservedNames);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2168,"rn.process(externs, root);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,2169,return rn.getVariableMap();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,2,* Copyright 2004 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,20,import com.google.common.collect.ArrayListMultimap;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,21,import com.google.common.collect.ImmutableMap;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,22,import com.google.common.collect.Maps;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,23,import com.google.common.collect.Sets;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,24,import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,25,import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,26,import com.google.javascript.jscomp.Scope.Var;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,27,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,29,import java.util.ArrayList;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,30,import java.util.Comparator;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,31,import java.util.HashMap;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,32,import java.util.HashSet;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,33,import java.util.Iterator;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,34,import java.util.List;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,35,import java.util.Map;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,36,import java.util.Set;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,37,import java.util.SortedSet;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,38,import java.util.TreeSet;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,40,import javax.annotation.Nullable;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,43,"* RenameVars renames all the variables names into short names, to reduce code"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,44,* size and also to obfuscate the code.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,47,final class RenameVars2 implements CompilerPass {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,48,private final AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,50,/** List of global NAME nodes */
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,51,private final ArrayList<Node> globalNameNodes = new ArrayList<Node>();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,53,/** List of local NAME nodes */
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,54,private final ArrayList<Node> localNameNodes = new ArrayList<Node>();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,57,"* Maps a name node to its pseudo name, null if we are not generating so"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,58,* there will be no overhead unless we are debugging.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,60,"private final Map<Node, String> pseudoNameMap;"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,62,/** Set of extern variable names */
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,63,private final Set<String> externNames = new HashSet<String>();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,65,/** Set of reserved variable names */
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,66,private final Set<String> reservedNames;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,68,/** The renaming map */
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,69,"private final Map<String, String> renameMap = new HashMap<String, String>();"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,71,/** The previously used rename map. */
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,72,private final VariableMap prevUsedRenameMap;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,74,/** The global name prefix */
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,75,private final String prefix;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,77,/** Counter for each assignment */
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,78,private int assignmentCount = 0;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,80,/** Logs all name assignments */
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,81,private StringBuilder assignmentLog;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,83,"// Logic for bleeding functions, where the name leaks into the outer"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,84,// scope on IE but not on other browsers.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,85,private final Set<Var> localBleedingFunctions = Sets.newHashSet();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,86,"private final ArrayListMultimap<Scope, Var> localBleedingFunctionsPerScope ="
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,87,ArrayListMultimap.create();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,89,class Assignment {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,90,final String oldName;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,91,final int orderOfOccurrence;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,92,String newName;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,93,int count; // Number of times this is referenced
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,95,Assignment(String name) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,96,this.oldName = name;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,97,this.newName = null;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,98,this.count = 0;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,100,// Represents the order at which a symbol appears in the source.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,101,this.orderOfOccurrence = assignmentCount++;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,105,* Assigns the new name.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,107,void setNewName(String newName) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,108,Preconditions.checkState(this.newName == null);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,109,this.newName = newName;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,113,/** Maps an old name to a new name assignment */
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,114,"private final Map<String, Assignment> assignments ="
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,115,"new HashMap<String, Assignment>();"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,117,/** Whether renaming should apply to local variables only. */
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,118,private final boolean localRenamingOnly;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,121,"* Whether function expression names should be preserved. Typically, for"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,122,* debugging purposes.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,124,* @see NameAnonymousFunctions
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,126,private final boolean preserveFunctionExpressionNames;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,128,private final boolean shouldShadow;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,130,/** Characters that shouldn't be used in variable names. */
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,131,private final char[] reservedCharacters;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,133,/** A prefix to distinguish temporary local names from global names */
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,134,// TODO(user): No longer needs to be public when shadowing doesn't use it.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,135,"public static final String LOCAL_VAR_PREFIX = ""L "";"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,137,// TODO(user): Temporary. To make checking in / merging DefaultPassConfig
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,138,// easier.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,139,private final NameGenerator nameGeneratorGiven;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,140,"RenameVars2(AbstractCompiler compiler, String prefix,"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,141,"boolean localRenamingOnly, boolean preserveFunctionExpressionNames,"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,142,"boolean generatePseudoNames, boolean shouldShadow,"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,143,"VariableMap prevUsedRenameMap,"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,144,"@Nullable char[] reservedCharacters,"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,145,@Nullable Set<String> reservedNames) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,146,"this(compiler, prefix, localRenamingOnly, preserveFunctionExpressionNames,"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,147,"generatePseudoNames, shouldShadow, prevUsedRenameMap,"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,148,"reservedCharacters, reservedNames, null);"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,151,"RenameVars2(AbstractCompiler compiler, String prefix,"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,152,"boolean localRenamingOnly, boolean preserveFunctionExpressionNames,"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,153,"boolean generatePseudoNames, boolean shouldShadow,"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,154,"VariableMap prevUsedRenameMap,"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,155,"@Nullable char[] reservedCharacters,"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,156,"@Nullable Set<String> reservedNames,"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,157,@Nullable NameGenerator nameGenerator) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,158,this.compiler = compiler;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,159,"this.prefix = prefix == null ? """" : prefix;"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,160,this.localRenamingOnly = localRenamingOnly;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,161,this.preserveFunctionExpressionNames = preserveFunctionExpressionNames;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,162,if (generatePseudoNames) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,163,this.pseudoNameMap = Maps.newHashMap();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,164,} else {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,165,this.pseudoNameMap = null;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,167,this.prevUsedRenameMap = prevUsedRenameMap;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,168,this.reservedCharacters = reservedCharacters;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,169,this.shouldShadow = shouldShadow;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,170,if (reservedNames == null) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,171,this.reservedNames = Sets.newHashSet();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,172,} else {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,173,this.reservedNames = Sets.newHashSet(reservedNames);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,175,this.nameGeneratorGiven = nameGenerator;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,179,"* Iterate through the nodes, collect all the NAME nodes that need to be"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,180,"* renamed, and count how many times each variable name is referenced."
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,182,* There are 2 passes:
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,183,* - externs: keep track of the global vars in the externNames_ map.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,184,"* - source: keep track of all name references in globalNameNodes_, and"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,185,*   localNameNodes_.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,187,"* To get shorter local variable renaming, we rename local variables to a"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,188,"* temporary name ""LOCAL_VAR_PREFIX + index"" where index is the index of the"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,189,* variable declared in the local scope stack.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,190,* e.g.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,191,"* Foo(fa, fb) {"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,192,"*   var c = function(d, e) { return fa; }"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,194,"* The indexes are: fa:0, fb:1, c:2, d:3, e:4"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,196,"* In that way, local variable names are reused in each global function."
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,197,* e.g. the final code might look like
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,198,"* function x(a,b) { ... }"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,199,"* function y(a,b,c) { ... }"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,201,class ProcessVars extends AbstractPostOrderCallback
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,202,implements ScopedCallback {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,203,private final boolean isExternsPass_;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,205,ProcessVars(boolean isExterns) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,206,isExternsPass_ = isExterns;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,209,@Override
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,210,public void enterScope(NodeTraversal t) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,211,if (t.inGlobalScope()) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,212,return;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,214,Iterator<Var> it = t.getScope().getVars();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,215,while (it.hasNext()) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,216,Var current = it.next();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,217,if (current.isBleedingFunction()) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,218,localBleedingFunctions.add(current);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,219,localBleedingFunctionsPerScope.put(
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,220,"t.getScope().getParent(), current);"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,225,@Override
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,226,public void exitScope(NodeTraversal t) {}
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,228,@Override
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,229,"public void visit(NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,230,if (!n.isName()) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,231,return;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,234,String name = n.getString();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,236,// Ignore anonymous functions
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,237,if (name.length() == 0) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,238,return;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,241,// Is this local or Global?
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,242,// Bleeding functions should be treated as part of their outer
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,243,"// scope, because IE has bugs in how it handles bleeding"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,244,// functions.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,245,Scope.Var var = t.getScope().getVar(name);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,246,boolean local = (var != null) && var.isLocal() &&
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,247,(!var.scope.getParent().isGlobal() ||
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,248,!var.isBleedingFunction());
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,250,// Are we renaming global variables?
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,251,if (!local && localRenamingOnly) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,252,reservedNames.add(name);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,253,return;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,256,// Are we renaming function expression names?
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,257,if (preserveFunctionExpressionNames && var != null
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,258,&& NodeUtil.isFunctionExpression(var.getParentNode())) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,259,reservedNames.add(name);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,260,return;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,263,// Check if we can rename this.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,264,"if (!okToRenameVar(name, local)) {"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,265,if (local) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,266,// Blindly de-uniquify for the Prototype library for issue 103.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,267,String newName = MakeDeclaredNamesUnique.ContextualRenameInverter
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,268,.getOrginalName(name);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,269,if (!newName.equals(name)) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,270,n.setString(newName);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,273,return;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,276,if (isExternsPass_) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,277,// Keep track of extern globals.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,278,if (!local) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,279,externNames.add(name);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,281,return;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,284,if (pseudoNameMap != null) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,285,recordPseudoName(n);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,288,if (local) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,289,// Local var: assign a new name
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,290,String tempName = LOCAL_VAR_PREFIX + getLocalVarIndex(var);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,291,incCount(tempName);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,292,localNameNodes.add(n);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,293,n.setString(tempName);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,294,} else if (var != null) { // Not an extern
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,295,"// If it's global, increment global count"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,296,incCount(name);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,297,globalNameNodes.add(n);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,301,// Increment count of an assignment
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,302,void incCount(String name) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,303,Assignment s = assignments.get(name);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,304,if (s == null) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,305,s = new Assignment(name);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,306,"assignments.put(name, s);"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,308,s.count++;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,313,"* Sorts Assignment objects by their count, breaking ties by their order of"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,314,* occurrence in the source to ensure a deterministic total ordering.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,316,private static final Comparator<Assignment> FREQUENCY_COMPARATOR =
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,317,new Comparator<Assignment>() {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,318,@Override
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,319,"public int compare(Assignment a1, Assignment a2) {"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,320,if (a1.count != a2.count) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,321,return a2.count - a1.count;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,323,// Break a tie using the order in which the variable first appears in
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,324,// the source.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,325,"return ORDER_OF_OCCURRENCE_COMPARATOR.compare(a1, a2);"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,330,* Sorts Assignment objects by the order the variable name first appears in
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,331,* the source.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,333,private static final Comparator<Assignment> ORDER_OF_OCCURRENCE_COMPARATOR =
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,334,new Comparator<Assignment>() {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,335,@Override
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,336,"public int compare(Assignment a1, Assignment a2) {"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,337,return a1.orderOfOccurrence - a2.orderOfOccurrence;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,341,@Override
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,342,"public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,343,assignmentLog = new StringBuilder();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,345,// Do variable reference counting.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,346,"NodeTraversal.traverse(compiler, externs, new ProcessVars(true));"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,347,"NodeTraversal.traverse(compiler, root, new ProcessVars(false));"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,349,// Make sure that new names don't overlap with extern names.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,350,reservedNames.addAll(externNames);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,352,"// Rename vars, sorted by frequency of occurrence to minimize code size."
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,353,SortedSet<Assignment> varsByFrequency =
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,354,new TreeSet<Assignment>(FREQUENCY_COMPARATOR);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,355,varsByFrequency.addAll(assignments.values());
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,357,if (shouldShadow) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,358,new ShadowVariables2(
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,359,"compiler, assignments, varsByFrequency, pseudoNameMap).process("
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,360,"externs, root);"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,363,// First try to reuse names from an earlier compilation.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,364,if (prevUsedRenameMap != null) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,365,reusePreviouslyUsedVariableMap();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,368,"// Assign names, sorted by descending frequency to minimize code size."
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,369,assignNames(varsByFrequency);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,371,boolean changed = false;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,373,// Rename the globals!
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,374,for (Node n : globalNameNodes) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,375,String newName = getNewGlobalName(n);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,376,"// Note: if newName is null, then oldName is an extern."
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,377,if (newName != null) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,378,n.setString(newName);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,379,changed = true;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,383,// Rename the locals!
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,384,for (Node n : localNameNodes) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,385,String newName = getNewLocalName(n);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,386,if (newName != null) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,387,n.setString(newName);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,388,changed = true;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,392,if (changed) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,393,compiler.reportCodeChange();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,396,"// Lastly, write the name assignments to the debug log."
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,397,"compiler.addToDebugLog(""JS var assignments:\n"" + assignmentLog);"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,398,assignmentLog = null;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,401,private String getNewGlobalName(Node n) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,402,String oldName = n.getString();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,403,Assignment a = assignments.get(oldName);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,404,if (a.newName != null && !a.newName.equals(oldName)) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,405,if (pseudoNameMap != null) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,406,return pseudoNameMap.get(n);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,408,return a.newName;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,409,} else {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,410,return null;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,414,private String getNewLocalName(Node n) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,415,String oldTempName = n.getString();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,416,Assignment a = assignments.get(oldTempName);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,417,if (!a.newName.equals(oldTempName)) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,418,if (pseudoNameMap != null) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,419,return pseudoNameMap.get(n);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,421,return a.newName;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,423,return null;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,426,private void recordPseudoName(Node n) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,427,// Variable names should be in a different name space than
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,428,// property pseudo names.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,429,"pseudoNameMap.put(n, '$' + n.getString() + ""$$"");"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,433,* Runs through the assignments and reuses as many names as possible from the
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,434,* previously used variable map. Updates reservedNames with the set of names
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,435,* that were reused.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,437,private void reusePreviouslyUsedVariableMap() {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,438,// If prevUsedRenameMap had duplicate values then this pass would be
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,439,// non-deterministic.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,440,"// In such a case, the following will throw an IllegalArgumentException."
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,441,Preconditions.checkState(
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,442,prevUsedRenameMap.getNewNameToOriginalNameMap() instanceof Map);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,443,for (Assignment a : assignments.values()) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,444,String prevNewName = prevUsedRenameMap.lookupNewName(a.oldName);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,445,if (prevNewName == null || reservedNames.contains(prevNewName)) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,446,continue;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,449,if (a.oldName.startsWith(LOCAL_VAR_PREFIX)
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,450,|| (!externNames.contains(a.oldName)
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,451,&& prevNewName.startsWith(prefix))) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,452,reservedNames.add(prevNewName);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,453,"finalizeNameAssignment(a, prevNewName);"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,459,* Determines which new names to substitute for the original names.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,461,private void assignNames(SortedSet<Assignment> varsToRename) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,462,NameGenerator globalNameGenerator = null;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,463,NameGenerator localNameGenerator = null;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,465,if (nameGeneratorGiven != null) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,466,globalNameGenerator = localNameGenerator = nameGeneratorGiven;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,467,nameGeneratorGiven.restartNaming();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,468,} else {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,469,globalNameGenerator =
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,470,"new NameGenerator(reservedNames, prefix, reservedCharacters);"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,472,// Local variables never need a prefix.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,473,localNameGenerator =
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,474,prefix.isEmpty() ? globalNameGenerator : new NameGenerator(
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,475,"reservedNames, """", reservedCharacters);"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,478,// Generated names and the assignments for non-local vars.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,479,List<Assignment> pendingAssignments = new ArrayList<Assignment>();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,480,List<String> generatedNamesForAssignments = new ArrayList<String>();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,482,for (Assignment a : varsToRename) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,483,if (a.newName != null) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,484,continue;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,487,if (externNames.contains(a.oldName)) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,488,continue;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,491,String newName;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,492,if (a.oldName.startsWith(LOCAL_VAR_PREFIX)) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,493,"// For local variable, we make the assignment right away."
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,494,newName = localNameGenerator.generateNextName();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,495,"finalizeNameAssignment(a, newName);"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,496,} else {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,497,"// For non-local variable, delay finalizing the name assignment"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,498,"// until we know how many new names we'll have of length 2, 3, etc."
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,499,newName = globalNameGenerator.generateNextName();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,500,pendingAssignments.add(a);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,501,generatedNamesForAssignments.add(newName);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,503,reservedNames.add(newName);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,506,"// Now that we have a list of generated names, and a list of variable"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,507,"// Assignment objects, we assign the generated names to the vars as"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,508,// follows:
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,509,// 1) The most frequent vars get the shorter names.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,510,// 2) If N number of vars are going to be assigned names of the same
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,511,"//    length, we assign the N names based on the order at which the vars"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,512,//    first appear in the source. This makes the output somewhat less
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,513,"//    random, because symbols declared close together are assigned names"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,514,"//    that are quite similar. With this heuristic, the output is more"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,515,//    compressible.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,516,"//    For instance, the output may look like:"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,517,"//    var da = "".."", ea = "".."";"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,518,//    function fa() { .. } function ga() { .. }
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,520,int numPendingAssignments = generatedNamesForAssignments.size();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,521,for (int i = 0; i < numPendingAssignments;) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,522,SortedSet<Assignment> varsByOrderOfOccurrence =
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,523,new TreeSet<Assignment>(ORDER_OF_OCCURRENCE_COMPARATOR);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,525,"// Add k number of Assignment to the set, where k is the number of"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,526,// generated names of the same length.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,527,int len = generatedNamesForAssignments.get(i).length();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,528,for (int j = i; j < numPendingAssignments
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,529,&& generatedNamesForAssignments.get(j).length() == len; j++) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,530,varsByOrderOfOccurrence.add(pendingAssignments.get(j));
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,533,"// Now, make the assignments"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,534,for (Assignment a : varsByOrderOfOccurrence) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,535,"finalizeNameAssignment(a, generatedNamesForAssignments.get(i));"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,536,++i;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,542,* Makes a final name assignment.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,544,"private void finalizeNameAssignment(Assignment a, String newName) {"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,545,a.setNewName(newName);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,547,// Keep track of the mapping
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,548,"renameMap.put(a.oldName, newName);"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,550,// Log the mapping
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,551,"assignmentLog.append(a.oldName).append("" => "").append(newName).append('\n');"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,555,* Gets the variable map.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,557,VariableMap getVariableMap() {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,558,return new VariableMap(ImmutableMap.copyOf(renameMap));
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,562,* Determines whether a variable name is okay to rename.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,564,"private boolean okToRenameVar(String name, boolean isLocal) {"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,565,"return !compiler.getCodingConvention().isExported(name, isLocal);"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,569,* Returns the index within the scope stack.
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,570,* e.g. function Foo(a) { var b; function c(d) { } }
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,571,"* a = 0, b = 1, c = 2, d = 3"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,573,private int getLocalVarIndex(Var v) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,574,int num = v.index;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,575,Scope s = v.scope.getParent();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,576,if (s == null) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,577,"throw new IllegalArgumentException(""Var is not local"");"
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,580,boolean isBleedingIntoScope = s.getParent() != null &&
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,581,localBleedingFunctions.contains(v);
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,583,while (s.getParent() != null) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,584,if (isBleedingIntoScope) {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,585,num += localBleedingFunctionsPerScope.get(s).indexOf(v) + 1;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,586,isBleedingIntoScope = false;
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,587,} else {
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,588,num += localBleedingFunctionsPerScope.get(s).size();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,591,num += s.getVarCount();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,592,s = s.getParent();
True,src/com/google/javascript/jscomp/RenameVars2.java,src/com/google/javascript/jscomp/RenameVars2.java,594,return num;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,2,* Copyright 2011 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,19,import com.google.common.collect.HashMultimap;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,20,import com.google.common.collect.Maps;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,21,import com.google.common.collect.Multimap;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,22,import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,23,import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,24,import com.google.javascript.jscomp.RenameVars2.Assignment;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,25,import com.google.javascript.jscomp.Scope.Var;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,26,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,28,import java.util.Collection;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,29,import java.util.Iterator;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,30,import java.util.Map;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,31,import java.util.SortedSet;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,34,* Tries to compute a list of variables that can shadow a variable in the
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,35,* outer scope.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,37,* For example:
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,39,* <code>
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,40,* var a = function() {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,41,*   var b = getB();
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,42,*   b();
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,43,*   return function(y) {};
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,45,* </code>
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,47,"* Normally, b would be mapped to variable L0, y would be L1."
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,49,* Instead we are going to make y shadows L0 in hope of using less variables
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,50,* and reusing frequently used local names.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,53,class ShadowVariables2 implements CompilerPass {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,55,// Keep a map of Upward Referencing name nodes of each scope.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,56,// A name is upward referencing name of a scope if:
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,58,// 1) It refers to (or defines) a name that is defined in the current
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,59,// scope or any scope above the current scope that isn't the
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,60,// global scope.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,62,// 2) It is a upward referencing name of a child scope of this scope.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,64,// Example:
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,65,"// var x; var y; function foo(a) { function bar(b) { x, a } }"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,66,"// The upward referencing names in scope 'foo' is bar, b, x and a;"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,67,// The key to this map is the root node of the scope.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,69,"// We can see that for any variable x in the current scope, we can shadow"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,70,// a variable y in an outer scope given that y is not a upward referencing
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,71,// name of the current scope.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,73,// TODO(user): Maps scope to string instead of Node to string.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,74,// Make sure of scope memorization to minimize scope creation cost.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,75,"private final Multimap<Node, String> scopeUpRefMap = HashMultimap.create();"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,77,// Maps all local Scope.Var to all of its referencing NAME node
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,78,// in any scope.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,79,"private final Multimap<Var, Node> varToNameUsage = HashMultimap.create();"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,81,private final AbstractCompiler compiler;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,83,// All the information used for renaming.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,84,private final SortedSet<Assignment> varsByFrequency;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,85,"private final Map<String, Assignment> assignments;"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,86,"private final Map<Node, String> oldPseudoNameMap;"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,87,"private final Map<Node, String> deltaPseudoNameMap;"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,91,* @param assignments Map of old variable names to its assignment Objects.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,92,* @param varsByFrequency Sorted variable assignments by Frequency.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,93,* @param pseudoNameMap The current pseudo name map so this pass can update
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,94,*     it accordingly.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,96,ShadowVariables2(
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,97,"AbstractCompiler compiler,"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,98,"Map<String, Assignment> assignments,"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,99,"SortedSet<Assignment> varsByFrequency,"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,100,"Map<Node, String> pseudoNameMap) {"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,101,this.compiler = compiler;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,102,this.assignments = assignments;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,103,this.varsByFrequency = varsByFrequency;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,104,this.oldPseudoNameMap = pseudoNameMap;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,105,this.deltaPseudoNameMap = Maps.newLinkedHashMap();
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,108,@Override
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,109,"public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,111,// The algorithm is divided into two stages:
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,113,"// 1. Information gathering (variable usage, upward referencing)"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,115,"// 2. Tries to find shadows for each variables, updates the"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,116,//    variable usage frequency map.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,118,// 3. Updates the pseudo naming map if needed.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,119,"NodeTraversal.traverse(compiler, root, new GatherReferenceInfo());"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,120,"NodeTraversal.traverse(compiler, root, new DoShadowVariables());"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,122,if (oldPseudoNameMap != null) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,123,oldPseudoNameMap.putAll(deltaPseudoNameMap);
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,127,private class GatherReferenceInfo extends AbstractPostOrderCallback {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,128,@Override
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,129,"public void visit(NodeTraversal t, Node n, Node parent) {"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,130,// Skipping over non-name nodes and empty function names.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,131,if (!NodeUtil.isReferenceName(n)) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,132,return;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,135,// We focus on shadowing local variables as their name occurs much more
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,136,// than global names.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,137,"// TODO(user): Alternatively, we could experiment with using a local"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,138,// name to shadow a global variable.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,139,if (t.inGlobalScope()) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,140,return;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,143,Var var = t.getScope().getVar(n.getString());
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,144,if (var == null) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,145,// extern name or undefined name.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,146,return;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,149,if (var.getScope().isGlobal()) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,150,// We will not shadow a global variable name.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,151,return;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,154,"// Using the definition of upward referencing, fill in the map."
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,155,if (var.getScope() != t.getScope()) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,156,for (Scope s = t.getScope();
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,157,s != var.getScope() && s.isLocal(); s = s.getParent()) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,158,"scopeUpRefMap.put(s.getRootNode(), var.name);"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,162,if (var.getScope() == t.getScope()) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,163,"scopeUpRefMap.put(t.getScopeRoot(), var.name);"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,166,// Find in the usage map that tracks a var and all of its usage.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,167,"varToNameUsage.put(var, n);"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,171,private class DoShadowVariables extends AbstractPostOrderCallback
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,172,implements ScopedCallback {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,174,@Override
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,175,public void enterScope(NodeTraversal t) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,176,Scope s = t.getScope();
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,177,if (!s.isLocal()) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,178,return;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,181,"// Since we don't shadow global, there is nothing to be done in the"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,182,// first immediate local scope as well.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,183,if (s.getParent().isGlobal()) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,184,return;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,187,for (Iterator<Var> vars = s.getVars(); vars.hasNext();) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,188,Var var = vars.next();
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,190,// Don't shadow variables that is bleed-out to fix an IE bug.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,191,if (var.isBleedingFunction()) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,192,continue;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,195,// Don't shadow an exported local.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,196,"if (compiler.getCodingConvention().isExported(var.name, s.isLocal())) {"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,197,continue;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,200,// Try to look for the best shadow for the current candidate.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,201,Assignment bestShadow = findBestShadow(s);
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,202,if (bestShadow == null) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,203,continue;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,206,// The name assignment being shadowed.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,207,Assignment localAssignment = assignments.get(var.getName());
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,209,// Only shadow if this increases the number of occurrences of the
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,210,// shadowed variable.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,211,if (bestShadow.count < localAssignment.count) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,212,continue; // Hope the next local variable would have a smaller count.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,215,"doShadow(localAssignment, bestShadow, var);"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,217,if (oldPseudoNameMap != null) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,218,String targetPseudoName =
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,219,oldPseudoNameMap.get(s.getVar(bestShadow.oldName).nameNode);
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,220,for (Node use : varToNameUsage.get(var)) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,221,"deltaPseudoNameMap.put(use, targetPseudoName);"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,227,@Override
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,228,public void exitScope(NodeTraversal t) {}
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,230,@Override
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,231,"public void visit(NodeTraversal t, Node n, Node parent) {}"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,234,* @returns An assignment that can be used as a shadow for a local variable
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,235,*     in the scope defined by curScopeRoot.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,237,private Assignment findBestShadow(Scope curScope) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,238,// Search for the candidate starting from the most used local.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,239,for (Assignment assignment : varsByFrequency) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,240,if (assignment.oldName.startsWith(RenameVars.LOCAL_VAR_PREFIX)) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,241,if (!scopeUpRefMap.get(curScope.getRootNode()).contains(
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,242,assignment.oldName)) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,243,"if (curScope.isDeclared(assignment.oldName, true)) {"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,244,return assignment;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,249,return null;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,252,"private void doShadow(Assignment original, Assignment toShadow, Var var) {"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,253,Scope s = var.getScope();
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,254,// We are now shadowing 'bestShadow' with localAssignment.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,255,// All of the reference NAME node of this variable.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,256,Collection<Node> references = varToNameUsage.get(var);
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,258,// First remove both assignments from the sorted list since they need
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,259,// to be re-sorted.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,260,varsByFrequency.remove(original);
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,261,varsByFrequency.remove(toShadow);
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,263,// Adjust the count offset by the inner scope variable.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,264,original.count -= references.size();
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,265,toShadow.count += references.size();
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,267,// Add it back to the sorted list after re-adjustment.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,268,varsByFrequency.add(original);
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,269,varsByFrequency.add(toShadow);
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,271,// This is an important step. If variable L7 is going to be renamed to
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,272,"// L1, by definition of upward referencing, The name L1 is now in the"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,273,// set of upward referencing names of the current scope up to the
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,274,// declaring scope of the best shadow variable.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,275,Var shadowed = s.getVar(toShadow.oldName);
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,276,if (shadowed != null) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,277,for (Scope curScope = s; curScope != shadowed.scope;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,278,curScope = curScope.getParent()) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,279,"scopeUpRefMap.put(curScope.getRootNode(), toShadow.oldName);"
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,283,// Mark all the references as shadowed.
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,284,for (Node n : references) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,285,n.setString(toShadow.oldName);
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,286,Node cur = n;
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,287,while (cur != s.getRootNode()) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,288,cur = cur.getParent();
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,289,if (cur.isFunction()) {
True,src/com/google/javascript/jscomp/ShadowVariables2.java,src/com/google/javascript/jscomp/ShadowVariables2.java,290,"scopeUpRefMap.put(cur, toShadow.oldName);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,2,* Copyright 2005 The Closure Compiler Authors.
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,19,import com.google.common.base.Preconditions;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,20,import com.google.common.collect.ImmutableMap;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,21,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,23,import java.util.HashSet;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,24,import java.util.Map;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,28,* Tests for {@link Rename2Vars}.
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,30,public class RenameVars2Test extends CompilerTestCase {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,31,"private static final String DEFAULT_PREFIX = """";"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,32,private String prefix = DEFAULT_PREFIX;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,34,private VariableMap previouslyUsedMap =
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,35,"new VariableMap(ImmutableMap.<String, String>of());"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,36,private RenameVars renameVars;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,37,private boolean withClosurePass = false;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,38,private boolean localRenamingOnly = false;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,39,private boolean preserveFunctionExpressionNames = false;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,40,private boolean useGoogleCodingConvention = true;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,41,private boolean generatePseudoNames = false;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,42,private boolean shouldShadow = false;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,43,private boolean withNormalize = false;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,44,private NameGenerator nameGenerator = null;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,46,@Override
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,47,protected CodingConvention getCodingConvention() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,48,if (useGoogleCodingConvention) {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,49,return new GoogleCodingConvention();
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,50,} else {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,51,return CodingConventions.getDefault();
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,55,@Override
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,56,protected CompilerPass getProcessor(Compiler compiler) {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,57,CompilerPass pass;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,58,if (withClosurePass) {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,59,pass = new ClosurePassAndRenameVars(compiler);
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,60,} else {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,61,"pass =  renameVars = new RenameVars(compiler, prefix,"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,62,"localRenamingOnly, preserveFunctionExpressionNames,"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,63,"generatePseudoNames, shouldShadow,"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,64,"previouslyUsedMap, null, null, nameGenerator);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,67,if (withNormalize) {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,68,// Don't use the standard CompilerTestCase normalization options
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,69,"// as renaming is a post denormalization operation, but we do still"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,70,// want to run the normal normalizations on the input in some cases.
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,71,"pass = new NormalizePassWrapper(compiler, pass);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,74,return pass;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,77,@Override
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,78,protected int getNumRepetitions() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,79,return 1;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,82,@Override
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,83,protected void setUp() throws Exception {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,84,super.setUp();
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,85,"previouslyUsedMap = new VariableMap(ImmutableMap.<String, String>of());"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,86,prefix = DEFAULT_PREFIX;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,87,withClosurePass = false;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,88,withNormalize = false;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,89,localRenamingOnly = false;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,90,preserveFunctionExpressionNames = false;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,91,generatePseudoNames = false;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,92,shouldShadow = false;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,93,nameGenerator = null;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,95,// TODO(johnlenz): Enable Normalize during these tests.
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,98,public void testRenameSimple() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,99,"test(""function Foo(v1, v2) {return v1;} Foo();"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,100,"""function a(b, c) {return b;} a();"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,103,public void testRenameGlobals() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,104,"test(""var Foo; var Bar, y; function x() { Bar++; }"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,105,"""var a; var b, c; function d() { b++; }"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,108,public void testRenameLocals() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,109,"test(""(function (v1, v2) {}); (function (v3, v4) {});"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,110,"""(function (a, b) {}); (function (a, b) {});"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,111,"test(""function f1(v1, v2) {}; function f2(v3, v4) {};"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,112,"""function c(a, b) {}; function d(a, b) {};"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,115,public void testRenameRedeclaredGlobals() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,116,"test(""function f1(v1, v2) {f1()};"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,117,"""/** @suppress {duplicate} */"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,118,"""function f1(v3, v4) {f1()};"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,119,"""function a(b, c) {a()};"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,120,"""function a(b, c) {a()};"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,122,localRenamingOnly = true;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,124,"test(""function f1(v1, v2) {f1()};"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,125,"""/** @suppress {duplicate} */"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,126,"""function f1(v3, v4) {f1()};"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,127,"""function f1(a, b) {f1()};"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,128,"""function f1(a, b) {f1()};"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,131,public void testRecursiveFunctions1() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,132,"test(""var walk = function walk(node, aFunction) {"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,133,"""  walk(node, aFunction);"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,135,"""var a = function a(b, c) {"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,136,"""  a(b, c);"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,139,localRenamingOnly = true;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,141,"test(""var walk = function walk(node, aFunction) {"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,142,"""  walk(node, aFunction);"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,144,"""var walk = function walk(a, b) {"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,145,"""  walk(a, b);"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,149,public void testRecursiveFunctions2() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,150,preserveFunctionExpressionNames = true;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,152,"test(""var walk = function walk(node, aFunction) {"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,153,"""  walk(node, aFunction);"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,155,"""var c = function walk(a, b) {"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,156,"""  walk(a, b);"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,159,localRenamingOnly = true;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,161,"test(""var walk = function walk(node, aFunction) {"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,162,"""  walk(node, aFunction);"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,164,"""var walk = function walk(a, b) {"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,165,"""  walk(a, b);"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,169,public void testRenameLocalsClashingWithGlobals() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,170,"test(""function a(v1, v2) {return v1;} a();"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,171,"""function a(b, c) {return b;} a();"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,174,public void testRenameNested() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,175,"test(""function f1(v1, v2) { (function(v3, v4) {}) }"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,176,"""function a(b, c) { (function(d, e) {}) }"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,177,"test(""function f1(v1, v2) { function f2(v3, v4) {} }"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,178,"""function a(b, c) { function d(e, f) {} }"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,181,public void testBleedingRecursiveFunctions1() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,182,"// On IE, bleeding functions will interfere with each other if"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,183,"// they are in the same scope. In the below example, we want to be"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,184,// sure that a and b get separate names.
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,185,"test(""var x = function a(x) { return x ? 1 : a(1); };"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,186,"""var y = function b(x) { return x ? 2 : b(2); };"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,187,"""var c = function b(a) { return a ? 1 : b(1); };"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,188,"""var e = function d(a) { return a ? 2 : d(2); };"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,191,public void testBleedingRecursiveFunctions2() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,192,"test(""function f() {"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,193,"""  var x = function a(x) { return x ? 1 : a(1); };"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,194,"""  var y = function b(x) { return x ? 2 : b(2); };"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,196,"""function d() {"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,197,"""  var e = function b(a) { return a ? 1 : b(1); };"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,198,"""  var f = function a(c) { return c ? 2 : a(2); };"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,202,public void testBleedingRecursiveFunctions3() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,203,"test(""function f() {"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,204,"""  var x = function a(x) { return x ? 1 : a(1); };"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,205,"""  var y = function b(x) { return x ? 2 : b(2); };"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,206,"""  var z = function c(x) { return x ? y : c(2); };"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,208,"""function f() {"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,209,"""  var g = function c(a) { return a ? 1 : c(1); };"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,210,"""  var d = function a(b) { return b ? 2 : a(2); };"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,211,"""  var h = function b(e) { return e ? d : b(2); };"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,215,public void testRenameWithExterns1() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,216,"String externs = ""var foo;"";"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,217,"test(externs, ""var bar; foo(bar);"", ""var a; foo(a);"", null, null);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,220,public void testRenameWithExterns2() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,221,"String externs = ""var a;"";"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,222,"test(externs, ""var b = 5"", ""var b = 5"", null, null);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,225,public void testDoNotRenameExportedName() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,226,"test(""_foo()"", ""_foo()"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,229,public void testRenameWithNameOverlap() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,230,"test(""var a = 1; var b = 2; b + b;"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,231,"""var a = 1; var b = 2; b + b;"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,234,public void testRenameWithPrefix1() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,235,"prefix = ""PRE_"";"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,236,"test(""function Foo(v1, v2) {return v1} Foo();"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,237,"""function PRE_(a, b) {return a} PRE_();"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,238,prefix = DEFAULT_PREFIX;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,242,public void testRenameWithPrefix2() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,243,"prefix = ""PRE_"";"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,244,"test(""function Foo(v1, v2) {var v3 = v1 + v2; return v3;} Foo();"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,245,"""function PRE_(a, b) {var c = a + b; return c;} PRE_();"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,246,prefix = DEFAULT_PREFIX;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,249,public void testRenameWithPrefix3() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,250,"prefix = ""a"";"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,251,"test(""function Foo() {return 1;}"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,252,"""function Bar() {"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,253,"""  var a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,254,"""      A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,aa,ab;"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,255,"""  Foo();"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,256,"""} Bar();"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,258,"""function a() {return 1;}"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,259,"""function aa() {"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,260,"""  var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,261,"""      B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,$,ba,ca;"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,262,"""  a();"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,263,"""} aa();"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,264,prefix = DEFAULT_PREFIX;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,267,public void testNamingBasedOnOrderOfOccurrence() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,268,"test(""var q,p,m,n,l,k; "" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,269,"""(function (r) {}); try { } catch(s) {}; var t = q + q;"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,270,"""var a,b,c,d,e,f; "" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,271,"""(function(g) {}); try { } catch(h) {}; var i = a + a;"""
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,273,"test(""(function(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,274,"""a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,$){});"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,275,"""var a4,a3,a2,a1,b4,b3,b2,b1,ab,ac,ad,fg;function foo(){};"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,276,"""(function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,277,"""A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,$){});"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,278,"""var aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la;function ma(){};"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,281,public void testStableRenameSimple() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,282,VariableMap expectedVariableMap = makeVariableMap(
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,283,"""Foo"", ""a"", ""L 0"", ""b"", ""L 1"", ""c"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,284,"testRenameMap(""function Foo(v1, v2) {return v1;} Foo();"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,285,"""function a(b, c) {return b;} a();"", expectedVariableMap);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,287,expectedVariableMap = makeVariableMap(
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,288,"""Foo"", ""a"", ""L 0"", ""b"", ""L 1"", ""c"", ""L 2"", ""d"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,289,"testRenameMapUsingOldMap(""function Foo(v1, v2, v3) {return v1;} Foo();"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,290,"""function a(b, c, d) {return b;} a();"", expectedVariableMap);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,293,public void testStableRenameGlobals() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,294,VariableMap expectedVariableMap = makeVariableMap(
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,295,"""Foo"", ""a"", ""Bar"", ""b"", ""y"", ""c"", ""x"", ""d"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,296,"testRenameMap(""var Foo; var Bar, y; function x() { Bar++; }"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,297,"""var a; var b, c; function d() { b++; }"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,298,expectedVariableMap);
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,300,expectedVariableMap = makeVariableMap(
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,301,"""Foo"", ""a"", ""Bar"", ""b"", ""y"", ""c"", ""x"", ""d"", ""Baz"", ""f"", ""L 0"" , ""e"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,302,testRenameMapUsingOldMap(
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,303,"""var Foo, Baz; var Bar, y; function x(R) { return R + Bar++; }"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,304,"""var a, f; var b, c; function d(e) { return e + b++; }"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,305,expectedVariableMap);
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,308,public void testStableRenameWithPointlesslyAnonymousFunctions() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,309,"VariableMap expectedVariableMap = makeVariableMap(""L 0"", ""a"", ""L 1"", ""b"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,310,"testRenameMap(""(function (v1, v2) {}); (function (v3, v4) {});"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,311,"""(function (a, b) {}); (function (a, b) {});"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,312,expectedVariableMap);
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,314,"expectedVariableMap = makeVariableMap(""L 0"", ""a"", ""L 1"", ""b"", ""L 2"", ""c"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,315,"testRenameMapUsingOldMap(""(function (v0, v1, v2) {});"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,316,"""(function (v3, v4) {});"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,317,"""(function (a, b, c) {});"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,318,"""(function (a, b) {});"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,319,expectedVariableMap);
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,322,public void testStableRenameLocalsClashingWithGlobals() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,323,"test(""function a(v1, v2) {return v1;} a();"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,324,"""function a(b, c) {return b;} a();"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,325,previouslyUsedMap = renameVars.getVariableMap();
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,326,"test(""function bar(){return;}function a(v1, v2) {return v1;} a();"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,327,"""function d(){return;}function a(b, c) {return b;} a();"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,330,public void testStableRenameNested() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,331,VariableMap expectedVariableMap = makeVariableMap(
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,332,"""f1"", ""a"", ""L 0"", ""b"", ""L 1"", ""c"", ""L 2"", ""d"", ""L 3"", ""e"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,333,"testRenameMap(""function f1(v1, v2) { (function(v3, v4) {}) }"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,334,"""function a(b, c) { (function(d, e) {}) }"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,335,expectedVariableMap);
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,337,expectedVariableMap = makeVariableMap(
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,338,"""f1"", ""a"", ""L 0"", ""b"", ""L 1"", ""c"", ""L 2"", ""d"", ""L 3"", ""e"", ""L 4"", ""f"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,339,testRenameMapUsingOldMap(
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,340,"""function f1(v1, v2) { (function(v3, v4, v5) {}) }"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,341,"""function a(b, c) { (function(d, e, f) {}) }"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,342,expectedVariableMap);
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,345,public void testStableRenameWithExterns1() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,346,"String externs = ""var foo;"";"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,347,"test(externs, ""var bar; foo(bar);"", ""var a; foo(a);"", null, null);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,348,previouslyUsedMap = renameVars.getVariableMap();
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,349,"test(externs, ""var bar, baz; foo(bar, baz);"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,350,"""var a, b; foo(a, b);"", null, null);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,353,public void testStableRenameWithExterns2() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,354,"String externs = ""var a;"";"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,355,"test(externs, ""var b = 5"", ""var b = 5"", null, null);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,356,previouslyUsedMap = renameVars.getVariableMap();
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,357,"test(externs, ""var b = 5, catty = 9;"", ""var b = 5, c=9;"", null, null);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,360,public void testStableRenameWithNameOverlap() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,361,"test(""var a = 1; var b = 2; b + b;"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,362,"""var a = 1; var b = 2; b + b;"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,363,previouslyUsedMap = renameVars.getVariableMap();
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,364,"test(""var a = 1; var c, b = 2; b + b;"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,365,"""var a = 1; var c, b = 2; b + b;"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,368,public void testStableRenameWithAnonymousFunctions() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,369,"VariableMap expectedVariableMap = makeVariableMap(""L 0"", ""a"", ""foo"", ""b"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,370,"testRenameMap(""function foo(bar){return bar;}foo(function(h){return h;});"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,371,"""function b(a){return a}b(function(a){return a;})"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,372,expectedVariableMap);
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,374,"expectedVariableMap = makeVariableMap(""foo"", ""b"", ""L 0"", ""a"", ""L 1"", ""c"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,375,testRenameMapUsingOldMap(
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,376,"""function foo(bar) {return bar;}foo(function(g,h) {return g+h;});"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,377,"""function b(a){return a}b(function(a,c){return a+c;})"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,378,expectedVariableMap);
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,381,public void testStableRenameSimpleExternsChanges() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,382,VariableMap expectedVariableMap = makeVariableMap(
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,383,"""Foo"", ""a"", ""L 0"", ""b"", ""L 1"", ""c"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,384,"testRenameMap(""function Foo(v1, v2) {return v1;} Foo();"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,385,"""function a(b, c) {return b;} a();"", expectedVariableMap);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,387,"expectedVariableMap = makeVariableMap(""L 0"", ""b"", ""L 1"", ""c"", ""L 2"", ""a"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,388,"String externs = ""var Foo;"";"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,389,"testRenameMapUsingOldMap(externs,"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,390,"""function Foo(v1, v2, v0) {return v1;} Foo();"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,391,"""function Foo(b, c, a) {return b;} Foo();"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,392,expectedVariableMap);
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,395,public void testStableRenameSimpleLocalNameExterned() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,396,"test(""function Foo(v1, v2) {return v1;} Foo();"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,397,"""function a(b, c) {return b;} a();"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,399,previouslyUsedMap = renameVars.getVariableMap();
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,401,"String externs = ""var b;"";"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,402,"test(externs, ""function Foo(v1, v2) {return v1;} Foo(b);"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,403,"""function a(d, c) {return d;} a(b);"", null, null);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,406,public void testStableRenameSimpleGlobalNameExterned() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,407,"test(""function Foo(v1, v2) {return v1;} Foo();"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,408,"""function a(b, c) {return b;} a();"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,410,previouslyUsedMap = renameVars.getVariableMap();
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,412,"String externs = ""var Foo;"";"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,413,"test(externs, ""function Foo(v1, v2, v0) {return v1;} Foo();"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,414,"""function Foo(b, c, a) {return b;} Foo();"", null, null);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,417,public void testStableRenameWithPrefix1AndUnstableLocalNames() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,418,"prefix = ""PRE_"";"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,419,"test(""function Foo(v1, v2) {return v1} Foo();"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,420,"""function PRE_(a, b) {return a} PRE_();"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,422,previouslyUsedMap = renameVars.getVariableMap();
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,424,"prefix = ""PRE_"";"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,425,"test(""function Foo(v0, v1, v2) {return v1} Foo();"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,426,"""function PRE_(a, b, c) {return b} PRE_();"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,429,public void testStableRenameWithPrefix2() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,430,"prefix = ""a"";"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,431,"test(""function Foo() {return 1;}"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,432,"""function Bar() {"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,433,"""  var a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,434,"""      A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,aa,ab;"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,435,"""  Foo();"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,436,"""} Bar();"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,438,"""function a() {return 1;}"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,439,"""function aa() {"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,440,"""  var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,441,"""      B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,$,ba,ca;"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,442,"""  a();"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,443,"""} aa();"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,445,previouslyUsedMap = renameVars.getVariableMap();
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,447,"prefix = ""a"";"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,448,"test(""function Foo() {return 1;}"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,449,"""function Baz() {return 1;}"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,450,"""function Bar() {"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,451,"""  var a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,452,"""      A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,aa,ab;"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,453,"""  Foo();"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,454,"""} Bar();"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,456,"""function a() {return 1;}"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,457,"""function ab() {return 1;}"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,458,"""function aa() {"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,459,"""  var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,460,"""      B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,$,ba,ca;"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,461,"""  a();"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,462,"""} aa();"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,465,public void testContrivedExampleWhereConsistentRenamingIsWorse() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,466,previouslyUsedMap = makeVariableMap(
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,467,"""Foo"", ""LongString"", ""L 0"", ""b"", ""L 1"", ""c"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,469,"test(""function Foo(v1, v2) {return v1;} Foo();"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,470,"""function LongString(b, c) {return b;} LongString();"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,472,previouslyUsedMap = renameVars.getVariableMap();
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,473,VariableMap expectedVariableMap = makeVariableMap(
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,474,"""Foo"", ""LongString"", ""L 0"", ""b"", ""L 1"", ""c"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,475,"assertVariableMapsEqual(expectedVariableMap, previouslyUsedMap);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,478,public void testPrevUsedMapWithDuplicates() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,479,"previouslyUsedMap = makeVariableMap(""Foo"", ""z"", ""Bar"", ""z"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,480,try {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,481,"testSame("""");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,482,fail();
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,483,} catch (java.lang.IllegalArgumentException expected) {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,487,public void testExportSimpleSymbolReservesName() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,488,"test(""var goog, x; goog.exportSymbol('a', x);"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,489,"""var a, b; a.exportSymbol('a', b);"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,490,withClosurePass = true;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,491,"test(""var goog, x; goog.exportSymbol('a', x);"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,492,"""var b, c; b.exportSymbol('a', c);"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,495,public void testExportComplexSymbolReservesName() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,496,"test(""var goog, x; goog.exportSymbol('a.b', x);"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,497,"""var a, b; a.exportSymbol('a.b', b);"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,498,withClosurePass = true;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,499,"test(""var goog, x; goog.exportSymbol('a.b', x);"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,500,"""var b, c; b.exportSymbol('a.b', c);"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,503,public void testExportToNonStringDoesntExplode() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,504,withClosurePass = true;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,505,"test(""var goog, a, b; goog.exportSymbol(a, b);"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,506,"""var a, b, c; a.exportSymbol(b, c);"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,509,public void testDollarSignSuperExport1() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,510,useGoogleCodingConvention = false;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,511,// See http://code.google.com/p/closure-compiler/issues/detail?id=32
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,512,"test(""var x = function($super,duper,$fantastic){}"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,513,"""var c = function($super,    a,        b){}"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,515,localRenamingOnly = false;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,516,"test(""var $super = 1"", ""var a = 1"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,518,useGoogleCodingConvention = true;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,519,"test(""var x = function($super,duper,$fantastic){}"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,520,"""var c = function($super,a,b){}"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,523,public void testDollarSignSuperExport2() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,524,withNormalize = true;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,526,useGoogleCodingConvention = false;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,527,// See http://code.google.com/p/closure-compiler/issues/detail?id=32
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,528,"test(""var x = function($super,duper,$fantastic){};"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,529,"""var y = function($super,duper){};"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,530,"""var c = function($super,    a,         b){};"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,531,"""var d = function($super,    a){};"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,533,localRenamingOnly = false;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,534,"test(""var $super = 1"", ""var a = 1"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,536,useGoogleCodingConvention = true;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,537,"test(""var x = function($super,duper,$fantastic){};"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,538,"""var y = function($super,duper){};"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,539,"""var c = function($super,   a,    b         ){};"" +"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,540,"""var d = function($super,a){};"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,543,public void testBias() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,544,"nameGenerator = new NameGenerator(new HashSet<String>(0), """", null);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,545,"nameGenerator.favors(""AAAAAAAAHH"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,546,"test(""var x, y"", ""var A, H"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,549,public void testPseudoNames() {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,550,generatePseudoNames = false;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,551,// See http://code.google.com/p/closure-compiler/issues/detail?id=32
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,552,"test(""var foo = function(a, b, c){}"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,553,"""var d = function(a, b, c){}"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,555,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,556,"test(""var foo = function(a, b, c){}"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,557,"""var $foo$$ = function($a$$, $b$$, $c$$){}"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,559,"test(""var a = function(a, b, c){}"","
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,560,"""var $a$$ = function($a$$, $b$$, $c$$){}"");"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,563,"private void testRenameMapUsingOldMap(String input, String expected,"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,564,VariableMap expectedMap) {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,565,previouslyUsedMap = renameVars.getVariableMap();
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,566,"testRenameMap("""", input, expected,  expectedMap);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,569,"private void testRenameMapUsingOldMap(String externs, String input,"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,570,"String expected,"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,571,VariableMap expectedMap) {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,572,previouslyUsedMap = renameVars.getVariableMap();
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,573,"testRenameMap(externs, input, expected,  expectedMap);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,576,"private void testRenameMap(String input, String expected,"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,577,VariableMap expectedRenameMap) {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,578,"testRenameMap("""", input, expected, expectedRenameMap);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,581,"private void testRenameMap(String externs, String input, String expected,"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,582,VariableMap expectedRenameMap) {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,583,"test(externs, input, expected, null, null);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,584,VariableMap renameMap = renameVars.getVariableMap();
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,585,"assertVariableMapsEqual(expectedRenameMap, renameMap);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,588,private VariableMap makeVariableMap(String... keyValPairs) {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,589,Preconditions.checkArgument(keyValPairs.length % 2 == 0);
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,591,"ImmutableMap.Builder<String, String> renameMap = ImmutableMap.builder();"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,592,for (int i = 0; i < keyValPairs.length; i += 2) {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,593,"renameMap.put(keyValPairs[i], keyValPairs[i + 1]);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,596,return new VariableMap(renameMap.build());
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,599,"private static void assertVariableMapsEqual(VariableMap a, VariableMap b) {"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,600,"Map<String, String> ma = a.getOriginalNameToNewNameMap();"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,601,"Map<String, String> mb = b.getOriginalNameToNewNameMap();"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,602,"assertEquals(""VariableMaps not equal"", ma, mb);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,605,private class ClosurePassAndRenameVars implements CompilerPass {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,606,private final Compiler compiler;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,608,private ClosurePassAndRenameVars(Compiler compiler) {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,609,this.compiler = compiler;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,612,@Override
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,613,"public void process(Node externs, Node root) {"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,614,ProcessClosurePrimitives closurePass =
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,615,new ProcessClosurePrimitives(
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,616,"compiler, null, CheckLevel.WARNING);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,617,"closurePass.process(externs, root);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,618,"renameVars = new RenameVars(compiler, prefix,"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,619,"false, false, false, false, previouslyUsedMap, null,"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,620,"closurePass.getExportedVariableNames(), null);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,621,"renameVars.process(externs, root);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,625,private class NormalizePassWrapper implements CompilerPass {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,626,private final Compiler compiler;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,627,private final CompilerPass wrappedPass;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,629,"private NormalizePassWrapper(Compiler compiler,"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,630,CompilerPass wrappedPass) {
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,631,this.compiler = compiler;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,632,this.wrappedPass = wrappedPass;
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,635,@Override
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,636,"public void process(Node externs, Node root) {"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,637,"Normalize normalize = new Normalize(compiler, false);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,638,"normalize.process(externs, root);"
True,test/com/google/javascript/jscomp/RenameVars2Test.java,test/com/google/javascript/jscomp/RenameVars2Test.java,640,"wrappedPass.process(externs, root);"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,2,* Copyright 2011 The Closure Compiler Authors.
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,20,* Unit tests for {@link ShadowVariables2}.
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,24,public class ShadowVariables2Test extends CompilerTestCase{
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,25,// Use pseudo names to make test easier to read.
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,26,private boolean generatePseudoNames = false;
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,27,private RenameVars pass = null;
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,29,@Override
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,30,protected CompilerPass getProcessor(Compiler compiler) {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,31,pass = new RenameVars(
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,32,"compiler, """", false, false,"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,33,"generatePseudoNames, true, null, null, null, null);"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,34,return  pass;
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,37,@Override
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,38,protected int getNumRepetitions() {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,39,return 1;
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,42,@Override
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,43,protected void setUp() throws Exception {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,44,super.setUp();
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,45,generatePseudoNames = false;
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,48,@Override
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,49,protected void tearDown() throws Exception {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,50,super.tearDown();
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,51,pass = null;
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,54,public void testShadowSimple1() {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,55,"test(""function foo(x) { return function (y) {} }"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,56,"""function   b(a) { return function (a) {} }"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,58,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,60,"test(""function  foo  ( x  ) { return function ( y  ) {} }"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,61,"""function $foo$$($x$$) { return function ($x$$) {} }"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,65,public void testShadowSimple2() {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,66,"test(""function foo(x,y) { return function (y,z) {} }"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,67,"""function   c(a,b) { return function (a,b) {} }"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,69,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,71,"test(""function  foo  ( x  , y  ) { return function ( y  , z  ) {} }"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,72,"""function $foo$$($x$$,$y$$) { return function ($x$$,$y$$) {} }"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,76,"* If we have a choice, pick out the most used variable to shadow."
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,78,public void testShadowMostUsedVar() {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,79,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,80,"test(""function  foo  () {var  x  ; var  y  ;  y  ; y  ; y  ; x  ;"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,81,"""  return function ( k  ) {} }"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,83,"""function $foo$$() {var $x$$; var $y$$; $y$$;$y$$;$y$$;$x$$;"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,84,"""  return function ($y$$) {} }"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,87,public void testNoShadowReferencedVariables() {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,88,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,89,"test(""function  f1  () { var  x  ; x  ; x  ; x  ;"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,90,"""  return function  f2  ( y  ) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,91,"""    return function  f3  () { x  } }}"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,92,"""function $f1$$() { var $x$$;$x$$;$x$$;$x$$;"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,93,"""  return function $f2$$($y$$) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,94,"""    return function $f3$$() {$x$$} }}"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,97,public void testNoShadowGlobalVariables() {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,98,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,99,"test(""var  x  ;  x  ; function  foo  () { return function ( y  ) {}}"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,100,"""var $x$$; $x$$; function $foo$$() { return function ($y$$) {}}"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,103,public void testShadowBleedInFunctionName() {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,104,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,105,"test(""function  foo  () { function  b  ( y  ) { y  }  b  ;  b  ;}"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,106,"""function $foo$$() { function $b$$($b$$) {$b$$} $b$$; $b$$;}"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,109,public void testNoShadowLessPopularName() {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,110,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,111,// We make sure that y doesn't pick x as a shadow and remains to be renamed
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,112,// to 'a'.
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,113,// If we do shadow y with whatever x renames to (say b) we will
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,114,// get 4 b's and 7 a's while currently we get 3 b's and 8 a's.
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,115,// I believe this arrangement will always be better for gzipping.
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,116,"test(""function  f1  ( x  ) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,117,"""  function  f2  ( y  ) {}  x  ; x  ;}"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,118,"""function  f3  ( i  ) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,119,"""  var  k  ; var  j  ; j  ; j  ; j  ; j  ; j  ; j  ;}"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,121,"""function $f1$$($x$$) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,122,"""  function $f2$$($y$$) {} $x$$;$x$$;}"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,123,"""function $f3$$($i$$) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,124,"""  var $k$$; var $j$$;$j$$;$j$$;$j$$;$j$$;$j$$;$j$$;}"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,127,public void testShadowFunctionName() {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,128,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,129,"test(""var  g   = function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,130,"""  var  x  ; return function(){function  y  (){}}}"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,131,"""var $g$$ = function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,132,"""  var $x$$; return function(){function $x$$(){}}}"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,135,public void testShadowLotsOfScopes1() {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,136,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,137,"test(""var  g   = function( x  ) { return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,138,""" return function() { var  y   }}}}"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,139,"""var $g$$ = function($x$$) { return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,140,""" return function() { var $x$$ }}}}"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,143,public void testShadowLotsOfScopes2() {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,144,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,145,// 'y' doesn't have a candidate to shadow due to upward referencing.
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,146,"test(""var  g   = function( x  ) { return function( y  ) "" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,147,""" {return function() {return function() {  x   }}}}"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,148,"""var $g$$ = function($x$$) { return function($y$$) "" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,149,""" {return function() {return function() { $x$$ }}}}"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,151,"test(""var  g   = function( x  ) { return function() "" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,152,""" {return function( y  ) {return function() {  x   }}}}"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,153,"""var $g$$ = function($x$$) { return function() "" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,154,""" {return function($y$$) {return function() { $x$$ }}}}"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,156,"test(""var  g   = function( x  ) { return function() "" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,157,""" {return function() {return function( y  ) {  x   }}}}"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,158,"""var $g$$ = function($x$$) { return function() "" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,159,""" {return function() {return function($y$$) { $x$$ }}}}"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,162,public void testShadowLotsOfScopes3() {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,163,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,164,// 'y' doesn't have a candidate to shadow due to upward referencing.
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,165,"test(""var  g   = function( x  ) { return function() "" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,166,""" {return function() {return function() {  x   }; var  y   }}}"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,167,"""var $g$$ = function($x$$) { return function() "" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,168,""" {return function() {return function() { $x$$ }; var $y$$}}}"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,169,"test(""var  g   = function( x  ) { return function() "" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,170,""" {return function() {return function() {  x   }}; var  y   }}"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,171,"""var $g$$ = function($x$$) { return function() "" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,172,""" {return function() {return function() { $x$$ }}; var $y$$}}"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,173,"test(""var  g   = function( x  ) { return function() "" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,174,""" {return function() {return function() {  x   }}}; var  y   }"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,175,"""var $g$$ = function($x$$) { return function() "" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,176,""" {return function() {return function() { $x$$ }}}; var $y$$}"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,179,public void testShadowLotsOfScopes4() {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,180,// Make sure we do get the optimal shadowing scheme where
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,181,"test(""var g = function(x) { return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,182,""" return function(){return function(){};var m};var n};var o}}"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,183,"""var b = function(a) { return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,184,""" return function(){return function(){};var a};var a};var a}}"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,187,public void testShadowLotsOfScopes5() {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,188,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,189,"test(""var  g   = function( x  ) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,190,""" return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,191,""" return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,192,"""      x  }; o  };var  n  };var  o  };var  p  }"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,193,"""var $g$$ = function($x$$) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,194,""" return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,195,""" return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,196,"""     $x$$};$o$$};var $p$$};var $o$$};var $p$$}"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,198,"test(""var  g   = function( x  ) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,199,""" return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,200,""" return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,201,"""      x  }; p  };var  n  };var  o  };var  p  }"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,202,"""var $g$$ = function($x$$) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,203,""" return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,204,""" return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,205,"""     $x$$};$p$$};var $o$$};var $o$$};var $p$$}"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,208,public void testShadowWithShadowAlready() {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,209,"test(""var g = function(x) { return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,210,""" return function(){return function(){x}};var p};var o};var p}"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,211,"""var c = function(b) { return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,212,""" return function(){return function(){b}};var a};var a};var a}"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,214,"test(""var g = function(x) { return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,215,""" return function(){return function(){x};p};var p};var o};var p}"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,216,"""var c = function(b) { return function() { return function() {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,217,""" return function(){return function(){b};a};var a};var a};var a}"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,220,public void testShadowBug1() {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,221,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,222,"test(""function  f  ( x  ) { return function( y  ) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,223,"""    return function( x  ) {  x   +  y  ; }}}"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,224,"""function $f$$($x$$) { return function($y$$) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,225,"""    return function($x$$) { $x$$ + $y$$; }}}"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,228,public void testOptimal() {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,229,// A test for a case that wasn't optimal in a single pass algorithm.
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,230,"test(""function f(x) { function g(y) { function h(x) {}}}"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,231,"""function c(a) { function b(a) { function b(a) {}}}"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,234,public void testSharingAcrossInnerScopes() {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,235,"test(""function f() {var f=function g(){g()}; var x=function y(){y()}}"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,236,"""function c() {var d=function a(){a()}; var e=function b(){b()}}"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,237,"test(""function f(x) { return x ? function(y){} : function(z) {} }"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,238,"""function b(a) { return a ? function(a){} : function(a) {} }"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,241,public void testExportedLocal1() {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,242,"test(""function f(a) { a();a();a(); return function($super){} }"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,243,"""function b(a) { a();a();a(); return function($super){} }"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,246,public void testExportedLocal2() {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,247,"test(""function f($super) { $super();$super(); return function(a){} }"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,248,"""function a($super) { $super();$super(); return function(b){} }"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,251,public void testRenameMapHasNoDuplicates() {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,252,"test(""function foo(x) { return function (y) {} }"","
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,253,"""function   b(a) { return function (a) {} }"");"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,255,VariableMap vm = pass.getVariableMap();
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,256,try {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,257,vm.getNewNameToOriginalNameMap();
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,258,} catch (java.lang.IllegalArgumentException unexpected) {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,259,"fail(""Invalid VariableMap generated: "" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,260,vm.getOriginalNameToNewNameMap().toString());
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,264,public void testBug4172539() {
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,265,"// All the planets must line up. When we look at the 2nd inner function,"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,266,"// y can shadow x, also m can shadow x as well. Now all that is left for"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,267,"// n to shadow is 'y'. Now because y has already shadowed x, the pseudo"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,268,// name maps has already updated y gets $x$$. This mean n will be updated
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,269,"// with ""$x$$"" in the name map which is incorrect. That is the reason"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,270,// why we can't update the pseudo name map on-the-fly.
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,272,generatePseudoNames = true;
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,273,"test(""function f(x) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,274,"""  x;x;x;"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,275,"""  return function (y) { y; x };"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,276,"""  return function (y) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,277,"""    y;"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,278,"""    return function (m, n) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,279,"""       m;m;m;"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,284,"""function $f$$($x$$) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,285,"""  $x$$;$x$$;$x$$;"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,286,"""  return function ($y$$) { $y$$; $x$$ };"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,287,"""  return function ($x$$) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,288,"""    $x$$;"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,289,"""    return function ($x$$, $y$$) {"" +"
True,test/com/google/javascript/jscomp/ShadowVariables2Test.java,test/com/google/javascript/jscomp/ShadowVariables2Test.java,290,"""       $x$$;$x$$;$x$$;"" +"

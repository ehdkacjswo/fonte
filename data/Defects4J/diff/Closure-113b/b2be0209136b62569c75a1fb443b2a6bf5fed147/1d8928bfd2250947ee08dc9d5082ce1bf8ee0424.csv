is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,255,"/ Propagate the template types, if they exist."
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,256,emplateTypeNames = oldType.getTemplateTypeMap().getTemplateKeys();
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,582,/ NOTE: these template type names may override a list
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,583,/ of inherited ones from an overridden function.
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,585,} else {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,586,templateTypeNames = ImmutableList.of();
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,938,rototypeOwnerTypeMap =
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,939,rototypeOwner.getTypeOfThis().getTemplateTypeMap();
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,938,prototypeOwnerTypeMap =
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,939,prototypeOwner.getTypeOfThis().getTemplateTypeMap();
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,620,f (isTemplateType() && that.isTemplateType()) {
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,621,eturn this == that;
True,src/com/google/javascript/rhino/jstype/ModificationVisitor.java,src/com/google/javascript/rhino/jstype/ModificationVisitor.java,129,// TODO(johnlenz): should we support preserving template keys?
False,src/com/google/javascript/rhino/jstype/ModificationVisitor.java,src/com/google/javascript/rhino/jstype/ModificationVisitor.java,133,uilder.withTemplateKeys(type.getTemplateTypeMap().getUnfilledTemplateKeys());
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,330,Override
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,331,ublic String toString() {
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,332,"tring s = """";"
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,334,"nt len = Math.max(Math.max(templateKeys.size(), templateValues.size()),"
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,335,esolvedTemplateValues.size());
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,336," += ""{ "";"
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,337,or (int i = 0; i < len; i++) {
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,338," += ""("";"
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,339," += (i < templateKeys.size()) ? templateKeys.get(i) : """";"
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,340," += "","";"
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,341," += (i < templateValues.size()) ? templateValues.get(i) : """";"
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,342," += "","";"
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,343," += (i < resolvedTemplateValues.size()) ? resolvedTemplateValues.get(i) : """";"
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,344," += "") "";"
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,346," += ""}"";"
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,348,eturn s;
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11981,ublic void testTemplatized6() throws Exception {
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11982,estTypes(
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11983,"/** @interface */ function I(){}\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11984,"/** @param {T} a\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11985," * @return {T}\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11986," * @template T\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11987,"*/\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11988,"I.prototype.method;\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11990,"/** @constructor \n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11991," * @implements {I}\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11992," */ function C(){}\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11993,"/** @override*/ C.prototype.method = function(a) {}\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11995,"/** @type {null} */ var some = new C().method('str');"","
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11996,"initializing variable\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11997,"found   : string\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,11998,"required: null"");"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12001,ublic void testTemplatized7() throws Exception {
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12002,estTypes(
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12003,"/** @interface\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12004," *  @template Q\n "" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12005," */ function I(){}\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12007,"/** @param {T} a\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12008," * @return {T|Q}\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12009," * @template T\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12010,"*/\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12011,"I.prototype.method;\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12013,"/** @constructor \n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12014," * @implements {I.<number>}\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12015," */ function C(){}\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12016,"/** @override*/ C.prototype.method = function(a) {}\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12018,"/** @type {null} */ var some = new C().method('str');"","
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12020,"initializing variable\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12021,"found   : (number|string)\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12022,"required: null"");"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12025,ublic void disable_testTemplatized8() throws Exception {
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12026,/ TODO(johnlenz): this should generate a warning but does not.
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12027,estTypes(
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12028,"/** @interface\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12029," *  @template Q\n "" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12030," */ function I(){}\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12032,"/** @param {T} a\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12033," * @return {T|Q}\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12034," * @template T\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12035,"*/\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12036,"I.prototype.method;\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12038,"/** @constructor \n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12039," *  @implements {I.<R>}\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12040," *  @template R\n "" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12041," */ function C(){}\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12042,"/** @override*/ C.prototype.method = function(a) {}\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12044,"/** @type {C.<number>} var x = new C();"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12045,"/** @type {null} */ var some = x.method('str');"","
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12047,"initializing variable\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12048,"found   : (number|string)\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12049,"required: null"");"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12052,ublic void testTemplatized9() throws Exception {
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12053,estTypes(
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12054,"/** @interface\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12055," *  @template Q\n "" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12056," */ function I(){}\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12058,"/** @param {T} a\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12059," * @return {T|Q}\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12060," * @template T\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12061,"*/\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12062,"I.prototype.method;\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12064,"/** @constructor \n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12065," *  @param {R} a\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12066," *  @implements {I.<R>}\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12067," *  @template R\n "" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12068," */ function C(a){}\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12069,"/** @override*/ C.prototype.method = function(a) {}\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12071,"/** @type {null} */ var some = new C(1).method('str');"","
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12073,"initializing variable\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12074,"found   : (number|string)\n"" +"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,12075,"required: null"");"

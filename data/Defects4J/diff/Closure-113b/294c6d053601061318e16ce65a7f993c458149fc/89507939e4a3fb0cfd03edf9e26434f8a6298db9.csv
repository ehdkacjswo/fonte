is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,119,/ All commutative operators are also associative
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,123,/ Transform a * (b * c) to a * b * c
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,122,Node parent = n.getParent();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,131,".getParent().replaceChild(n, newRoot);"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,130,"parent.replaceChild(n, newRoot);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,134, else if (NodeUtil.isCommutative(n.getType()) &&
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,135,NodeUtil.mayHaveSideEffects(n)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,136,/ Transform a * (b / c) to b / c * a
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,137,ode lhs = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,138,nt precedence = NodeUtil.precedence(n.getType());
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,139,nt lhsPrecedence = NodeUtil.precedence(lhs.getType());
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,140,nt rhsPrecedence = NodeUtil.precedence(rhs.getType());
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,141,f (rhsPrecedence == precedence &&
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,142,lhs.getType() == n.getType() || lhsPrecedence != precedence)) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,143,.removeChild(rhs);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,144,.addChildToFront(rhs);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,145,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,146,eturn n;
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,37,nt type = subtree.getType();
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,38,nt leftType = subtree.getFirstChild().getType();
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,39,f (type != leftType
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,40,& NodeUtil.precedence(type) == NodeUtil.precedence(leftType)) {
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,41,/ then flipping would add parens
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,42,eturn subtree;
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,458,ublic void testRotateAssociativeOperators() {
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,459,"est(""a || (b || c); a * (b * c); a | (b | c)"","
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,460,"(a || b) || c; (a * b) * c; (a | b) | c"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,461,"estSame(""a % (b % c); a / (b / c); a - (b - c);"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,462,"est(""a * (b % c);"", ""b % c * a"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,463,"est(""(a * b) * (c / d)"", ""c / d * (a * b)"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,464,"est(""c / d * (a * b)"", ""c / d * a * b"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,465,"est(""(a + b) * (c % d)"", ""c % d * (a + b)"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,466,"estSame(""(a / b) * (c % d)"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,467,"estSame(""(c = 5) * (c % d)"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,458,public void testAssocitivity() {
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,459,"test(""var a,b,c; a || (b || c); a * (b * c); a | (b | c)"","
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,460,"""var a,b,c; (a || b) || c; (a * b) * c; (a | b) | c"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,461,"testSame(""var a,b,c; a % (b % c); a / (b / c); a - (b - c);"");"

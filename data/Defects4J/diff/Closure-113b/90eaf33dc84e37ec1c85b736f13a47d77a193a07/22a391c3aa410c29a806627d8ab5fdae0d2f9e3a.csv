is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,183,"ompiler.getCodingConvention(), path, -1, -1);"
True,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,183,"compiler.getCodingConvention(), path);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,39,mport java.util.List;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2268,"** Creates function name(params_0, ..., params_n) { body }. */"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2269,"ublic static Node newFunctionNode(String name, List<Node> params,"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2270,"ode body, int lineno, int charno) {"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2271,"ode parameterParen = new Node(Token.PARAM_LIST, lineno, charno);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2272,or (Node param : params) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2273,arameterParen.addChildToBack(param);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2275,"ode function = new Node(Token.FUNCTION, lineno, charno);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2276,unction.addChildrenToBack(
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2277,"ode.newString(Token.NAME, name, lineno, charno));"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2278,unction.addChildToBack(parameterParen);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2279,unction.addChildToBack(body);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2280,eturn function;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2287, @param lineno The source line offset.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2288, @param charno The source character offset from start of the line.
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2292,"odingConvention convention, String name, int lineno, int charno) {"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2274,"CodingConvention convention, String name) {"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2295,"eturn newName(convention, name, lineno, charno);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2277,"return newName(convention, name);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2297,ode node = newName(
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2298,"onvention, name.substring(0, endPos), lineno, charno);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2279,"Node node = newName(convention, name.substring(0, endPos));"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2306,"ode propNode = Node.newString(part, lineno, charno);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2287,Node propNode = IR.string(part);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2310,"ode = new Node(Token.GETPROP, node, propNode, lineno, charno);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2291,"node = IR.getprop(node, propNode);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2332,"ode node = newQualifiedNameNode(convention, name, -1, -1);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2313,"Node node = newQualifiedNameNode(convention, name);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2365,"odingConvention convention, String name, int lineno, int charno) {"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2366,"ode nameNode = Node.newString(Token.NAME, name, lineno, charno);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2346,"CodingConvention convention, String name) {"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2347,Node nameNode = IR.name(name);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2378, @param basisNode The node that represents the name as currently found in
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2359,* @param srcref The node that represents the name as currently found in
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2383,tatic Node newName(
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2384,"odingConvention convention, String name, Node basisNode) {"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2385,ode nameNode = IR.name(name);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2386,f (convention.isConstantKey(name)) {
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2387,"ameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2389,ameNode.copyInformationFrom(basisNode);
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2390,eturn nameNode;
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2364,"static Node newName(CodingConvention convention, String name, Node srcref) {"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2365,"return newName(convention, name).srcref(srcref);"
False,src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java,src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java,135,"ompiler.getCodingConvention().getGlobalObject(),"
False,src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java,src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java,136,"irstArgument.getLineno(), firstArgument.getCharno());"
True,src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java,src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java,135,compiler.getCodingConvention().getGlobalObject())
True,src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java,src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java,136,.srcrefTree(firstArgument);
False,src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java,src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java,140,"irstArgument.getNext().getString(),"
False,src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java,src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java,141,"econdArgument.getLineno(), secondArgument.getCharno());"
True,src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java,src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java,141,firstArgument.getNext().getString())
True,src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java,src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java,142,.srcrefTree(secondArgument);
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,156,"ompiler.getCodingConvention(), className, -1, -1);"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,156,"compiler.getCodingConvention(), className);"
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,378,"ompiler.getCodingConvention(), ""jscomp.typecheck."" + prop, -1, -1);"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,378,"compiler.getCodingConvention(), ""jscomp.typecheck."" + prop);"
True,src/com/google/javascript/rhino/IR.java,src/com/google/javascript/rhino/IR.java,43,import java.util.List;
False,src/com/google/javascript/rhino/IR.java,src/com/google/javascript/rhino/IR.java,72,ode paramList = new Node(Token.PARAM_LIST);
True,src/com/google/javascript/rhino/IR.java,src/com/google/javascript/rhino/IR.java,74,Node paramList = paramList();
True,src/com/google/javascript/rhino/IR.java,src/com/google/javascript/rhino/IR.java,75,for (Node param : params) {
True,src/com/google/javascript/rhino/IR.java,src/com/google/javascript/rhino/IR.java,76,Preconditions.checkState(param.isName());
True,src/com/google/javascript/rhino/IR.java,src/com/google/javascript/rhino/IR.java,77,paramList.addChildToBack(param);
True,src/com/google/javascript/rhino/IR.java,src/com/google/javascript/rhino/IR.java,79,return paramList;
True,src/com/google/javascript/rhino/IR.java,src/com/google/javascript/rhino/IR.java,82,public static Node paramList(List<Node> params) {
True,src/com/google/javascript/rhino/IR.java,src/com/google/javascript/rhino/IR.java,83,Node paramList = paramList();
True,src/com/google/javascript/rhino/IR.java,src/com/google/javascript/rhino/IR.java,421,public static Node thisNode() {
True,src/com/google/javascript/rhino/IR.java,src/com/google/javascript/rhino/IR.java,422,return new Node(Token.THIS);
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,22,mport com.google.common.collect.Lists;
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,32,mport java.util.List;
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,557,ublic void testNewFunctionNode() {
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,558,"ode expected = parse(""function foo(p1, p2, p3) { throw 2; }"");"
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,559,"ode body = new Node(Token.BLOCK, new Node(Token.THROW, Node.newNumber(2)));"
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,560,"ist<Node> params = Lists.newArrayList(Node.newString(Token.NAME, ""p1""),"
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,561,"ode.newString(Token.NAME, ""p2""),"
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,562,"ode.newString(Token.NAME, ""p3""));"
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,563,ode function = NodeUtil.newFunctionNode(
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,564,"foo"", params, body, -1, -1);"
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,565,ode actual = new Node(Token.SCRIPT);
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,566,ctual.setIsSyntheticBlock(true);
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,567,ctual.addChildToFront(function);
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,568,tring difference = expected.checkTreeEquals(actual);
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,569,f (difference != null) {
False,test/com/google/javascript/jscomp/NodeUtilTest.java,test/com/google/javascript/jscomp/NodeUtilTest.java,570,"ssertTrue(""Nodes do not match:\n"" + difference, false);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,213,"ode parameterName = Node.newString(Token.NAME, ""t"");"
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,213,"Node parameterName = Node.newString(Token.NAME, ""jscomp_throw_param"");"
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,52,* A change handler that throws an exception if any changes are made.
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,54,static final class ForbiddenChange implements CodeChangeHandler {
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,55,public void reportChange() {
True,src/com/google/javascript/jscomp/CodeChangeHandler.java,src/com/google/javascript/jscomp/CodeChangeHandler.java,56,"throw new IllegalStateException(""Code changes forbidden"");"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,316,f (!options.replaceStringsFunctionDescriptions.isEmpty()) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,317,asses.add(replaceStrings);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,380,// ReplaceStrings needs the strings literals to be at in CALL to
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,381,// replace them so do this after constants have been inlined.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,382,if (!options.replaceStringsFunctionDescriptions.isEmpty()) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,383,passes.add(replaceStrings);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1633,* Mark the point at which the normalized AST assumptions no longer hold.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1635,private final PassFactory markUnnormalized =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1636,"new PassFactory(""markUnnormalized"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1637,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1638,protected CompilerPass createInternal(final AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1639,return new CompilerPass() {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1640,"@Override public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1641,compiler.setUnnormalized();
False,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,53,his.rootRenamer = new ContextualRenamer();
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,53,this(new ContextualRenamer());
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,546,* For injecting boilerplate libraries. Leaves global names alone
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,547,* and renames local names like InlineRenamer.
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,549,static class BoilerplateRenamer extends ContextualRenamer {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,550,private final Supplier<String> uniqueIdSupplier;
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,551,private final String idPrefix;
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,553,BoilerplateRenamer(
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,554,"Supplier<String> uniqueIdSupplier,"
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,555,String idPrefix) {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,556,this.uniqueIdSupplier = uniqueIdSupplier;
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,557,this.idPrefix = idPrefix;
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,560,@Override
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,561,public Renamer forChildScope() {
True,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java,562,"return new InlineRenamer(uniqueIdSupplier, idPrefix, false);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,21,import com.google.javascript.jscomp.MakeDeclaredNamesUnique.BoilerplateRenamer;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,82,static Node parseAndNormalizeSyntheticCode(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,83,"AbstractCompiler compiler, String code, String prefix) {"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,84,Node js = compiler.parseSyntheticCode(code);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,85,"NodeTraversal.traverse(compiler, js,"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,86,"new Normalize.NormalizeStatements(compiler, false));"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,87,NodeTraversal.traverse(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,88,"compiler, js,"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,89,new MakeDeclaredNamesUnique(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,90,new BoilerplateRenamer(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,91,"compiler.getUniqueNameIdSupplier(),"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,92,prefix)));
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,93,return js;
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,2,* Copyright 2010 Google Inc.
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,20,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,21,import com.google.javascript.rhino.Token;
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,22,import com.google.javascript.rhino.jstype.JSType;
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,25,* Performs type-aware peephole optimizations.
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,27,* These peephole optimizations are in their own class because
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,28,* type information may not always be available (such as during pre-processing)
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,29,* or may not be turned on.
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,31,* Currently only Token.TYPEOF is folded -- in the future it may be possible to
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,32,* fold Token.INSTANCEOF as well. Another possibility is folding when
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,33,"* non-nullable objects are used in boolean logic, such as:"
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,34,"* ""if (x) {"" or ""(!x) ? a : b"" or ""x && foo()"""
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,36,* TODO(dcc): Support folding Token.INSTANCEOF and non-nullable objects
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,37,* in boolean logic.
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,39,* @author dcc@google.com (Devin Coughlin)
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,41,public class PeepholeFoldWithTypes extends AbstractPeepholeOptimization {
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,43,@Override
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,44,Node optimizeSubtree(Node subtree) {
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,45,switch (subtree.getType()) {
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,46,case Token.TYPEOF:
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,47,return tryFoldTypeof(subtree);
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,48,default:
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,49,return subtree;
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,54,"* Folds ""typeof expression"" based on the JSType of ""expression"" if the"
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,55,* expression  has no side effects.
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,57,"* <p>E.g.,"
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,58,* <pre>
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,59,* var x = 6;
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,60,"* if (typeof(x) == ""number"") {"
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,62,* </pre>
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,63,* folds to
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,64,* <pre>
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,65,* var x = 6;
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,66,"* if (""number"" == ""number"") {"
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,68,* </pre>
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,70,* <p>This method doesn't fold literal values -- we leave that to
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,71,* PeepholeFoldConstants.
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,73,private Node tryFoldTypeof(Node typeofNode) {
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,74,Preconditions.checkArgument(typeofNode.getType() == Token.TYPEOF);
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,75,Preconditions.checkArgument(typeofNode.getFirstChild() != null);
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,77,Node argumentNode = typeofNode.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,79,// We'll let PeepholeFoldConstants handle folding literals
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,80,// and we can't remove arguments with possible side effects.
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,81,if (!NodeUtil.isLiteralValue(argumentNode) &&
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,82,!NodeUtil.mayHaveSideEffects(argumentNode)) {
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,83,JSType argumentType = argumentNode.getJSType();
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,85,String typeName = null;
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,87,if (argumentType != null) {
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,88,"// typeof null is ""object"" in JavaScript"
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,89,if (argumentType.isObject() || argumentType.isNullType()) {
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,90,"typeName = ""object"";"
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,91,} else if (argumentType.isStringValueType()) {
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,92,"typeName = ""string"";"
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,93,} else if (argumentType.isNumberValueType()) {
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,94,"typeName = ""number"";"
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,95,} else if (argumentType.isBooleanValueType()) {
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,96,"typeName = ""boolean"";"
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,97,} else if (argumentType.isVoidType()) {
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,98,"typeName = ""undefined"";"
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,99,} else if (argumentType.isUnionType()) {
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,100,"// TODO(dcc): We don't handle union types, for now,"
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,101,"// but could support, say, unions of different object types"
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,102,// in the future.
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,103,typeName = null;
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,106,if (typeName != null) {
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,107,Node newNode = Node.newString(typeName);
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,108,"typeofNode.getParent().replaceChild(typeofNode, newNode);"
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,109,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,111,return newNode;
True,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java,115,return typeofNode;
False,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,188,SType type = lhs.getJSType().restrictByNotNullOrUndefined();
False,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,189,"onfig config = findMatchingClass(type, classes);"
False,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,190,f (config != null) {
False,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,191,"oSubstitutions(t, config, n);"
False,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,192,eturn;
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,188,if (lhs.getJSType() != null) {
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,189,JSType type = lhs.getJSType().restrictByNotNullOrUndefined();
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,190,"Config config = findMatchingClass(type, classes);"
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,191,if (config != null) {
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,192,"doSubstitutions(t, config, n);"
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,193,return;
False,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,440,"reconditions.checkState(param.isEmpty(), ""Unknown marker"");"
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,442,// TODO(johnlenz): report an error.
True,src/com/google/javascript/jscomp/ReplaceStrings.java,src/com/google/javascript/jscomp/ReplaceStrings.java,443,"Preconditions.checkState(param.isEmpty(), ""Unknown marker"", param);"
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,370,tring boilerplateCode = getBoilerplateCode(logFunction);
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,372,ode js = compiler.parseSyntheticCode(boilerplateCode);
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,373,"odeTraversal.traverse(compiler, js,"
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,374,"ew Normalize.NormalizeStatements(compiler, false));"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,370,"Node js = getBoilerplateCode(compiler, logFunction);"
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,387,tatic String getBoilerplateCode(@Nullable String logFunction) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,381,static Node getBoilerplateCode(
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,382,"AbstractCompiler compiler, @Nullable String logFunction) {"
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,400,eturn boilerplateCode;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,395,return Normalize.parseAndNormalizeSyntheticCode(
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,396,"compiler, boilerplateCode, ""jscomp_runtimeTypeCheck_"");"
False,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,42,"Actual\n{1}"");"
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,42,"""Actual:\n{1}"");"
False,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,74,eturn null;
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,75,"// Throw an exception, so that the infrastructure will tell us"
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,76,// which pass violated the sanity check.
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,77,"throw new IllegalStateException(""Sanity Check failed"");"
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,86,"// Throw an exception, so that the infrastructure will tell us"
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,87,// which pass violated the sanity check.
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,88,"throw new IllegalStateException(""Sanity Check failed"");"
False,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,93,odeChangeHandler.RecentChange handler =
False,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,94,ew CodeChangeHandler.RecentChange();
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,100,CodeChangeHandler handler =
True,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,101,new CodeChangeHandler.ForbiddenChange();
False,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,101,"reconditions.checkState(!handler.hasCodeChanged(),"
False,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,102,"This should never fire, NodeTypeNormalizer should assert first."");"
False,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,106,"reconditions.checkState(!handler.hasCodeChanged(),"
False,src/com/google/javascript/jscomp/SanityCheck.java,src/com/google/javascript/jscomp/SanityCheck.java,107,"This should never fire, Normalize should assert first."");"
True,test/com/google/javascript/jscomp/AliasKeywordsTest.java,test/com/google/javascript/jscomp/AliasKeywordsTest.java,38,super.enableNormalize();
False,test/com/google/javascript/jscomp/AliasKeywordsTest.java,test/com/google/javascript/jscomp/AliasKeywordsTest.java,88,"b.append(""(t){throw t;}"");"
True,test/com/google/javascript/jscomp/AliasKeywordsTest.java,test/com/google/javascript/jscomp/AliasKeywordsTest.java,89,"sb.append(""(jscomp_throw_param){throw jscomp_throw_param;}"");"
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,700,"ormalize normalize = new Normalize(compiler, false);"
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,701,"ormalize.process(externsRoot, mainRoot);"
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,702,ompiler.setNormalized();
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,700,"normalizeActualCode(compiler, externsRoot, mainRoot);"
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,779,"ormalize normalize = new Normalize(compiler, false);"
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,780,"ormalize.process(externsRootClone, mainRootClone);"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,777,"normalizeActualCode(compiler, externsRootClone, mainRootClone);"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,848,private void normalizeActualCode(
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,849,"Compiler compiler, Node externsRoot, Node mainRoot) {"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,850,"Normalize normalize = new Normalize(compiler, false);"
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,851,"normalize.process(externsRoot, mainRoot);"
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,854,rivate Node parseExpectedJs(String[] expected) {
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,857,Node parseExpectedJs(String[] expected) {
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,870,ompiler.setNormalized();
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,19,import com.google.common.collect.Lists;
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,350,public void testNormalizeSyntheticCode() {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,351,Compiler compiler = new Compiler();
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,352,compiler.init(
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,353,"Lists.<JSSourceFile>newArrayList(),"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,354,"Lists.<JSSourceFile>newArrayList(), new CompilerOptions());"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,355,Node code = Normalize.parseAndNormalizeSyntheticCode(
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,356,"compiler, ""function f(x) {} function g(x) {}"", ""prefix_"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,357,assertEquals(
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,358,"""function f(x$$prefix_0){}function g(x$$prefix_1){}"","
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,359,compiler.toSource(code));
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,2,* Copyright 2010 Google Inc.
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,20,* Tests for {@link ExternExportsPass}.
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,22,* @author dcc@google.com (Devin Coughlin)
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,24,public class PeepholeFoldWithTypesTest extends CompilerTestCase {
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,26,@Override
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,27,protected CompilerPass getProcessor(Compiler compiler) {
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,28,"return new PeepholeOptimizationsPass(compiler, new PeepholeFoldWithTypes());"
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,31,@Override
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,32,public void setUp() {
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,33,enableTypeCheck(CheckLevel.WARNING);
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,36,public void testFoldTypeofObject() {
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,37,"test(""var x = {};typeof x"","
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,38,"""var x = {};\""object\"""");"
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,40,"test(""var x = [];typeof x"","
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,41,"""var x = [];\""object\"""");"
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,43,"// typeof null is ""object"" in JavaScript"
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,44,"test(""var x = null;typeof x"","
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,45,"""var x = null;\""object\"""");"
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,48,public void testFoldTypeofString() {
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,49,"test(""var x = \""foo\"";typeof x"","
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,50,"""var x = \""foo\"";\""string\"""");"
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,52,"test(""var x = new String(\""foo\"");typeof x"","
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,53,"""var x = new String(\""foo\"");\""object\"""");"
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,56,public void testFoldTypeofNumber() {
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,57,"test(""var x = 10;typeof x"","
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,58,"""var x = 10;\""number\"""");"
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,60,"test(""var x = new Number(6);typeof x"","
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,61,"""var x = new Number(6);\""object\"""");"
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,64,public void testFoldTypeofBoolean() {
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,65,"test(""var x = false;typeof x"","
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,66,"""var x = false;\""boolean\"""");"
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,68,"test(""var x = new Boolean(true);typeof x"","
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,69,"""var x = new Boolean(true);\""object\"""");"
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,72,public void testFoldTypeofUndefined() {
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,73,"test(""var x = undefined;typeof x"","
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,74,"""var x = undefined;\""undefined\"""");"
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,77,public void testDontFoldTypeofUnionTypes() {
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,78,// For now we don't do anything with union types
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,79,"testSame(""var x = (unknown ? {} : null);typeof x"");"
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,82,public void testDontFoldTypeofSideEffects() {
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,83,// Shouldn't fold if argument to typeof has side effects
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,84,"testSame(""var x = 6 ;typeof (x++)"");"
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,87,public void testDontFoldTypeofWithTypeCheckDisabled() {
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,88,disableTypeCheck();
True,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,test/com/google/javascript/jscomp/PeepholeFoldWithTypesTest.java,89,"testSame(""var x = {};typeof x"");"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,19,import com.google.common.collect.Lists;
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,30,private Node runtimeTypeCheckCode = null;
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,39,enableNormalize();
False,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,113,nableNormalize(false);
False,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,223,tring boilerplateCode = RuntimeTypeCheck.getBoilerplateCode(null);
False,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,225,"ompiler.init(new JSSourceFile[0], new JSSourceFile[0],"
False,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,226,ew CompilerOptions());
False,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,227,ode ast = compiler.parseSyntheticCode(boilerplateCode + expected);
False,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,228,"odeTraversal.traverse(compiler, ast,"
False,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,229,"ew Normalize.NormalizeStatements(compiler, false));"
False,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,231,"est(js, compiler.toSource(ast));"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,227,"compiler.init(Lists.<JSSourceFile>newArrayList(),"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,228,"Lists.<JSSourceFile>newArrayList(),"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,229,new CompilerOptions());
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,230,Node boilerplateCode =
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,231,"RuntimeTypeCheck.getBoilerplateCode(compiler, null);"
True,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,232,"test(js, compiler.toSource(boilerplateCode) + "";"" + expected);"

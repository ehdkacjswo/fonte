is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,503,** Serialized input variable renaming map. */
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,503,/** Input anonymous function renaming map. */
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,504,VariableMap inputAnonymousFunctionNamingMap;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,506,/** Input variable renaming map. */
False,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,506,** Serialized input property renaming map. */
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,509,/** Input property renaming map. */
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1769,public void setInputAnonymousFunctionNamingMap(VariableMap inputMap) {
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,1770,this.inputAnonymousFunctionNamingMap = inputMap;
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1953,ew NameAnonymousFunctionsMapped(compiler);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1953,new NameAnonymousFunctionsMapped(
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1954,"compiler, options.inputAnonymousFunctionNamingMap);"
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,53,private final VariableMap previousMap;
False,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,58,ameAnonymousFunctionsMapped(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,59,NameAnonymousFunctionsMapped(
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,60,"AbstractCompiler compiler, VariableMap previousMap) {"
False,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,60,ameGenerator = new NameGenerator(
False,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,61,"ollections.<String>emptySet(), PREFIX_STRING, null);"
False,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,62,enameMap = Maps.newHashMap();
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,62,Set<String> reserved =
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,63,previousMap != null ?
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,64,previousMap.getNewNameToOriginalNameMap().keySet() :
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,65,Collections.<String>emptySet();
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,66,"this.nameGenerator = new NameGenerator(reserved, PREFIX_STRING, null);"
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,67,this.previousMap = previousMap;
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,68,this.renameMap = Maps.newHashMap();
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,108,String newName = getAlternateName(name);
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,109,fnNameNode.setString(newName);
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,110,namedCount++;
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,111,bytesUsed += newName.length();
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,114,String getAlternateName(String name) {
False,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,104,ewName = nameGenerator.generateNextName();
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,117,"// Use the previously used name, if possible."
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,118,if (previousMap != null) {
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,119,newName = previousMap.lookupNewName(name);
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,121,if (newName == null) {
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,122,// otherwise generate a new name.
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,123,newName = nameGenerator.generateNextName();
False,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,107,nNameNode.setString(newName);
False,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,108,amedCount++;
False,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,109,ytesUsed += newName.length();
True,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java,127,return newName;
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,1933,// remove cast check here.
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,453,// validate cast here
True,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,19,import com.google.common.collect.ImmutableMap;
True,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,29,private VariableMap previous;
True,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,40,@Override
True,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,41,protected void setUp() throws Exception {
True,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,42,super.setUp();
True,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,43,previous = null;
False,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,39,eturn pass = new NameAnonymousFunctionsMapped(compiler);
True,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,48,"return pass = new NameAnonymousFunctionsMapped(compiler, previous);"
False,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,53,ublic void testSimpleVarAssignment() {
True,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,62,public void testSimpleVarAssignment1() {
True,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,68,public void testSimpleVarAssignment2() {
True,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,69,"previous = VariableMap.fromMap(ImmutableMap.<String,String>of("
True,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,70,"""a"", ""previous""));"
True,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,72,"test(""var a = function() { return 1; }"","
True,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,73,"""var a = function previous() { return 1; }"");"
True,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,75,"assertMapping(""previous"", ""a"");"
True,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,78,public void testSimpleVarAssignment3() {
True,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,79,"previous = VariableMap.fromMap(ImmutableMap.<String,String>of("
True,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,80,"""unused"", ""$""));"
True,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,82,"test(""var fn = function() { return 1; }"","
True,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,83,"""var fn = function $a() { return 1; }"");"
True,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java,85,"assertMapping(""$a"", ""fn"");"

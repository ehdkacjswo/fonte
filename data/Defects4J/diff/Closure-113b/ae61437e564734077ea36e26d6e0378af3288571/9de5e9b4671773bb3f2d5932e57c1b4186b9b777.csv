is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,518,reconditions.checkContentsNotNull(out);
True,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,518,Preconditions.checkNotNull(out);
True,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,519,for (L item : out) {
True,src/com/google/javascript/jscomp/DataFlowAnalysis.java,src/com/google/javascript/jscomp/DataFlowAnalysis.java,520,Preconditions.checkNotNull(item);
True,src/com/google/javascript/jscomp/RecordFunctionInformation.java,src/com/google/javascript/jscomp/RecordFunctionInformation.java,18,import com.google.common.collect.Iterables;
True,src/com/google/javascript/jscomp/RecordFunctionInformation.java,src/com/google/javascript/jscomp/RecordFunctionInformation.java,25,import java.util.TreeSet;
False,src/com/google/javascript/jscomp/RecordFunctionInformation.java,src/com/google/javascript/jscomp/RecordFunctionInformation.java,71,or (JSModule m : Sets.newTreeSet(new Comparator<JSModule>() {
False,src/com/google/javascript/jscomp/RecordFunctionInformation.java,src/com/google/javascript/jscomp/RecordFunctionInformation.java,72,"ublic int compare(JSModule o1, JSModule o2) {"
False,src/com/google/javascript/jscomp/RecordFunctionInformation.java,src/com/google/javascript/jscomp/RecordFunctionInformation.java,73,eturn o1.getName().compareTo(o2.getName());
False,src/com/google/javascript/jscomp/RecordFunctionInformation.java,src/com/google/javascript/jscomp/RecordFunctionInformation.java,75,", moduleGraph.getAllModules())) {"
True,src/com/google/javascript/jscomp/RecordFunctionInformation.java,src/com/google/javascript/jscomp/RecordFunctionInformation.java,73,TreeSet<JSModule> modules = Sets.newTreeSet(new Comparator<JSModule>() {
True,src/com/google/javascript/jscomp/RecordFunctionInformation.java,src/com/google/javascript/jscomp/RecordFunctionInformation.java,74,"public int compare(JSModule o1, JSModule o2) {"
True,src/com/google/javascript/jscomp/RecordFunctionInformation.java,src/com/google/javascript/jscomp/RecordFunctionInformation.java,75,return o1.getName().compareTo(o2.getName());
True,src/com/google/javascript/jscomp/RecordFunctionInformation.java,src/com/google/javascript/jscomp/RecordFunctionInformation.java,78,"Iterables.addAll(modules, moduleGraph.getAllModules());"
True,src/com/google/javascript/jscomp/RecordFunctionInformation.java,src/com/google/javascript/jscomp/RecordFunctionInformation.java,79,for (JSModule m : modules) {
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,19,mport com.google.javascript.rhino.Node;
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,20,mport com.google.javascript.rhino.Token;
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,21,mport com.google.javascript.rhino.jstype.JSType;
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,22,mport com.google.javascript.rhino.jstype.FunctionType;
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,23,mport com.google.javascript.rhino.jstype.ObjectType;
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,24,mport com.google.javascript.rhino.jstype.UnionType;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,22,import com.google.common.collect.Iterables;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,25,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,26,import com.google.javascript.rhino.Token;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,27,import com.google.javascript.rhino.jstype.FunctionType;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,28,import com.google.javascript.rhino.jstype.JSType;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,29,import com.google.javascript.rhino.jstype.ObjectType;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,30,import com.google.javascript.rhino.jstype.UnionType;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,34,import java.util.Collection;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,36,import java.util.TreeSet;
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,128,or (ObjectType interfaceType :
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,129,"ets.newTreeSet(ALPHA, funType.getAllImplementedInterfaces())) {"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,131,TreeSet<ObjectType> stuff = Sets.newTreeSet(ALPHA);
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,132,"Iterables.addAll(stuff, funType.getAllImplementedInterfaces());"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,133,for (ObjectType interfaceType : stuff) {
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,303,terable<JSType> alternates = type.isUnionType()
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,304," Sets.newTreeSet(ALPHA, ((UnionType) type).getAlternates())"
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,305, ImmutableList.of(type);
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,307,Collection<JSType> alternates;
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,308,if (type.isUnionType()) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,309,alternates = Sets.newTreeSet(ALPHA);
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,310,"Iterables.addAll(alternates, ((UnionType)type).getAlternates());"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,311,} else {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,312,alternates = ImmutableList.of(type);

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,62, @param parameterName potentially optional parameter name
True,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,62,* @param parameter The parameter's node.
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,66,ublic boolean isOptionalParameter(String parameterName);
True,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,66,public boolean isOptionalParameter(Node parameter);
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,73," @param parameter The parameter's node, or null if none."
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,74," @param name The name, in case we don't have a node."
True,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,73,* @param parameter The parameter's node.
False,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,78,"ublic boolean isVarArgsParameter(Node parameter, String name);"
True,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,77,public boolean isVarArgsParameter(Node parameter);
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,85,f (convention.isOptionalParameter(argName) ||
True,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,85,if (convention.isOptionalParameter(arg) ||
False,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,89,"f (convention.isVarArgsParameter(arg, argName) ||"
True,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,src/com/google/javascript/jscomp/CodingConventionAnnotator.java,89,if (convention.isVarArgsParameter(arg) ||
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,46,ublic boolean isOptionalParameter(String parameterName) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,47,eturn true; // be as lax as possible
True,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,46,public boolean isOptionalParameter(Node parameter) {
True,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,47,"// be as lax as possible, but this must be mutually exclusive from"
True,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,48,// var_args parameters.
True,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,49,return !isVarArgsParameter(parameter);
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,51,"ublic boolean isVarArgsParameter(Node parameter, String name) {"
True,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,53,public boolean isVarArgsParameter(Node parameter) {
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,53,eturn parameter != null &&
False,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,54,arameter.getParent().getLastChild() == parameter;
True,src/com/google/javascript/jscomp/DefaultCodingConvention.java,src/com/google/javascript/jscomp/DefaultCodingConvention.java,55,return parameter.getParent().getLastChild() == parameter;
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,23,mport javax.annotation.Nullable;
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,25,mport com.google.common.collect.ImmutableList;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,29,import com.google.javascript.rhino.Token;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,41,import javax.annotation.Nullable;
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,179,tring name = currentParam.getString();
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,184,"odingConvention.isOptionalParameter(name),"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,185,"odingConvention.isVarArgsParameter(currentParam, name));"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,183,"codingConvention.isOptionalParameter(currentParam),"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,184,codingConvention.isVarArgsParameter(currentParam));
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,312, Infer the parameter types from the list of arguments in the AST.
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,314,"unctionTypeBuilder inferParameterTypes(Node argsParent,"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,315,Nullable JSDocInfo info) {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,316,f (argsParent == null) {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,317,eturn inferParameterTypes(info);
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,320,ist<String> argsList = ImmutableList.of();
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,321,f (argsParent.getFirstChild() != null) {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,322,rgsList = Lists.newArrayList();
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,323,or (Node n : argsParent.children()) {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,324,rgsList.add(n.getString());
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,328,"eturn inferParameterTypes(argsList, info);"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,335,"eturn inferParameterTypes(info.getParameterNames(), info);"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,314,// Create a fake args parent.
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,315,Node lp = new Node(Token.LP);
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,316,for (String name : info.getParameterNames()) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,317,"lp.addChildToBack(Node.newString(Token.NAME, name));"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,320,"return inferParameterTypes(lp, info);"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,342,"rivate FunctionTypeBuilder inferParameterTypes(Iterable<String> argList,"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,327,"FunctionTypeBuilder inferParameterTypes(@Nullable Node argsParent,"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,329,if (argsParent == null) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,330,if (info == null) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,331,return this;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,332,} else {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,333,return inferParameterTypes(info);
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,351,or (String argumentName : argList) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,344,for (Node arg : argsParent.children()) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,345,String argumentName = arg.getString();
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,368,"sOptionalParameter(argumentName, info),"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,369,"sVarArgsParameter(argumentName, info));"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,362,"isOptionalParameter(arg, info),"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,363,"isVarArgsParameter(arg, info));"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,377,"f (!isVarArgsParameter(inexistentName, info)) {"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,378,"eportWarning(INEXISTANT_PARAM, inexistentName, fnName);"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,371,"reportWarning(INEXISTANT_PARAM, inexistentName, fnName);"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,390,"tring paramName, @Nullable JSDocInfo info) {"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,391,f (codingConvention.isOptionalParameter(paramName)) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,382,"Node param, @Nullable JSDocInfo info) {"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,383,if (codingConvention.isOptionalParameter(param)) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,387,String paramName = param.getString();
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,400, Determine whether this is a var args parameter from just the name and
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,401," annotation. This is the case where we have a stub declaration, with"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,402, no function literal.
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,393,* Determine whether this is a var args parameter.
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,406,"tring paramName, @Nullable JSDocInfo info) {"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,407,"f (codingConvention.isVarArgsParameter(null, paramName)) {"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,397,"Node param, @Nullable JSDocInfo info) {"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,398,if (codingConvention.isVarArgsParameter(param)) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,402,String paramName = param.getString();
False,src/com/google/javascript/jscomp/GoogleCodingConvention.java,src/com/google/javascript/jscomp/GoogleCodingConvention.java,108,ublic boolean isOptionalParameter(String parameterName) {
False,src/com/google/javascript/jscomp/GoogleCodingConvention.java,src/com/google/javascript/jscomp/GoogleCodingConvention.java,109,eturn parameterName.startsWith(OPTIONAL_ARG_PREFIX);
True,src/com/google/javascript/jscomp/GoogleCodingConvention.java,src/com/google/javascript/jscomp/GoogleCodingConvention.java,108,public boolean isOptionalParameter(Node parameter) {
True,src/com/google/javascript/jscomp/GoogleCodingConvention.java,src/com/google/javascript/jscomp/GoogleCodingConvention.java,109,return parameter.getString().startsWith(OPTIONAL_ARG_PREFIX);
False,src/com/google/javascript/jscomp/GoogleCodingConvention.java,src/com/google/javascript/jscomp/GoogleCodingConvention.java,113,"ublic boolean isVarArgsParameter(Node parameter, String name) {"
False,src/com/google/javascript/jscomp/GoogleCodingConvention.java,src/com/google/javascript/jscomp/GoogleCodingConvention.java,114,eturn VAR_ARGS_NAME.equals(name);
True,src/com/google/javascript/jscomp/GoogleCodingConvention.java,src/com/google/javascript/jscomp/GoogleCodingConvention.java,113,public boolean isVarArgsParameter(Node parameter) {
True,src/com/google/javascript/jscomp/GoogleCodingConvention.java,src/com/google/javascript/jscomp/GoogleCodingConvention.java,114,return VAR_ARGS_NAME.equals(parameter.getString());
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,261,if (n.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,262,moveNamedFunctions(n.getLastChild());
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,340,* Move all the functions that are valid at the execution of the first
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,341,* statement of the function to the beginning of the function definition.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,343,private void moveNamedFunctions(Node functionBody) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,344,Preconditions.checkState(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,345,functionBody.getParent().getType() == Token.FUNCTION);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,346,Node previous = null;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,347,Node current = functionBody.getFirstChild();
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,348,"// Skip any declarations at the beginning of the function body, they"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,349,// are already in the right place.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,350,while (current != null && NodeUtil.isFunctionDeclaration(current)) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,351,previous = current;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,352,current = current.getNext();
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,355,// Find any remaining declarations and move them.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,356,Node insertAfter = previous;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,357,while (current != null) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,358,// Save off the next node as the current node maybe removed.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,359,Node next = current.getNext();
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,360,if (NodeUtil.isFunctionDeclaration(current)) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,361,// Remove the declaration from the body.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,362,Preconditions.checkNotNull(previous);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,363,functionBody.removeChildAfter(previous);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,365,// Readd the function at the top of the function body (after any
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,366,// previous declarations).
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,367,"insertAfter = addToFront(functionBody, current, insertAfter);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,368,compiler.reportCodeChange();
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,369,} else {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,370,// Update the previous only if the current node hasn't been moved.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,371,previous = current;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,373,current = next;
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,378,"* @param after The child node to insert the newChild after, or null if"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,379,*     newChild should be added to the front of parent's child list.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,380,* @return The inserted child node.
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,382,"private Node addToFront(Node parent, Node newChild, Node after) {"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,383,if (after == null) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,384,parent.addChildToFront(newChild);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,385,} else {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,386,"parent.addChildAfter(newChild, after);"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,388,return newChild;
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,317,// Make sure it has the proper prefixes.
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,318,"maybeProvidePrefixes(parent, parent.getParent(), name);"
False,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,35,"ssertFalse(conv.isVarArgsParameter(args.getFirstChild(), ""a""));"
False,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,36,"ssertTrue(conv.isVarArgsParameter(args.getLastChild(), ""b""));"
False,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,37,"ssertTrue(conv.isOptionalParameter(""a""));"
False,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,38,"ssertTrue(conv.isOptionalParameter(""opt_a""));"
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,35,"Node optArgs = new Node(Token.LP,"
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,36,"Node.newString(Token.NAME, ""opt_a""),"
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,37,"Node.newString(Token.NAME, ""opt_b""));"
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,39,assertFalse(conv.isVarArgsParameter(args.getFirstChild()));
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,40,assertTrue(conv.isVarArgsParameter(args.getLastChild()));
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,41,assertFalse(conv.isVarArgsParameter(optArgs.getFirstChild()));
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,42,assertTrue(conv.isVarArgsParameter(optArgs.getLastChild()));
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,44,assertTrue(conv.isOptionalParameter(args.getFirstChild()));
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,45,assertFalse(conv.isOptionalParameter(args.getLastChild()));
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,46,assertTrue(conv.isOptionalParameter(optArgs.getFirstChild()));
True,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,47,assertFalse(conv.isOptionalParameter(optArgs.getLastChild()));
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,315,ompiler compiler = new Compiler();
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,315,Compiler compiler = createCompiler();
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,381,ompiler compiler = new Compiler();
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,381,Compiler compiler = createCompiler();
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,427,ompiler compiler = new Compiler();
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,427,Compiler compiler = createCompiler();
False,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,764,ompiler compiler = new Compiler();
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,764,Compiler compiler = createCompiler();
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,837,private Compiler createCompiler() {
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,838,Compiler compiler = new Compiler();
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,839,compiler.setCodingConvention(getCodingConvention());
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,840,return compiler;
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,843,protected CodingConvention getCodingConvention() {
True,test/com/google/javascript/jscomp/CompilerTestCase.java,test/com/google/javascript/jscomp/CompilerTestCase.java,844,return new GoogleCodingConvention();
False,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,36,"ssertFalse(conv.isVarArgsParameter(args.getFirstChild(), ""a""));"
False,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,37,"ssertFalse(conv.isVarArgsParameter(args.getLastChild(), ""b""));"
False,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,38,"ssertFalse(conv.isOptionalParameter(""a""));"
False,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,39,"ssertTrue(conv.isOptionalParameter(""opt_a""));"
True,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,35,"Node optArgs = new Node(Token.LP,"
True,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,36,"Node.newString(Token.NAME, ""opt_a""),"
True,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,37,"Node.newString(Token.NAME, ""opt_b""));"
True,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,39,assertFalse(conv.isVarArgsParameter(args.getFirstChild()));
True,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,40,assertFalse(conv.isVarArgsParameter(args.getLastChild()));
True,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,41,assertFalse(conv.isVarArgsParameter(optArgs.getFirstChild()));
True,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,42,assertFalse(conv.isVarArgsParameter(optArgs.getLastChild()));
True,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,44,assertFalse(conv.isOptionalParameter(args.getFirstChild()));
True,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,45,assertFalse(conv.isOptionalParameter(args.getLastChild()));
True,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,46,assertTrue(conv.isOptionalParameter(optArgs.getFirstChild()));
True,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,test/com/google/javascript/jscomp/GoogleCodingConventionTest.java,47,assertTrue(conv.isOptionalParameter(optArgs.getLastChild()));
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,109,public void testMoveFunctions1() throws Exception {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,110,"test(""function f() { if (x) return; foo(); function foo() {} }"","
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,111,"""function f() {function foo() {} if (x) return; foo(); }"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,112,"test(""function f() { "" +"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,113,"""function foo() {} "" +"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,114,"""if (x) return;"" +"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,115,"""foo(); "" +"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,116,"""function bar() {} "" +"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,118,"""function f() {"" +"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,119,"""function foo() {}"" +"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,120,"""function bar() {}"" +"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,121,"""if (x) return;"" +"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,122,"""foo();"" +"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,126,public void testMoveFunctions2() throws Exception {
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,127,"testSame(""function f() { function foo() {} }"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,128,"testSame(""function f() { f(); a:function bar() {} }"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,129,"testSame(""function f() { f(); {function bar() {}}}"");"
True,test/com/google/javascript/jscomp/NormalizeTest.java,test/com/google/javascript/jscomp/NormalizeTest.java,130,"testSame(""function f() { f(); if (true) {function bar() {}}}"");"
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,41,private boolean addAdditionalNamespace;
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,46,addAdditionalNamespace = false;
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,65,if (addAdditionalNamespace) {
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,66,newScriptNode.getFirstChild()
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,67,".putBooleanProp(Node.IS_NAMESPACE, true);"
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,82,if (addAdditionalNamespace) {
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,83,newScriptNode.getFirstChild()
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,84,".putBooleanProp(Node.IS_NAMESPACE, true);"
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,450,// Tests a case where code is reordered after processing provides and then
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,451,// provides are processed again.
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,452,public void testReorderedProvides() {
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,453,"additionalCode = ""a.B = {};"";  // as if a.B was after a.A originally"
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,454,addAdditionalNamespace = true;
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,455,"test(""goog.provide('a.A'); a.A = {};"","
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,456,"""var a={};a.B={};a.A={};"");"
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,459,// Another version of above.
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,460,public void testReorderedProvides2() {
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,461,"additionalEndCode = ""a.B = {};"";"
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,462,addAdditionalNamespace = true;
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,463,"test(""goog.provide('a.A'); a.A = {};"","
True,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,464,"""var a={};a.A={};a.B={};"");"
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,32,private CodingConvention convention = null;
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,45,@Override
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,46,protected CodingConvention getCodingConvention() {
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,47,return convention;
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,57,@Override
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,58,public void setUp() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,59,super.setUp();
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,60,convention = new GoogleCodingConvention();
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,142,public void testFunctionWithDefaultCodingConvention() {
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,143,convention = new DefaultCodingConvention();
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,144,"testSame(""var foo = function(x) {}; foo(1, 2);"");"
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,145,"testSame(""var foo = function(opt_x) {}; foo(1, 2);"");"
True,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java,146,"testSame(""var foo = function(var_args) {}; foo(1, 2);"");"

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,158,/ assumes the object literal is well formed
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,159,/ (has an even number of children)
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,160,or (Node key = n.getFirstChild();
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,161,ey != null; key = key.getNext()) {
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,162,f (key.getType() == Token.STRING) {
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,158,for (Node key = n.getFirstChild(); key != null; key = key.getNext()) {
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,159,if (key.getType() != Token.NUMBER) {
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,165,f (value.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,162,if (key.getType() == Token.STRING
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,163,&& value.getType() == Token.FUNCTION) {
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,211,/ assumes the object literal is well formed
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,212,/ (has an even number of children)
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,213,or (Node key = n.getFirstChild();
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,214,ey != null; key = key.getNext()) {
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,215,f (key.getType() == Token.STRING) {
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,216,ode value = key.getFirstChild();
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,217,"ddPossibleSignature(key.getString(), value, t);"
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,209,for (Node key = n.getFirstChild(); key != null; key = key.getNext()) {
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,210,switch(key.getType()) {
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,211,case Token.STRING:
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,212,"addPossibleSignature(key.getString(), key.getFirstChild(), t);"
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,213,break;
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,214,case Token.SET:
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,215,case Token.GET:
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,216,nonMethodProperties.add(key.getString());
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,217,break;
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,218,case Token.NUMBER:
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,219,// Ignore numberic keys.
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,220,break;
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,221,default:
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,222,throw new IllegalStateException(
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,223,"""unexpect OBJECTLIT key: "" + key);"
False,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,44,ublic void testSimpleInline() {
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,44,public void testSimpleInline1() {
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,51,public void testSimpleInline2() {
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,52,"testWithPrefix(""function Foo(){}"" +"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,53,"""Foo.prototype={bar:function(){return this.baz}};"","
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,54,"""var x=(new Foo).bar();var y=(new Foo).bar();"","
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,55,"""var x=(new Foo).baz;var y=(new Foo).baz"");"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,58,public void testSimpleGetterInline1() {
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,59,// TODO(johnlenz): Support this case.
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,60,"testSame(""function Foo(){}"" +"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,61,"""Foo.prototype={get bar(){return this.baz}};"" +"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,62,"""var x=(new Foo).bar;var y=(new Foo).bar"");"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,63,// Verify we are not confusing calling the result of an ES5 getter
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,64,// with call the getter.
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,65,"testSame(""function Foo(){}"" +"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,66,"""Foo.prototype={get bar(){return this.baz}};"" +"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,67,"""var x=(new Foo).bar();var y=(new Foo).bar()"");"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,70,public void testSimpleSetterInline1() {
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,71,// Verify 'get' and 'set' are not confused.
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,72,"testSame(""function Foo(){}"" +"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,73,"""Foo.prototype={set bar(a){return this.baz}};"" +"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,74,"""var x=(new Foo).bar;var y=(new Foo).bar"");"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,75,"testSame(""function Foo(){}"" +"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,76,"""Foo.prototype={set bar(a){return this.baz}};"" +"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,77,"""var x=(new Foo).bar();var y=(new Foo).bar()"");"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,258,public void testObjectLit2() {
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,259,"testSame(""var blah={bar:function(){}};"" +"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,260,"""(new Foo).bar()"");"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,291,public void testAnonymousGet() {
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,292,// Anonymous object definition without side-effect should be removed.
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,293,"testSame(""({get a(){return function(){}},b:alert}).a(\""a\"")"");"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,294,"testSame(""({get a(){},b:alert}).a(\""a\"")"");"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,295,"testSame(""({get a(){},b:alert}).a"");"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,298,public void testAnonymousSet() {
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,299,// Anonymous object definition without side-effect should be removed.
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,300,"testSame(""({set a(b){return function(){}},b:alert}).a(\""a\"")"");"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,301,"testSame(""({set a(b){},b:alert}).a(\""a\"")"");"
True,test/com/google/javascript/jscomp/InlineGettersTest.java,test/com/google/javascript/jscomp/InlineGettersTest.java,302,"testSame(""({set a(b){},b:alert}).a"");"

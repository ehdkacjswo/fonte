is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,10,import java.util.concurrent.atomic.AtomicBoolean;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,11,import java.util.concurrent.atomic.AtomicInteger;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,12,import java.util.concurrent.atomic.AtomicLong;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,15,import com.fasterxml.jackson.core.util.VersionUtil;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1422,/* Helper methods for sub-classes
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1427,* Helper method used for constructing and throwing
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1428,* {@link JsonGenerationException} with given base message.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1429,*<p>
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1430,* Note that sub-classes may override this method to add more detail
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1431,* or use a {@link JsonGenerationException} sub-class.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1433,protected void _reportError(String msg)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1434,throws JsonGenerationException
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1436,throw new JsonGenerationException(msg);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1439,protected final void _throwInternal() {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1440,VersionUtil.throwInternal();
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1443,protected void _reportUnsupportedOperation() {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1444,"throw new UnsupportedOperationException(""Operation not supported by generator of type ""+getClass().getName());"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1448,* Helper method to try to call appropriate write method for given
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1449,"* untyped Object. At this point, no structural conversions should be done,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1450,* only simple basic types are to be coerced as necessary.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1452,* @param value Non-null value to write
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1454,protected void _writeSimpleObject(Object value)
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1455,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1457,"/* 31-Dec-2009, tatu: Actually, we could just handle some basic"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1458,"*    types even without codec. This can improve interoperability,"
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1459,*    and specifically help with TokenBuffer.
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1461,if (value == null) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1462,writeNull();
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1463,return;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1465,if (value instanceof String) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1466,writeString((String) value);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1467,return;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1469,if (value instanceof Number) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1470,Number n = (Number) value;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1471,if (n instanceof Integer) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1472,writeNumber(n.intValue());
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1473,return;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1474,} else if (n instanceof Long) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1475,writeNumber(n.longValue());
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1476,return;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1477,} else if (n instanceof Double) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1478,writeNumber(n.doubleValue());
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1479,return;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1480,} else if (n instanceof Float) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1481,writeNumber(n.floatValue());
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1482,return;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1483,} else if (n instanceof Short) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1484,writeNumber(n.shortValue());
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1485,return;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1486,} else if (n instanceof Byte) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1487,writeNumber(n.byteValue());
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1488,return;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1489,} else if (n instanceof BigInteger) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1490,writeNumber((BigInteger) n);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1491,return;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1492,} else if (n instanceof BigDecimal) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1493,writeNumber((BigDecimal) n);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1494,return;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1496,// then Atomic types
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1498,} else if (n instanceof AtomicInteger) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1499,writeNumber(((AtomicInteger) n).get());
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1500,return;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1501,} else if (n instanceof AtomicLong) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1502,writeNumber(((AtomicLong) n).get());
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1503,return;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1505,} else if (value instanceof byte[]) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1506,writeBinary((byte[]) value);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1507,return;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1508,} else if (value instanceof Boolean) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1509,writeBoolean((Boolean) value);
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1510,return;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1511,} else if (value instanceof AtomicBoolean) {
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1512,writeBoolean(((AtomicBoolean) value).get());
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1513,return;
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1515,"throw new IllegalStateException(""No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed """
True,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,src/main/java/com/fasterxml/jackson/core/JsonGenerator.java,1516,"+value.getClass().getName()+"")"");"
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,4,mport java.math.BigDecimal;
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,5,mport java.math.BigInteger;
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,6,mport java.util.concurrent.atomic.AtomicBoolean;
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,7,mport java.util.concurrent.atomic.AtomicInteger;
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,8,mport java.util.concurrent.atomic.AtomicLong;
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,457, Helper method used for constructing and throwing
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,458, {@link JsonGenerationException} with given base message.
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,459,<p>
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,460, Note that sub-classes may override this method to add more detail
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,461, or use a {@link JsonGenerationException} sub-class.
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,463,rotected void _reportError(String msg)
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,464,hrows JsonGenerationException
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,466,hrow new JsonGenerationException(msg);
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,470, Helper method to try to call appropriate write method for given
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,471," untyped Object. At this point, no structural conversions should be done,"
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,472, only simple basic types are to be coerced as necessary.
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,474, @param value Non-null value to write
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,451,// @Deprecated in 2.3 -- now defined in super-class; remove in 2.4
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,452,@Override
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,479,"* 31-Dec-2009, tatu: Actually, we could just handle some basic"
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,480,"    types even without codec. This can improve interoperability,"
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,481,    and specifically help with TokenBuffer.
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,483,f (value == null) {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,484,riteNull();
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,485,eturn;
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,487,f (value instanceof String) {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,488,riteString((String) value);
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,489,eturn;
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,491,f (value instanceof Number) {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,492,umber n = (Number) value;
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,493,f (n instanceof Integer) {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,494,riteNumber(n.intValue());
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,495,eturn;
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,496, else if (n instanceof Long) {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,497,riteNumber(n.longValue());
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,498,eturn;
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,499, else if (n instanceof Double) {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,500,riteNumber(n.doubleValue());
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,501,eturn;
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,502, else if (n instanceof Float) {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,503,riteNumber(n.floatValue());
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,504,eturn;
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,505, else if (n instanceof Short) {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,506,riteNumber(n.shortValue());
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,507,eturn;
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,508, else if (n instanceof Byte) {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,509,riteNumber(n.byteValue());
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,510,eturn;
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,511, else if (n instanceof BigInteger) {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,512,riteNumber((BigInteger) n);
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,513,eturn;
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,514, else if (n instanceof BigDecimal) {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,515,riteNumber((BigDecimal) n);
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,516,eturn;
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,518,/ then Atomic types
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,520, else if (n instanceof AtomicInteger) {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,521,riteNumber(((AtomicInteger) n).get());
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,522,eturn;
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,523, else if (n instanceof AtomicLong) {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,524,riteNumber(((AtomicLong) n).get());
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,525,eturn;
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,527, else if (value instanceof byte[]) {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,528,riteBinary((byte[]) value);
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,529,eturn;
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,530, else if (value instanceof Boolean) {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,531,riteBoolean((Boolean) value);
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,532,eturn;
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,533, else if (value instanceof AtomicBoolean) {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,534,riteBoolean(((AtomicBoolean) value).get());
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,535,eturn;
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,537,"hrow new IllegalStateException(""No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed """
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,538,"value.getClass().getName()+"")"");"
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,541,rotected final void _throwInternal() {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,542,ersionUtil.throwInternal();
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,545,rotected void _reportUnsupportedOperation() {
False,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,546,"hrow new UnsupportedOperationException(""Operation not supported by generator of type ""+getClass().getName());"
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,456,// TODO:
True,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java,457,super._writeSimpleObject(value);
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,7,mport java.util.concurrent.atomic.AtomicBoolean;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,8,mport java.util.concurrent.atomic.AtomicInteger;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,9,mport java.util.concurrent.atomic.AtomicLong;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,25, Delegate copy methods.  Defaults to true.
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,22,* Whether copy methods
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,23,"* ({@link #copyCurrentEvent}, {@link #copyCurrentStructure}, {@link #writeTree} and {@link #writeObject})"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,24,"* are to be called (true), or handled by this object (false)."
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,39,* @param delegateCopyMethods Flag assigned to <code>delagateCopyMethod</code>
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,40,"*   and which defines whether copy methods are handled locally (false), or"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,41,*   delegated to configured
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,50,/* Extended API
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,54,public JsonGenerator getDelegate() {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,55,return delegate;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,60,"/* Public API, metadata"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,457,return;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,459,// NOTE: copied from
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,460,if (pojo == null) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,461,writeNull();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,438,f (pojo == null) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,439,/ important: call method that does check value write:
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,440,riteNull();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,441, else {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,442,"* 02-Mar-2009, tatu: we are NOT to call _verifyValueWrite here,"
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,443,   because that will be done when codec actually serializes
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,444,   contained POJO. If we did call it it would advance state
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,445,   causing exception later on
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,447,f (getCodec() != null) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,448,"etCodec().writeValue(this, pojo);"
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,449,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,451,writeSimpleObject(pojo);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,463,if (getCodec() != null) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,464,"getCodec().writeValue(this, pojo);"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,465,return;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,467,_writeSimpleObject(pojo);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,475,return;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,477,"// As with 'writeObject()', we are not check if write would work"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,478,if (rootNode == null) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,479,writeNull();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,461,"/ As with 'writeObject()', we are not check if write would work"
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,462,f (rootNode == null) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,463,riteNull();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,464, else {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,465,f (getCodec() == null) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,466,"hrow new IllegalStateException(""No ObjectCodec defined"");"
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,468,"etCodec().writeValue(this, rootNode);"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,481,if (getCodec() == null) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,482,"throw new IllegalStateException(""No ObjectCodec defined"");"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,484,"getCodec().writeValue(this, rootNode);"
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,491, else {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,492,sonToken t = jp.getCurrentToken();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,493,/ sanity check; what to do?
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,494,f (t == null) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,495,"reportError(""No current event to copy"");"
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,497,witch (t.id()) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,498,ase ID_NOT_AVAILABLE:
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,499,"reportError(""No current event to copy"");"
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,500,ase ID_START_OBJECT:
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,501,riteStartObject();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,502,reak;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,503,ase ID_END_OBJECT:
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,504,riteEndObject();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,505,reak;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,506,ase ID_START_ARRAY:
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,507,riteStartArray();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,508,reak;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,509,ase ID_END_ARRAY:
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,510,riteEndArray();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,511,reak;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,512,ase ID_FIELD_NAME:
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,513,riteFieldName(jp.getCurrentName());
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,514,reak;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,515,ase ID_STRING:
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,516,f (jp.hasTextCharacters()) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,517,"riteString(jp.getTextCharacters(), jp.getTextOffset(), jp.getTextLength());"
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,518, else {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,519,riteString(jp.getText());
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,521,reak;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,522,ase ID_NUMBER_INT:
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,524,umberType n = jp.getNumberType();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,525,f (n == NumberType.INT) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,526,riteNumber(jp.getIntValue());
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,527, else if (n == NumberType.BIG_INTEGER) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,528,riteNumber(jp.getBigIntegerValue());
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,529, else {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,530,riteNumber(jp.getLongValue());
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,532,reak;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,506,return;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,508,JsonToken t = jp.getCurrentToken();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,509,// sanity check; what to do?
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,510,if (t == null) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,511,"_reportError(""No current event to copy"");"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,513,switch (t.id()) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,514,case ID_NOT_AVAILABLE:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,515,"_reportError(""No current event to copy"");"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,516,case ID_START_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,517,writeStartObject();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,518,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,519,case ID_END_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,520,writeEndObject();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,521,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,522,case ID_START_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,523,writeStartArray();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,524,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,525,case ID_END_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,526,writeEndArray();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,527,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,528,case ID_FIELD_NAME:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,529,writeFieldName(jp.getCurrentName());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,530,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,531,case ID_STRING:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,532,if (jp.hasTextCharacters()) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,533,"writeString(jp.getTextCharacters(), jp.getTextOffset(), jp.getTextLength());"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,534,} else {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,535,writeString(jp.getText());
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,534,ase ID_NUMBER_FLOAT:
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,536,umberType n = jp.getNumberType();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,537,f (n == NumberType.BIG_DECIMAL) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,538,riteNumber(jp.getDecimalValue());
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,539, else if (n == NumberType.FLOAT) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,540,riteNumber(jp.getFloatValue());
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,541, else {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,542,riteNumber(jp.getDoubleValue());
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,544,reak;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,537,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,538,case ID_NUMBER_INT:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,540,NumberType n = jp.getNumberType();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,541,if (n == NumberType.INT) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,542,writeNumber(jp.getIntValue());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,543,} else if (n == NumberType.BIG_INTEGER) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,544,writeNumber(jp.getBigIntegerValue());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,545,} else {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,546,writeNumber(jp.getLongValue());
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,546,ase ID_TRUE:
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,547,riteBoolean(true);
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,548,reak;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,549,ase ID_FALSE:
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,550,riteBoolean(false);
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,551,reak;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,552,ase ID_NULL:
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,553,riteNull();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,554,reak;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,555,ase ID_EMBEDDED_OBJECT:
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,556,riteObject(jp.getEmbeddedObject());
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,557,reak;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,558,efault:
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,559,throwInternal();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,548,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,550,case ID_NUMBER_FLOAT:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,552,NumberType n = jp.getNumberType();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,553,if (n == NumberType.BIG_DECIMAL) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,554,writeNumber(jp.getDecimalValue());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,555,} else if (n == NumberType.FLOAT) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,556,writeNumber(jp.getFloatValue());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,557,} else {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,558,writeNumber(jp.getDoubleValue());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,560,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,562,case ID_TRUE:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,563,writeBoolean(true);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,564,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,565,case ID_FALSE:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,566,writeBoolean(false);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,567,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,568,case ID_NULL:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,569,writeNull();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,570,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,571,case ID_EMBEDDED_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,572,writeObject(jp.getEmbeddedObject());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,573,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,574,default:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,575,_throwInternal();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,565,"ublic void copyCurrentStructure(JsonParser jp) throws IOException, JsonProcessingException {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,580,"public void copyCurrentStructure(JsonParser jp) throws IOException, JsonProcessingException"
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,568, else {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,569,sonToken t = jp.getCurrentToken();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,570,f (t == null) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,571,"reportError(""No current event to copy"");"
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,573,/ Let's handle field-name separately first
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,574,nt id = t.id();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,575,f (id == ID_FIELD_NAME) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,576,riteFieldName(jp.getCurrentName());
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,577, = jp.nextToken();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,578,d = t.id();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,579,/ fall-through to copy the associated value
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,584,return;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,586,JsonToken t = jp.getCurrentToken();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,587,if (t == null) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,588,"_reportError(""No current event to copy"");"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,590,// Let's handle field-name separately first
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,591,int id = t.id();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,592,if (id == ID_FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,593,writeFieldName(jp.getCurrentName());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,594,t = jp.nextToken();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,595,id = t.id();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,596,// fall-through to copy the associated value
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,598,switch (id) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,599,case ID_START_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,600,writeStartObject();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,601,while (jp.nextToken() != JsonToken.END_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,602,copyCurrentStructure(jp);
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,581,witch (id) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,582,ase ID_START_OBJECT:
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,583,riteStartObject();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,584,hile (jp.nextToken() != JsonToken.END_OBJECT) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,585,opyCurrentStructure(jp);
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,587,riteEndObject();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,588,reak;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,589,ase ID_START_ARRAY:
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,590,riteStartArray();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,591,hile (jp.nextToken() != JsonToken.END_ARRAY) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,592,opyCurrentStructure(jp);
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,594,riteEndArray();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,595,reak;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,596,efault:
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,597,opyCurrentEvent(jp);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,604,writeEndObject();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,605,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,606,case ID_START_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,607,writeStartArray();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,608,while (jp.nextToken() != JsonToken.END_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,609,copyCurrentStructure(jp);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,611,writeEndArray();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,612,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,613,default:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,614,copyCurrentEvent(jp);
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,641, Helper method used for constructing and throwing
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,642, {@link JsonGenerationException} with given base message.
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,643,<p>
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,644, Note that sub-classes may override this method to add more detail
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,645, or use a {@link JsonGenerationException} sub-class.
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,647,rotected void _reportError(String msg)
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,648,hrows JsonGenerationException
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,650,hrow new JsonGenerationException(msg);
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,654, Helper method to try to call appropriate write method for given
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,655," untyped Object. At this point, no structural conversions should be done,"
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,656, only simple basic types are to be coerced as necessary.
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,658, @param value Non-null value to write
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,660,rotected void _writeSimpleObject(Object value)
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,661,"hrows IOException, JsonGenerationException"
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,663,"* 31-Dec-2009, tatu: Actually, we could just handle some basic"
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,664,"    types even without codec. This can improve interoperability,"
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,665,    and specifically help with TokenBuffer.
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,667,f (value == null) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,668,riteNull();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,669,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,671,f (value instanceof String) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,672,riteString((String) value);
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,673,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,675,f (value instanceof Number) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,676,umber n = (Number) value;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,677,f (n instanceof Integer) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,678,riteNumber(n.intValue());
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,679,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,680, else if (n instanceof Long) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,681,riteNumber(n.longValue());
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,682,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,683, else if (n instanceof Double) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,684,riteNumber(n.doubleValue());
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,685,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,686, else if (n instanceof Float) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,687,riteNumber(n.floatValue());
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,688,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,689, else if (n instanceof Short) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,690,riteNumber(n.shortValue());
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,691,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,692, else if (n instanceof Byte) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,693,riteNumber(n.byteValue());
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,694,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,695, else if (n instanceof BigInteger) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,696,riteNumber((BigInteger) n);
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,697,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,698, else if (n instanceof BigDecimal) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,699,riteNumber((BigDecimal) n);
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,700,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,702,/ then Atomic types
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,704, else if (n instanceof AtomicInteger) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,705,riteNumber(((AtomicInteger) n).get());
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,706,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,707, else if (n instanceof AtomicLong) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,708,riteNumber(((AtomicLong) n).get());
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,709,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,711, else if (value instanceof byte[]) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,712,riteBinary((byte[]) value);
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,713,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,714, else if (value instanceof Boolean) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,715,riteBoolean((Boolean) value);
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,716,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,717, else if (value instanceof AtomicBoolean) {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,718,riteBoolean(((AtomicBoolean) value).get());
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,719,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,721,"hrow new IllegalStateException(""No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed """
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,722,"value.getClass().getName()+"")"");"
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,725,rotected final void _throwInternal() {
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,726,ersionUtil.throwInternal();

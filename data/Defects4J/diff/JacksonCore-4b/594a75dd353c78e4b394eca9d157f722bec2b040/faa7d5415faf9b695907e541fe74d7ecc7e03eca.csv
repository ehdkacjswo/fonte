is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,1,ackage com.fasterxml.jackson.core.util;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,3,mport java.io.IOException;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,4,mport java.math.BigDecimal;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,5,mport java.math.BigInteger;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,6,mport java.util.concurrent.atomic.AtomicBoolean;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,7,mport java.util.concurrent.atomic.AtomicInteger;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,8,mport java.util.concurrent.atomic.AtomicLong;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,10,mport com.fasterxml.jackson.core.JsonGenerationException;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,11,mport com.fasterxml.jackson.core.JsonGenerator;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,12,mport com.fasterxml.jackson.core.JsonParser;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,13,mport com.fasterxml.jackson.core.JsonProcessingException;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,14,mport com.fasterxml.jackson.core.JsonToken;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,15,mport com.fasterxml.jackson.core.ObjectCodec;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,16,mport com.fasterxml.jackson.core.TreeNode;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,19, Delegating JsonGenerator with copies of the base copyCurrentStructure and
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,20, other methods to enable the creation filtering generators analogous to
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,21, extending java.io.FilterOutputStream.
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,23,ublic class FilterJsonGenerator extends JsonGeneratorDelegate {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,24,ublic FilterJsonGenerator(JsonGenerator d) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,25,uper(d);
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,28,Override
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,29,"ublic void writeObject(Object value) throws IOException, JsonProcessingException {"
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,30,f (value == null) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,31,/ important: call method that does check value write:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,32,riteNull();
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,33, else {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,34,"* 02-Mar-2009, tatu: we are NOT to call _verifyValueWrite here,"
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,35,   because that will be done when codec actually serializes
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,36,   contained POJO. If we did call it it would advance state
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,37,   causing exception later on
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,39,bjectCodec objectCodec = getCodec();
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,40,f (objectCodec != null) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,41,"bjectCodec.writeValue(this, value);"
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,42,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,44,riteSimpleObject(value);
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,48,"rivate void writeSimpleObject(Object value) throws IOException, JsonGenerationException {"
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,49,"* 31-Dec-2009, tatu: Actually, we could just handle some basic"
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,50,"    types even without codec. This can improve interoperability,"
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,51,    and specifically help with TokenBuffer.
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,53,f (value == null) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,54,riteNull();
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,55,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,57,f (value instanceof String) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,58,riteString((String) value);
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,59,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,61,f (value instanceof Number) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,62,umber n = (Number) value;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,63,f (n instanceof Integer) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,64,riteNumber(n.intValue());
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,65,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,66, else if (n instanceof Long) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,67,riteNumber(n.longValue());
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,68,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,69, else if (n instanceof Double) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,70,riteNumber(n.doubleValue());
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,71,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,72, else if (n instanceof Float) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,73,riteNumber(n.floatValue());
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,74,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,75, else if (n instanceof Short) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,76,riteNumber(n.shortValue());
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,77,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,78, else if (n instanceof Byte) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,79,riteNumber(n.byteValue());
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,80,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,81, else if (n instanceof BigInteger) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,82,riteNumber((BigInteger) n);
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,83,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,84, else if (n instanceof BigDecimal) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,85,riteNumber((BigDecimal) n);
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,86,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,88,/ then Atomic types
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,90, else if (n instanceof AtomicInteger) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,91,riteNumber(((AtomicInteger) n).get());
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,92,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,93, else if (n instanceof AtomicLong) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,94,riteNumber(((AtomicLong) n).get());
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,95,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,97, else if (value instanceof byte[]) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,98,riteBinary((byte[]) value);
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,99,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,100, else if (value instanceof Boolean) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,101,riteBoolean((Boolean) value);
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,102,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,103, else if (value instanceof AtomicBoolean) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,104,riteBoolean(((AtomicBoolean) value).get());
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,105,eturn;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,107,"hrow new IllegalStateException(""No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed """
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,108,"value.getClass().getName()+"")"");"
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,111,Override
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,112,"ublic void writeTree(TreeNode rootNode) throws IOException, JsonProcessingException {"
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,113,"/ As with 'writeObject()', we are not check if write would work"
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,114,f (rootNode == null) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,115,riteNull();
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,116, else {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,117,bjectCodec objectCodec = getCodec();
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,118,f (objectCodec == null) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,119,"hrow new IllegalStateException(""No ObjectCodec defined"");"
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,121,"bjectCodec.writeValue(this, rootNode);"
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,125,Override
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,126,"ublic void copyCurrentEvent(JsonParser jp) throws IOException, JsonProcessingException {"
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,127,sonToken t = jp.getCurrentToken();
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,128,/ sanity check; what to do?
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,129,f (t == null) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,130,"hrow new JsonGenerationException(""No current event to copy"");"
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,132,witch(t) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,133,ase START_OBJECT:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,134,riteStartObject();
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,135,reak;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,136,ase END_OBJECT:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,137,riteEndObject();
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,138,reak;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,139,ase START_ARRAY:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,140,riteStartArray();
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,141,reak;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,142,ase END_ARRAY:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,143,riteEndArray();
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,144,reak;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,145,ase FIELD_NAME:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,146,riteFieldName(jp.getCurrentName());
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,147,reak;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,148,ase VALUE_STRING:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,149,f (jp.hasTextCharacters()) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,150,"riteString(jp.getTextCharacters(), jp.getTextOffset(), jp.getTextLength());"
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,151, else {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,152,riteString(jp.getText());
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,154,reak;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,155,ase VALUE_NUMBER_INT:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,156,witch (jp.getNumberType()) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,157,ase INT:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,158,riteNumber(jp.getIntValue());
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,159,reak;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,160,ase BIG_INTEGER:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,161,riteNumber(jp.getBigIntegerValue());
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,162,reak;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,163,efault:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,164,riteNumber(jp.getLongValue());
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,166,reak;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,167,ase VALUE_NUMBER_FLOAT:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,168,witch (jp.getNumberType()) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,169,ase BIG_DECIMAL:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,170,riteNumber(jp.getDecimalValue());
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,171,reak;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,172,ase FLOAT:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,173,riteNumber(jp.getFloatValue());
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,174,reak;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,175,efault:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,176,riteNumber(jp.getDoubleValue());
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,178,reak;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,179,ase VALUE_TRUE:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,180,riteBoolean(true);
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,181,reak;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,182,ase VALUE_FALSE:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,183,riteBoolean(false);
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,184,reak;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,185,ase VALUE_NULL:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,186,riteNull();
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,187,reak;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,188,ase VALUE_EMBEDDED_OBJECT:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,189,riteObject(jp.getEmbeddedObject());
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,190,reak;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,191,efault:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,192,"hrow new RuntimeException(""Internal error: this code path should never get executed"");"
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,196,Override
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,197,"ublic void copyCurrentStructure(JsonParser jp) throws IOException, JsonProcessingException {"
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,198,sonToken t = jp.getCurrentToken();
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,200,/ Let's handle field-name separately first
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,201,f (t == JsonToken.FIELD_NAME) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,202,riteFieldName(jp.getCurrentName());
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,203, = jp.nextToken();
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,204,/ fall-through to copy the associated value
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,207,witch (t) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,208,ase START_ARRAY:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,209,riteStartArray();
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,210,hile (jp.nextToken() != JsonToken.END_ARRAY) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,211,opyCurrentStructure(jp);
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,213,riteEndArray();
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,214,reak;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,215,ase START_OBJECT:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,216,riteStartObject();
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,217,hile (jp.nextToken() != JsonToken.END_OBJECT) {
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,218,opyCurrentStructure(jp);
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,220,riteEndObject();
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,221,reak;
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,222,efault: // others are simple:
False,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,src/main/java/com/fasterxml/jackson/core/util/FilterJsonGenerator.java,223,opyCurrentEvent(jp);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,7,import java.util.concurrent.atomic.AtomicBoolean;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,8,import java.util.concurrent.atomic.AtomicInteger;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,9,import java.util.concurrent.atomic.AtomicLong;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,12,import com.fasterxml.jackson.core.JsonParser.NumberType;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,15,import static com.fasterxml.jackson.core.JsonTokenId.*;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,25,* Delegate copy methods.  Defaults to true.
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,27,protected boolean delegateCopyMethods;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,36,"this(d, true);"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,39,"public JsonGeneratorDelegate(JsonGenerator d, boolean delegateCopyMethods) {"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,41,this.delegateCopyMethods = delegateCopyMethods;
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,419,elegate.writeObject(pojo);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,435,if (delegateCopyMethods) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,436,delegate.writeObject(pojo);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,437,} else {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,438,if (pojo == null) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,439,// important: call method that does check value write:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,440,writeNull();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,441,} else {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,442,"/* 02-Mar-2009, tatu: we are NOT to call _verifyValueWrite here,"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,443,*   because that will be done when codec actually serializes
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,444,*   contained POJO. If we did call it it would advance state
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,445,*   causing exception later on
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,447,if (getCodec() != null) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,448,"getCodec().writeValue(this, pojo);"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,449,return;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,451,_writeSimpleObject(pojo);
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,424,elegate.writeTree(rootNode);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,458,if (delegateCopyMethods) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,459,delegate.writeTree(rootNode);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,460,} else {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,461,"// As with 'writeObject()', we are not check if write would work"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,462,if (rootNode == null) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,463,writeNull();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,464,} else {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,465,if (getCodec() == null) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,466,"throw new IllegalStateException(""No ObjectCodec defined"");"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,468,"getCodec().writeValue(this, rootNode);"
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,443,elegate.copyCurrentEvent(jp);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,489,if (delegateCopyMethods) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,490,delegate.copyCurrentEvent(jp);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,491,} else {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,492,JsonToken t = jp.getCurrentToken();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,493,// sanity check; what to do?
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,494,if (t == null) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,495,"_reportError(""No current event to copy"");"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,497,switch (t.id()) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,498,case ID_NOT_AVAILABLE:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,499,"_reportError(""No current event to copy"");"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,500,case ID_START_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,501,writeStartObject();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,502,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,503,case ID_END_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,504,writeEndObject();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,505,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,506,case ID_START_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,507,writeStartArray();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,508,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,509,case ID_END_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,510,writeEndArray();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,511,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,512,case ID_FIELD_NAME:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,513,writeFieldName(jp.getCurrentName());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,514,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,515,case ID_STRING:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,516,if (jp.hasTextCharacters()) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,517,"writeString(jp.getTextCharacters(), jp.getTextOffset(), jp.getTextLength());"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,518,} else {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,519,writeString(jp.getText());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,521,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,522,case ID_NUMBER_INT:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,524,NumberType n = jp.getNumberType();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,525,if (n == NumberType.INT) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,526,writeNumber(jp.getIntValue());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,527,} else if (n == NumberType.BIG_INTEGER) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,528,writeNumber(jp.getBigIntegerValue());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,529,} else {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,530,writeNumber(jp.getLongValue());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,532,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,534,case ID_NUMBER_FLOAT:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,536,NumberType n = jp.getNumberType();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,537,if (n == NumberType.BIG_DECIMAL) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,538,writeNumber(jp.getDecimalValue());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,539,} else if (n == NumberType.FLOAT) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,540,writeNumber(jp.getFloatValue());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,541,} else {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,542,writeNumber(jp.getDoubleValue());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,544,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,546,case ID_TRUE:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,547,writeBoolean(true);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,548,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,549,case ID_FALSE:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,550,writeBoolean(false);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,551,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,552,case ID_NULL:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,553,writeNull();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,554,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,555,case ID_EMBEDDED_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,556,writeObject(jp.getEmbeddedObject());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,557,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,558,default:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,559,_throwInternal();
False,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,448,elegate.copyCurrentStructure(jp);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,566,if (delegateCopyMethods) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,567,delegate.copyCurrentStructure(jp);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,568,} else {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,569,JsonToken t = jp.getCurrentToken();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,570,if (t == null) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,571,"_reportError(""No current event to copy"");"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,573,// Let's handle field-name separately first
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,574,int id = t.id();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,575,if (id == ID_FIELD_NAME) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,576,writeFieldName(jp.getCurrentName());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,577,t = jp.nextToken();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,578,id = t.id();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,579,// fall-through to copy the associated value
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,581,switch (id) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,582,case ID_START_OBJECT:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,583,writeStartObject();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,584,while (jp.nextToken() != JsonToken.END_OBJECT) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,585,copyCurrentStructure(jp);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,587,writeEndObject();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,588,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,589,case ID_START_ARRAY:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,590,writeStartArray();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,591,while (jp.nextToken() != JsonToken.END_ARRAY) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,592,copyCurrentStructure(jp);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,594,writeEndArray();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,595,break;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,596,default:
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,597,copyCurrentEvent(jp);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,641,* Helper method used for constructing and throwing
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,642,* {@link JsonGenerationException} with given base message.
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,643,*<p>
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,644,* Note that sub-classes may override this method to add more detail
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,645,* or use a {@link JsonGenerationException} sub-class.
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,647,protected void _reportError(String msg)
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,648,throws JsonGenerationException
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,650,throw new JsonGenerationException(msg);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,654,* Helper method to try to call appropriate write method for given
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,655,"* untyped Object. At this point, no structural conversions should be done,"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,656,* only simple basic types are to be coerced as necessary.
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,658,* @param value Non-null value to write
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,660,protected void _writeSimpleObject(Object value)
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,661,"throws IOException, JsonGenerationException"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,663,"/* 31-Dec-2009, tatu: Actually, we could just handle some basic"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,664,"*    types even without codec. This can improve interoperability,"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,665,*    and specifically help with TokenBuffer.
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,667,if (value == null) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,668,writeNull();
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,669,return;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,671,if (value instanceof String) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,672,writeString((String) value);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,673,return;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,675,if (value instanceof Number) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,676,Number n = (Number) value;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,677,if (n instanceof Integer) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,678,writeNumber(n.intValue());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,679,return;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,680,} else if (n instanceof Long) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,681,writeNumber(n.longValue());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,682,return;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,683,} else if (n instanceof Double) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,684,writeNumber(n.doubleValue());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,685,return;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,686,} else if (n instanceof Float) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,687,writeNumber(n.floatValue());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,688,return;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,689,} else if (n instanceof Short) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,690,writeNumber(n.shortValue());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,691,return;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,692,} else if (n instanceof Byte) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,693,writeNumber(n.byteValue());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,694,return;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,695,} else if (n instanceof BigInteger) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,696,writeNumber((BigInteger) n);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,697,return;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,698,} else if (n instanceof BigDecimal) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,699,writeNumber((BigDecimal) n);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,700,return;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,702,// then Atomic types
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,704,} else if (n instanceof AtomicInteger) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,705,writeNumber(((AtomicInteger) n).get());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,706,return;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,707,} else if (n instanceof AtomicLong) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,708,writeNumber(((AtomicLong) n).get());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,709,return;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,711,} else if (value instanceof byte[]) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,712,writeBinary((byte[]) value);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,713,return;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,714,} else if (value instanceof Boolean) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,715,writeBoolean((Boolean) value);
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,716,return;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,717,} else if (value instanceof AtomicBoolean) {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,718,writeBoolean(((AtomicBoolean) value).get());
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,719,return;
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,721,"throw new IllegalStateException(""No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed """
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,722,"+value.getClass().getName()+"")"");"
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,725,protected final void _throwInternal() {
True,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java,726,VersionUtil.throwInternal();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,44,public void testNotDelegateCopyMethods() throws IOException
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,46,"JsonParser jp = new JsonFactory().createParser(""[{\""a\"":[1,2,{\""b\"":3}],\""c\"":\""d\""},{\""e\"":false},null]"");"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,47,StringWriter sw = new StringWriter();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,48,"JsonGenerator jg = new JsonGeneratorDelegate(new JsonFactory().createGenerator(sw), false) {"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,49,@Override
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,50,"public void writeFieldName(String name) throws IOException, JsonGenerationException {"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,51,"super.writeFieldName(name+""-test"");"
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,52,super.writeBoolean(true);
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,53,super.writeFieldName(name);
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,56,jp.nextToken();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,57,jg.copyCurrentStructure(jp);
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,58,jg.flush();
True,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java,59,"assertEquals(""[{\""a-test\"":true,\""a\"":[1,2,{\""b-test\"":true,\""b\"":3}],\""c-test\"":true,\""c\"":\""d\""},{\""e-test\"":true,\""e\"":false},null]"", sw.toString());"
False,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,1,ackage com.fasterxml.jackson.core.util;
False,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,3,mport java.io.IOException;
False,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,4,mport java.io.StringWriter;
False,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,6,mport com.fasterxml.jackson.core.JsonFactory;
False,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,7,mport com.fasterxml.jackson.core.JsonGenerationException;
False,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,8,mport com.fasterxml.jackson.core.JsonGenerator;
False,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,9,mport com.fasterxml.jackson.core.JsonParser;
False,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,10,mport com.fasterxml.jackson.test.BaseTest;
False,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,12,ublic class TestFilterJsonGenerator extends BaseTest {
False,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,13,ublic void testFilterJsonGenerator() throws IOException {
False,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,14,"sonParser jp = new JsonFactory().createParser(""[{\""a\"":[1,2,{\""b\"":3}],\""c\"":\""d\""},{\""e\"":false},null]"");"
False,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,15,tringWriter sw = new StringWriter();
False,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,16,sonGenerator jg = new FilterJsonGenerator(new JsonFactory().createGenerator(sw)) {
False,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,17,Override
False,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,18,"ublic void writeFieldName(String name) throws IOException, JsonGenerationException {"
False,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,19,"uper.writeFieldName(name+""-test"");"
False,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,20,uper.writeBoolean(true);
False,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,21,uper.writeFieldName(name);
False,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,24,p.nextToken();
False,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,25,g.copyCurrentStructure(jp);
False,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,26,g.flush();
False,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,src/test/java/com/fasterxml/jackson/core/util/TestFilterJsonGenerator.java,27,"ssertEquals(""[{\""a-test\"":true,\""a\"":[1,2,{\""b-test\"":true,\""b\"":3}],\""c-test\"":true,\""c\"":\""d\""},{\""e-test\"":true,\""e\"":false},null]"", sw.toString());"
